{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6587\u6863\u4e2d\u5fc3","text":""},{"location":"#_2","title":"\u6280\u672f\u6846\u67b6","text":"<ul> <li>python</li> <li>mkdocs</li> <li>github-action</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#_1","title":"\u4e2a\u4eba\u6587\u6863\u4e2d\u5fc3","text":""},{"location":"Docker/Swarm_install/","title":"Docker \u96c6\u7fa4\u7ba1\u7406\u5de5\u5177swarm\u7684\u642d\u5efa","text":""},{"location":"Docker/Swarm_install/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<pre><code>1\u3001\u4e09\u53f0\u865a\u62df\u673a(ubuntu)\uff1a192.168.110.126(\u4f5c\u4e3a\u7ba1\u7406\u8282\u70b9)\u3001192.168.110.127\u3001192.168.110.128\uff0c\n\n2\u3001\u4e09\u53f0\u865a\u62df\u673a\u5206\u522b\u5b89\u88c5docker\uff1a\n\nsudo apt-get update\n\nsudo apt-get install -y docker.io\n\nsudo ln -sf /usr/bin/docker.io /usr/local/bin/docker\n\n3\u3001\u8282\u70b9Docker\u914d\u7f6e\uff0c\u4e09\u4e2a\u8282\u70b9\u673a\u5747\u8981\u914d\u7f6e\uff1a\n\nvim /etc/default/docker\n\n\u5728\u6700\u540e\u6dfb\u52a0\uff1a\n\nDOCKER_OPTS=\"-H 0.0.0.0:2375 -H unix:///var/run/docker.sock\"\n\n4\u3001\u5404\u8282\u70b9\u5b89\u88c5swarm\uff1a\n\nsudo docker pull swarm\n\n5\u3001\u91cd\u542f\u670d\u52a1\uff1a\n\nsudo service docker restart\n\n6\u3001\u751f\u6210\u96c6\u7fa4token\uff1a\n\ndocker run --rm swarm create\n\n*token* \u8bb0\u4f4f\u8fd9\u4e32\u5b57\u7b26\uff01\n\n7\u3001\u6dfb\u52a0\u8282\u70b9\u5230\u96c6\u7fa4\uff0c\u5206\u522b\u5728\u8282\u70b9\u4e0a\u8fd0\u884c\uff1a\n\nsudo docker run -d swarm join --addr=\u672c\u673a\u8282\u70b9IP:2375 token://*token*\n\n\n\n8\u3001\u67e5\u770b\u96c6\u7fa4\u8282\u70b9\uff1a\n\n\n\ndocker run --rm swarm list token://*token*\n\n9\u3001\u5f00\u542f\u7ba1\u7406\u8282\u70b9\u5f00\u542f\u7ba1\u7406\uff1a\n\ndocker run -d -p 2378:2375 swarm manage token:/*token*   \u6ce8\uff1a2376\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4ed6\u7aef\u53e3\uff0c\u53ea\u8981\u4e0d\u548c2375\u4e00\u6837\uff0c\u4e14\u672a\u88ab\u5360\u7528\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\n\n10\u3001\u67e5\u770b\u4fe1\u606f\uff1a\n\nsudo docker -H \u4e3b\u8282\u70b9IP:2378 info\n\n\u663e\u793a\u4ee5\u4e0b\uff1a\n\nContainers: 2\n Running: 2\n Paused: 0\n Stopped: 0\nImages: 4\nServer Version: swarm/1.2.8\nRole: primary\nStrategy: spread\nFilters: health, port, containerslots, dependency, affinity, constraint, whitelist\nNodes: 2\n\n....... \n\n11\u3001\u8bbe\u7f6e\u4e3b\u8282\u70b9\uff1a\n\n sudo docker swarm init --advertise-addr 192.168.110.126\uff0c\u5c06126\u8bbe\u7f6e\u4e3a\u7ba1\u7406\u8282\u70b9\n\n\n\n\n\n\u3010\u6216\u8005\u3011\uff1a\n\n1\u3001\u5728\u4e3b\u8282\u70b9\u8fd0\u884c\u547d\u4ee4\uff1a\n\n\n\nsudo docker swarm init --advertise-addr 192.168.110.126(\u4e3b\u8282\u70b9iP)\n\n\u63d0\u793a\u4e00\u4e0b\u4fe1\u606f\uff1a\n\n\n\nSwarm initialized: current node (pdlc1dhkb30pq6pv0ke70dw1n) is now a manager.\n\n\n\nTo add a worker to this swarm, run the following command:\n\n\n\n    docker swarm join --token SWMTKN-1-4zvv180csbr6czbrt2u5vnivkq0cb2crswsbqvm2gyi4jixs78-bzwf564qc7z9p0l23o0fv9pto 192.168.110.126:2377\n\n\n\nTo add a manager to this swarm, run'docker swarm join-token manager' and follow the instructions.\n\n\u6309\u7167\u4e0a\u9762\u7684\u7b2c\u4e00\u6761\u547d\u4ee4\u5206\u522b\u5728\u8282\u70b9\u673a\u8fd0\u884c\u52a0\u5165swarm\u3002\n\n\u518d\u5728\u4e3b\u8282\u70b9\u8fd0\u884c\u7b2c\u4e8c\u6761\u547d\u4ee4\u4f5c\u4e3a\u7ba1\u7406\u8282\u70b9\u3002\n\n2\u3001\u5728\u4e3b\u8282\u70b9sudo docker node ls\u5373\u53ef\u770b\u5230\u8282\u70b9\u5df2\u6210\u529f\u52a0\u5165\u96c6\u7fa4\u3002\n\n\u5907\u6ce8\uff1a\n\n\u4f7f\u7528\uff1adocker node rm -f [node ID]\u53ef\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u8be5node\u60f3\u91cd\u65b0\u52a0\u5165\uff0c\u9700\u8981\u5728\u8be5\u8282\u70b9\u4e0a\u5148sudo docker swarm leave --force\u79bb\u5f00swarm\uff0c\u7136\u540e\u518d\u8fd0\u884c\u7b2c\u4e00\u6761\u4e2d\u7684\u547d\u4ee4\u52a0\u5165\u96c6\u7fa4\u3002\n\n\n\n\u4e8c\u3001swarm\u96c6\u7fa4\u521b\u5efa\u670d\u52a1\uff1a\n\n1\u3001\u5728\u4e3b\u8282\u70b9pull \u4e00\u4e2anginx\u955c\u50cf\uff1adocker pull nginx\n\n2\u3001\u521b\u5efa\u4e24\u4e2aservice\uff1asudo  docker service create --name nginx --replicas2-p 80:80/tcp nginx\n\n3\u3001\u67e5\u770b\u8fd0\u884c\u72b6\u51b5\uff1asudo docker service ps nginx,\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u670d\u52a1\u8fd0\u884c\u5728\u4e24\u4e2a\u8282\u70b9\u4e0a\u3002\n\n4\u3001\u6279\u91cf\u4ea7\u751f\u5bb9\u5668\uff1a\n\nsudo docker service scale nginx=5,\u7136\u540e\u8fd0\u884c\u7b2c\u4e09\u6761\u547d\u4ee4\uff0c\u53ef\u4ee5\u770b\u52305\u4e2a\u5bb9\u5668\u5728\u4e09\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u3002\u7531swarm\u8fdb\u884c\u5206\u914d\u3002\n\n5\u3001\u6307\u5b9a\u8282\u70b9\u521b\u5efa\u670d\u52a1\uff1a\n\ndocker service create nginx --constraint node.hostname=vm27 --detach=True #\u8c8c\u4f3c\u6ca1\u7528\uff0c\u7ba1\u7406\u8282\u70b9\u8fd0\u884c\u540e\uff0c\u8fd8\u662f\u4f1a\u5206\u914d\u5230\u6bcf\u4e2a\u8282\u70b9\u8fd0\u884c\u3002\n\n\u518dvm27\u8282\u70b9sudo docker ps -a\u5373\u53ef\u770b\u5230\u76f8\u5e94\u7684\u5bb9\u5668\u3002\n\n\u4e09\u3001python(\u7248\u672c3.5)\u901a\u8fc7API\u7ba1\u7406swarm\uff1a\n\n1\u3001pull an image\uff1a\n\nimport docker\n\nclient=docker.from_env()\n\nimage=client.images.pull(\"\u955c\u50cf\")\n\nprint(image.id)\n\n2\u3001commit a container:\n\nimport docker\n\nclient=docker.from_env()\n\ncontainer=client.containers.run(\"alpine\",[\"touch\",\"/hello\"],detach=True) #\u6307\u5b9a\u5bb9\u5668\u8fd0\u884c\u4e8e\u524d\u53f0\u8fd8\u662f\u540e\u53f0,\u4e3aTrue\uff0c\u7acb\u5373\u8fd4\u56de\u4e00\u4e2a\u955c\u50cf\u3002\n\ncontainer.wait()\n\nimage=container.commit(\"helloworld\")\n\nprint image.id\n</code></pre>"},{"location":"Docker/Ubuntu_Minio_install/","title":"\u642d\u5efaMinio","text":""},{"location":"Docker/Ubuntu_Minio_install/#20210110","title":"20210110","text":""},{"location":"Docker/Ubuntu_Minio_install/#1","title":"1, \u62c9\u955c\u50cf","text":"<p>\u200b   <code>docker pull minio/minio</code></p>"},{"location":"Docker/Ubuntu_Minio_install/#2","title":"2, \u8fd0\u884c\u5bb9\u5668","text":"<p><code>docker run -p 9000:9000 -e \"MINIO_ACCESS_KEY=xutao\" -e \"MINIO_SECRET_KEY=wsXT1225\" -v /root/xt/minioData:/data minio/minio server /data</code></p> <pre><code>&gt; \u6307\u5b9akey\u548cID\uff0c\u5c06minio\u7684\u9ed8\u8ba4data\u76ee\u5f55\u6302\u8f7d\u5230\u5efa\u7acb\u7684minioData\u76ee\u5f55\uff0c\u5982\u679c\u63d0\u793a\u6743\u9650\u95ee\u9898\uff0c\u9700\u8981\u4fee\u6539\u6743\u9650\n</code></pre>"},{"location":"Docker/Ubuntu_Minio_install/#3-nginx","title":"3, nginx \u914d\u7f6e","text":"<ul> <li> <p>\u672c\u5730\u6302\u8f7d\u7684\u6587\u4ef6\uff0c\u53ef\u901a\u8fc7<code>nginx</code>\u7684\u6587\u4ef6\u670d\u52a1\u800c\u8bbf\u95ee\uff0c\u4f46\u662f\u901a\u8fc7<code>axios</code>\u76f4\u63a5\u8bbf\u95ee\u4f1a\u6709\u8de8\u57df\u95ee\u9898\uff0c<code>nginx</code>\u4fee\u6539\u8de8\u57df\u914d\u7f6e\uff1a</p> </li> <li> <p>nginx\u7684\u6587\u4ef6\u670d\u52a1\u914d\u7f6e\uff1a</p> </li> </ul> <p>```   server {     listen 80 default_server;     listen [::]:80 default_server;     root /root/xt/;     location / {         add_header  Access-Control-Allow-Origin *;         add_header  Access-Control-Allow-Methods GET,POST;         add_header  Access-Control-Allow-Headers DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization;         autoindex on;         autoindex_exact_size on;         autoindex_localtime on;         try_files $uri $uri/ =404;         root /root/xt/;         }</p> <p>}   ```</p> <p>\u200b     &gt; \u4e3b\u8981\u662f<code>location</code>\u4e2d\u7684\u4e09\u4e2a<code>add_header</code>\u914d\u7f6e</p> <ul> <li>\u901a\u8fc7\u524d\u7aef\u5982<code>vue</code>\u5373\u53ef\u64cd\u4f5c<code>minio</code>\u4e2d\u7684\u6587\u4ef6\uff1a</li> </ul> <p><code>//\u521b\u5efaminio\u5bf9\u8c61   this.minio = new Minio.Client({               endPoint: Config.default.minio.EndPoint,               port: Config.default.minio.Port,               useSSL: false,               accessKey: Config.default.minio.AccessKey,               secretKey: Config.default.minio.AccessSecret           });</code></p> <p><code>/**        * \u4e0a\u4f20\u5185\u5bb9\u81f3minio        * @param content\uff1a\u5b57\u7b26\u6d41        */       upLoad(content){           let client = this.minio;           let buffer = content; //\u5b57\u7b26\u6d41           return new Promise((resolve, reject) =&gt; {               client.putObject(bucket, \u6587\u4ef6\u540d, buffer, function(err, etag) {                   console.log(err, etag);                   if(etag) resolve();                   else reject();               })           })       }</code></p> <ul> <li> <p>\u67e5\u770bendpoint\u7b49\u4fe1\u606f\uff1a</p> </li> <li> <p><code>docker logs \u5bb9\u5668ID</code></p> </li> <li></li> </ul>"},{"location":"Docker/docker_api_python/","title":"docker\u7684api\u4e4bpython\u8c03\u7528","text":""},{"location":"Docker/docker_api_python/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>python\u4e3a3.5\u7248\u672c\uff0c2.7\u7248\u672c\u5347\u7ea7\u4e3a3.5\u540e\u5c06\u9ed8\u8ba4python\u6539\u4e3a3.5\uff0c\u518dpip install docker\u3002</p>"},{"location":"Docker/docker_api_python/#_1","title":"\u521d\u59cb\u5316\u65b9\u6cd5\uff1a","text":"<pre><code>import docker\n\nclient=docker.from_env() #\u521d\u59cb\u5316\u4e00\u4e2adocker\u5ba2\u6237\u7aef\u5b9e\u4f8b\nprint(client.containers.run(\"alpine\",[\"echo\",\"hello\"])) \nfor contariner in client.containers.list():\n\n    print container.id\n\n    container.stop()\n\ncontainer=client.containers.get(\"***\")\n\nprint(container.logs())\n</code></pre>"},{"location":"Docker/docker_api_python/#_2","title":"\u62c9\u53d6\u955c\u50cf","text":"<pre><code>image=client.images.pull(\"alpine\")\n#\u76f8\u5f53\u4e8esudo docker pull alpine\n\nprint image.id\n\n#\u5982\u679cdetach=True\uff0c\u4f1a\u7acb\u5373\u8fd4\u56de\u4e00\u4e2acontainer\u5bf9\u8c61\n\ncontainer=client.containers.run(\"alpine\",[\"touch\",\"/hello\"],detach=True])\n\ncontainer.wait()\n\nimage=container.commit(\"hello\")\n\nprint(image.id)\n</code></pre>"},{"location":"Docker/docker_rexray_minio_s3fs/","title":"docker+rexray+minio s3fs\u5bf9\u8c61\u5b58\u50a8","text":""},{"location":"Docker/docker_rexray_minio_s3fs/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>docker\u6302\u8f7d\u672c\u5730\u6bd4\u8f83\u7b80\u5355,\u6302\u8f7d\u5230\u5bf9\u8c61\u5b58\u50a8\u6bd4\u5982minio\u6bd4\u8f83\u9ebb\u70e6: 1, docker\u4e0bpull\u597dminio\u7684image,\u5e76\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u8fd0\u884c,\u8bbf\u95ee\u5730\u5740\u4e3a:http://172.17.0.2:9000 2, \u5b89\u88c5rexray: <code>sudo curl -sSL https://rexray.io/install | sh</code> 3, \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6:/etc/rexray/config.yml,\u4f7f\u7528\u7684\u662fs3fs,\u6240\u4ee5\u6587\u4ef6\u5982\u4e0b:</p> <pre><code>libstorage:\n  service: s3fs\ns3fs:\n  accessKey: ****  #minio\u7684key\n  secretKey: ****\n  region: us-east-1\n  endpoint: http://172.17.0.2:9000  #minio\u7684\u8bbf\u95ee\u8def\u5f84\n  disablePathStyle: false\n  options:\n          - url=http://172.17.0.2:9000\n          - use_path_request_style\n          - nonempty\n</code></pre> <p>4 \u542f\u52a8rexray\u670d\u52a1:</p> <pre><code>service rexray start\n</code></pre> <p>5 \u521b\u5efavolume(\u548cdocker\u5bb9\u5668\u6302\u8f7d\u65e0\u5173):</p> <pre><code>sudo rexray volume create testbucket --size=2\n</code></pre> <p>6 mount \u521b\u5efa\u7684volume(\u548cdocker\u5bb9\u5668\u6302\u8f7d\u65e0\u5173):</p> <pre><code>sudo rexray volume mount volume testbucket\n</code></pre> <p>[\u7b2c5\u548c\u7b2c6\u6b65\u4e0d\u7528\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7b2c7\u6b65] 7 \u521b\u5efadocker volume:</p> <pre><code>sudo docker volume create -d rexray --name testbucket\n#-d \u8868\u793a\u6307\u5b9a\u7684volume\u9a71\u52a8\n</code></pre> <p>8 \u67e5\u770b volume:</p> <pre><code>sudo docker volume ls #\u5982\u679c\u6ca1\u9519,\u53ef\u770b\u5230\u4e0a\u4e00\u6b65\u521b\u5efa\u7684testbucket\nsudo docker volume inspect testbucket #\u770b\u4e00\u4e0b\u8fd9\u4e2avolume,Driver\u4e3arexray\n</code></pre> <p></p> <p>9 \u9a8c\u8bc1:: \u901a\u8fc7docker API\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u5e76\u542f\u52a8,\u8fd9\u91cc\u542f\u7528\u4e00\u4e2ajupyter/notebook\u7684\u5bb9\u5668:</p> <pre><code>container =client.create_container(str(container_),detach=True,command='jupyter notebook',host_config=client.create_host_config(binds=['testbucket:/notebooks'],port_bindings={8787: ('127.0.0.1', None)}))\nclient.start(container)\n#\u901a\u8fc7host_config=client.create_host_config(binds=['testbucket:/notebooks'])\u547d\u4ee4\u5c06notebook\u7684\u5bb9\u5668\u76ee\u5f55\u6302\u8f7d\u5230\u521a\u624d\u521b\u5efa\u7684volume\u5373testbucket\u4e0a.\n#\u52a8\u6001\u521b\u5efabucket:\nvolume_tmp = client.create_volume(name='test_name', driver='rexray')\nbucket_name=volume_tmp['Name']\ncontainer = client.create_container(str(container_),detach=True,command='jupyter notebook',host_config=client.create_host_config(binds=['%s:/notebooks'%(bucket_name)],port_bindings={8787: ('127.0.0.1', None)}))\n'''\n\u4e0a\u9762\u9700\u8981\u901a\u8fc7%s\u7b26\u53f7\u94fe\u63a5\u521b\u5efa\u7684bucket,\u5982\u679c\u76f4\u63a5\u5199'bucket_name:/notebooks',\u5219\u8ba4\u4e3a\u662fbucket_name\u5373\u662fbucket\u7684\u540d\u5b57,\u5bb9\u5668\u65e0\u6cd5\u6302\u8f7d,\u800c\u6b64\u5904\u7684bucket_name\u662f\u4e2a\u53d8\u91cf,\u6307\u5411name\u4e3atest_name\u7684bucket,\u6240\u4ee5\u901a\u8fc7%s\u53ef\u4ee5\u5c06\u5bb9\u5668\u6302\u8f7d\u5230bucket_name\u8868\u793a\u7684bucket\u5373test_name\u4e0a.\n'''\n</code></pre> <p></p> <p></p> <p>\u901a\u8fc7\u8fd4\u56de\u7684\u7aef\u53e3\u8bbf\u95ee\u7f51\u9875\u7248notebook,\u521b\u5efa\u4e00\u4e2a\u6587\u4ef61.txt</p> <p>10 \u6253\u5f00minio,\u5373\u53ef\u5728testbucket\u4e2d\u770b\u5230\u8be5\u6587\u4ef6:</p> <p>11 rexray\u521b\u5efa\u7684volume\u6302\u8f7d\u5728/var/lib/volumes/testbucket/\u4e0b\u9762,\u542f\u52a8\u7684\u5bb9\u5668\u6302\u8f7d\u5728\u76ee\u5f55\u4e0b\u7684./data\u4e0b,\u5bb9\u5668\u5220\u9664\u540e,./data\u968f\u4e4b\u5220\u9664,\u4e5f\u5c31\u5728\u672c\u5730\u4e0d\u5b58\u5728\u4e86.\u4f46\u662f,\u5df2\u7ecf\u540c\u6b65\u5230minio\u5f53\u4e2d\u7684\u6587\u4ef6\u4e0d\u4f1a\u53d8\u5316,\u6301\u4e45\u5b58\u50a8.</p>"},{"location":"Docker/docker_run/","title":"Docker run","text":""},{"location":"Docker/docker_run/#_1","title":"\u4e00\u822c\u547d\u4ee4","text":"<pre><code>docker run -d -p ****:**** imageName\n</code></pre>"},{"location":"Docker/docker_run/#_2","title":"\u9650\u5236\u53ef\u7533\u8bf7\u8d44\u6e90","text":"<pre><code>    -m,--memory\n\n    \u5185\u5b58\u9650\u5236\uff0c\u683c\u5f0f\u662f\u6570\u5b57\u52a0\u5355\u4f4d\uff0c\u5355\u4f4d\u53ef\u4ee5\u4e3a b,k,m,g\u3002\u6700\u5c0f\u4e3a 4M\n\n    --memory-swap\n\n    \u5185\u5b58+\u4ea4\u6362\u5206\u533a\u5927\u5c0f\u603b\u9650\u5236\u3002\u683c\u5f0f\u540c\u4e0a\u3002\u5fc5\u987b\u5fc5-m\u8bbe\u7f6e\u7684\u5927\n\n    --memory-reservation\n\n    \u5185\u5b58\u7684\u8f6f\u6027\u9650\u5236\u3002\u683c\u5f0f\u540c\u4e0a\n\n    --oom-kill-disable\n\n    \u662f\u5426\u963b\u6b62 OOM killer \u6740\u6b7b\u5bb9\u5668\uff0c\u9ed8\u8ba4\u6ca1\u8bbe\u7f6e\n\n    --oom-score-adj\n\n    \u5bb9\u5668\u88ab OOM killer \u6740\u6b7b\u7684\u4f18\u5148\u7ea7\uff0c\u8303\u56f4\u662f[-1000, 1000]\uff0c\u9ed8\u8ba4\u4e3a 0\n\n    --memory-swappiness\n\n    \u7528\u4e8e\u8bbe\u7f6e\u5bb9\u5668\u7684\u865a\u62df\u5185\u5b58\u63a7\u5236\u884c\u4e3a\u3002\u503c\u4e3a 0~100 \u4e4b\u95f4\u7684\u6574\u6570\n\n    --kernel-memory\n\n    \u6838\u5fc3\u5185\u5b58\u9650\u5236\u3002\u683c\u5f0f\u540c\u4e0a\uff0c\u6700\u5c0f\u4e3a 4M\n</code></pre>"},{"location":"Docker/docker_run/#_3","title":"\u7528\u6237\u5185\u5b58\u9650\u5236","text":"<p>\u7528\u6237\u5185\u5b58\u9650\u5236\u5c31\u662f\u5bf9\u5bb9\u5668\u80fd\u4f7f\u7528\u7684\u5185\u5b58\u548c\u4ea4\u6362\u5206\u533a\u7684\u5927\u5c0f\u4f5c\u51fa\u9650\u5236\u3002\u4f7f\u7528\u65f6\u8981\u9075\u5faa\u4e24\u6761\u76f4\u89c2\u7684\u89c4\u5219\uff1a-m\uff0c--memory\u9009\u9879\u7684\u53c2\u6570\u6700\u5c0f\u4e3a 4 M\u3002--memory-swap\u4e0d\u662f\u4ea4\u6362\u5206\u533a\uff0c\u800c\u662f\u5185\u5b58\u52a0\u4ea4\u6362\u5206\u533a\u7684\u603b\u5927\u5c0f\uff0c\u6240\u4ee5--memory-swap\u5fc5\u987b\u6bd4-m,--memory\u5927\u3002\u5728\u8fd9\u4e24\u6761\u89c4\u5219\u4e0b\uff0c\u4e00\u822c\u6709\u56db\u79cd\u8bbe\u7f6e\u65b9\u5f0f\u3002 \u4f60\u53ef\u80fd\u5728\u8fdb\u884c\u5185\u5b58\u9650\u5236\u7684\u5b9e\u9a8c\u65f6\u53d1\u73b0docker run\u547d\u4ee4\u62a5\u9519\uff1aWARNING: Your kernel does not support swap limit capabilities, memory limited without swap. \u8fd9\u662f\u56e0\u4e3a\u5bbf\u4e3b\u673a\u5185\u6838\u7684\u76f8\u5173\u529f\u80fd\u6ca1\u6709\u6253\u5f00\u3002\u6309\u7167\u4e0b\u9762\u7684\u8bbe\u7f6e\u5c31\u884c: step 1\uff1a\u7f16\u8f91/etc/default/grub\u6587\u4ef6\uff0c\u5c06GRUB_CMDLINE_LINUX\u4e00\u884c\u6539\u4e3aGRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\" step 2\uff1a\u66f4\u65b0 GRUB\uff0c\u5373\u6267\u884c$ sudo update-grub step 3: \u91cd\u542f\u7cfb\u7edf\u3002</p>"},{"location":"Docker/docker_run/#_4","title":"\u8bbe\u7f6e\u89c4\u5219\uff1a","text":"<p>\u5982\u679c\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c\u4e00\u4e2a\u4e00\u76f4\u4e0d\u505c\u7533\u8bf7\u5185\u5b58\u7684\u7a0b\u5e8f\uff0c\u4f60\u4f1a\u89c2\u5bdf\u5230\u8be5\u7a0b\u5e8f\u6700\u7ec8\u80fd\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f\u4e3a 2a\u3002 \u6bd4\u5982$ docker run -m 1G ubuntu:16.04\uff0c\u8be5\u5bb9\u5668\u80fd\u4f7f\u7528\u7684\u5185\u5b58\u5927\u5c0f\u4e3a 1G\uff0c\u80fd\u4f7f\u7528\u7684 swap \u5206\u533a\u5927\u5c0f\u4e5f\u4e3a 1G\u3002\u5bb9\u5668\u5185\u7684\u8fdb\u7a0b\u80fd\u7533\u8bf7\u5230\u7684\u603b\u5185\u5b58\u5927\u5c0f\u4e3a 2G\u3002</p> <pre><code>- 1, \u4e0d\u8bbe\u7f6e -m,--memory\u548c--memory-swap\n</code></pre> <p>\u5982\u679c\u4e0d\u8bbe\u7f6e-m,--memory\u548c--memory-swap\uff0c\u5bb9\u5668\u9ed8\u8ba4\u53ef\u4ee5\u7528\u5b8c\u5bbf\u820d\u673a\u7684\u6240\u6709\u5185\u5b58\u548c swap \u5206\u533a\u3002\u4e0d\u8fc7\u6ce8\u610f\uff0c\u5982\u679c\u5bb9\u5668\u5360\u7528\u5bbf\u4e3b\u673a\u7684\u6240\u6709\u5185\u5b58\u548c swap \u5206\u533a\u8d85\u8fc7\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u88ab\u5bbf\u4e3b\u673a\u7cfb\u7edf\u6740\u6b7b\uff08\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e--00m-kill-disable=true\u7684\u8bdd\uff09\u3002</p> <pre><code>- 2, \u8bbe\u7f6e -m,--memory\uff0c\u4e0d\u8bbe\u7f6e--memory-swap\n</code></pre> <p>\u7ed9-m\u6216--memory\u8bbe\u7f6e\u4e00\u4e2a\u4e0d\u5c0f\u4e8e 4M \u7684\u503c\uff0c\u5047\u8bbe\u4e3a a\uff0c\u4e0d\u8bbe\u7f6e--memory-swap\uff0c\u6216\u5c06--memory-swap\u8bbe\u7f6e\u4e3a 0\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u4f7f\u7528\u7684\u5185\u5b58\u5927\u5c0f\u4e3a a\uff0c\u80fd\u4f7f\u7528\u7684\u4ea4\u6362\u5206\u533a\u5927\u5c0f\u4e5f\u4e3a a\u3002\u56e0\u4e3a Docker \u9ed8\u8ba4\u5bb9\u5668\u4ea4\u6362\u5206\u533a\u7684\u5927\u5c0f\u548c\u5185\u5b58\u76f8\u540c\u3002</p> <pre><code>- 3, \u8bbe\u7f6e-m,--memory=a\uff0c--memory-swap=b\uff0c\u4e14b &gt; a\n</code></pre> <p>\u7ed9-m\u8bbe\u7f6e\u4e00\u4e2a\u53c2\u6570 a\uff0c\u7ed9--memory-swap\u8bbe\u7f6e\u4e00\u4e2a\u53c2\u6570 b\u3002a \u65f6\u5bb9\u5668\u80fd\u4f7f\u7528\u7684\u5185\u5b58\u5927\u5c0f\uff0cb\u662f\u5bb9\u5668\u80fd\u4f7f\u7528\u7684 \u5185\u5b58\u5927\u5c0f + swap \u5206\u533a\u5927\u5c0f\u3002\u6240\u4ee5 b \u5fc5\u987b\u5927\u4e8e a\u3002b -a \u5373\u4e3a\u5bb9\u5668\u80fd\u4f7f\u7528\u7684 swap \u5206\u533a\u5927\u5c0f\u3002 \u6bd4\u5982$ docker run -m 1G --memory-swap 3G ubuntu:16.04\uff0c\u8be5\u5bb9\u5668\u80fd\u4f7f\u7528\u7684\u5185\u5b58\u5927\u5c0f\u4e3a 1G\uff0c\u80fd\u4f7f\u7528\u7684 swap \u5206\u533a\u5927\u5c0f\u4e3a 2G\u3002\u5bb9\u5668\u5185\u7684\u8fdb\u7a0b\u80fd\u7533\u8bf7\u5230\u7684\u603b\u5185\u5b58\u5927\u5c0f\u4e3a 3G\u3002</p> <pre><code>- 4, \u8bbe\u7f6e-m,--memory=a\uff0c--memory-swap=-1\n</code></pre> <p>\u7ed9-m\u53c2\u6570\u8bbe\u7f6e\u4e00\u4e2a\u6b63\u5e38\u503c\uff0c\u800c\u7ed9--memory-swap\u8bbe\u7f6e\u6210 -1\u3002\u8fd9\u79cd\u60c5\u51b5\u8868\u793a\u9650\u5236\u5bb9\u5668\u80fd\u4f7f\u7528\u7684\u5185\u5b58\u5927\u5c0f\u4e3a a\uff0c\u800c\u4e0d\u9650\u5236\u5bb9\u5668\u80fd\u4f7f\u7528\u7684 swap \u5206\u533a\u5927\u5c0f\u3002 \u8fd9\u65f6\u5019\uff0c\u5bb9\u5668\u5185\u8fdb\u7a0b\u80fd\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5927\u5c0f\u4e3a a + \u5bbf\u4e3b\u673a\u7684 swap \u5927\u5c0f\u3002</p>"},{"location":"Docker/docker_run/#oom-killer","title":"OOM-killer","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728\u51fa\u73b0 out-of-memory(OOM) \u9519\u8bef\u65f6\uff0c\u7cfb\u7edf\u4f1a\u6740\u6b7b\u5bb9\u5668\u5185\u7684\u8fdb\u7a0b\u6765\u83b7\u53d6\u66f4\u591a\u7a7a\u95f2\u5185\u5b58\u3002\u8fd9\u4e2a\u6740\u6b7b\u8fdb\u7a0b\u6765\u8282\u7701\u5185\u5b58\u7684\u8fdb\u7a0b\uff0c\u6211\u4eec\u59d1\u4e14\u53eb\u5b83 OOM killer\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e--oom-kill-disable\u9009\u9879\u6765\u7981\u6b62 OOM killer \u6740\u6b7b\u5bb9\u5668\u5185\u8fdb\u7a0b\u3002\u4f46\u8bf7\u786e\u4fdd\u53ea\u6709\u5728\u4f7f\u7528\u4e86-m/--memory\u9009\u9879\u65f6\u624d\u4f7f\u7528--oom-kill-disable\u7981\u7528 OOM killer\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e-m\u9009\u9879\uff0c\u5374\u7981\u7528\u4e86 OOM-killer\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u51fa\u73b0 out-of-memory \u9519\u8bef\u65f6\uff0c\u7cfb\u7edf\u901a\u8fc7\u6740\u6b7b\u5bbf\u4e3b\u673a\u8fdb\u7a0b\u6216\u83b7\u53d6\u66f4\u6539\u5185\u5b58\u3002</p> <pre><code>    docker run -it -m 100M --oom-kill-disable ubuntu:16.04 /bin/bash\n</code></pre>"},{"location":"Docker/dotnet_docker_container/","title":"\u521b\u5efaDotnet\u7248Docker\u670d\u52a1","text":""},{"location":"Docker/dotnet_docker_container/#dotnet-sdk","title":"dotnet sdk\u7248\uff1a","text":"<pre><code>FROM  mcr.microsoft.com/dotnet/sdk:3.1\n\nCOPY ./netcoreapp3.1 /dotnet\n\nWORKDIR /dotnet\n\nRUN apt-get update -y &amp;&amp; apt-get install -y libgdiplus &amp;&amp; apt-get clean &amp;&amp; ln -s /usr/lib/libgdiplus.so /usr/lib/gdiplus.dll\n\nEXPOSE 5010\n\nCMD [\"dotnet\", \"**.dll\"]\n</code></pre> <p>linux\u7248\u7684docker\u8c03\u7528System.Drawing.Common\u65f6\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u3011\uff0c\u53c2\u8003\u535a\u6587\uff1a\u4f20\u9001\u95e8</p>"},{"location":"Docker/dotnet_docker_container/#centos","title":"CentOs\u7248\uff1a","text":"<pre><code>FROM centos:latest\n\nCOPY ./netcoreapp3.1 /dotnet\n\nWORKDIR /dotnet\n\nRUN yum install autoconf automake libtool freetype-devel fontconfig libXft libexif giflib libjpeg-turbo libpng giflib libtiff libexif glib2 cairo -y \\\n&amp;&amp; yum install dotnet-sdk-3.1 -y \\\n        &amp;&amp; rpm -ivh https://download-ib01.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/l/libgdiplus-6.0.4-3.el8.x86_64.rpm\n\nEXPOSE 5010\n\nCMD [\"dotnet\", \"*.dll\"]   \n</code></pre>"},{"location":"Docker/dotnet_docker_container/#_1","title":"\u542f\u52a8\uff1a","text":"<ul> <li> <p>docker build -t demo:1.0 .</p> </li> <li> <p>docker run -d -p port1:port4 image </p> </li> </ul>"},{"location":"Docker/exec_docker_container/","title":"\u8fdb\u5165docker\u5bb9\u5668\u7684\u65b9\u5f0f","text":""},{"location":"Docker/exec_docker_container/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0cattach\u65b9\u5f0f\uff1asudo docker attach c076737d8aa8(\u5bb9\u5668ID)\uff0c\u7f3a\u70b9\uff1a\u591a\u4e2a\u8fdb\u5165\u8be5\u5bb9\u5668\u7684\u7a97\u53e3\u4f1a\u540c\u6b65\u663e\u793a\u3002</p> <p>2\uff0cssh\u65b9\u5f0f\uff1a\u4e0d\u5efa\u8bae\u4f7f\u7528</p> <p>3\uff0cnsenter\uff1a\u592a\u9ebb\u70e6</p> <p>4\uff0cexec\uff1a\u6267\u884c\u65f6\u786e\u5b9a\u5bb9\u5668\u5df2\u7ecfstart\uff0c\u7136\u540e\uff1adocker exec -i -t test1 /bin/bash\uff08test1\u662f\u5df2\u7ecf\u542f\u52a8\u7684\u5bb9\u5668\u540d\uff0c\u540e\u9762\u8ddf/bin/bash\u542f\u52a8\u4e00\u4e2a\u7ec8\u7aef\uff09</p> <p>\u5206\u7c7b\uff1a \u5b66\u4e60</p>"},{"location":"Docker/host_web_site/","title":"\u6258\u7ba1\u9759\u6001\u7f51\u7ad9","text":""},{"location":"Docker/host_web_site/#_1","title":"\u5bb9\u5668\u6258\u7ba1\u9759\u6001\u7f51\u7ad9","text":"<p>\u5c06\u9759\u6001\u7f51\u7ad9\u90e8\u7f72\u81f3\u5bb9\u5668\u5185\uff0c\u901a\u8fc7\u7aef\u53e3\u6620\u5c04\uff0c\u5373\u53ef\u5916\u90e8\u8bbf\u95ee.</p>"},{"location":"Docker/host_web_site/#react","title":"\u4ee5react\u4e3a\u4f8b","text":"<p>1, \u8bbe\u7f6ePUBLIC_URL</p> <pre><code>PUBLIC_URL=/path1/path2/\nREACT_APP_BASEURL=/path1/path2/\n</code></pre> <p>2, \u521b\u5efaDockerfile</p> <pre><code>FROM node:16.20.2-alpine3.18 as nn\n\nWORKDIR /build \n\n# \u5c06react\u7f16\u8bd1\u4ea7\u7269build\u76ee\u5f55\u7684\u5185\u5bb9copy\u81f3/build/path1/path2/\nCOPY build /build/path1/path2/\n\n# \u5b89\u88c5serve\u5305\uff0c\u5c06\u7f16\u8bd1\u7684index.html\u590d\u5236\u4e00\u4efd\u5230/build/\u4e0b\uff0c\nRUN npm install -g serve &amp;&amp; mv path1/path2/index.html .\n\n# \u5728build\u76ee\u5f55\u4e0b\u542f\u52a8\u670d\u52a1\uff0c\u8bbf\u95eehttp://url/path1/path2\u65f6\u4f1a\u5b9a\u5411\u5230\u8be5\u7f51\u7ad9\nCMD [\\\"sh\\\", \\\"-c\\\", \\\"serve -s .\\\"]\n</code></pre> <p>3\uff0c\u7f16\u8bd1docker</p> <pre><code>docker build -t test:tag\n</code></pre> <p>4, \u521b\u5efa\u5bb9\u5668</p> <pre><code>docker run -d -p 8080:3000 test:tag\n</code></pre> <p>5, \u8bbf\u95eelocalhost:8080/path1/path2/\u5373\u53ef\u8bbf\u95ee\u8be5\u7f51\u7ad9</p>"},{"location":"Docker/jupyter/","title":"Jupyter","text":"<pre><code>docker run -p 9999:8888 -d jupyter/minimal-notebook\n</code></pre> <ul> <li> <p>2,\u8fdb\u5165\u5bb9\u5668\uff0c\u62ff\u5230token\uff1a</p> </li> <li> <p><code>jupyter notebook list</code></p> </li> <li> <p>\u5728\u767b\u5f55\u754c\u9762\uff0c\u8f93\u5165token\uff0c\u8f93\u5165\u65b0\u5bc6\u7801\uff0c\u5373\u53ef\u7528\u5bc6\u7801\u767b\u5f55</p> </li> <li>\u6216\u8005\u901a\u8fc7jupyter notebool --generate-config\u7684\u914d\u7f6e\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u624b\u52a8\u53ef\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5</li> </ul>"},{"location":"Docker/kubernetes_issues/","title":"kubernetes\u95ee\u9898\u70b9","text":""},{"location":"Docker/kubernetes_issues/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0c<code>kubectl get node</code>\uff0c\u663e\u793anode\u72b6\u6001\u4e3aNot ready\uff1a\ufeff</p> <p></p> <p>\u6267\u884c<code>kubectl describe node vm15</code>\uff1a\ufeff</p> <p></p> <p>\u95ee\u9898\u4e3a\uff1a</p> <pre><code>runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized\n\n\u5176\u5b9e\u5728\u6267\u884csudo kubeadm init\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u6709\u63d0\u793a\uff1a\n</code></pre> <p></p> <p>\u9700\u8981\u5728\u6dfb\u52a0node\u4e4b\u524ddeploy\u4e00\u4e2anetwork\uff1a</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml\n\n\u7136\u540e\u518d\u6267\u884ckubectl get node\u67e5\u770b\uff1a\n</code></pre> <p></p> <p>\u4e09\u4e2a\u8282\u70b9\u5df2\u7ecf\u5168\u4e3aready\u72b6\u6001\u3002</p> <p>2\uff0c\u4f7f\u7528<code>sudo kubeadm join</code>\u65f6\u51fa\u73b0\u9519\u8bef\u5982\u4e0b\uff1a [ERROR DirAvailable\u2013etc-kubernetes-manifests]: /etc/kubernetes/manifests is not empty [ERROR FileAvailable\u2013etc-kubernetes-pki-ca.crt]: /etc/kubernetes/pki/ca.crt already exists [ERROR FileAvailable\u2013etc-kubernetes-kubelet.conf]: /etc/kubernetes/kubelet.conf already exists \u89e3\u51b3\u529e\u6cd5\uff1a \u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6267\u884c<code>sudo kubeadm reset</code>\uff0c\u7136\u540e\u518d\u6267\u884cjoin\u547d\u4ee4\u3002 \u518d\u4e0d\u884c\uff0c\u5c31\u5220\u9664\u4ee5\u4e0a\u6587\u4ef6\u5939\u91cd\u65b0\u6267\u884cinit\u3002</p> <p>3\uff0c\u8bc1\u4e66\u9519\u8bef\uff1a Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of \u201ccrypto/rsa: verification error\u201d while trying to verify candidate authority certificate \u201ckubernetes\u201d) \u89e3\u51b3\u529e\u6cd5\uff1a</p> <pre><code>mv  $HOME/.kube $HOME/.kube.bak\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre> <p>4,\u5982\u679c\u5728describe pod\u65f6\u5019\u63d0\u793a\u9519\u8bef: Failed create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container \u201c8282b53b0d3c59f3b01a18517d1d201e69eb6ca9ce11bc008b90b57675123f10\u201d network for pod \u201credis-master-wkktm\u201d: NetworkPlugin cni failed to set up pod \u201credis-master-wkktm_default\u201d network: open /run/flannel/subnet.env: no such file or directory \u56e0\u4e3a\u4f7f\u7528\u4e86cni,\u9700\u8981\u5728<code>sudo kubeadmin reset</code>\u7136\u540einit\u65f6\u5019\u6307\u5b9a: <code>kubeadm init --pod-network-cidr=10.244.0.0/16</code></p>"},{"location":"Docker/modify_pip_source/","title":"\u4fee\u6539Pip\u6e90","text":"<ul> <li>Linux\u914d\u7f6e /etc/docker/daemon.json</li> </ul> <pre><code>{\n        \"registry-mirrors\": [\"http://docker.mirrors.ustc.edu.cn\"]\n}\n</code></pre>"},{"location":"Docker/php_Composer_Dockerfile/","title":"php\u7ba1\u7406\u5de5\u5177Composer\u5728Dockerfile\u4e2d\u7684\u5b89\u88c5\u4e0e\u4f7f\u7528","text":""},{"location":"Docker/php_Composer_Dockerfile/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1,\u5b89\u88c5: curl\u5b89\u88c5\u65b9\u5f0f\u51fa\u9519,\u8fd9\u91cc\u4f7f\u7528\u76f4\u63a5\u4e0b\u8f7d\u65b9\u5f0f: \u6d4f\u89c8\u5668\u8bbf\u95eehttps://getcomposer.org/installer,\u5c06\u4f1a\u4e0b\u8f7d\u6587\u4ef6composer.phar. 2,\u4f7f\u7528: \u5728\u5f53\u524d\u4e0b\u8f7d\u76ee\u5f55\u4e0b,composer.phar\u662f\u53ef\u6267\u884c\u7a0b\u5e8f: php composer.phar \u547d\u4ee4,\u5373\u53ef\u4f7f\u7528(\u5f53\u7136\u4e5f\u53ea\u80fd\u5728\u5f53\u524d\u76ee\u5f55\u4f7f\u7528);</p> <p>\u5168\u5c40\u4f7f\u7528:</p> <pre><code>sudo mv composer.phar /usr/local/bin/composer\nchmod +x /usr/local/bin/composer\n</code></pre> <p>\u6267\u884c:</p> <pre><code>composer --version\u5373\u53ef\u67e5\u770b\u7248\u672c.\n</code></pre> <p>3,\u5728\u9879\u76ee\u76ee\u5f55\u4e0b,\u6267\u884c\u547d\u4ee4:</p> <pre><code> composer create-project --prefer-dist laravel/laravel blog  5.3.*\n</code></pre> <p>\u5373\u53efdownload\u4e0b\u6765laravel\u7684blog\u9879\u76ee. \u518d\u6267\u884c:</p> <pre><code>composer config repo.packagist composer https://packagist.phpcomposer.com\n</code></pre> <p>\u5373\u53ef\u5c06\u56fd\u5185\u955c\u50cf\u52a0\u901f\u6e90\u6dfb\u52a0\u8fdbjson\u914d\u7f6e\u6587\u4ef6\u4e2d. 4,Apache2\u914d\u7f6elaravel: \u5f00\u53d1\u65f6,\u53ef\u5148\u5728blog\u6839\u76ee\u5f55\u4e0b\u751f\u6210key:</p> <pre><code>php artisan key:generate\n</code></pre> <p>\u7136\u540e\u76f4\u63a5\u5728blog\u4e0b\u7684public\u6587\u4ef6\u5939\u4e0b\u542f\u52a8\u547d\u4ee4:</p> <pre><code>php -S localhost:100\n</code></pre> <p>\u5373\u53ef\u6d4f\u89c8\u5668\u6253\u5f00laravel\u9879\u76ee. \u751f\u4ea7\u73af\u5883\u53c2\u8003\u4e0b\u9762\u7b2c5\u6761: 5,Dockerfile\u4e2d\u914d\u7f6e: \u5728Dockerfile\u4e2d\u5b89\u88c5\u597dComposer\u540e,\u5728start.sh\u4e2d\u542f\u52a8laravel\u9879\u76ee:</p> <pre><code>usermod -s /bin/bash www-data #www-data\u4e3aApache2\u7684\u7528\u6237,composer\u8981\u7528\u975eroot\u7528\u6237\u542f\u52a8.\ngit clone $GIT code #clone\u9879\u76ee\u4ee3\u7801.\nchmod 777 -R code/\ncp env-example code/blog/.env \n#\u4e0b\u9762\u8fd9\u6761\u547d\u4ee4\u662f\u4eceroot\u7528\u6237\u5207\u6362\u5230www-data\u7528\u6237\u6267\u884ccd\u548ccomposer install\u547d\u4ee4,\u7136\u540e\u81ea\u52a8\u518d\u5207\u6362\u56deroot\u7528\u6237,\u8fd9\u6837composer\u5728install\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u63d0\u793a\u4e0d\u80fd\u4ee5root\u7528\u6237\u8fd0\u884c\u7684\u9519\u8bef\u4e86.\nsu -c \"cd code/blog/ &amp;&amp; composer install\" www-data \n#\u751f\u6210key,\u8fd9\u65f6\u662f\u7528root\u7528\u6237\u6267\u884c\u7684,\u5426\u5219\u62a5\u9519.\nphp artisan key:generate\nphp artisan up \n</code></pre> <p>6,\u914d\u7f6e\u6570\u636e\u5e93: laravel5.5\u7684\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u6709\u4e24\u4e2a,.env\u548cconfig\u6587\u4ef6\u5939\u4e0b\u7684database.php,\u9700\u8981\u4e8b\u5148\u914d\u7f6e\u597d\u5176\u4e2d\u7684\u6570\u636e\u5e93\u90e8\u5206,\u7136\u540e\u5728laravel\u6839\u76ee\u5f55,\u6267\u884cphp artisan make:auth,\u5373\u53ef\u767b\u5f55: http://localhost:90/index.php/register\u9875\u9762\u8fdb\u884c\u7528\u6237\u6ce8\u518c,\u663e\u793a\u767b\u5f55\u6210\u529f\u5373\u6210\u529f.</p>"},{"location":"Frontend/CommonJs-ESModule/","title":"CommonJs-ESModule","text":"<ul> <li> <p><code>CommonJs</code>: \u8f93\u51fa\u503c\u7684\u62f7\u8d1d\uff0c\u52a8\u6001\u52a0\u8f7d</p> </li> <li> <p><code>ESModule</code>: \u8f93\u51fa\u503c\u7684\u5f15\u7528\uff0c\u9759\u6001\u52a0\u8f7d\uff0c\u6240\u4ee5<code>import</code>\u5fc5\u987b\u653e\u5728\u9876\u90e8\u3002\u7531\u4e8e\u7f16\u8bd1\u65f6\u52a0\u8f7d\uff0c\u6240\u4ee5\u5728<code>webpack</code>\u4e2d\u53ef\u505a<code>tree shaking</code>.</p> </li> </ul>"},{"location":"Frontend/Electron/","title":"electron","text":""},{"location":"Frontend/Electron/#electron","title":"electron\u5f00\u53d1\u4e2d\u4e00\u4e9b\u8bb0\u5f55","text":"<ul> <li> <p>Node: 16.16.0 + Electrron: 21.4.4 + React</p> </li> <li> <p>1, package.json\u589e\u52a0main\u5165\u53e3\u6587\u4ef6\uff0c\u6307\u5411electron\u7684\u4e3b\u8fdb\u7a0b\u6587\u4ef6\uff1a</p> </li> </ul> <pre><code>main: 'electron/main.js',\ndescription: \"\",\nname: \"\"\n</code></pre> <ul> <li> <p>2, \u4e3b\u8fdb\u7a0b</p> <p>\u521b\u5efawindow\u6216view\u7684\u65f6\u5019\uff0c\u53ef\u6307\u5b9a\u9884\u52a0\u8f7d\u811a\u672c\uff0c\u5728\u9884\u52a0\u8f7d\u811a\u672c\u5185\u53ef\u901a\u8fc7<code>exposeInMainWorld</code> \u66b4\u9732api\u7ed9\u6e32\u67d3\u8fdb\u7a0b, \u4f7f\u7528\u6b21api\u7684\u524d\u63d0\u662f\u9700\u8981\u5f00\u542f\u8fdb\u7a0b\u9694\u79bb\uff0c\u5373\u5728webPreferences\u7684contextIsolation\u4e3atrue\uff1b</p> </li> <li> <p>\u901a\u8fc7\u8be5\u65b9\u5f0f\u66b4\u9732\u7684api\u5728\u6e32\u67d3\u8fdb\u7a0b\u8c03\u7528\u65f6\uff0c\u4e0d\u8981\u4f20\u5165\u67d0\u4e9b\u591a\u5c42\u5d4c\u5957\u7684\u5bf9\u8c61\uff0c\u5b9e\u9645\u53ea\u6709\u4e00\u5c42\u53ef\u7528\uff0c\u5982\uff1a</p> </li> </ul> <pre><code>const demo = {\n  fun1: () =&gt; {\n    console.log('fun1')\n  }\n}\ncontextBridge.exposeInMainWorld(\"api\", {\n\n  sdk: demo,\n\n});\n\n// \u6e32\u67d3\u8fdb\u7a0b\nwindow.api.sdk.fun1() // \u4f1a\u62a5\u9519\uff0c\u63d0\u793a\u627e\u4e0d\u5230fun1\n\n\n// \u9700\u8981\u5c06\u6bcf\u4e2a\u8c03\u7528\u7684func\u90fd\u66b4\u9732\u51fa\u53bb\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u5bf9\u8c61\u66b4\u9732:\ncontextBridge.exposeInMainWorld(\"api\", {\n\n  sdk: {\n    fun1: () =&gt; demo.fun1,\n  },\n\n});\n\n</code></pre> <p>\u5982\u679c\u9700\u8981\u5728\u6e32\u67d3\u8fdb\u7a0b\u4e2d\u4f7f\u7528node\u7684api\u5982require\uff0c\u9700\u8981\u8bbe\u7f6e\u5982\u4e0b\uff0c\u5e76\u5728\u6e32\u67d3\u8fdb\u7a0b\u4e2d\u901a\u8fc7window.require\u8c03\u7528\u3002\u5426\u5219\u4f1a\u62a5\u9519\u3002</p> <pre><code>webPreferences: {\n    nodeIntegration: true,\n    contextIsolation: false,\n}\n</code></pre> <ul> <li>3\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1</li> </ul> <p>\u591a\u9875\u9762\u53ef\u4f7f\u7528MessageChannelMain\u6765\u901a\u4fe1\uff0c\u4f7f\u7528\u65b9\u5f0f\u4e3a\u5728\u4e3b\u8fdb\u7a0b\u521b\u5efa\u9875\u9762\u65f6\uff0c\u5c06\u6210\u5bf9\u7684port\u5206\u522b\u4f20\u7ed9\u9700\u8981\u901a\u4fe1\u7684\u9875\u9762\uff0c\u5e76\u5728\u6bcf\u4e2a\u9875\u9762\u5185\u63a5\u53d7port\u540e\u901a\u4fe1\u3002</p> <pre><code>// \u4e3b\u8fdb\u7a0b\nconst { port1, port2 } = new MessageChannelMain();\n\nmainWindow.once('ready-to-show', () =&gt; {\n    // \u9700\u8981\u5ef6\u65f6\u4e00\u4e0b\u3000\u6709\u65f6\u5019\u9875\u9762\u4e0d\u80fd\u53ca\u65f6\u6536\u5230\n  setTimeout(() =&gt; {\n        mainWindow.webContents.postMessage('port', {channel: 'pageA'}, [port1]);\n  })\n});\n\nviewPage2.webContents.once('ready-to-show', () =&gt; {\nviewPage2.webContents.postMessage('port', null, [port2]);\n});\n\n\n\n// \u6e32\u67d3\u8fdb\u7a0b\nconst { ipcRenderer } = window.require(\"electron\");\n\n/**\n * \u914d\u5bf9port: hmi\u8fdb\u7a0b\n */\nexport const messagePort = (() =&gt; {\n  let port;\n  return {\n    setPort: (p) =&gt; {\n      port = p;\n    },\n    getPort: () =&gt; {\n      return port;\n    },\n  };\n})();\n\nipcRenderer.on(\"port\", (e) =&gt; {\n\n  const electronMessagePort = e.ports[0];\n  messagePort.setPort(e.ports[0]);\n\n  electronMessagePort.onmessage = (messageEvent) =&gt; {\n    // todo\n  };\n});\n\n// \u901a\u4fe1\nmessagePort.getPort().postMessage({});\n</code></pre> <p>\u4e3b\u8fdb\u7a0b\u76d1\u542c\u6e32\u67d3\u8fdb\u7a0b\u6d88\u606f</p> <pre><code>// \u53cc\u5411\u901a\u4fe1\u7528invoke - handle\nipcMain.handle('check-access', checkAccess);\n\n\n// \u5355\u5411\u901a\u4fe1\u7528send - on\n  ipcMain.on('messageName', handleMessage);\n\n</code></pre> <ul> <li>4, \u591a\u9875\u9762 \u5728webpack\u914d\u7f6e\u4e2d\u914d\u7f6e\u591a\u9875\u9762, \u793a\u4f8b\u4e3acustomize-cra\u5df2\u7b80\u5316\u914d\u7f6e</li> </ul> <pre><code>const multipleEntry = require('react-app-rewire-multiple-entry')([\n  {\n    entry: path.join(__dirname, './src/electron/tab1/index.tsx'),\n    template: path.join(__dirname, \"./public/index.html\"),\n    outPath: './tab1.html',\n    omitHash: false,\n  },\n  {\n    entry: path.join(__dirname, './src/electron/tab2/index.tsx'),\n    template: path.join(__dirname, \"./public/index.html\"),\n    outPath: './tab2.html',\n    omitHash: false,\n  },\n]);\n\nmodule.exports = {\n  webpack: override(\n    setOutputForQiankun(),\n    multipleEntry.addMultiEntry,\n)}\n</code></pre> <ul> <li>5, \u5904\u7406node sdk\u7684\u6253\u5305\u95ee\u9898     addon\u7684\u7f16\u8bd1\u4ea7\u4e3a\u4e3anode\u6587\u4ef6\uff0c\u524d\u7aef\u9700\u8981\u901a\u8fc7require\u5f15\u5165\uff0c\u4e0d\u505a\u5176\u4ed6\u5904\u7406\u65f6\u524d\u7aefwebpack\u6253\u5305\u4f1a\u62a5\u9519\u3002     \u601d\u8def\u4e3a\u5c06node\u6587\u4ef6copy\u5230build\u76ee\u5f55\uff1a</li> </ul> <pre><code>addWebpackPlugin((config) =&gt; {\n    config.options.plugins.push(\n    new copyPlugin({\n        patterns: [{\n        from: 'src/nodesdk', \n        to: path.resolve(__dirname, './build/app/modules/nodesdk'),\n        toType: 'dir'\n        },\n    ]\n    })\n    );\n}),\n</code></pre> <p>copy\u4e4b\u540e\uff0c\u9700\u8981\u5bf9require\u7684\u5730\u65b9\u505a\u5904\u7406\uff0c\u5f00\u53d1\u6a21\u5f0fpath\u4e3a\u5b9e\u9645\u8def\u5f84\uff0c\u6253\u5305\u540e\u7684\u751f\u4ea7\u6a21\u5f0f\uff0c\u6307\u5411build\u91cc\u7684\u8def\u5f84</p> <p>electron\u5728make\u65f6\u6709\u4e24\u79cd\u65b9\u5f0f\uff0celectron-builder\u548celectron-forge \u6b64\u5904\u7528electron-forge make\u6253\u5305\uff0c\u914d\u7f6e\u6587\u4ef6\u4e3a\u6839\u76ee\u5f55\u7684forge.config.js \u6253\u5305\u65f6\u9700\u8981\u5ffd\u7565node_modules,\u5426\u5219app\u4f1a\u5c06\u5176\u5168\u90e8\u6253\u5305\u8fdb\u53bb\uff0c\u4f46\u662f\u5b9e\u9645\u52a0\u8f7d\u7684\u662fbuild\u7684\u4ea7\u7269\uff0c\u5982\u679c\u9700\u8981\uff0c\u53ef\u6307\u5b9a\u67d0\u4e2a\u76ee\u5f55\u4e0d\u8981\u6253\u5305\u8fdbasar\u538b\u7f29\u6587\u4ef6\u5185\uff0c\u914d\u7f6e\u4e3a</p> <pre><code>module.exports = {\n  packagerConfig: {\n    ignore: [\n      /^\\/node_modules/,\n      /\\.zip$/,\n      /^\\/src/,\n    ],\n    asar: {\n      unpackDir: '**/hmisdk'\n    }\n  }\n}\n// \u4e0a\u9762\u4f1a\u5c06hmisdk\u76ee\u5f55\u653e\u5728app.asar.unpacked\u76ee\u5f55\u4e0b\uff0c\u800c\u4e0d\u662fapp.asar\u6587\u4ef6\u5185\uff0c\u9ed8\u8ba4\u5b89\u88c5\u7684\u5e94\u7528\u8d44\u6e90\u8def\u5f84\u4e3a/usr/lib/{appName}/resources/\n</code></pre> <p>\u6253\u5305\u4ea7\u7269\u7684\u914d\u7f6e\u4e3a:</p> <pre><code>  makers: [\n\n    {\n      name: '@electron-forge/maker-deb', // \u8f93\u51falinux\u7684deb,\u4e0b\u9762\u4e24\u4e2a\u6b63\u5e38\u53ef\u5220\u9664\n      config: {},\n    },    \n    {\n      name: '@electron-forge/maker-zip', // \u8f93\u51falinux\u7684deb\n      platforms: ['darwin'],\n    },\n    {\n      name: '@electron-forge/maker-rpm', // \u8f93\u51falinux\u7684rpm,\n      config: {},\n    },\n  ],\n  outDir: 'build/'\u3000// \u8f93\u51fa\u76ee\u5f55\n</code></pre> <ul> <li>6\uff0celectron\u5f00\u53d1\u6a21\u5f0f\u542f\u52a8\u65b9\u5f0f\u4e3a</li> </ul> <pre><code>// \u8fd9\u4e2a\u65b9\u5f0f\u53ef\u80fd\u4f1a\u62a5\u9519\ndotenv -e .env.electron.dev electron-forge start\n\ndotenv -e .env.electron.dev electron .\n\n</code></pre> <ul> <li>7, \u5d29\u6e83\u76d1\u63a7</li> </ul> <pre><code>// \u4e3b\u8fdb\u7a0b\nconst {crashReporter} = require('electron');\n\ncrashReporter.start({submitURL: '', uploadToServer: false});\nconsole.log('last crash:',crashReporter.getLastCrashReport())\nconsole.log('getAppPath', app.getAppPath())\n\napp.on('render-process-gone', (e, w, d) =&gt; {\n  if(d.reason == \"crashed\") {\n    console.log('crashed', d)\n  w.reload()\n  } else {\n    console.log('render-process-gone')\n  fs.appendFileSync('./log.txt', `${new Date()}\u6e32\u67d3\u8fdb\u7a0b\u88ab\u6740\u6b7b${d.reason}\\n`)\n  }\n});\n</code></pre> <p>electron crashReport\u5730\u5740\u9ed8\u8ba4\u5728:~/.config/appName/Crashpad/pending/\u4e0b\uff0c\u4f1a\u6709\u591a\u4e2a\u5d29\u6e83\u65e5\u5fd7</p> <p>electron-minidump\u4e3anpm\u5b89\u88c5\u7684\u89e3\u6790\u547d\u4ee4\uff0c\u53ef\u901a\u8fc7npm\u5b89\u88c5</p> <p>\u7528\u5176\u89e3\u6790dmp\u5d29\u6e83\u65e5\u5fd7\u6587\u4ef6: electron-minidump -f ./dmp.dmp -v 21.4.4 21.4.4\u4e3aelectron\u7684\u7248\u672c\uff0c\u56e0\u4e3a\u8981\u4e0b\u8f7d\u5bf9\u5e94\u7248\u672c\u7684\u89e3\u6790\u6587\u4ef6</p> <p>8, \u9759\u6001\u8d44\u6e90\u7684\u52a0\u8f7d \u7531\u4e8eelectron\u662ffile\u534f\u8bae\u52a0\u8f7d\u9875\u9762\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u9759\u6001\u8d44\u6e90\u5982\u67d0\u4e9bjson\u3001gltf\u8d44\u6e90\u8bf7\u6c42\u4e0d\u5230\u7684\u60c5\u51b5\uff0c\u89e3\u51b3\uff1a \u5c06app\u7684BrowerRoute\u7528HashRouter\u5373\u53ef\u3002 \u5dee\u5f02\u5bf9\u6bd4\u89c1<code>react/route.md</code></p>"},{"location":"Frontend/EventLoop/","title":"\u4e8b\u4ef6\u5faa\u73af","text":""},{"location":"Frontend/EventLoop/#_1","title":"\u4e8b\u4ef6\u5faa\u73af","text":"<ul> <li>\u56fe\u4f8b\uff1a</li> </ul>"},{"location":"Frontend/Promise/","title":"\u624b\u5199\u5b9e\u73b0Promise","text":""},{"location":"Frontend/Promise/#promise","title":"\u624b\u5199\u5b9e\u73b0Promise","text":"<ul> <li>\u53c2\u8003\uff1a\u535a\u6587</li> <li><code>github</code>: <code>https://github.com/CrayT/newPromise</code></li> </ul> <pre><code>const Pending = \"Pending\";\nconst Resolved = \"Resolved\";\nconst Reject = \"Reject\";\n\nconst resolvePromise = (promise2, x, resolve, reject) =&gt; {\n    console.log(promise2)\n    if(promise2 == x){\n        throw new TypeError(\"Error\")\n    }\n    let called; //\u9632\u6b62resolve\u548creject\u540c\u65f6\u8c03\u7528\uff0c\u8fd9\u91cc\u8fdb\u884c\u5904\u7406\n    if(typeof x === \"object\" &amp;&amp; x != null || typeof x === \"function\"){\n        try{\n            let then  = x.then;\n            //\u5224\u65adx\u662f\u5426\u662f\u4e00\u4e2apromise\uff0c\u5982\u679c\u662f\uff0c\u5219then\u4e3afunction\uff0c\u9700\u8981\u9012\u5f52\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u5219then\u4e3a\u666e\u901a\u503c\uff0c\u76f4\u63a5\u53efresolve\n            if(typeof then === \"function\"){\n                console.log(\"x \u4e3apromise\")\n                then.call(x, y=&gt;{\n                    if(called) return;\n                    called = true;\n                    resolvePromise(promise2, y, resolve, reject)\n                }, e =&gt; {\n                    if(called) return;\n                    called = true\n                    reject(e);\n                })\n            } else {\n                resolve(x)\n            }\n        }catch(e){\n            if(called) return;\n            called = true;\n            reject(e)\n        }\n\n    }else {\n        resolve(x)\n    }\n}\nclass NewPromise {\n    constructor(fn){\n        this.status = Pending;\n        this.value = undefined;\n        this.reason = undefined;\n\n        this.onResolveCallBack = [];\n        this.onRejectCallBack = [];\n\n        const resolve = (value) =&gt; {\n            if(this.status == Pending){\n                this.status = Resolved;\n                this.value = value;\n                this.onResolveCallBack.forEach(f =&gt; {\n                    f();\n                })\n            }\n        }\n\n        const reject = (reason) =&gt; {\n            if(this.status == Pending){\n                this.status = Reject;\n                this.reason = reason;\n                this.onRejectCallBack.forEach(f =&gt; {\n                    f();\n                })\n            }\n        }\n\n        try{\n            fn(resolve, reject)\n        }catch(e){\n            reject(e)\n        }\n\n    }\n    //\u601d\u8def\uff1a\u5c06onFullfill\u548conReject\u52a0\u5165\u5230resolve\u548creject\u7684\u56de\u8c03\u4e2d\uff0c\u5728\u6267\u884cresolve\u6216reject\u65f6\uff0c\u6267\u884conFullFill\u6216onReject\n    then(onFullfile, onReject){\n        onFullfile = typeof onFullfile === \"function\" ? onFullfile : v =&gt; v;\n        onReject = typeof onReject === \"function\" ? onReject : err =&gt; {throw err}\n\n        let pro = new NewPromise( (resolve, reject) =&gt; {\n            if(this.status == Resolved){\n                setTimeout(()=&gt;{\n                    try{\n                        let x = onFullfile(this.value)\n                        resolvePromise(pro, x, resolve, reject)\n                    }catch(e){\n                        reject(e)\n                    }\n                }, 0)\n\n\n            }\n            if(this.status == Reject){\n                setTimeout(()=&gt;{\n                    try{\n                        let x = onReject(this.reason)\n                        resolvePromise(pro, x, resolve, reject)\n                    }catch(e){\n                        reject(e)\n                    }\n                },0)\n\n            }\n            if(this.status == Pending){\n                this.onResolveCallBack.push( () =&gt;{\n                    //setTimeout(()=&gt;{\n                        try{\n                            let x = onFullfile(this.value)\n                            resolvePromise(pro, x, resolve, reject)\n                        }catch(e){\n                            reject(e)\n                        }\n                    //},0)\n\n                })\n                this.onRejectCallBack.push( () =&gt; {\n                    //setTimeout(()=&gt;{\n                        try{\n                            let x = onReject(this.reason)\n                            resolvePromise(pro, x, resolve, reject)\n                        }catch(e){\n                            reject(e)\n                        }\n                    //},0)\n\n                })\n            }\n        })\n        return pro\n    }\n}\n\nvar a = new NewPromise((resolve, reject)=&gt;{\n    setTimeout(()=&gt;{\n        console.log(\"start\")\n        resolve(\"\\nyes resolve!\")\n    }, 1000)\n\n})\n.then((value)=&gt;{\n    return new NewPromise((resolve, reject) =&gt; {\n        resolve(value)\n    })\n})\n.then( (value) =&gt; {\n    console.log(\"hello\", value, '\\n')\n}, (err) =&gt; {\n    console.log(\"no\", err, '\\n')\n})\n</code></pre>"},{"location":"Frontend/Worker/","title":"Worker","text":""},{"location":"Frontend/Worker/#js-worker","title":"js Worker\u7684\u4f7f\u7528\u5fc3\u5f97","text":"<ul> <li>\u53ef\u5229\u7528worker\u7ebf\u7a0b\u5904\u7406\u6570\u636e\uff0c\u907f\u514d\u963b\u585ejs\u7ebf\u7a0b\uff0c\u6570\u636e\u5904\u7406\u5b8c\u6bd5\u518d\u53d1\u7ed9\u4e3b\u7ebf\u7a0b\u4f7f\u7528</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>const decoder = new TextDecoder(); // \u4ecearrayBuffer\u89e3\u6790\u6587\u672c\u5b57\u7b26\nself.onmessage = (event) =&gt; {\n  const originData = event.data;\n  if (originData) {\n    try {\n        const str = decoder.decode(new Uint8Array(originData));\n        postMessage({ data: JSON.parse(str), type: DataType.JSON });\n\n        // \u89e3\u6790\u5b57\u7b26\u7684\u65b9\u6cd52, \u8fd9\u4e2a\u65b9\u5f0f\u53ef\u80fd\u4f1a\u56e0\u6570\u636e\u5927\u5c0f\u95ee\u9898Max callstack error\u7684\u95ee\u9898\n        // String.fromCharCode.apply(null, new Uint8Array(originData)),\n\n    } catch (e) {\n        console.error(e);\n    }\n  }\n};\n\n</code></pre> <p>1, worker\u5185\u4e0d\u8981\u95f4\u63a5\u5f15\u5165\u7b2c\u4e09\u65b9\u5e93\uff0c\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u6700\u597d\u76f4\u63a5\u5f15\u5165\uff0c\u6bd4\u5982\u89e3\u6790protobuf\u6570\u636e\u7c7b\u578b</p> <pre><code>import protobuf from \"protobufjs\";\nimport ProtobufSchema from \"./schema.json\";  // \u6570\u636e\u7ed3\u6784\u5b9a\u4e49\nconst ElementStr = \"protobuf.Element\"; // \u6570\u636e\u540d\u79f0\nconst root = protobuf.Root.fromJSON(ProtobufSchema);\nconst ProtobufElementSchema = root.lookupType(ElementStr);\nself.onmessage = (event) =&gt; {\n  const originData = event.data;\n  if (originData) {\n    try {\n      const uint8buffer = new Uint8Array(originData);\n      const res = ProtobufElementSchema.decode(uint8buffer);\n      postMessage({ data: res });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n};\n</code></pre> <p>2\uff0c\u5411worker\u4f20\u8f93\u6570\u636e\u65f6\uff0c\u53ef\u5229\u7528transferObject\u52a0\u5feb\u4f20\u8f93\u901f\u5ea6\uff0c\u4f46\u6570\u636e\u7c7b\u578b\u6709\u9650\u5236\uff0c\u4e00\u822c\u4e3aarrayBuffer\u3001\u56fe\u50cf\u6570\u636e\u7b49:</p> <pre><code>const uint8Array = new Uint8Array();\nconst obj = {\n    data: uint8Array,\n    type,\n}\nthis.worker.postMessage(obj, [uint8Array.buffer]);\n</code></pre> <p>arraybuffer\u4e00\u65e6\u8f6c\u79fb\uff0c\u540e\u9762\u4fbf\u65e0\u6cd5\u518d\u6b21\u8bbf\u95ee\u5176\u6570\u636e\uff0c\u5982length\u7b49</p> <p>3\uff0cjs\u7ebf\u7a0b\u63a5\u6536worker\u6570\u636e</p> <pre><code>// @ts-ignore\nimport dataWorker from \"./worker.js\";\n\nclass Demo {\n    constructor() {\n        this._worker = new dataWorker();\n        this._worker.onmessage = this.onMessage;\n    }\n\n    onMessage(event: MessageEvent) {\n        if (event.data.data) {\n        // todo\n        }\n    }\n}\n</code></pre>"},{"location":"Frontend/clip/","title":"\u524d\u7aef\u5b9e\u73b0\u590d\u5236","text":""},{"location":"Frontend/clip/#js","title":"js\u5b9e\u73b0\u81ea\u52a8\u590d\u5236","text":"<pre><code>let t = document.createElement('input')\nt.value=url\ndocument.body.appendChild(t)\nt.select()\ndocument.execCommand(\"Copy\");\nt.remove()\n</code></pre>"},{"location":"Frontend/defineProperty%E4%B8%8EProxy%E5%8C%BA%E5%88%AB/","title":"Proxy\u4e0eObject.defineProperty","text":"<ul> <li><code>Object.defineProperty</code> \u662f\u5bf9\u4e00\u4e2a\u5bf9\u8c61\u7684<code>\u5355\u4e2a\u5c5e\u6027</code>\u8fdb\u884c\u62e6\u622a\uff0c\u4e14\u6570\u7ec4\u65e0\u6cd5\u76d1\u542c</li> <li><code>Proxy</code> \u53ef\u5bf9<code>\u6574\u4e2a\u5bf9\u8c61</code>\u8fdb\u884c\u62e6\u622a\uff0c\u53ef\u5bf9\u6570\u7ec4\u8fdb\u884c\u76d1\u542c</li> </ul>"},{"location":"Frontend/diff/","title":"Diff\u7b97\u6cd5","text":"<ul> <li>\u5f53\u524d\u8282\u70b9\u6bd4\u8f83\uff1a <p>1, \u6bd4\u8f83VNode\u4e4bchildren\u6bd4\u8f83\uff1a   1\uff09\u90fd\u6709children\u4e14\u4e0d\u76f8\u7b49\u8fdb\u5165updatechildren\u65b9\u6cd5   2\uff09\u53ea\u6709\u65b0VNode.children -&gt; \u68c0\u67e5\u65b0VNode\u7684key\u662f\u5426\u6709\u91cd\u590d(\u6709\u5b9a\u4e49\u624d\u68c0\u67e5) -&gt; \u589e\u52a0VNodes   3\uff09\u53ea\u6709\u65e7VNode.children -&gt; \u79fb\u9664VNode.children   ...</p> </li> <li><code>updateChildren</code>\u65b9\u6cd5\uff1a</li> <li>\u6838\u5fc3\u903b\u8f91(<code>\u987a\u5e8f\u6bd4\u8f83</code>)\uff1a<ul> <li>1, \u6bd4\u8f83\u65e7\u9996\u3001\u65b0\u9996 -&gt; \u76f8\u540c\uff1f\u8fdb\u5165patchVnode\u65b9\u6cd5\uff0c\u65b0\u9996\u3001\u65e7\u9996\u5747\u540e\u79fb</li> <li>2\uff0c\u6bd4\u8f83\u65e7\u5c3e\u3001\u65b0\u5c3e\uff0c-&gt; \u76f8\u540c\uff1f\u8fdb\u5165patchVnode\u65b9\u6cd5\uff0c\u65b0\u5c3e\u3001\u65e7\u5c3e\u5747\u524d\u79fb</li> <li>3\uff0c\u65e7\u9996\u3001\u65b0\u5c3e\uff0c-&gt; \u76f8\u540c\uff1f\u65e7\u9996\u7684\u771f\u5b9edom\u79fb\u81f3\u672b\u5c3e\uff0c\u65e7\u9996\u540e\u79fb\uff0c\u65b0\u5c3e\u524d\u79fb</li> <li>4\uff0c\u65e7\u5c3e\u3001\u65b0\u9996\uff0c -&gt; \u76f8\u540c\uff1f\u65e7\u5c3e\u7684\u771f\u5b9edom\u79fb\u690d\u6700\u524d\uff0c\u65e7\u5c3e\u524d\u79fb\uff0c\u65b0\u9996\u540e\u79fb</li> <li>4\uff0c\u4ece\u65e7\u4e2d\u627e\u65b0\u9996\uff0c\u6ca1\u627e\u5230\uff1f\u521b\u5efa\u65b0dom\uff1a(\u76f8\u540c\u7c7b\u578b\uff1f\u79fb\u5230\u6700\u524d\uff1a\u521b\u5efa\u65b0dom)</li> <li>\u7ed3\u675f\u6761\u4ef6\uff1a<code>\u65e7\u9996\u7d22\u5f15</code>\u5927\u4e8e<code>\u65e7\u5c3e\u7d22\u5f15</code> ? \u6839\u636e<code>\u65b0\u9996\u7d22\u5f15</code>\u548c<code>\u65b0\u5c3e\u7d22\u5f15</code>\u63d2\u5165dom , <code>\u65b0\u9996\u7d22\u5f15</code>\u5927\u4e8e<code>\u65b0\u5c3e\u7d22\u5f15</code> ? \u6839\u636e<code>\u65e7\u9996\u7d22\u5f15</code>\u548c<code>\u65e7\u5c3e\u7d22\u5f15</code>\u79fb\u9664dom</li> </ul> </li> </ul> <pre><code>function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by &lt;transition-group&gt;\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh)\n    }\n\n    while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx]\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        oldStartVnode = oldCh[++oldStartIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n        oldStartVnode = oldCh[++oldStartIdx]\n        newEndVnode = newCh[--newEndIdx]\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newStartVnode = newCh[++newStartIdx]\n      } else {\n        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n        } else {\n          vnodeToMove = oldCh[idxInOld]\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n            oldCh[idxInOld] = undefined\n            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n          }\n        }\n        newStartVnode = newCh[++newStartIdx]\n      }\n    }\n    if (oldStartIdx &gt; oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n    } else if (newStartIdx &gt; newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n    }\n  }\n</code></pre>"},{"location":"Frontend/fetch/","title":"fetch","text":""},{"location":"Frontend/fetch/#fetch","title":"Fetch","text":"<p>\uff11\uff0c\u6307\u5b9a\u5b57\u8282\u8303\u56f4\u4e0b\u8f7d</p> <pre><code>  const options = {\n    headers: {\n      Range: `bytes=${start}-${end}`,\n    },\n  };\n  const res = await fetch(url, option);\n  const buffer = await res.arrayBuffer();\n</code></pre> <p>2, \u624b\u52a8\u5206\u5757\u4e0b\u8f7d</p> <pre><code>// \u5206\u5757\u4e0b\u8f7d\nlet chunks = (end - start) / ChunkSize;\nif (chunks &gt; 1) {\n    // \u5927\u4e8e1 \u5206\u5757\u4e0b\u8f7d\n    let newStart = start;\n    let currentEnd = end;\n\n    while (chunks &gt; 0) {\n        if (chunks &lt;= 1) {\n            if (end === contentLength) {\n                options.headers.Range = `bytes=${newStart}-`;\n            } else {\n                options.headers.Range = `bytes=${newStart}-${end}`;\n            }\n            currentEnd = end;\n        } else {\n            currentEnd = newStart + ChunkSize;\n            options.headers.Range = `bytes=${newStart}-${currentEnd}`;\n        }\n\n        const key = `${url}-${newStart}-${currentEnd}`;\n        // \u9632\u6b62\u91cd\u590d\u4e0b\u8f7d\u4e00\u4e2a\u8303\u56f4\u7684\u6570\u636e\n        if (!downloadMap[key]) {\n            downloadMap[key] = {\n                downloading: true,\n            };\n        } else {\n            if (downloadMap[key].downloading) {\n                return;\n            }\n        }\n\n        await fetch(url, options);\n\n        downloadMap[key].downloading = false;\n\n        chunks -= 1;\n        newStart += ChunkSize;\n    }\n  } else {\n    let currentEnd = end;\n\n    options.headers.Range = `bytes=${start}-${currentEnd}`;\n\n    const key = `${url}-${start}-${currentEnd}`;\n    if (!downloadMap[key]) {\n      downloadMap[key] = {\n        downloading: true,\n      };\n    } else {\n      if (downloadMap[key].downloading) {\n        return;\n      }\n    }\n\n    await fetch(url, options);\n    downloadMap[key].downloading = false;\n  }\n</code></pre> <p>3, \u83b7\u53d6\u6587\u4ef6\u5b57\u8282\u957f\u5ea6</p> <pre><code>const controller = new AbortController();\nconst signal = controller.sinal;\ntry {\n    const res = await retryFetch(bagUrl, {\n    method: \"GET\",\n    signal,\n    });\n    contentLength = res.headers.get(\"Content-Length\");\n    controller.abort();\n    LengthMap.set(bagUrl, contentLength);\n} catch (er) {\n    console.log(\"err\", er);\n}\n</code></pre> <p>4, \u5f00\u53d1\u6a21\u5f0f\u8bf7\u6c42\u672c\u5730\u6587\u4ef6</p> <p>\u672c\u5730\u6587\u4ef6\u9700\u8981\u653e\u5728public\u6587\u4ef6\u5939\u4e0b\uff0cfetch\u7684url\u4e3a\uff40http://localhost:3000/fileName\uff40;</p>"},{"location":"Frontend/get_url_para/","title":"\u6b63\u5219\u5339\u914durl\u53c2\u6570","text":""},{"location":"Frontend/get_url_para/#url","title":"\u6b63\u5219\u5339\u914durl\u53c2\u6570","text":"<pre><code>function getUrlPara(name) {\n    if (name) {\n        var pattern = \"(^|&amp;)\" + name + \"=([^&amp;]*)(&amp;|$)\"; //\u5b9a\u4e49\u6b63\u5219\n        var flags = \"i\"; // \u5927\u5c0f\u5199\u4e0d\u8bb0\n        var reg = new RegExp(pattern, flags); \n        var result = window.location.search.substr(1).match(reg); \n        if ( result ) return decodeURIComponent(result[2]);\n        return null; \n    }\n}\n</code></pre> <p><code>(^|&amp;)</code> \u4ece\u5934\u5f00\u59cb\u5339\u914d\u6216\u5339\u914d&amp;\uff0c<code>=([^&amp;]*)</code> \u5339\u914d\u540e\u9762\u96f6\u4e2a\u6216\u591a\u4e2a\u4e0d\u662f <code>&amp;</code> \u7684\u5b57\u7b26\uff0c<code>(&amp;|$)</code> \u5339\u914d\u6700\u540e\u4e00\u4e2a <code>&amp;</code> \u6216\u7ed3\u5c3e.</p> <p><code>window.location.search</code> : \u53d6<code>\uff1f</code>\u540e\u9762\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u62ec<code>\uff1f</code> - \u793a\u4f8b\uff1a   - <code>www.baidu.com?name=test&amp;id=123456</code>, <code>getUrlPara(\"name')</code>\u5e94\u4e3a\u8fd4\u56de<code>test</code>.</p>"},{"location":"Frontend/get_url_para/#urlsearchparams","title":"\u4f7f\u7528\u539f\u751f\u7684URLSearchParams","text":"<pre><code>const  search = new URLSearchParams(window.location.search);\nconst value = search.get('key');\n</code></pre>"},{"location":"Frontend/grid-layout/","title":"\u7f51\u683c\u5e03\u5c40\u5207\u5206","text":""},{"location":"Frontend/grid-layout/#react-grid-layout","title":"react-grid-layout","text":"<p>\u7f51\u683c\u5e03\u5c40\uff0c\u901a\u8fc7\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f51\u683c\u5e03\u5c40\uff0c\u793a\u4f8b\u4e3a\u7531\u4e00\u4e2a\u57fa\u7840\u5e03\u5c40\u6587\u4ef6\u521b\u5efa\u5355\u9762\u677f\uff0c\u53ef\u652f\u6301\u5411\u53f3/\u5411\u4e0b\u5207\u5206\uff0c\u5207\u5206\u65b9\u5f0f\u4e3a\u4e00\u5207\u4e3a2\uff0c\u540c\u65f6\u652f\u6301\u5220\u9664\u4efb\u4e00\u9762\u677f\u540e\u66f4\u65b0\u76f8\u5173\u8054\u5e03\u5c40\u7684\u80fd\u529b\uff0c\u5e03\u5c40\u4e4b\u95f4\u5b58\u5728\u5207\u5206\u7684\u7236\u5b50\u5144\u5f1f\u5173\u7cfb,\u7528\u793a\u4f8b\u4e2d\u7684Layout\u8bb0\u5f55\u5173\u8054\u5173\u7cfb</p> <pre><code>import { observer } from \"mobx-react-lite\";\nimport GridLayout from \"react-grid-layout\";\nimport { toJS } from \"mobx\";\nimport { useResizeDetector } from \"react-resize-detector\";\n\ninterface IProps {\n  child: any;\n  config: IViewConifig[];\n}\nconst SplitLayout = observer((props: IProps) =&gt; {\n  const [rowHeight, setRowHeight] = useState&lt;number&gt;(0);\n\n  useEffect(() =&gt; {\n    dataStore.setConfig(props.config);\n  }, []);\n\n  const {\n    width: containerWidth,\n    height: containerHeight,\n    ref,\n  } = useResizeDetector({\n    refreshMode: \"debounce\",\n    refreshRate: 200,\n  });\n\n  useEffect(() =&gt; {\n    if (containerHeight) {\n      // rowHeight\u9ed8\u8ba4\u8bbe\u7f6e50\u884c\uff0c\u5373\u6ee1\u5c4f\u9ad8\u5ea650\u884c, \u518d\u901a\u8fc7\u5f53\u524d\u5c4f\u9ad8\u6216\u5bb9\u5668\u9ad8\u8ba1\u7b97\u5e03\u5c40\u7684\u884c\u9ad8rowHeight\n      const height = Number(containerHeight / 50);\n      setRowHeight(height);\n    }\n  }, [containerHeight]);\n\n  useEffect(() =&gt; {\n    dataStore.mockData();\n  }, []);\n\n  const onAdd = (id: string, type: IConfigType, direction: ISplitDirection) =&gt; {\n    return store.splitPanel(id, type, direction);\n  };\n\n  const onDelete = (id: string, type: IConfigType) =&gt; {\n    return store.deletePanel(id, type);\n  };\n\n  // cols\u8bbe\u7f6e72\u5217\uff0c\u537372\u4e3a\u6ee1\u5c4f\u5bbd\u5ea6\n  return (\n    &lt;div className={styles[\"container\"]} ref={ref}&gt;\n      &lt;div&gt;\n        {containerWidth &amp;&amp; (\n          &lt;GridLayout\n            width={containerWidth}\n            rowHeight={rowHeight}\n            autoSize={false}\n            cols={72}\u3000// \u8bbe\u7f6e\u4e3a72\u5217, \u5373\u6ee1\u5bbd\u4e3a72\u5217\u7f51\u683c\n            margin={[0, 0]}\n            isDraggable={false}\n            isResizable={false}\n            layout={toJS(store.viewConfig)}\n          &gt;\n            {store.viewConfig.map((config) =&gt; {\n              return (\n                &lt;div key={config.i}&gt;\n                  {\n                    &lt;props.child\n                      id={config.i}\n                      onAdd={onAdd}\n                      onDelete={onDelete}\n                    /&gt;\n                  }\n                &lt;/div&gt;\n              );\n            })}\n          &lt;/GridLayout&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n});\nexport default SplitLayout;\n\n</code></pre>"},{"location":"Frontend/grid-layout/#storeconfig","title":"\u5207\u5206store\u5904\u7406config","text":"<pre><code>\nclass SplitStore {\n  /**\u63a7\u5236\u89c6\u56fe\u7684\u914d\u7f6e */\n  viewConfig = parseConfig(defaultTopicConfig);\n  /**\n   * \u5207\u5206\u7a97\u53e3\n   * @param direction\n   */\n  splitPanel(id: string, type: IConfigType, direction: ISplitDirection) {\n    const config = this.viewConfig.find((c) =&gt; c.i === id);\n    if (!config) return;\n    const newConfig = config.split(direction);\n    this.viewConfig.push(newConfig);\n    Manager.getInstance().addLayout(id, newConfig.i, type, direction);\n    return newConfig.i;\n  }\n\n  /**\n   * \u5220\u9664\u67d0\u4e2apanel\n   * @param id\n   * @param type topic / chart\n   * @returns\n   */\n  deletePanel = (id: string, type: IConfigType) =&gt; {\n    if (this.viewConfig.length === 1) {\n      return;\n    }\n    const config = this.viewConfig.find((c) =&gt; c.i === id);\n    if (!config) return;\n    const index = this.viewConfig.indexOf(config);\n    if (index !== -1) {\n      this.viewConfig.splice(index, 1);\n      const newLayouts = Manager.getInstance().delete(config.i);\n      Manager.getInstance().updateConfigByLayout(this.viewConfig);\n      return true;\n    }\n  };\n\n  setConfig(viewConfig: IViewConifig[]) {\n    this.viewConfig = parseConfig(viewConfig);\n    Manager.getInstance().init(viewConfig[0].i);\n  }\n\n  constructor() {\n    makeObservable(this, {\n      viewConfig: observable,\n    });\n  }\n}\nexport const splitStore = new SplitStore();\n\nexport function parseConfig(config: IViewConifig[]) {\n  return config.map((c) =&gt; new Config().parse(c));\n}\n</code></pre>"},{"location":"Frontend/grid-layout/#config","title":"config\u7c7b","text":"<pre><code>import { v4 as uuidv4 } from \"uuid\";\n\nexport class Config {\n  public i = \"\";\n\n  public x = 0;\n\n  public y = 0;\n\n  public w = 0;\n\n  public h = 0;\n\n  public maxH = 0;\n\n  public maxW = 0;\n\n  public minH = 0;\n\n  public minW = 0;\n\n  constructor() {}\n\n  parse(data: IViewConifig) {\n    this.i = data.i;\n    this.x = data.x;\n    this.y = data.y;\n    this.w = data.w;\n    this.h = data.h;\n    this.maxH = data.maxH;\n    this.minH = data.minH;\n    this.maxW = data.maxW;\n    this.minW = data.minW;\n    return this;\n  }\n\n  split(direction: \"column\" | \"row\") {\n    const newConfig = {\n      i: uuidv4(),\n      x: direction === \"column\" ? this.x : this.x + this.w / 2,\n      y: direction === \"column\" ? this.y + this.h / 2 : this.y,\n      w: direction === \"column\" ? this.w : this.w / 2,\n      h: direction === \"column\" ? this.h / 2 : this.h,\n      maxH: this.maxH,\n      maxW: this.maxW,\n      minW: this.minW,\n      minH: this.minH,\n    };\n    if (direction === \"column\") {\n      this.h /= 2;\n    } else {\n      this.w /= 2;\n    }\n    return new Config().parse(newConfig);\n  }\n}\n</code></pre>"},{"location":"Frontend/grid-layout/#managerlayout","title":"manager\u8d1f\u8d23\u7ba1\u7406\u5f53\u524dlayout\uff0c\u5207\u5206\u6838\u5fc3","text":"<pre><code>\nfunction getConfigById(configs: IViewConifig[], id: string) {\n  const config = configs.find((c) =&gt; c.i === id);\n  return config;\n}\n\nexport class Manager {\n  layout: Layout | string = \"\";\n\n  static _instance: Manager | undefined;\n\n  static getInstance() {\n    if (!Manager._instance) {\n      Manager._instance = new Manager();\n    }\n    return Manager._instance;\n  }\n\n  init(id: string) {\n    this.layout = id;\n  }\n\n  /**\n   * \u5220\u9664\u67d0\u4e2a\u5e03\u5c40\n   * @param id \u5e03\u5c40id\uff0c\u7b49\u540c\u4e8econfig.i\n   * @returns\n   */\n  delete(id: string) {\n    // \u672a\u5207\u5206\n    if (typeof this.layout === \"string\") return;\n    console.log(\"delete id\", id);\n\n    // \u53ea\u5207\u5206\u4e00\u6b21\n    if (\n      typeof this.layout.first === \"string\" &amp;&amp;\n      typeof this.layout.second === \"string\"\n    ) {\n      if (this.layout.first === id) {\n        console.log(\"delete first node\", this.layout.first);\n        this.layout = this.layout.second;\n      } else if (this.layout.second === id) {\n        console.log(\"delete second node\", this.layout.second);\n        this.layout = this.layout.first;\n      }\n      return this.layout;\n    }\n\n    const deepSeek = (\n      layout: Layout | string,\n      parent: Layout,\n      pparent?: Layout,\n    ) =&gt; {\n      if (typeof layout === \"string\") {\n        if (layout === id) {\n          // \u5220\u6389\u7684\u662ffirst\u8282\u70b9\n          if (parent.first === layout) {\n            // second\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5c06\u53f6\u5b50\u8282\u70b9\u94fe\u63a5\u5230\u7236\u7ea7\u7684\u7236\u7ea7\n            if (typeof parent.second === \"string\") {\n              if (pparent?.first === parent) {\n                pparent.first = parent.second;\n              } else if (pparent?.second === parent) {\n                pparent.second = parent.second;\n              }\n            } else {\n              // second\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5c06\u8282\u70b9\u7684first/second\u8282\u70b9\u76f4\u63a5\u94fe\u63a5\u5230\u7236\u7ea7\u7684first/second\n              parent.direction = parent.second.direction;\n              parent.first = parent.second.first;\n              parent.second = parent.second.second;\n            }\n          } else if (parent.second === layout) {\n            // \u5220\u6389\u7684\u662fsecond\u8282\u70b9\n\n            // \u7236\u7ea7\u662f\u7236\u7236\u7ea7\u7684second\u8282\u70b9\uff0c\u5c06\u5269\u4f59\u7684first\u94fe\u63a5\u5230\u7236\u7236\u7ea7\u7684second\u8282\u70b9\uff0c\u5426\u5219\u94fe\u63a5\u5230\u7236\u7236\u7ea7\u7684first\u8282\u70b9\n            if (pparent?.second === parent) {\n              pparent.second = parent.first;\n            } else if (pparent?.first === parent) {\n              pparent.first = parent.first;\n            } else if (typeof parent.first === \"object\") {\n              const first = parent.first;\n              parent.direction = first.direction;\n              parent.first = first.first;\n              parent.second = first.second;\n            }\n          }\n          return true;\n        }\n        return;\n      }\n      if (deepSeek(layout.first, layout, parent)) return;\n      if (deepSeek(layout.second, layout, parent)) return;\n    };\n    deepSeek(this.layout.first, this.layout);\n    deepSeek(this.layout.second, this.layout);\n    return this.layout;\n  }\n\n  /**\n   * \u589e\u52a0\u4e00\u4e2a\u5e03\u5c40\n   * @param oldId \u5207\u5206\u7684\u6765\u6e90\n   * @param id \u5207\u5206\u51fa\u7684id\n   * @param type topic | chart\n   * @param direction row | column\n   * @returns\n   */\n  addLayout(\n    oldId: string,\n    id: string,\n    type: string,\n    direction: ISplitDirection,\n  ) {\n    const newLayout = new Layout();\n    newLayout.direction = direction;\n\n    if (typeof this.layout === \"string\") {\n      newLayout.first = this.layout;\n      newLayout.second = id;\n      this.layout = newLayout;\n      return;\n    }\n    const deepSeek = (layout: Layout) =&gt; {\n      if (layout.first === oldId) {\n        // \u5207\u5206\u7684\u662ffirst\u8282\u70b9\n        newLayout.first = oldId;\n        newLayout.second = id;\n        layout.first = newLayout;\n        return true;\n      } else if (layout.second === oldId) {\n        // \u5207\u5206\u7684\u662fsecond\u8282\u70b9\n        newLayout.first = oldId;\n        newLayout.second = id;\n        layout.second = newLayout;\n        return true;\n      }\n      if (typeof layout.first !== \"string\" &amp;&amp; deepSeek(layout.first))\n        return true;\n\n      if (typeof layout.second !== \"string\" &amp;&amp; deepSeek(layout.second))\n        return true;\n    };\n    deepSeek(this.layout);\n  }\n\n  /**\n   * \u6839\u636e layout \u66f4\u65b0 viewConfig\n   */\n  updateConfigByLayout(viewConfig: IViewConifig[]) {\n    if (typeof this.layout === \"string\") {\n      const config = getConfigById(viewConfig, this.layout);\n      if (!config) {\n        return;\n      }\n      config.w = FULL_WIDTH;\n      config.h = FULL_HEIGHT;\n      config.x = 0;\n      config.y = 0;\n      return;\n    }\n    const deepUpdate = (\n      layout: Layout | string,\n      direction: ISplitDirection,\n      w: number,\n      h: number,\n      x: number,\n      y: number,\n    ) =&gt; {\n      if (typeof layout === \"string\") {\n        const config = getConfigById(viewConfig, layout);\n        if (!config) {\n          console.log(\"----not found\", layout);\n          return;\n        }\n        console.log(\"target\", JSON.parse(JSON.stringify(config)));\n        if (direction === \"row\") {\n          config.w = w;\n          config.x = x;\n          config.h = h;\n          config.y = y;\n        } else {\n          config.w = w;\n          config.x = x;\n          config.h = h;\n          config.y = y;\n        }\n        return;\n      }\n      if (layout.direction === \"column\") {\n        deepUpdate(layout.first, layout.direction, w, h / 2, x, y);\n        deepUpdate(layout.second, layout.direction, w, h / 2, x, y + h / 2);\n      } else {\n        deepUpdate(layout.first, layout.direction, w / 2, h, x, y);\n        deepUpdate(layout.second, layout.direction, w / 2, h, x + w / 2, y);\n      }\n    };\n    if (this.layout.direction === \"column\") {\n      deepUpdate(\n        this.layout.first,\n        this.layout.direction,\n        FULL_WIDTH,\n        FULL_HEIGHT / 2,\n        0,\n        0,\n      );\n      deepUpdate(\n        this.layout.second,\n        this.layout.direction,\n        FULL_WIDTH,\n        FULL_HEIGHT / 2,\n        0,\n        FULL_HEIGHT / 2,\n      );\n    } else if (this.layout.direction === \"row\") {\n      deepUpdate(\n        this.layout.first,\n        this.layout.direction,\n        FULL_WIDTH / 2,\n        FULL_HEIGHT,\n        0,\n        0,\n      );\n      deepUpdate(\n        this.layout.second,\n        this.layout.direction,\n        FULL_WIDTH / 2,\n        FULL_HEIGHT,\n        FULL_WIDTH / 2,\n        0,\n      );\n    }\n    return viewConfig;\n  }\n}\n</code></pre>"},{"location":"Frontend/grid-layout/#layout","title":"Layout","text":"<pre><code>export class Layout {\n  public direction: ISplitDirection = \"row\";\n\n  public first: string | Layout = \"\"; // type:id\n\n  public second: string | Layout = \"\"; // type:id\n}\n</code></pre>"},{"location":"Frontend/grid-layout/#_1","title":"\u57fa\u7840\u5e03\u5c40\u914d\u7f6e","text":"<pre><code>export const defaultConfig = [\n  {\n    i: \"sfasdfasdfasdf\",\n    maxH: 50, // \u4e0e\u5e03\u5c40\u4e2d\u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\n    maxW: 72, // \u4e0e\u5e03\u5c40\u4e2d\u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\n    minH: 1,\n    minW: 1,\n    h: 50,\n    w: 72,\n    x: 0,\n    y: 0,\n  },\n];\n</code></pre>"},{"location":"Frontend/grid-layout/#_2","title":"\u4f7f\u7528\u65b9\u5f0f","text":"<pre><code>const Panel = observer(() =&gt; {\n  return (\n    &lt;div className={styles[\"container\"]}&gt;\n      &lt;SplitLayout child={TPanel} config={defaultConfig} /&gt;\n    &lt;/div&gt;\n  );\n});\n\n// \u5728\u9700\u8981\u5207\u5206\u7684\u5177\u4f53\u7ec4\u4ef6TPanel\u4e2d\uff0c\u8c03\u7528\u7531SplitLayout\u4f20\u5165\u7684onAdd\u548conDelete\u5373\u53ef:\n\n  const splitPanel = (direction: ISplitDirection) =&gt; {\n    const newId = props.onAdd(props.id, direction);\n    if (newId) {\n      // \u589e\u52a0\u6210\u529f\u7684\u540e\u5904\u7406\n    }\n  };\n\n  const deletePanel = () =&gt; {\n    const didDelete = props.onDelete(props.id);\n    if(didDelete) {\n        // \u5220\u9664\u6210\u529f\u7684\u540e\u5904\u7406\n    }\n  };\n</code></pre>"},{"location":"Frontend/iterable/","title":"iterable\u53ef\u8fed\u4ee3\u5bf9\u8c61","text":""},{"location":"Frontend/iterable/#iterable","title":"iterable\u53ef\u8fed\u4ee3\u5bf9\u8c61","text":"<ul> <li>\u53ef\u8fed\u4ee3\uff08Iterable\uff09 \u5bf9\u8c61\u662f\u6570\u7ec4\u7684\u6cdb\u5316\u3002\u8fd9\u4e2a\u6982\u5ff5\u662f\u8bf4\u4efb\u4f55\u5bf9\u8c61\u90fd\u53ef\u4ee5\u88ab\u5b9a\u5236\u4e3a\u53ef\u5728 for..of \u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u5bf9\u8c61\u3002 \u6570\u7ec4\u662f\u53ef\u8fed\u4ee3\u7684\u3002\u4f46\u4e0d\u4ec5\u4ec5\u662f\u6570\u7ec4\u3002\u5f88\u591a\u5176\u4ed6\u5185\u5efa\u5bf9\u8c61\u4e5f\u90fd\u662f\u53ef\u8fed\u4ee3\u7684\u3002\u4f8b\u5982\u5b57\u7b26\u4e32\u4e5f\u662f\u53ef\u8fed\u4ee3\u7684\u3002</li> </ul>"},{"location":"Frontend/iterable/#_1","title":"\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61","text":"<ul> <li> <p>\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61\u9700\u8981\u4e24\u4e2a\u65b9\u6cd5\uff1aSymbol.iterator()\u548cnext()\u3002</p> </li> <li> <p>\u540c\u6b65\u751f\u6210\u5668</p> </li> </ul> <pre><code>const myIter = {\n    [Symbol.iterator]: function() {\n        let count = 0;\n        return {\n            async next() {\n                if(count &lt; 5) {\n                    return {value: count++, done: false};\n                } else {\n                    return {done: true};\n                }\n            }\n        }\n    }\n}\n\nfor(const value of myIter) {\n    console.log(aa) // \u8f93\u51fa 0, 1, 2, 3, 4\n}\n</code></pre> <ul> <li>\u5f02\u6b65\u751f\u6210\u5668</li> </ul> <pre><code>const myIter = {\n    [Symbol.iterator]: function() {\n        let count = 0;\n        return {\n            async next() {\n                if(count &lt; 5) {\n                    return new Promise((resolve, reject) =&gt; {\n                        setTimeout(() =&gt; {\n                            resolve({value: count++, done: false})\n                        }, 1000)\n                    })\n                } else {\n                    return {done: true}\n                }\n            }\n        }\n    }\n}\nconst n = myIter[Symbol.iterator]();\n\nasync function run() {\n    for(;;) {\n        const aa = await n.next();\n        if(aa.done) break;\n        console.log(aa.value) // \u95f4\u96941s\u8f93\u51fa0,1,2,3,4\n    }\n}\nrun();\n</code></pre> <ul> <li>yield</li> </ul> <pre><code>const myIter = {\n    *[Symbol.iterator]() {\n        let count = 0;\n        while (count &lt; 10) {\n            yield count++;\n        }\n    }\n}\nconst n = myIter[Symbol.iterator]();\nfor(;;) {\n    const a = n.next();\n    if(a.done) break;\n    console.log(a.value) // \u8f93\u51fa0,1,2,3,4...9\n}\n</code></pre>"},{"location":"Frontend/line/","title":"Shader-Line","text":""},{"location":"Frontend/line/#_1","title":"\u521b\u5efa\u7ebf\u6761","text":""},{"location":"Frontend/line/#mesh","title":"Mesh","text":"<pre><code>/**\n * \u7ed8\u5236\u5b9e\u7ebf\u3001\u865a\u7ebf\u3001\u53cc\u7ebf\uff0c\u591a\u6bb5\u7ebf\u6bb5\u7ec4\u6210\u7684\u4e00\u7ec4\u7ebf\uff0c\u4ea4\u63a5\u5904\u7528index\u5904\u7406\n */\nimport inherits from \"inherits\";\nimport getNormals from \"polyline-normals\";\nconst VERTS_PER_POINT = 4;\n\nexport default function Line2D(THREE) {\n  function LineMesh(path, lengthArray, opt) {\n    if (!(this instanceof LineMesh)) {\n      return new LineMesh(path, lengthArray, opt);\n    }\n    THREE.BufferGeometry.call(this);\n\n    opt = opt || {};\n\n    this.setAttribute(\"position\", new THREE.BufferAttribute(undefined, 3));\n    this.setAttribute(\"lineNormal\", new THREE.BufferAttribute(undefined, 2));\n    this.setAttribute(\"lineMiter\", new THREE.BufferAttribute(undefined, 1));\n\n    if (opt.ratio) {\n      this.setAttribute(\"lineRatio\", new THREE.BufferAttribute(undefined, 1));\n    }\n    if (opt.distances) {\n      this.setAttribute(\n        \"lineDistance\",\n        new THREE.BufferAttribute(undefined, 1),\n      );\n    }\n    if (typeof this.setIndex === \"function\") {\n      this.setIndex(new THREE.BufferAttribute(undefined, 1));\n    } else {\n      this.setAttribute(\"index\", new THREE.BufferAttribute(undefined, 1));\n    }\n    this.update(path, lengthArray);\n  }\n\n  inherits(LineMesh, THREE.BufferGeometry);\n\n  function getPtDist(pt1, pt2) {\n    return Math.sqrt(\n      Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2),\n    );\n  }\n\n  LineMesh.prototype.update = function (path, lengthArray) {\n    path = path || [];\n\n    let attrPosition = this.getAttribute(\"position\");\n    let attrNormal = this.getAttribute(\"lineNormal\");\n    let attrMiter = this.getAttribute(\"lineMiter\");\n    let attrDistance = this.getAttribute(\"lineDistance\");\n    let attrIndex =\n      typeof this.getIndex === \"function\"\n        ? this.getIndex()\n        : this.getAttribute(\"index\");\n\n    let indexCount = Math.max(\n      0,\n      (path.length - 1) * 6 - (lengthArray.length - 1) * 6,\n    );\n    let count = path.length * VERTS_PER_POINT;\n    if (\n      !attrPosition.array ||\n      path.length !== attrPosition.array.length / 3 / VERTS_PER_POINT\n    ) {\n      attrPosition.array = new Float32Array(count * 3);\n      attrNormal.array = new Float32Array(count * 2);\n      attrMiter.array = new Float32Array(count);\n      attrIndex.array = new Uint16Array(indexCount);\n\n      if (attrDistance) {\n        attrDistance.array = new Float32Array(count);\n      }\n    }\n\n    if (undefined !== attrPosition.count) {\n      attrPosition.count = count;\n    }\n    attrPosition.needsUpdate = true;\n\n    if (undefined !== attrNormal.count) {\n      attrNormal.count = count;\n    }\n    attrNormal.needsUpdate = true;\n\n    if (undefined !== attrMiter.count) {\n      attrMiter.count = count;\n    }\n    attrMiter.needsUpdate = true;\n\n    if (undefined !== attrIndex.count) {\n      attrIndex.count = indexCount;\n    }\n    attrIndex.needsUpdate = true;\n\n    if (attrDistance) {\n      if (undefined !== attrDistance.count) {\n        attrDistance.count = count;\n      }\n      attrDistance.needsUpdate = true;\n    }\n\n    let index = 0;\n    let c = 0;\n    let dIndex = 0;\n    let indexArray = attrIndex.array;\n    let cur_length = 0;\n    let lengthIndex = 0;\n    path.forEach(function (point, pointIndex, list) {\n      let i = index;\n      if (lengthArray.indexOf(i / 4 + 1) === -1) {\n        indexArray[c++] = i + 2;\n        indexArray[c++] = i + 3;\n        indexArray[c++] = i + 4;\n        indexArray[c++] = i + 4;\n        indexArray[c++] = i + 3;\n        indexArray[c++] = i + 5;\n      }\n\n      attrPosition.setXYZ(index++, point[0], point[1], 0);\n      attrPosition.setXYZ(index++, point[0], point[1], 0);\n      attrPosition.setXYZ(index++, point[0], point[1], 0);\n      attrPosition.setXYZ(index++, point[0], point[1], 0);\n\n      if (attrDistance) {\n        let d = 0;\n        if (pointIndex - lengthIndex &gt; 0) {\n          d = getPtDist(point, list[pointIndex - 1]);\n        }\n        cur_length += d;\n        attrDistance.setX(dIndex++, cur_length);\n        attrDistance.setX(dIndex++, cur_length);\n        attrDistance.setX(dIndex++, cur_length);\n        attrDistance.setX(dIndex++, cur_length);\n        if (lengthArray.indexOf(pointIndex + 1) !== -1) {\n          cur_length = 0;\n          lengthIndex = pointIndex + 1;\n        }\n      }\n    });\n\n    let nIndex = 0;\n    let mIndex = 0;\n\n    const newNormals = [];\n    lengthArray.forEach((len, index) =&gt; {\n      const start = index === 0 ? 0 : lengthArray[index - 1];\n      const tmpNormals = getNormals(path.slice(start, len), false); // false means not closed\n      newNormals.push(...tmpNormals);\n    });\n    newNormals.forEach(function (n, index) {\n      let norm_cur = n[0];\n      let norm_last = norm_cur;\n      if (index &gt; 0) {\n        norm_last = newNormals[index - 1][0];\n      }\n      let miter = 1;\n      attrNormal.setXY(nIndex++, norm_last[0], norm_last[1]);\n      attrNormal.setXY(nIndex++, norm_last[0], norm_last[1]);\n      attrNormal.setXY(nIndex++, norm_cur[0], norm_cur[1]);\n      attrNormal.setXY(nIndex++, norm_cur[0], norm_cur[1]);\n\n      attrMiter.setX(mIndex++, -miter);\n      attrMiter.setX(mIndex++, miter);\n      attrMiter.setX(mIndex++, -miter);\n      attrMiter.setX(mIndex++, miter);\n    });\n  };\n\n  return LineMesh;\n}\n\n</code></pre> <pre><code>/**\n * \u989c\u8272\u6e10\u53d8\u7ebf\uff0c\u591a\u6bb5\u7ebf\u6bb5\u7ec4\u6210\u7684\u4e00\u7ec4\u7ebf\uff0c\u4ea4\u63a5\u5904\u7528index\u5904\u7406\n */\nimport inherits from 'inherits';\nimport getNormals from 'polyline-normals';\nconst VERTS_PER_POINT = 2;\n\nexport default function VertexColorLine2D (THREE) {\n  function LineMesh (path, lengthArray, opt) {\n    if (!(this instanceof LineMesh)) {\n      return new LineMesh(path, lengthArray, opt);\n    }\n    THREE.BufferGeometry.call(this);\n\n    if (Array.isArray(path)) {\n      opt = opt || {};\n    } else if (typeof path === 'object') {\n      opt = path;\n      path = [];\n    }\n\n    opt = opt || {};\n\n    this.setAttribute('position', new THREE.BufferAttribute(undefined, 3));\n    this.setAttribute('lineNormal', new THREE.BufferAttribute(undefined, 2));\n    this.setAttribute('customColor', new THREE.BufferAttribute(undefined, 4));\n\n    if (typeof this.setIndex === 'function') {\n      this.setIndex(new THREE.BufferAttribute(undefined, 1));\n    } else {\n      this.setAttribute('index', new THREE.BufferAttribute(undefined, 1));\n    }\n    this.update(path, lengthArray);\n  }\n\n  inherits(LineMesh, THREE.BufferGeometry);\n\n  LineMesh.prototype.update = function (path, lengthArray) {\n    path = path || [];\n    let attrPosition = this.getAttribute('position');\n    let attrNormal = this.getAttribute('lineNormal');\n    let attrCustomColor = this.getAttribute('customColor');\n    let attrIndex = typeof this.getIndex === 'function' ? this.getIndex() : this.getAttribute('index');\n\n     // \u53bb\u9664\u4ea4\u63a5\u70b9\u5904\u7684\u4e09\u89d2\u5f62\u6570\u91cf\n    let indexCount = Math.max(0, (path.length - 1 ) * 6 - (lengthArray.length - 1) * 6);\n    let count = path.length * VERTS_PER_POINT;\n    if (!attrPosition.array ||\n      (path.length !== attrPosition.array.length / 3 / VERTS_PER_POINT)) {\n      attrPosition.array = new Float32Array(count * 3);\n      attrNormal.array = new Float32Array(count * 2);\n      attrIndex.array = new Uint16Array(indexCount);\n      attrCustomColor.array = new Float32Array(count * 4);\n    }\n\n    if (undefined !== attrPosition.count) {\n      attrPosition.count = count;\n    }\n    attrPosition.needsUpdate = true;\n\n    if (undefined !== attrCustomColor.count) {\n      attrCustomColor.count = count;\n    }\n    attrCustomColor.count = count;\n\n    if (undefined !== attrNormal.count) {\n      attrNormal.count = count;\n    }\n    attrNormal.needsUpdate = true;\n\n    if (undefined !== attrIndex.count) {\n      attrIndex.count = indexCount;\n    }\n    attrIndex.needsUpdate = true;\n\n    let index = 0;\n    let c = 0;\n    let indexArray = attrIndex.array;\n\n    path.forEach(function (point) {\n      let i = index;\n      // ignore joint point\n      if(lengthArray.indexOf(i / 2 + 1)  === -1) {\n        indexArray[c++] = i;\n        indexArray[c++] = i + 1;\n        indexArray[c++] = i + 2;\n        indexArray[c++] = i + 2;\n        indexArray[c++] = i + 1;\n        indexArray[c++] = i + 3; \n      }\n      attrCustomColor.setXYZW(index, point[2], point[3], point[4], point[5]);\n      attrPosition.setXYZ(index++, point[0], point[1], 0);\n      attrCustomColor.setXYZW(index, point[2], point[3], point[4], point[5]);\n      attrPosition.setXYZ(index++, point[0], point[1], 0);\n    });\n\n    let nIndex = 0;\n    const newNormals = [];\n    lengthArray.forEach((len, index) =&gt; {\n      const start = index === 0 ? 0 : lengthArray[index - 1];\n      const tmpNormals = getNormals(path.slice(start, len), false); // false means not closed\n      newNormals.push(...tmpNormals); \n    });\n    newNormals.forEach(function (n) {\n      let norm = n[0];\n      attrNormal.setXY(nIndex++, -norm[0], -norm[1]);\n      attrNormal.setXY(nIndex++, norm[0], norm[1]);\n    });\n  };\n\n  return LineMesh;\n}\n</code></pre> <pre><code>// \u4e0a\u9762function\u4e2d\u7684lengthArray\u7684\u83b7\u53d6\u65b9\u6cd5\nfunction getArrayLength(array: number[][][]) {\n  const tLengthArray: number[] = [];\n  array.forEach((data) =&gt; tLengthArray.push(data.length));\n  const lengthArray: number[] = [];\n  tLengthArray.reduce((before, after) =&gt; {\n    before += after;\n    lengthArray.push(before);\n    return before;\n  }, 0);\n\n  return lengthArray;\n}\n</code></pre>"},{"location":"Frontend/line/#material","title":"Material","text":"<ul> <li>shader</li> </ul> <pre><code>// \u5355\u8272\u5b9e\u7ebf\nfunction SolidShader(option: any = {}) {\n  const material = new THREE.ShaderMaterial({\n    uniforms: THREE.UniformsUtils.clone({\n      thickness: { value: asNumber(option.thickness, 0.1) },\n      opacity: { value: asNumber(option.opacity, 1.0) },\n      diffuse: { value: new THREE.Color(option.diffuse) },\n    }),\n    vertexShader: `\n      uniform float thickness;\n      attribute float lineMiter;\n      attribute vec2 lineNormal;\n\n      void main() { \n        vec3 pointPos = position.xyz + vec3(lineNormal * thickness / 2.0 * lineMiter, 0.0);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pointPos, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform vec3 diffuse;\n      uniform float opacity;\n      void main() {\n        gl_FragColor = vec4(diffuse, opacity);\n      }\n    `,\n  });\n  material.side = THREE.BackSide;\n  material.transparent = true;\n  return material;\n}\nconst mat = SolidShader({\n    diffuse: defaultColor.clone().getHex(),\n    thickness: width,\n    opacity: 0.6,\n});\n\n\n// \u5355\u8272\u865a\u7ebf\nfunction DashedShader(option: any = {}) {\n  const material = new THREE.ShaderMaterial({\n    uniforms: THREE.UniformsUtils.clone({\n      thickness: { value: asNumber(option.thickness, 0.1) },\n      opacity: { value: asNumber(option.opacity, 1.0) },\n      diffuse: { value: new THREE.Color(option.diffuse) },\n      dashSteps: { value: asNumber(option.dashSteps, 4) },\n      dashDistance: { value: asNumber(option.dashDistance, 2) },\n    }),\n    vertexShader: `\n      uniform float thickness;\n      attribute float lineMiter;\n      attribute vec2 lineNormal;\n      attribute float lineDistance;\n      varying float lineU;\n\n      void main() { \n        lineU = lineDistance;\n        vec3 pointPos = position.xyz + vec3(lineNormal * thickness / 2.0 * lineMiter, 0.0);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pointPos, 1.0);\n      }\n    `,\n    fragmentShader: `\n      varying float lineU;\n\n      uniform vec3 diffuse;\n      uniform float opacity;\n      uniform float dashSteps;\n      uniform float dashSmooth;\n      uniform float dashDistance;\n\n      void main() {\n        float lineUMod = mod(lineU, dashSteps + dashDistance);\n        float dash = 1.0 - step(dashDistance, lineUMod);\n        gl_FragColor = vec4(diffuse * vec3(dash), opacity * dash);\n      }\n    `,\n  });\n  material.side = THREE.BackSide;\n  material.transparent = true;\n  return material;\n}\n\n\n// \u7eaf\u8272\u53cc\u7ebf\nexport function DoubleShader(option: any = {}) {\n  const material = new THREE.ShaderMaterial({\n    uniforms: THREE.UniformsUtils.clone({\n      thickness: { value: asNumber(option.thickness * 3, 0.3) },\n      opacity: { value: asNumber(option.opacity, 1.0) },\n      diffuse: { value: new THREE.Color(option.diffuse) },\n      dashSteps: { value: asNumber(option.dashSteps, 3) },\n      dashDistance: { value: asNumber(option.dashDistance, 2) },\n      leftDashed: { value: asNumber(option.leftDashed, 0) },\n      rightDashed: { value: asNumber(option.rightDashed, 0) },\n    }),\n    vertexShader: `\n      uniform float thickness;\n      attribute float lineMiter;\n      attribute vec2 lineNormal;\n      attribute float lineDistance;\n      varying float lineU;\n      varying float lineV;\n\n      void main() { \n        lineV = sign(lineMiter);\n        lineU = lineDistance;\n        vec3 pointPos = position.xyz + vec3(lineNormal * thickness / 2.0 * lineMiter, 0.0);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pointPos, 1.0);\n      }\n    `,\n    fragmentShader: `\n      varying float lineV;\n      varying float lineU;\n\n      uniform vec3 diffuse;\n      uniform float opacity;\n      uniform float dashSteps;\n      uniform float dashSmooth;\n      uniform float dashDistance;\n      uniform float leftDashed;\n      uniform float rightDashed;\n\n      void main() {\n        float lineUMod = mod(lineU, dashSteps + dashDistance);\n        float dash = 1.0 - step(dashDistance, lineUMod);\n        float gap_ratio = step(0.33, abs(lineV));\n        float center_mask = step(0.0, lineV);\n        float side_mask = center_mask * leftDashed + (1.0 - center_mask) * rightDashed ;\n        float final_dash = min(dash + side_mask, 1.0) * gap_ratio;\n        gl_FragColor = vec4(diffuse * vec3(final_dash), opacity * final_dash);\n      }\n    `,\n  });\n  material.side = THREE.BackSide;\n  material.transparent = true;\n  return material;\n}\n\n// \u5355\u6839\u6e10\u53d8\u8272\nfunction newCustomizedShader(option: any = {}) {\n  const material = new THREE.ShaderMaterial({\n    uniforms: THREE.UniformsUtils.clone({\n      thickness: { value: asNumber(option.thickness, 0.1) },\n      opacity: { value: asNumber(option.opacity, 1.0) },\n      diffuse: { value: new THREE.Color(option.diffuse) },\n    }),\n    vertexShader: `\n      uniform float thickness;\n      attribute vec2 lineNormal;\n      attribute vec4 customColor;\n      varying vec4 vColor;\n\n      void main() { \n        vColor = vec4(customColor.r, customColor.g, customColor.b, customColor.a);\n        vec3 pointPos = position.xyz + vec3(lineNormal * thickness / 2.0, 0.0);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pointPos, 1.0);\n      }\n    `,\n    fragmentShader: `\n      varying vec4 vColor;\n      void main() {\n        gl_FragColor = vec4(vColor.xyz, vColor.a);\n      }\n    `,\n  });\n  material.side = THREE.DoubleSide;\n  material.transparent = true;\n  return material;\n}\n\n\n</code></pre>"},{"location":"Frontend/npmLink/","title":"npm link","text":""},{"location":"Frontend/npmLink/#npm-link","title":"npm link","text":"<ul> <li>\u7528\u4e8e\u5728\u4e0d\u540c\u9879\u76ee\u4e4b\u95f4\u5efa\u7acb\u5f15\u7528</li> </ul>"},{"location":"Frontend/npmLink/#1","title":"\u9879\u76ee1","text":"<ul> <li>demo, \u5728<code>package.json</code>\u4e2d\uff0c\u6307\u5b9a<code>main</code>\u4e3a<code>index.js</code>\uff0c<code>name</code>\u4e3a<code>demo</code></li> <li>index.js</li> </ul> <pre><code>module.exports = {\n    name:123\n}\n</code></pre> <ul> <li>\u5728\u76ee\u5f55\u5185\u6267\u884c <code>npm link</code>\uff0c\u4f1a\u5728\u5168\u5c40\u7684node_modules\u4e0b\u751f\u6210\u4e00\u4e2amodules\u3002</li> </ul>"},{"location":"Frontend/npmLink/#2","title":"\u9879\u76ee2","text":"<ul> <li>\u9879\u76ee\u5185\u6267\u884c <code>npm link demo</code>\uff0c\u4f1a\u5728\u9879\u76ee\u5185\u521b\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u8f6f\u8fde\u63a5\uff0c\u4ece <code>node_modules</code> \u5f15\u7528\u5168\u5c40\u7684<code>modules</code></li> <li>\u5728\u6587\u4ef6\u5185\u53ef\u5f15\u7528 <code>demo</code> \u5185\u5bfc\u51fa\u7684\u5bf9\u8c61\uff1a</li> </ul> <pre><code>const a = require(\"demo\")\n</code></pre> <p><code>npm link</code>\u53ea\u80fd\u6309 <code>ES5</code> \u7684\u8bed\u6cd5\u8fdb\u884c\u5f15\u7528\uff0c\u5373\u4e0d\u80fd\u901a\u8fc7 <code>import</code> \u5f15\u7528\uff0c\u539f\u56e0\u4e3a\u901a\u8fc7 <code>link</code> \u65b9\u5f0f\u5bfc\u5165\u7684\u65e0\u6cd5\u5411<code>webpack</code>\u4e00\u6837\u8fdb\u884c\u5347\u7ea7\u5230 <code>es6</code> \uff0c\u5982\u679c\u9700\u8981\u901a\u8fc7<code>import</code>\u65b9\u5f0f\u5f15\u7528\uff0c\u53ef\u53c2\u8003\u4e00\u4e0b\u65b9\u6cd5 - \u539f\u9879\u76ee\u7684\u5bfc\u51fa\u65b9\u5f0f\u6539\u4e3a\uff1a</p> <pre><code>export const a = {\n    name:123\n}\n</code></pre> <ul> <li>\u672c\u9879\u76ee\u5185\u5f15\u7528\u65b9\u5f0f\u6539\u4e3a\u4ece <code>node_modules</code> \u5f15\u7528\uff1a</li> </ul> <pre><code>import a from \"../node_modules/demo\"\n</code></pre> <ul> <li>\u89e3\u9664\u8fde\u63a5</li> </ul> <pre><code>npm unlink demo\n</code></pre>"},{"location":"Frontend/performance/","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"Frontend/performance/#_1","title":"\u524d\u7aef\u7684\u6027\u80fd\u4f18\u5316","text":"<p>\u524d\u7aef\u9875\u9762\u7684\u6d41\u7545\u8ddfjs\u7ebf\u7a0b\u662f\u5426\u963b\u585e\u76f8\u5173\uff0c\u56e0\u4e3a\u9875\u9762\u53ea\u6709\u4e00\u4e2ajs\u7ebf\u7a0b\uff0c\u8d1f\u8d23\u6240\u6709\u7684js\u4ee3\u7801\u6267\u884c\u3001\u9875\u9762\u7684\u6e32\u67d3\u7b49\u5de5\u4f5c\uff0c\u6240\u4ee5\u5982\u679c\u67d0\u4e2a\u4efb\u52a1\u957f\u65f6\u95f4\u6267\u884c\u6216\u7ec4\u4ef6\u6e32\u67d3\u5f88\u9891\u7e41\u90fd\u53ef\u80fd\u5bfc\u81f4\u5e27\u7387\u4e0b\u964d\uff0c\u964d\u4f4e\u6d41\u7545\u3002</p> <p>\u6545\u800c\u6027\u80fd\u4f18\u5316\u7684\u6392\u67e5\u4e00\u822c\u4ece\u51e0\u4e2a\u65b9\u9762\u8fdb\u884c\uff1a</p> <p>\uff11\uff0c\u501f\u52a9chrome\u6d4f\u89c8\u5668\u7684performance\u5f55\u5236\u9875\u9762\u7684\u8fd0\u884c\u6570\u636e\uff0c\u770b\u662f\u5426\u51fa\u73b0\u67d0\u4e9b\u4efb\u52a1\u5360\u7528\u65f6\u957f\u8f83\uff0c\u4ee5\u53ca\u662f\u5426\u51fa\u73b0\u4e00\u4e9b\u7279\u6b8a\u65f6\u6bb5\uff0c\u6bd4\u5982\u6d4f\u89c8\u5668\u7684\u5b9e\u9a8c\u6027\u7279\u6027\u5982commit\u9636\u6bb5\u6709\u65f6\u5019\u4f1a\u5728\u6bcf\u5e27\u6e32\u67d3\u671f\u95f4\u5360\u7528\u65f6\u957f\u8f83\u591a\uff1b</p> <p>\uff12\uff0c\u901a\u8fc7\u57cb\u70b9\u4ee3\u7801\uff0c\u7edf\u8ba1\u4e0d\u540c\u4efb\u52a1\u5728\u8fd0\u884c\u671f\u95f4\u7684\u603b\u8017\u65f6\u4ee5\u53ca\u6bcf\u5e27\u7684\u9636\u6bb5\u8017\u65f6\uff0c\u8fdb\u800c\u53ef\u4ee5\u4ece\u6570\u636e\u5c42\u9762\u5c06\u5f71\u54cd\u5927\u7684\u4efb\u52a1\u8bc6\u522b\u51fa\u6765\uff0c\u7136\u540e\u9488\u5bf9\u4f18\u5316\uff1b</p> <p>\u4f18\u5316\u65b9\u6848\u4e00\u822c\u6709\uff1a</p> <p>\uff11\uff0c\u5c06\u4e00\u4e9b\u4e0d\u9700\u8981\u540c\u6b65\u6267\u884c\u4e14\u5df2\u4ea7\u751f\u5f71\u54cd\u7684\u4ee3\u7801\u653e\u5165worker\u4e2d\u8fdb\u884c\uff0c\u5982\u679c\u662f\u56fe\u50cf\u7b49buffer\u6570\u636e\uff0c\u66f4\u53ef\u501f\u52a9worker\u7684transfer\u7279\u6027\u52a0\u5feb\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u4f20\u9012\uff1b</p> <p>\uff12\uff0c\u9891\u7e41\u6267\u884c\u7684\u6570\u636e\u5bf9\u8c61\u8003\u8651\u4f7f\u7528\u7f13\u5b58\u7b56\u7565\u907f\u514d\u6bcf\u6b21\u90fd\u4ece\u5934\u8ba1\u7b97\u4e00\u904d\uff0c\u907f\u514d\u5185\u5b58\u6cc4\u9732\u53ef\u4ee5\u52a0\u4e0a\u5b9a\u671f\u6e05\u7406\u673a\u5236\uff1b</p> <p>\uff13\uff0c\u6e32\u67d3\u7c7b\u6570\u636e\u5408\u5e76\uff0c\u5c06\u591a\u4e2a\u5c0f\u5bf9\u8c61\u5408\u5e76\u6210\u4e00\u4e2a\u6765\u4e00\u6b21\u6027\u6e32\u67d3\uff0c\u59823d\u4e2d\u7684mesh\uff0c\u5c06\u5927\u91cf\u540c\u6027\u8d28\u7684\u6570\u636e\u5148\u5408\u5e76\u3000\u518d\u521b\u5efa\u51fa\u4e00\u4e2amesh;\u6216\u8005\u7528instanceMesh\u521b\u5efa\uff0c\u5982\u70b9\u4e91\u7b49\u5927\u91cf\u540c\u7c7bmesh; - \u53c2\u8003<code>\u524d\u7aef/line</code>\u90a3\u4e00\u7ae0</p> <p>\uff14\uff0c\u4e00\u4e9b\u9700\u8981\u9ad8\u9891\u66f4\u65b0\u7684\u76d1\u542c\u6570\u636e\u53d8\u5316\u7684\u7ec4\u4ef6\u6709\u65f6\u5019\u53ef\u80fd\u76f4\u63a5\u4f7f\u7528\u539f\u751f\u7684<code>innerHtml</code>\u65b9\u5f0f\u66f4\u5feb\uff0c\u4e00\u5473\u7684\u5229\u7528\u54cd\u5e94\u5f0f\u6570\u636e\u76d1\u542c\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u65b9\u6cd5\uff1b</p> <p>5,\u3000\u67d0\u4e9b3D\u5143\u7d20\u7528shader\u5b9e\u73b0\uff1b</p>"},{"location":"Frontend/pixelRender/","title":"\u8d34\u56fe\u65b9\u5f0f","text":""},{"location":"Frontend/pixelRender/#threejs","title":"threejs\u8d34\u56fe\u65b9\u5f0f","text":"<p>\u65b9\u6cd5\u4e00: 1\uff0c\u91c7\u6837\u65b9\u5f0f1: \u6700\u8fd1\u90bb\u91c7\u6837\uff0c<code>NearestFilter</code> :     \u5176\u539f\u7406\u662f\u6839\u636e\u7247\u5143\u7684\u7eb9\u7406\u5750\u6807\uff0c\u9009\u62e9\u6700\u8fd1\u7684\u7eb9\u7406\u50cf\u7d20\u503c\u4f5c\u4e3a\u91c7\u6837\u7ed3\u679c\uff0c\u4ea7\u751f\u50cf\u7d20\u5316\u7684\u6548\u679c\uff0c\u653e\u5927\u65f6\u53ef\u4fdd\u6301\u539f\u59cb\u8d34\u56fe\u7684\u50cf\u7d20\u611f\uff0c\u8fb9\u7f18\u6bd4\u8f83\u9510\u5229\uff1b \u4f18\u70b9\uff1a     - \u8ba1\u7b97\u7b80\u5355\uff0c\u65e0\u9700\u52a0\u6743\u8ba1\u7b97\uff1b \u7f3a\u70b9:     - \u53ef\u80fd\u5bfc\u81f4\u56fe\u50cf\u8fb9\u7f18\u51fa\u73b0\u952f\u9f7f\u72b6(\u7247\u5143\u53ef\u80fd\u8986\u76d6\u591a\u4e2a\u50cf\u7d20\u70b9)\uff1b \u4e3b\u8981\u5e94\u7528\u573a\u666f\uff1a     - 3D\u6e38\u620f\u4e2d\u7684\u6750\u8d28\u8d34\u56fe     - \u5b9e\u65f6\u6e32\u67d3\u7684\u5361\u901a\u98ce\u683c\u6e32\u67d3\uff1b</p> <pre><code>texture.minFilter = THREE.NearestFilter;\ntexture.magFilter = THREE.NearestFilter;\n</code></pre> <p>2\uff0c\u91c7\u6837\u65b9\u5f0f2: \u7ebf\u6027\u91c7\u6837, <code>LinearFilter</code>, \u4e3a<code>magFilter</code>\u7684\u9ed8\u8ba4\u503c\uff1a     \u91c7\u7528\u5468\u56f4\u56db\u4e2a\u50cf\u7d20\u7684\u52a0\u6743\u5e73\u5747\u503c\uff0c\u6548\u679c\u8f83\u5e73\u6ed1\uff0c\u4f46\u8ba1\u7b97\u91cf\u5927\uff0c\u653e\u5927\u65f6\u6709\u5e73\u6ed1\u6548\u679c\uff1b</p> <p>3,  <code>LinearMipmapLinearFilter</code>\uff0c\u4e3a<code>minFilter</code>\u7684\u9ed8\u8ba4\u503c     \u4f7f\u7528<code>mipmapping</code>\u6280\u672f\uff0c\u901a\u8fc7\u4e09\u6b21\u7ebf\u6027\u8fc7\u6ee4\u5e73\u6ed1\u7eb9\u7406\uff0c\u4ece\u800c\u5728\u7f29\u5c0f\u7eb9\u7406\u65f6\u63d0\u4f9b\u66f4\u6e05\u6670\u81ea\u7136\u7684\u663e\u793a\u6548\u679c, \u5728\u4e0d\u540c\u8ddd\u79bb\u4e0b\u90fd\u80fd\u63d0\u4f9b\u6700\u4f73\u7684\u7eb9\u7406\u8d28\u91cf\u3002 4\uff0c<code>LinearMipmapNearestFilter</code>: \u4f7f\u7528<code>mipmapping</code>\u548c\u7ebf\u6027\u63d2\u503c, \u63d0\u4f9b\u6bd4 <code>THREE.NearestMipmapLinearFilter</code> \u66f4\u9ad8\u7684\u8d28\u91cf\uff0c\u4f46\u53ef\u80fd\u6bd4 THREE.LinearMipmapLinearFilter \u7565\u5fae\u6a21\u7cca 5\uff0c<code>NearestMipmapNearestFilter</code>\uff1a\u4f7f\u7528<code>mipmapping</code>\u548c\u6700\u8fd1\u90bb\u63d2\u503c\uff0c\u9002\u7528\u4e8e\u5feb\u901f\u6e32\u67d3\u4e14\u8d28\u91cf\u8981\u6c42\u4e0d\u9ad8\u573a\u666f\uff1b 6\uff0c<code>NearestMipmapLinearFilter</code>: \u4f7f\u7528<code>mipmapping</code>\u548c\u7ebf\u6027\u63d2\u503c\uff0c\u63d0\u4f9b\u6bd4 <code>THREE.NearestFilter</code> \u66f4\u597d\u7684\u8d28\u91cf\uff0c\u4f46\u53ef\u80fd\u6bd4 <code>THREE.LinearMipmapLinearFilter</code> \u7565\u5fae\u6a21\u7cca;</p> <p>\u53e6:     <code>texture.minFilter</code>: \u7528\u4e8e\u63a7\u5236\u5f53\u7eb9\u7406\u7f29\u5c0f\u65f6\uff0c\u5373\u88ab\u6620\u5c04\u5230\u6bd4\u5176\u672c\u8eab\u66f4\u5c0f\u7684\u533a\u57df\u65f6\u91c7\u7528\u7684\u8fc7\u6ee4\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a<code>LinearMipmapLinearFilter</code>\uff1b     <code>texture.magFilter</code>: \u7528\u4e8e\u63a7\u5236\u5f53\u7eb9\u7406\u653e\u5927\u65f6\uff0c\u5982\u4f55\u5bf9\u95ee\u9898\u8fdb\u884c\u91c7\u6837\uff0c\u51b3\u5b9a\u4e86\u653e\u5927\u65f6\u5165\u80a1\u54e6\u8ba1\u7b97\u50cf\u7d20\u989c\u8272\u503c\uff1b</p> <p>\u65b9\u6cd5\u4e8c: \u5c06\u56fe\u7247\u9010\u50cf\u7d20\u6e32\u67d3\u52303d mesh\u4e0a, \u6bcf\u4e2a\u50cf\u7d20\u6620\u5c04\u4e3a0.1*0.1\u7684\u7269\u7406\u7a7a\u95f4\uff0c\u9010\u4e2a\u4e09\u89d2\u5316,\u6539\u65b9\u5f0f\u867d\u7136\u4e5f\u80fd\u5b9e\u73b0\uff0c\u4f46\u53ea\u662f\u7eaf\u624b\u5de5\u5b9e\u73b0\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\uff1a  </p> <pre><code>\nconst start = performance.now();\n// 51.2\u7c73\u8868\u793a512*512\u50cf\u7d20\uff0c\u4e00\u4e2a\u50cf\u7d20\u8868\u793a0.1\u7c73*0.1\u7c73\u7269\u7406\u7a7a\u95f4\nconst { id, width, height, data, position, rotation, opacity } = imageData;\nlet dataURL = \"\";\ndata.forEach((char) =&gt; (dataURL += String.fromCharCode(char)));\nconst base64image = \"data:image/jpeg;base64,\" + btoa(dataURL);\nlet canvas = document.getElementById('testCanvas') as HTMLCanvasElement;\nif(!canvas) {\n    canvas =  document.createElement('canvas');\n    document.body.appendChild(canvas);\n    canvas.width = width * 10;\n    canvas.height = height * 10;\n    canvas.style.width = `${width * 10}px`;\n    canvas.style.height = `${height * 10}px`;\n    canvas.style.position = 'absolute';\n    canvas.style.right = '10px';\n    canvas.style.top = '10px';\n    canvas.id = 'testCanvas';\n}\nfunction getImageData(imageData: Uint8ClampedArray, i: number, j: number, width: number, height: number) {\n    return imageData.slice(i * width * 4 + j * 4, i * width * 4 + j * 4 + 5); // [r, g, b, a]\n}\n\nconst image = new Image();\nimage.src = base64image;\nimage.onload = () =&gt; {\n    const ctx = canvas.getContext('2d');\n    ctx?.clearRect(0,0, 512, 512)\n    ctx?.drawImage(image, 0, 0);\n\n    const imageData = ctx?.getImageData(0, 0, 512,512);\n    if(!imageData) return;\n    const geometry = new THREE.BufferGeometry();\n    const material = new THREE.ShaderMaterial({\n    vertexShader: `\n    attribute vec4 color;\n    varying vec4 vColor;\n\n    void main() { \n        vColor = vec4(color.r, color.g, color.b, color.a);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n    `,\n    fragmentShader: `\n    varying vec4 vColor;\n    void main() {\n        gl_FragColor = vec4(vColor.xyz, 1);\n    }\n    `,\n    });\n    material.side = THREE.DoubleSide;\n    geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array((512) * (512) * 4 * 4), 4));\n    const colorArray = geometry.getAttribute('color');\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array((512) * (512) * 3 * 4), 3));\n    const posArray = geometry.getAttribute('position');\n\n    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(512 * 512 * 2 * 3), 1));\n    const indexArray = geometry.getIndex()!;\n\n    let posIndex = 0;\n    let colorIndex = 0;\n    let index = 0;\n    for(let i = 0; i &lt; 512; i++) {\n    for(let j = 0; j &lt; 512; j++) {\n        // \u6784\u90204\u4e2a\u9876\u70b9\uff0c\u5bf9\u5e94\u6bcf\u4e2a\u89d2\u70b9\u7684\u5468\u8fb9\u56db\u4e2a\u50cf\u7d20\n        posArray.setXYZ(posIndex++, i * 0.1, j * 0.1, 0.01);\n        posArray.setXYZ(posIndex++, i * 0.1 + 0.1, j * 0.1, 0.01);\n        posArray.setXYZ(posIndex++, i * 0.1, j * 0.1 + 0.1, 0.01);\n        posArray.setXYZ(posIndex++, i * 0.1 + 0.1, j * 0.1 + 0.1, 0.01);\n\n        const rgba = getImageData(imageData.data, i, j, 512, 512);\n        const r = rgba[0] / 255;\n        const g = rgba[1] / 255;\n        const b = rgba[2] / 255;\n        const a = rgba[3] / 255;\n        colorArray.setXYZW(colorIndex++, r, g, b, a);\n        colorArray.setXYZW(colorIndex++, r, g, b, a);\n        colorArray.setXYZW(colorIndex++, r, g, b, a);\n        colorArray.setXYZW(colorIndex++, r, g, b, a);\n\n        const start = (i * 512 + j) * 4;\n\n        indexArray.setX(index++, start);\n        indexArray.setX(index++, start + 3);\n        indexArray.setX(index++, start + 1);\n\n        indexArray.setX(index++, start);\n        indexArray.setX(index++, start + 2);\n        indexArray.setX(index++, start + 3);\n\n\n    }\n    }\n    if(this.tmp) {\n    this.tmp.geometry.dispose();\n    (this.tmp.material as THREE.Material).dispose();\n    this.scene_.remove(this.tmp);\n    }\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.userData.time = Date.now();\n    this.tmp  = mesh;\n    this.scene_.add(mesh);\n    (window as any).tmp = this.tmp;\n    console.log('time:', performance.now() - start);\n}\n</code></pre>"},{"location":"Frontend/prototype/","title":"prototype\u539f\u578b\u94fe","text":""},{"location":"Frontend/prototype/#javascript","title":"javascript\u539f\u578b\u94fe","text":"<p>1, <code>js</code>\u672c\u8eab\u4e0d\u63d0\u4f9b<code>class</code>\u7684\u5b9e\u73b0\uff0c<code>ES6</code>\u7684<code>class</code>\u53ea\u662f\u8bed\u6cd5\u7cd6\uff0c<code>js</code>\u4ecd\u7136\u662f\u57fa\u4e8e<code>\u539f\u578b</code>\u7684\u8bed\u8a00</p> <p>2, <code>js</code>\u53ea\u6709\u4e00\u79cd\u7ed3\u6784\uff1a\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u5bf9\u8c61<code>object</code>\u90fd\u6709\u4e00\u4e2a\u79c1\u6709\u5c5e\u6027: <code>__proto__</code>\uff0c \u6307\u5411\u5b83\u7684\u6784\u9020\u51fd\u6570\u7684\u539f\u578b\u5bf9\u8c61\uff08<code>prototype</code>\uff09\u3002\u8be5\u539f\u578b\u5bf9\u8c61\u4e5f\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u539f\u578b\u5bf9\u8c61\uff08<code>__proto__</code>\uff09\uff0c\u5c42\u5c42\u5411\u4e0a\u76f4\u5230\u4e00\u4e2a\u5bf9\u8c61\u7684\u539f\u578b\u5bf9\u8c61\u4e3a null\u3002\u6839\u636e\u5b9a\u4e49\uff0cnull \u6ca1\u6709\u539f\u578b\uff0c\u5e76\u4f5c\u4e3a\u8fd9\u4e2a\u539f\u578b\u94fe\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u73af\u8282\u3002</p> <p>3, \u51e0\u4e4e\u6240\u6709 <code>JavaScript</code> \u4e2d\u7684\u5bf9\u8c61\u90fd\u662f\u4f4d\u4e8e\u539f\u578b\u94fe\u9876\u7aef\u7684 <code>Object</code> \u7684\u5b9e\u4f8b\u3002</p> <ul> <li> <p>\u7ee7\u627f\u5c5e\u6027</p> <p><code>JavaScript</code> \u5bf9\u8c61\u662f\u52a8\u6001\u7684\u5c5e\u6027\u201c\u5305\u201d\uff08\u6307\u5176\u81ea\u5df1\u7684\u5c5e\u6027\uff09\u3002JavaScript \u5bf9\u8c61\u6709\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a\u539f\u578b\u5bf9\u8c61\u7684\u94fe\u3002\u5f53\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u5bf9\u8c61\u7684\u5c5e\u6027\u65f6\uff0c\u5b83\u4e0d\u4ec5\u4ec5\u5728\u8be5\u5bf9\u8c61\u4e0a\u641c\u5bfb\uff0c\u8fd8\u4f1a\u641c\u5bfb\u8be5\u5bf9\u8c61\u7684\u539f\u578b\uff0c\u4ee5\u53ca\u8be5\u5bf9\u8c61\u7684\u539f\u578b\u7684\u539f\u578b\uff0c\u4f9d\u6b21\u5c42\u5c42\u5411\u4e0a\u641c\u7d22\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u540d\u5b57\u5339\u914d\u7684\u5c5e\u6027\u6216\u5230\u8fbe\u539f\u578b\u94fe\u7684\u672b\u5c3e\u3002</p> </li> <li> <p>\u4f8b\u5b50\uff1a</p> </li> </ul> <pre><code>let a = function(){\n    this.name = 1\n}\na.prototype.say = function(){\n    console.log(this.name)\n}\n\nlet b = new a()\n</code></pre> <p>b \u7ee7\u627f\u81ea a\uff0c<code>new</code>\u51fd\u6570\u8c03\u7528<code>a</code>\u7684\u6784\u9020\u51fd\u6570\uff0c\u521b\u5efa\u8fd9\u4e2a\u51fd\u6570\u7684<code>\u5b9e\u4f8b\u5bf9\u8c61</code>\uff0c\u6240\u4ee5<code>name</code>\u5c5e\u4e8e<code>b</code>\u7684\u5c5e\u6027\uff0c<code>b</code>\u4e5f\u53ef\u4ee5\u8c03\u7528<code>say</code>\u51fd\u6570\uff0c\u4f46\u662f<code>say</code>\u5e76\u4e0d\u5c5e\u4e8e<code>b</code>\uff0c<code>say</code>\u4f4d\u4e8e<code>b</code>\u7684\u539f\u578b\u4e0a\uff0c\u5c5e\u4e8ea\u7684<code>prototype</code>\u5c5e\u6027\u3002\u5f53\u8c03\u7528<code>say</code>\u65f6\uff0c\u9996\u5148\u73b0\u5728<code>b</code>\u81ea\u8eab\u627e\uff0c<code>b</code>\u4e0a\u53ea\u6709<code>name</code>\u5c5e\u6027\uff0c\u7136\u540e\u627e<code>b</code>\u7684<code>__proto__</code>\uff0c<code>b.__proto__ == a.prototype</code>, \u5728<code>a.prototype</code>\u4e0a\u627e\u5230<code>say</code>\u51fd\u6570\uff0c\u5373\u8c03\u7528\u4e4b\u3002</p> <ul> <li><code>a</code>\u7684\u9ed8\u8ba4\u5c5e\u6027<code>prototype</code>:</li> </ul> <pre><code>console.log(a.prototype):\n{\n    say: \u0192, constructor: \u0192\n    say: \u0192 ()\n    constructor: \u0192 ()\n    [[Prototype]]: Object\n        constructor: \u0192 Object()\n        hasOwnProperty: \u0192 hasOwnProperty()\n        isPrototypeOf: \u0192 isPrototypeOf()\n        propertyIsEnumerable: \u0192 propertyIsEnumerable()\n        toLocaleString: \u0192 toLocaleString()\n        toString: \u0192 toString()\n        valueOf: \u0192 valueOf()\n        __defineGetter__: \u0192 __defineGetter__()\n        __defineSetter__: \u0192 __defineSetter__()\n        __lookupGetter__: \u0192 __lookupGetter__()\n        __lookupSetter__: \u0192 __lookupSetter__()\n        get __proto__: \u0192 __proto__()\n}\n</code></pre> <ul> <li><code>b</code>:</li> </ul> <pre><code>{\n    name: 1\n    [[Prototype]]: Object\n        say: \u0192 ()\n        constructor: \u0192 ()\n        [[Prototype]]: Object\n            constructor: \u0192 Object()\n            hasOwnProperty: \u0192 hasOwnProperty()\n            isPrototypeOf: \u0192 isPrototypeOf()\n            propertyIsEnumerable: \u0192 propertyIsEnumerable()\n            toLocaleString: \u0192 toLocaleString()\n            toString: \u0192 toString()\n            valueOf: \u0192 valueOf()\n            __defineGetter__: \u0192 __defineGetter__()\n            __defineSetter__: \u0192 __defineSetter__()\n            __lookupGetter__: \u0192 __lookupGetter__()\n            __lookupSetter__: \u0192 __lookupSetter__()\n            get __proto__: \u0192 __proto__()\n}\n</code></pre> <p>\u53ef\u89c1\uff0c<code>b</code> \u7684<code>__proto__</code>\u662f <code>a</code> \u7684<code>prototype</code>, \u5f53\u8bbf\u95ee <code>b</code> \u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u6d4f\u89c8\u5668\u5148\u67e5\u770b<code>b</code>\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u518d\u5728<code>__proto__</code>\u4e2d\u67e5\u770b\uff0c\u5373<code>a.prototype</code>, \u5982\u679c<code>a.prototype</code>\u4e0d\u5b58\u5728\uff0c\u518d\u5728 <code>b.__proto__.__proto___</code> \u4e2d\u67e5\u627e\uff0c\u76f4\u5230\u627e\u5230\u4e3a\u6b62\uff0c\u4f46\u662f\u4efb\u4f55\u51fd\u6570\u7684\u539f\u578b\u5c5e\u6027<code>__proto__</code>\u90fd\u662f<code>Object.prototype</code> (\u65e0\u8bba\u7ee7\u627f\u591a\u5c11\u5c42), \u6240\u4ee5 <code>b.__proto__.__proto__.__proto__</code> \u5176\u5b9e\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u518d\u904d\u5386\u5b8c\u6574\u4e2a<code>\u539f\u578b\u94fe</code>\u540e\u8fd8\u6ca1\u67e5\u627e\u5230\uff0c\u5219\u4f1a\u5224\u65ad\u5c5e\u6027\u4e0d\u5b58\u5728\u3002</p> <ul> <li></li> </ul>"},{"location":"Frontend/reduce_function_iteration/","title":"reduce\u793a\u4f8b","text":""},{"location":"Frontend/reduce_function_iteration/#_1","title":"\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5\uff1a","text":"<ul> <li>\u53ef\u4ee5\u4f20\u5165\u4e00\u7ec4 <code>function</code>\u548c\u53c2\u6570\uff0c<code>function</code>\u6309\u7167\u4f20\u5165\u987a\u5e8f\u9010\u4e2a\u6267\u884c\uff0c\u6bcf\u6b21\u5c06\u6267\u884c\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a<code>function</code>.</li> </ul> <pre><code>const demo = function(){\n    let ar = arguments;\n    return function() {\n        return Array.from(ar).reduce( (t, f ) =&gt; {\n            return f(t)\n        }, arguments[0])\n    }\n}\n</code></pre> <ul> <li>\u793a\u4f8b\uff1a</li> </ul> <pre><code>const a = demo( (t) =&gt; t * t, (b) =&gt; b+b, (c) =&gt; c*c*c)\nconsole.log(a(3)) //5832\n</code></pre>"},{"location":"Frontend/shallow%26deep-Copy/","title":"\u6d45\u62f7\u8d1d\u3001\u6df1\u62f7\u8d1d","text":""},{"location":"Frontend/shallow%26deep-Copy/#_1","title":"\u6d45\u62f7\u8d1d\u4e0e\u6df1\u62f7\u8d1d","text":"<p>\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1a\u76f4\u63a5\u5b58\u50a8\u5728\u6808\u4e2d\u7684\u6570\u636e\uff1b \u5f15\u7528\u6570\u636e\u7c7b\u578b\uff1a\u5b58\u50a8\u7684\u662f\u5bf9\u8c61\u5728\u6808\u4e2d\u7684\u5f15\u7528\uff0c\u771f\u5b9e\u6570\u636e\u5b58\u653e\u5728\u5806\u5185\u5b58\u4e2d\u3002</p>"},{"location":"Frontend/shallow%26deep-Copy/#_2","title":"\u6d45\u62f7\u8d1d","text":"<ul> <li> <p>\u53ea\u590d\u5236\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u800c\u4e0d\u590d\u5236\u5bf9\u8c61\u81ea\u8eab\uff1b\u5982\u679c\u5c5e\u6027\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u5c31\u62f7\u8d1d\u57fa\u672c\u7c7b\u578b\u7684\u503c\uff1b\u5982\u679c\u5c5e\u6027\u662f\u5bf9\u8c61(\u5f15\u7528\u7c7b\u578b)\uff0c\u62f7\u8d1d\u7684\u5c31\u662f\u5185\u5b58\u5730\u5740\uff0c\u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u6539\u53d8\u5c31\u4f1a\u5f71\u54cd\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff1b </p> </li> <li> <p><code>Object.assign</code> \u8fdb\u884c\u7684\u662f\u6d45\u62f7\u8d1d\uff1b</p> </li> <li> <p><code>JSON.parse(JSON.stringfy())</code> \u8fdb\u884c\u7684\u6df1\u62f7\u8d1d</p> </li> <li> <p>\u53c2\u8003\u5982\u4e0b</p> </li> </ul> <pre><code>var a = { \n    aa : 1, \n    bb : { \n        bbb : 2\n    } \n}\nvar b = Object.assign({}, a);\n\nb.aa = 2;\nconsole.log(a)  //{ aa : 1, bb : { bb : 2 } }  //b\u6539\u53d8\u7684\u662f\u57fa\u672c\u6570\u636eaa\uff0c\u4e0d\u5f71\u54cda\u4e2d\u7684aa\uff1b\nb.bb.bbb = 3\nconsole.log(a) //{ aa : 1, bb : { bbb : 3 } } //b\u6539\u53d8\u7684\u6570\u5f15\u7528\u6570\u636e\u7c7b\u578bbb\uff0c\u4f1a\u5f71\u54cda\u4e2d\u7684bb\uff1b\n</code></pre> <ul> <li>Array:</li> <li><code>Array.prototype.concat()</code> \u3001 <code>Array.prototype.slice()</code> <p>\u4e24\u8005\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6d45\u590d\u5236\u539f\u6570\u7ec4\u7684\u65b0\u6570\u7ec4\uff0c\u5982\u679c\u67d0\u4e2a\u5143\u7d20\u662f\u5f15\u7528\uff0c\u5219\u4fee\u6539\u4e00\u4e2a\uff0c\u540c\u6b65\u4e24\u4e2a\uff1b</p> </li> </ul>"},{"location":"Frontend/variable%26function-prompt/","title":"js\u4e2d\u7684\u53d8\u91cf\u63d0\u5347\u548c\u51fd\u6570\u63d0\u5347","text":""},{"location":"Frontend/variable%26function-prompt/#js-hoisting","title":"JS\u4e2d\u7684\u53d8\u91cf\u63d0\u5347 &amp; \u51fd\u6570\u63d0\u5347: <code>Hoisting</code>","text":"<p><code>JS</code> \u53ea\u6709\u5168\u5c40\u4f5c\u7528\u57df\u548c\u51fd\u6570\u4f5c\u7528\u57df\uff0c\u4f46\u662f <code>let</code> \u51fa\u73b0\u540e\uff0c\u5c31\u6709\u4e86\u5757\u7ea7\u4f5c\u7528\u57df\uff0c<code>var</code> \u5173\u952e\u5b57\u5b58\u5728 <code>\u63d0\u5347</code> \u7684\u95ee\u9898\u3002</p>"},{"location":"Frontend/variable%26function-prompt/#_1","title":"\u53d8\u91cf\u63d0\u5347","text":"<ul> <li>\u8003\u8651\u5982\u4e0b\u4ee3\u7801\uff1a</li> </ul> <pre><code>    function demo(){\n        if(true){\n            var a = 1\n        }\n        console.log(a)\n    }\n    demo() //\u8f93\u51fa1, \u5982\u679c\u662flet\u5b9a\u4e49\uff0c\u5219\u4f1a\u6b63\u5e38\u51fa\u73b0ReferenceError\n</code></pre> <ul> <li>\u5982\u4e0b\uff1a</li> </ul> <pre><code>    console.log(a)\n    var a = 1\n    //\u8f93\u51faundefined(\u5df2\u58f0\u660e \u4f46\u672a\u5b9a\u4e49)\n</code></pre> <ul> <li>\u89e3\u91ca\uff1a <p>\u8fd9\u662f\u4e00\u4e2a <code>\u53d8\u91cf\u63d0\u5347</code> \u73b0\u8c61\uff0c<code>var a = 2</code>\u5176\u5b9e\u88abjs\u5904\u7406\u6210\u4e86\u4e24\u90e8\u5206\uff1a<code>var a</code> \u548c <code>a = 2</code> \uff0c\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u58f0\u660e\u662f\u5728\u7f16\u8bd1\u9636\u6bb5(<code>\u8bcd\u6cd5\u5206\u6790</code>)\u8fdb\u884c\uff0c\u7b2c\u4e8c\u4e2a\u8d4b\u503c\u58f0\u660e\u662f\u5728<code>\u6267\u884c\u9636\u6bb5</code>\uff0c\u6240\u4ee5\u4e0a\u8ff0\u4ee3\u7801\u76f8\u5f53\u4e8e:</p> </li> </ul> <pre><code>    var a;\n    console.log(a)\n    a = 1\n</code></pre> <p>\u5907\u6ce8\uff1a\u65e0\u8bba\u4f5c\u7528\u57df\u4e2d\u7684\u58f0\u660e\u51fa\u73b0\u5728\u4ec0\u4e48\u5730\u65b9\uff0c\u90fd\u5c06\u5728\u4ee3\u7801\u5728\u6267\u884c\u524d\u8fdb\u884c\u5904\u7406\uff0c\u5c06\u6240\u6709\u7684\u58f0\u660e(\u53d8\u91cf\u548c\u51fd\u6570) <code>\"\u79fb\u52a8\"</code> \u5230\u4f5c\u7528\u57df\u7684\u9876\u90e8\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a <code>\u53d8\u91cf(\u51fd\u6570)\u63d0\u5347</code>\u3002</p>"},{"location":"Frontend/variable%26function-prompt/#_2","title":"\u51fd\u6570\u63d0\u5347","text":"<ul> <li>\u7ee7\u7eed\u770b\u4f8b\u5b50:</li> </ul> <pre><code>    var a = 10\n    foo()\n    function foo(){\n        if(a){\n            var a = 1\n        }\n        console.log(a) //\u8f93\u51faundefined\n    }\n</code></pre> <ul> <li>\u89e3\u91ca: <p>\u51fd\u6570\u58f0\u660e\u4f18\u5148\u4e8e\u53d8\u91cf\u58f0\u660e\uff0c\u6240\u4ee5\u4e0a\u9762\u4ee3\u7801\u76f8\u5f53\u4e8e\uff1a</p> </li> </ul> <pre><code>    function foo(){ //\u51fd\u6570\u63d0\u5347\n        var a //\u53d8\u91cf\u63d0\u5347\n        if(a){\n            a = 1\n        }\n        console.log(a) //undefined\n    } \n    var a //\u53d8\u91cf\u63d0\u5347\n    a = 10\n    foo()\n</code></pre> <p>\u5907\u6ce8\uff0cjs\u4e2d\u51fd\u6570\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u51fd\u6570\u58f0\u660e( <code>function</code> \u5b9a\u4e49)\uff0c\u4e00\u79cd\u662f\u51fd\u6570\u8868\u8fbe\u5f0f(\u7528 <code>var</code> \u5b9a\u4e49), \u540e\u8005\u4e0d\u4f1a\u88ab\u63d0\u5347</p> <ul> <li>\u8003\u8651\u5982\u4e0b\u4ee3\u7801\uff1a</li> </ul> <pre><code>    var a = 10\n    foo()\n    var foo = function(){\n        if(a){\n        var a = 1\n        }\n        console.log(a)\n    }\n</code></pre> <ul> <li>\u4ee3\u7801\u89e3\u6790\u4e3a:</li> </ul> <pre><code>    var a\n    var foo\n    foo()\n    a = 10\n    foo = function(){\n        var a\n        if(a){\n            a = 1\n        }\n        console.log(a)\n    }\n</code></pre> <p><code>foo</code> \u7684\u8c03\u7528\u5728\u5b9a\u4e49\u4e4b\u524d\uff0c<code>foo</code> \u662f <code>undefined</code>, \u6240\u4ee5\u4f1a\u62a5 <code>ReferenceError</code>.</p>"},{"location":"Frontend/variable%26function-prompt/#_3","title":"\u4f18\u5148\u7ea7\uff1a","text":"<p>\u51fd\u6570\u63d0\u5347\u4f18\u4e8e\u53d8\u91cf\u63d0\u5347\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u4f1a\u88ab\u63d0\u5347\u5230\u66f4\u9760\u524d\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"Frontend/variable%26function-prompt/#_4","title":"\u5907\u6ce8","text":"<ul> <li>1\uff0c\u5b9e\u9645\u4e0a\u53d8\u91cf\u548c\u51fd\u6570\u58f0\u660e\u5728\u4ee3\u7801\u91cc\u7684\u4f4d\u7f6e\u662f\u4e0d\u4f1a\u52a8\u7684\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u88ab\u653e\u5165\u5185\u5b58\u4e2d\u3002</li> <li>2\uff0c<code>JavaScript</code> \u5728\u6267\u884c\u4efb\u4f55\u4ee3\u7801\u6bb5\u4e4b\u524d\uff0c\u5c06\u51fd\u6570\u58f0\u660e\u653e\u5165\u5185\u5b58\u4e2d\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u4e4b\u524d\u4f7f\u7528\u8be5\u51fd\u6570</li> <li>3\uff0c<code>JavaScript</code> \u53ea\u4f1a\u63d0\u5347\u58f0\u660e\uff0c\u4e0d\u4f1a\u63d0\u5347\u5176\u521d\u59cb\u5316\u3002</li> </ul>"},{"location":"Frontend/webBrowser-load-resource/","title":"\u6d4f\u89c8\u5668\u8d44\u6e90\u52a0\u8f7d\u6d41\u7a0b","text":""},{"location":"Frontend/webBrowser-load-resource/#html","title":"html\u4e00\u822c\u7ed3\u6784\uff1a","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;title&lt;/title&gt;\n        &lt;meta charset=\"utf-7\"&gt;\n        &lt;meta name=\"\" content=\"\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"*.css\"&gt;\n\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;&lt;/div&gt;\n        &lt;script&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li><code>head</code>\u5934\u90e8\u6807\u7b7e</li> <li><code>title</code>:<ul> <li>\u53ef\u5b9a\u4e49\u6587\u6863\u7684\u6807\u9898\uff1b</li> <li>\u5b83\u663e\u793a\u5728\u6d4f\u89c8\u5668\u7a97\u53e3\u7684\u6807\u9898\u680f\u6216\u72b6\u6001\u680f\u4e0a\uff1b</li> <li><code>title</code> \u5199\u4e0e\u7f51\u9875\u76f8\u5173\u7684\u5173\u952e\u8bcd\u6709\u5229\u4e8eSEO\u4f18\u5316</li> </ul> </li> <li><code>meta</code>:<ul> <li>\u4e00\u822c\u5b9a\u4e49\u4e00\u4e9b\u5f53\u524d\u7f51\u9875\u7684\u7279\u6b8a\u5c5e\u6027</li> <li>\u901a\u8fc7 meta \u6807\u7b7e\u7684\u5c5e\u6027\u5b9a\u4e49\u9875\u9762\u7684\u7279\u5f81</li> <li>\u683c\u5f0f:  <code>&lt;meta \u5c5e\u60271 = '  ' \u5c5e\u60272 = \u2018\u2019&gt;  &lt;/meta&gt;</code></li> </ul> </li> <li><code>link</code>:<ul> <li>\u5f15\u5165\u5916\u90e8<code>css</code>\u6837\u5f0f\u8868</li> </ul> </li> </ul>"},{"location":"Frontend/webBrowser-load-resource/#1-css","title":"1, <code>css</code>\u52a0\u8f7d\u65b9\u5f0f\uff1a","text":"<p><code>CSS</code>\u53ef\u5728<code>head</code>\u4e2d\u5f15\u5165\uff0c\u4e5f\u53ef\u4ee5\u5728<code>body</code>\u4e2d\u5f15\u5165\uff0c\u4e00\u822c\u5728<code>head</code>\u4e2d\u3002</p> <ul> <li>\u5728<code>body</code>\u4e2d\u5f15\u5165\uff1a</li> <li> <p>\u5728 <code>body\u672b\u5c3e</code> \u5f15\u5165:</p> <ul> <li> <p>1, \u5728\u89e3\u6790\u5230<code>link</code>\u6807\u7b7e\u4e4b\u524d, \u6d4f\u89c8\u5668\u81ea\u4e0a\u800c\u4e0b\u89e3\u6790<code>html</code>\u751f\u6210<code>dom</code>\u6811\uff0c\u7136\u540e\u4e0e<code>CSSOM</code>\u6811\uff08\u5e76\u975e\u5916\u90e8\u5f15\u5165\u7684CSS\uff09\u7ed3\u5408\u751f\u6210\u4e86<code>Layout</code>\u6811\uff0c\u8ba1\u7b97\u5e03\u5c40\u4e4b\u540e\u8fdb\u884c\u7ed8\u5236\uff0c\u5c06\u9875\u9762\u6e32\u67d3\u5230\u6d4f\u89c8\u5668\u4e2d;</p> </li> <li> <p>2, \u6d4f\u89c8\u5668\u89e3\u6790\u5230<code>link</code>\u6807\u7b7e\uff0c\u4e0b\u8f7d\u5916\u90e8css\u6587\u4ef6\uff1b\u4e0b\u8f7d\u5b8c\u4e4b\u540e\u5f00\u59cb\u89e3\u6790<code>css\u6837\u5f0f</code>\u751f\u6210<code>CSSOM</code>\u6811\uff0c\u5e76\u91cd\u65b0\u89e3\u6790HTML\u751f\u6210<code>DOM</code>\u6811\uff1b\u5c06DOM\u6811\u548c<code>CSSOM</code>\u6811\u7ed3\u5408\u751f\u6210<code>Layout</code>\u6811\uff0c\u8fdb\u884c\u8ba1\u7b97\u5e03\u5c40\u548cPaint\uff0c\u5b8c\u6210\u9875\u9762\u7684\u6e32\u67d3\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a<code>reflow</code>\uff0c\u4e5f\u5c31\u662f<code>\u56de\u6d41</code>\uff0c\u662f\u4e00\u79cd\u6d88\u8017\u6027\u80fd\u7684\u73b0\u8c61;</p> <p>\u6240\u4ee5\uff0c\u5916\u90e8 <code>css</code> \u5728body\u4e2d\u5f15\u5165\uff0c\u4e0d\u4f1a\u963b\u585ehtml\u7684\u6e32\u67d3\uff0c\u9875\u9762\u7684\u5448\u73b0\u8fc7\u7a0b\u662f\uff1a\u6587\u672c\u6e32\u67d3\u5b8c\u6210\uff0c\u4f46\u6ca1\u6709css\u6837\u5f0f\uff0c\u5373\u88f8\u5954\uff0ccss\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\uff0c\u6837\u5f0f\u53d1\u751f\u6539\u53d8\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u53d1\u751f<code>Layout shift</code>\u73b0\u8c61\uff0c\u5373<code>\u7d2f\u8ba1\u5e03\u5c40\u504f\u79fb</code>.</p> </li> </ul> </li> <li> <p><code>\u5728body\u4e2d\u95f4</code>\u5f15\u5165\uff1a</p> <ul> <li>\u5728\u4e2d\u95f4\u4f4d\u7f6e\u5f15\u5165\u65f6\uff0c\u4f1a\u963b\u585ehtml\u7684\u89e3\u6790\uff0c\u5728\u4e0b\u8f7d\u5916\u90e8css\u7684\u8fc7\u7a0b\u4e2d\uff0c\u540e\u9762\u7684html\u4e0d\u4f1a\u89e3\u6790\u6e32\u67d3\uff0c\u6240\u4ee5\u4e2d\u95f4\u5f15\u5165\uff0c\u4f1a\u963b\u585e\u89e3\u6790\uff0c\u4f46\u4e0d\u963b\u585e\u6e32\u67d3(\u6e32\u67d3\u5df2\u7ecf\u89e3\u6790\u7684\u4e4b\u524d\u6807\u7b7e)- <code>script</code> \u811a\u672c\uff0c\u4e09\u79cd\u65b9\u5f0f\uff1a</li> </ul> </li> <li> <p>\u5728 <code>head</code> \u4e2d\u5f15\u5165:</p> </li> <li>\u963b\u585ehtml\u7684\u6e32\u67d3\uff0c\u9875\u9762\u5448\u73b0\u51fa\uff1a\u4e00\u6bb5\u65f6\u95f4\u7684\u767d\u5c4f\uff0c\u7136\u540ecss\u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u5448\u73b0\u5e26\u6709\u6837\u5f0f\u7684\u9875\u9762</li> </ul>"},{"location":"Frontend/webBrowser-load-resource/#2-js","title":"2, <code>js</code>\u52a0\u8f7d\u65b9\u5f0f\uff1a","text":"<p>\u4e00\u822c\u5728<code>&lt;body&gt;</code>\u6807\u7b7e\u672b\u5c3e</p> <ul> <li>\u653e\u5728 <code>head</code> \u4e2d\uff1a</li> <li> <p>\u4f1a\u963b\u585e<code>html</code>\u7684\u6e32\u67d3\uff0c\u4e14\u662f\u987a\u5e8f\u52a0\u8f7d\uff0c\u5168\u90e8\u52a0\u8f7d\u5b8c\u6bd5\u624d\u4f1a\u5f00\u59cb\u6e32\u67d3<code>html</code>\u3002\u9875\u9762\u5448\u73b0\u51fa\u4e00\u7247\u957f\u65f6\u95f4\u7684\u7a7a\u767d(\u5982\u679c<code>js</code>\u8fc7\u5927)</p> </li> <li> <p>\u653e\u5728 <code>body</code> \u672b\u5c3e:</p> </li> <li> <p>\u5728<code>html</code>\u6e32\u67d3\u5b8c\u6bd5\u540e\u518d\u52a0\u8f7d\u6267\u884c\uff0c\u4e0d\u4f1a\u963b\u585e\u754c\u9762\u7684\u6e32\u67d3.</p> </li> <li> <p>\u52a0\u8f7d\u5c5e\u6027\uff1a</p> </li> <li> <p><code>\u76f4\u63a5\u52a0\u8f7d</code>       &gt; \u6ca1\u6709 <code>async</code> \u548c <code>defer</code>, \u6d4f\u89c8\u5668\u7acb\u5373\u52a0\u8f7d\u5e76\u6267\u884c\u811a\u672c\uff0c\u987a\u5e8f\u52a0\u8f7d<code>script</code>\u811a\u672c\uff0c\u4f1a<code>\u963b\u585e</code>\u540e\u7eed\u811a\u672c\u7684\u52a0\u8f7d\uff0c\u5fc5\u987b\u7b49\u5f53\u524d\u811a\u672c\u52a0\u8f7d\u3001\u6267\u884c\u5b8c\u6210\u624d\u80fd\u52a0\u8f7d\u4e0b\u4e00\u4e2a;</p> </li> <li> <p><code>async</code>     &gt; \u52a0\u8f7d\u548c\u6e32\u67d3\u540e\u7eed\u6587\u6863\u5143\u7d20\u7684\u8fc7\u7a0b\u5c06\u548c <code>script</code> \u7684\u52a0\u8f7d\u4e0e\u6267\u884c\u5e76\u884c\u8fdb\u884c\uff08<code>\u5f02\u6b65\u52a0\u8f7d</code>,\u4e0d\u4f1a\u963b\u585e\uff09, \u52a0\u8f7d\u5b8c\u5c31\u7acb\u5373\u6267\u884c(\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0b\u6765\uff0c\u597d\u50cf\u662f\u5728\u9875\u9762\u6e32\u67d3\u5b8c\u6210\u4e4b\u540e defer\u6307\u5b9a\u811a\u672c\u6267\u884c\u4e4b\u540e\u6267\u884c\uff1f)\uff0c\u9002\u7528\u4e8e\u4e0d\u4f9d\u8d56\u4efb\u4f55\u5176\u4ed6\u811a\u672c\u6216\u4e0d\u88ab\u5176\u4ed6\u811a\u672c\u4f9d\u8d56\u7684\u60c5\u51b5;</p> </li> <li> <p><code>defer</code>     &gt; \u52a0\u8f7d\u540e\u7eed\u6587\u6863\u5143\u7d20\u7684\u8fc7\u7a0b\u5c06\u548c <code>script</code> \u7684\u52a0\u8f7d\u5e76\u884c\u8fdb\u884c\uff08\u5f02\u6b65\uff09\uff0c\u4f46\u662f <code>script</code> \u7684\u6267\u884c\u8981\u5728\u6240\u6709\u5143\u7d20\u89e3\u6790\u5b8c\u6210\u4e4b\u540e\uff0c<code>DOMContentLoaded</code> \u4e8b\u4ef6\u89e6\u53d1\u4e4b\u524d\u5b8c\u6210;     window.addEventListener('DOMContentLoaded', (event) =&gt; {         console.log('DOM fully loaded and parsed');     });</p> </li> </ul>"},{"location":"Frontend/webBrowser-load-resource/#3","title":"3, \u6ce8\u610f\u70b9\uff1a","text":"<ul> <li><code>defer</code> \u548c <code>async</code> \u53ea\u5bf9\u5916\u90e8\u52a0\u8f7d\u7684\u811a\u672c\u6709\u6548\u679c\u3002</li> <li><code>defer</code> \u548c <code>async</code> \u5728\u7f51\u7edc\u8bfb\u53d6\uff08\u4e0b\u8f7d\uff09\u8fd9\u90e8\u5206\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5f02\u6b65\uff08\u76f8\u8f83\u4e8e HTML \u89e3\u6790\uff09\uff0c\u5b83\u4eec\u7684\u5dee\u522b\u5728\u4e8e\u811a\u672c\u4e0b\u8f7d\u5b8c\u4e4b\u540e\u4f55\u65f6\u6267\u884c\u3002</li> <li> <p>\u5982\u679c\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\uff0c\u78b0\u5230\u7c7b\u4f3c<code>image</code>\u6807\u7b7e\u7684<code>src</code>\uff0c\u4f1a\u5f02\u6b65\u53bb\u8bf7\u6c42\u8d44\u6e90\uff0c\u4e0d\u4f1a\u963b\u585e\u540e\u9762\u7684\u52a0\u8f7d\u89e3\u6790\u3002</p> </li> <li> <p>\u8c03\u8bd5\u65b9\u6cd5\u53ef\u4ee5\u5728<code>chrome</code>\u6d4f\u89c8\u5668\u4e2d\uff0c\u5c06<code>Network</code>\u7684\u7f51\u901f\u5207\u6362\u4e3a<code>slow 3G</code>\uff0c\u5c31\u80fd\u8be6\u7ec6\u7684\u770b\u5230\u52a0\u8f7d\u6d41\u7a0b\u3002</p> </li> <li> <p><code>DOMContentLoaded</code>\u4e0e<code>onload</code>\uff1a</p> </li> <li> <p>1\uff0c<code>DOMContentLoaded</code>:   \u6b64\u65f6\u6d4f\u89c8\u5668\u5df2\u7ecf\u5b8c\u5168<code>\u52a0\u8f7d</code>\u4e86HTML\u6587\u4ef6\uff0c\u5e76\u4e14DOM\u6811\u5df2\u7ecf\u751f\u6210\u597d\u4e86\u3002\u4f46\u662f\u5176\u4ed6\u5916\u90e8\u8d44\u6e90\uff0c\u5982\u6837\u5f0f\u6587\u4ef6\u3001\u56fe\u7247\u3001\u5b57\u4f53\u7b49\u5e76\u6ca1\u6709\u52a0\u8f7d\u597d, \uff08\u5982\u679c\u8be5\u65b9\u6cd5\u5b9a\u4e49\u5728\u4e86<code>async</code>\u7684\u811a\u672c\u4e2d\uff0c\u5219\u8be5\u65b9\u6cd5\u4e0d\u4f1a\u6267\u884c\uff0c\u539f\u56e0 <code>\u53ef\u80fd</code> \u4e3a\u8be5\u811a\u672c\u4e3a\u5f02\u6b65\uff0c\u65e0\u6cd5\u83b7\u77e5\u5176\u4ed6\u811a\u672c\u52a0\u8f7d\u60c5\u51b5\uff1f\uff09\uff0c\u8be5\u65b9\u6cd5\u662f\u5728<code>defer</code>\u6307\u5b9a\u811a\u672c\u6267\u884c\u5b8c\u6bd5\u624d\u4f1a\u6267\u884c.</p> </li> <li> <p>2\uff0c<code>onload</code>:   \u6b64\u65f6\u6d4f\u89c8\u5668\u5df2\u7ecf\u5c06\u6240\u6709\u7684\u8d44\u6e90\u90fd\u52a0\u8f7d\u5b8c\u6bd5\uff0c\u4e14\u5176\u4f59\u811a\u672c<code>\u6267\u884c\u5b8c\u6bd5</code>\u4e4b\u540e\uff0c\u6700\u540e\u6267\u884c<code>onload</code>\u3002</p> </li> <li> <p><code>\u52a8\u6001</code>\u6dfb\u52a0\u7684 <code>script</code> \u6807\u7b7e\u9690\u542b <code>async</code> \u5c5e\u6027</p> </li> </ul>"},{"location":"Frontend/webpack-loader-plugin/","title":"loader\u3001plugin\u533a\u522b","text":""},{"location":"Frontend/webpack-loader-plugin/#webpackloaderplugin","title":"webpack\u7684loader\u548cplugin\u533a\u522b","text":"<ul> <li><code>loader</code> \u662f\u4e00\u4e2a\u8f6c\u6362\u5668\uff0c\u8fdb\u884c\u6587\u4ef6\u7684\u8f6c\u6362\uff0c\u6bd4\u5982\u5c06 <code>*.less</code> \u8f6c\u6362\u6210 <code>*.css</code>.</li> <li><code>plugin</code> \u662f\u4e00\u4e2a\u6269\u5c55\u5668\uff0c\u5bf9 <code>webpack</code> \u8fdb\u884c\u4e30\u5bcc\u4f18\u5316\u3002\u5728 <code>webpack</code> \u8fd0\u884c\u7684\u751f\u547d\u5468\u671f\u4e2d\u4f1a\u5e7f\u64ad\u51fa\u8bb8\u591a\u4e8b\u4ef6\uff0c<code>plugin</code> \u53ef\u4ee5\u76d1\u542c\u8fd9\u4e9b\u4e8b\u4ef6\u3002\u5728\u6253\u5305\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7hook\u5230\u6bcf\u4e00\u4e2a\u7f16\u8bd1\uff08compiler\uff09\u4e2d\uff0c\u5728\u5bf9\u5e94\u7684\u4e8b\u4ef6\u8282\u70b9\u6267\u884c\u81ea\u5b9a\u4e49\u64cd\u4f5c\uff0c\u6bd4\u5982\u8d44\u6e90\u7ba1\u7406\u3001\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\u7b49.</li> </ul>"},{"location":"Frontend/websocket/","title":"websocket","text":""},{"location":"Frontend/websocket/#websocket","title":"websocket","text":""},{"location":"Frontend/websocket/#nodeserver","title":"node\u521b\u5efaserver","text":"<pre><code>const socket = require('ws');\nconst server = new socket.Server({ port: 8080, path: '/demo/' }); // demo\u540e\u9762\u8981\u52a0/, \u5426\u5219\u8fde\u63a5\u4f1a\u5931\u8d25\nserver.on('connection', (socket) =&gt; {\n    console.log('Client connected');\n    // \u5904\u7406\u6536\u5230\u7684\u6d88\u606f\n    socket.on('message', (data, isBuffer) =&gt; {\n      console.log(`Received:`,  data, isBuffer, );\n      // \u5728\u6b64\u5904\u6dfb\u52a0\u5904\u7406\u6d88\u606f\u7684\u903b\u8f91\n      if(isBuffer) {\n        const decoder = new TextDecoder();\n        const origin = decoder.decode(new Uint8Array(data));\n        console.log('--',origin)\n      }\n    });\n    // \u5904\u7406\u8fde\u63a5\u5173\u95ed\n    socket.on('close', () =&gt; {\n      console.log('Client disconnected');\n    });\n  });\n\n\n// client:\n// ws\u975e\u52a0\u5bc6\uff0cwss\u52a0\u5bc6\nconst ServerAddr = 'ws://127.0.0.1:8080/demo'\nclass Client{\n    initialize() {\n        if (this.websocket_?.readyState === window.WebSocket.OPEN) return;\n        this.websocket_ = new window.WebSocket(ServerAddr);\n        this.websocket_.binaryType = \"arraybuffer\";\n        this.openTime = Date.now();\n        this.websocket_.onerror = this.onError;\n        this.websocket_.onmessage = this.onMessage;\n        this.websocket_.onopen = this.onOpen.bind(this);\n        this.websocket_.onclose = this.onClose;\n    }\n    onError(e){\n        console.log('error', e)\n    }\n    onMessage(event){\n        try{\n            const data = JSON.parse(event.data);\n        } catch(e) {\n            console.error(e)\n        }\n\n    }\n    onOpen(e){\n        console.log('open', e)\n        const a = new ArrayBuffer(10)\n        this.websocket_.send(a) // binary\u90a3\u91cc\u4f1a\u6536\u5230\n    }\n    onClose(e){\n        console.log('close', e)\n    }\n\n    send(data){\n        this.websocket_.send(data); // text\u90a3\u91cc\u4f1a\u6536\u5230\n    }\n}\nconst client = new Client();\nclient.initialize();\n\n</code></pre>"},{"location":"Frontend/3d/matrix/","title":"\u77e9\u9635","text":""},{"location":"Frontend/3d/matrix/#matrix","title":"matrix","text":"<ul> <li>\u4ee5threejs\u4e3a\u4f8b\uff0cmatrix\u4e3a\u5217\u5b58\u50a8\uff0c\u77e9\u9635set\u53ca\u8ba1\u7b97\u65b9\u5f0f\u8be6\u7ec6\u5206\u6790\u5982\u4e0b</li> <li>set\u65b9\u6cd5 \u884c\u4f18\u5148\uff0c\u5185\u90e8\u5b58\u50a8array \u5217\u4f18\u5148\uff0c\u6240\u4ee5\u5185\u90e8\u4f1a\u8f6c\u4e00\u6b21</li> </ul>"},{"location":"Frontend/3d/matrix/#set","title":"set","text":"<pre><code>const matrix = new  Matrix4();\n/**\n * \n * \u5185\u90e8\u8ba1\u7b97\u90fd\u662f\u4f7f\u7528\u5217\u4f18\u5148\u987a\u5e8f\u8fdb\u884c\n * \n * array like\uff1a\n * \u5217\u4f18\u5148\n * [n11, n21, n31, n41, n12, n22, n32, n42, n13, n23, n33, n43, n14, n24, n34, n44]\n * \n * \n * matrix look like:\n * \n * n11 n12 n13 n14\n * n21 n22 n23 n24\n * n31 n32 n33 n34\n * n41 n42 n43 n44\n * \n */\nmatrix.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    const te = this.elements;\n\n    te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n    te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n    te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n    te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n    return this;\n\n}\n</code></pre>"},{"location":"Frontend/3d/matrix/#vectormatrix","title":"vector\u4e0ematrix","text":"<ul> <li>vector.apply(matrix)\u5b9e\u9645\u662f\u77e9\u9635\u4e0e\u5411\u91cf\u76f8\u4e58\uff0c\u5411\u91cf\u662f4x1\u77e9\u9635\uff0cmatrix\u662f4x4\u77e9\u9635\uff0cmatrix\u4e0evector\u76f8\u4e58\u662f4x4 \u00b7 4x1\uff0c\u7ed3\u679c\u662f4x1\u77e9\u9635\uff0c\u5373vector.</li> </ul> <pre><code>const v = new Vector3();\nconst m = new Matrix4();\nconst newVector = v.clone().applyMatrix4(m);\n\n// \u4ee5\u53f3\u624b\u5750\u6807\u7cfb\u6784\u9020\u4e00\u4e2a\u65cb\u8f6c\u77e9\u9635\uff0c\u9006\u65f6\u9488\u65cb\u8f6ctheta\u89d2\u7684\u65cb\u8f6c\u77e9\u9635\u4e3a\nmatrix = [\n    cos(theta) -sin(theta)\n    sin(theta) cos(theta)\n];\nvector = [x, y];\n\nvector.apply(matrix):\n\n// \u8ba1\u7b97\u8fc7\u7a0b\uff1a\n\n| cos(theta)  -sin(theta) |   \n|                         |\n| sin(theta)  cos(theta)  |\n\n * [x, y]T \n\n = [x * cos + y * -sin, x * sin + y * cos]T; \n// T\u8868\u793a\u8f6c\u7f6e\uff0c\u5373\u5411\u91cf\u4e3a\u5217\u5411\u91cf\n\n\n// \u8fde\u7eed\u76f8\u4e58\nv.applyMatrix4(m1).applyMatrix4(m2):\n\n// \u7b2c\u4e00\u6b65\nv.applyMatrix4(m1) = m1 * v;\n\n// \u7b2c\u4e8c\u6b65\n...applyMatrix4(m2) = m2 * (m1 * v) = (m2 * m1) * v\n\n// \u6240\u4ee5\nv.applyMatrix4(m1).applyMatrix4(m2) = v.applyMatrix4(m2.multiply(m1));\n\n// m2.multiply(m1) = m2 * m1;\n\n</code></pre>"},{"location":"Frontend/3d/matrix/#threejs","title":"threejs\u91cc\u7684\u77e9\u9635\u76f8\u4e58","text":"<pre><code>// \u77e9\u9635\u76f8\u4e58\n\nthis.multiply(matrix) =&gt; this.multiplyMatrices(this, matrix);\n\n// \u5176\u5b9e\u5c31\u662f\u4e24\u4e2a\u77e9\u9635\u884c\u5f62\u5f0f\u7684\u76f8\u4e58\uff1athis.multiply(matrix) = this x matrix;\n\nmultiplyMatrices( a, b ) {\n\n    const ae = a.elements;\n    const be = b.elements;\n    const te = this.elements;\n\n    const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n    const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n    const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n    const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n    const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n    const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n    const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n    const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n    te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    return this;\n\n}\n\n</code></pre>"},{"location":"Frontend/TS/RunTs/","title":"\u8fd0\u884cTS","text":"<ul> <li>npm install typescript -g</li> <li>tsc *.ts //\u7f16\u8bd1ts\u6587\u4ef6</li> <li>node *.js</li> </ul>"},{"location":"Frontend/TS/TS-type%26interface/","title":"TS\u7684type\u548cinterface\u533a\u522b\u4e0e\u8054\u7cfb","text":""},{"location":"Frontend/TS/TS-type%26interface/#interface-vs-type","title":"interface VS type\u533a\u522b\u4e8e\u8054\u7cfb \u53c2\u8003\u535a\u6587\u94fe\u63a5","text":"<p>An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot. An interface can have multiple merged declarations, but a type alias for an object type literal cannot.</p>"},{"location":"Frontend/TS/TS-type%26interface/#_1","title":"\u76f8\u540c\u70b9","text":"<ul> <li>\u90fd\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u6216\u8005\u51fd\u6570</li> </ul> <pre><code>    interface User {\n        name: string\n        age: number\n    }\n\n    interface SetUser {\n        (name: string, age: number): void;\n    }\n\n    type User = {\n        name: string\n        age: number\n    };\n\n    type SetUser = (name: string, age: number) =&gt; void;\n</code></pre> <ul> <li>\u90fd\u5141\u8bb8\u62d3\u5c55\uff08<code>extends</code>\uff09 <p>interface \u548c type \u90fd\u53ef\u4ee5\u62d3\u5c55\uff0c\u5e76\u4e14\u4e24\u8005\u5e76\u4e0d\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 interface \u53ef\u4ee5 extends type, type \u4e5f\u53ef\u4ee5 extends interface \u3002 \u867d\u7136\u6548\u679c\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4e24\u8005\u8bed\u6cd5\u4e0d\u540c\u3002</p> </li> </ul> <pre><code>    interface extends interface:\n    interface Name { \n        name: string; \n    }\n\n    interface User extends Name { \n        age: number; \n    }\n\n    type extends type:\n    type Name = { \n        name: string; \n    }\n    type User = Name &amp; { age: number  };\n\n    interface extends type:\n    type Name = { \n        name: string; \n    }\n    interface User extends Name { \n        age: number; \n    }\n\n    type extends interface:\n    interface Name { \n        name: string; \n    }\n\n    type User = Name &amp; { \n        age: number; \n    }\n</code></pre>"},{"location":"Frontend/TS/TS-type%26interface/#_2","title":"\u4e0d\u540c\u70b9","text":"<ul> <li>type \u53ef\u4ee5\u800c interface \u4e0d\u884c</li> </ul> <pre><code>    type \u53ef\u4ee5\u58f0\u660e\u57fa\u672c\u7c7b\u578b\u522b\u540d\uff0c\u8054\u5408\u7c7b\u578b\uff0c\u5143\u7ec4\u7b49\u7c7b\u578b\n\n    // \u57fa\u672c\u7c7b\u578b\u522b\u540d\n    type Name = string\n\n    // \u8054\u5408\u7c7b\u578b\n    interface Dog {\n        wong();\n    }\n    interface Cat {\n        miao();\n    }\n\n    type Pet = Dog | Cat\n\n    // \u5177\u4f53\u5b9a\u4e49\u6570\u7ec4\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7c7b\u578b\n    type PetList = [Dog, Pet]\n</code></pre> <ul> <li>type \u8bed\u53e5\u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 typeof \u83b7\u53d6\u5b9e\u4f8b\u7684 \u7c7b\u578b\u8fdb\u884c\u8d4b\u503c</li> </ul> <pre><code>    // \u5f53\u4f60\u60f3\u83b7\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u65f6\uff0c\u4f7f\u7528 typeof\n    let div = document.createElement('div');\n    type B = typeof div\n</code></pre> <ul> <li>\u5176\u4ed6\u64cd\u4f5c</li> </ul> <pre><code>    type StringOrNumber = string | number;  \n    type Text = string | { text: string };  \n    type NameLookup = Dictionary&lt;string, Person&gt;;  \n    type Callback&lt;T&gt; = (data: T) =&gt; void;  \n    type Pair&lt;T&gt; = [T, T];  \n    type Coordinates = Pair&lt;number&gt;;  \n    type Tree&lt;T&gt; = T | { left: Tree&lt;T&gt;, right: Tree&lt;T&gt; };\n</code></pre> <ul> <li>interface \u53ef\u4ee5\u800c type \u4e0d\u884c</li> </ul> <pre><code>    interface \u80fd\u591f\u58f0\u660e\u5408\u5e76:\n    interface User {\n        name: string\n        age: number\n    }\n\n    interface User {\n        sex: string\n    }\n\n    /*\n    User \u63a5\u53e3\u4e3a {\n    name: string\n    age: number\n    sex: string \n    }\n    */\n</code></pre>"},{"location":"Frontend/react/Form/","title":"antd-form","text":""},{"location":"Frontend/react/Form/#antdform","title":"antd\u7684Form\u8868\u683c\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>import React, { MutableRefObject } from \"react\";\nimport {\n  Button,\n  Form,\n  Select,\n  Space,\n  InputNumber,\n  Tag,\n  Flex,\n  Upload,\n  Input,\n  InputRef,\n  message,\n} from \"antd\";\nimport styles from \"./index.module.less\";\nimport { IFormData } from \"./interface\";\nimport { observer } from \"mobx-react-lite\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { RcFile } from \"antd/lib/upload\";\nimport _ from \"lodash\";\n\nconst fs = window.require(\"fs\");\n\nconst fileLists: string[] = [];\n\nconst\u3000Parameter = observer(() =&gt; {\n  const [form] = Form.useForm();\n\n  const [collapse, setCollapse] = React.useState(true);\n\n  const Ref\uff11 = React.useRef&lt;InputRef&gt;() as MutableRefObject&lt;InputRef&gt;;\n\n  const Ref\uff12 = React.useRef&lt;InputRef&gt;() as MutableRefObject&lt;InputRef&gt;;\n\n  React.useEffect(() =&gt; {\n    const defaultFormData = store.formData;\u3000\n\n\n    form.setFieldsValue(defaultFormData.data);\n\n    setCollapse(true);\n\n\n  }, [store.formData]);\n\n  React.useEffect(() =&gt; {\n\n    fs.readFile(path + \"json.json\", (_err: any, data: any) =&gt; {\n      JSON.parse(data.toString());\n    });\n  }, [store.path]);\n\n  const onSubmit = (values: Partial&lt;IFormData&gt;) =&gt; {\n\n  };\n\n  const onReset = () =&gt; {\n    form.resetFields();\n  };\n\n\n  const throttleSetDirPath = _.throttle((file: File) =&gt; {\n    const absolutePath = (file as any).path;\n    const splits = absolutePath.split(\"/\");\n    splits.pop();\n    const dir = splits.join(\"/\") + \"/\";\n  }, 100);\n\n  const onStartSelectFiles = () =&gt; {\n\n  };\n\n  const typeComponent = (type: keyof IFormData) =&gt; {\n    switch (type) {\n      case \"input1\":\n        return (\n          &lt;Form.Item key={type} name=\"input1\" label=\"input1\" colon={true}&gt;\n            &lt;Input.TextArea\n              autoSize={true}\n              ref={Ref1}\n              placeholder=\"\u8f93\u5165:\"\n            &gt;&lt;/Input.TextArea&gt;\n          &lt;/Form.Item&gt;\n        )\n      case \"Upload\":\n        return (\n          &lt;Form.Item key={type} name=\"Upload\" label=\"Upload\" colon={true}&gt;\n            &lt;Upload\n              multiple={true}\n              showUploadList={false}\n              accept={`.${fileFormat}`}\n            &gt;\n              &lt;Button onClick={onStartSelectFiles} icon={&lt;UploadOutlined /&gt;}&gt;\n                (\u6309\u4f4fctrl\u952e\u591a\u9009)\n              &lt;/Button&gt;\n            &lt;/Upload&gt;\n          &lt;/Form.Item&gt;\n        );\n      case \"ttttt\":\n        return (\n          &lt;Form.Item key={type} name=\"ttttt\" label=\"ttttt\"&gt;\n            &lt;Flex gap=\"4px 0\" wrap&gt;\n              {/* {lists.map((item, index) =&gt; {\n                return item ? (\n                  &lt;Tag key={index} className={styles[\"tag\"]}&gt;\n                    &lt;span&gt;{item}&lt;/span&gt;\n                    &lt;div\n                      className={styles[\"close\"]}\n                      onClick={() =&gt; closeTag(item)}\n                    &gt;\n                      {closeOutline}\n                    &lt;/div&gt;\n                  &lt;/Tag&gt;\n                ) : null;\n              })} */}\n            &lt;/Flex&gt;\n            {/* &lt;Button type=\"default\" onClick={() =&gt; setShowTopic(!show)}&gt;\n              \u6dfb\u52a0\n            &lt;/Button&gt; */}\n          &lt;/Form.Item&gt;\n        );\n      default:\n        break;\n    }\n  };\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 3 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 20 },\n    },\n  };\n\n\n  const onClose = () =&gt; {\n\n};\n\n  return (\n    &lt;div className={styles[\"wrapper\"]}&gt;\n      &lt;div className={styles[\"header\"]}&gt;\n        &lt;Button\n          className={styles[\"header-close\"]}\n          type=\"primary\"\n          onClick={onClose}\n        &gt;\n          \u5173\u95ed\n        &lt;/Button&gt;\n      &lt;/div&gt;\n      &lt;div className={styles[\"content\"]}&gt;\n        &lt;Form\n          {...formItemLayout}\n          style={{ maxWidth: 900 }}\n          className={styles[\"form-wrapper\"]}\n          form={form}\n          onFinish={onSubmit}\n          layout=\"horizontal\"\n        &gt;\n          {formData.show.map((key) =&gt; {\n            return typeComponent(key);\n          })}\n          {!collapse &amp;&amp;\n            formData.collapse.map((key) =&gt; {\n              return typeComponent(key);\n            })}\n          {formData.collapse.length !== 0 &amp;&amp; (\n            &lt;div\n              className={styles[\"open-setting\"]}\n              onClick={() =&gt; {\n                console.log(\"click\");\n                setCollapse(!collapse);\n              }}\n            &gt;\n              &lt;span&gt;{collapse ? \"\u5c55\u5f00\" : \"\u9690\u85cf\"}\u9ed8\u8ba4\u914d\u7f6e&lt;/span&gt;\n              &lt;div&gt;{collapse ? rightOutline : topOutline}&lt;/div&gt;\n            &lt;/div&gt;\n          )}\n          &lt;Form.Item className={styles[\"footer\"]}&gt;\n            &lt;Space&gt;\n              &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                \u5f00\u59cb\n              &lt;/Button&gt;\n              &lt;Button htmlType=\"button\" onClick={onReset}&gt;\n                \u91cd\u7f6e\n              &lt;/Button&gt;\n            &lt;/Space&gt;\n          &lt;/Form.Item&gt;\n        &lt;/Form&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n});\n\n</code></pre>"},{"location":"Frontend/react/Init_React_Project/","title":"\u521b\u5efaReact","text":""},{"location":"Frontend/react/Init_React_Project/#node10140","title":"\u5b89\u88c5\u4e86node\uff0c\u4e14\u7248\u672c\u5927\u4e8e10.14.0\uff08\u76ee\u524d\u8981\u6c42\uff09","text":"<pre><code>npm install -g create-react-app\n\ncreate-react-app projectName\n</code></pre> <ul> <li>\u4fee\u6539\u9ed8\u8ba4\u76843000\u7aef\u53e3\uff1a</li> <li>\u65b9\u6cd51\uff1a     &gt; \u4fee\u6539 <code>/node_modules/react-scripts/scripts/start.js</code> \u4e2d\u7684 <code>DEFAULT_PORT</code></li> <li> <p>\u65b9\u6cd52\uff1a</p> <p>\u5728<code>package.json</code>\u7684<code>script</code>\u547d\u4ee4\u524d\u52a0\uff1a <code>set PORT=\u7aef\u53e3\u53f7</code>\u5373\u53ef</p> </li> <li> <p>\u6253\u5305\u8def\u5f84\u95ee\u9898\uff1a</p> <p>build\u540e\uff0c\u9ed8\u8ba4\u662f\u57df\u540d\u6839\u76ee\u5f55\u8bbf\u95ee\uff0c\u5982\u679c\u4e0d\u662f\u6839\u76ee\u5f55\uff0chtml\u4e2d\u8def\u5f84\u4f1a\u6709\u95ee\u9898\uff0c\u89e3\u51b3\u529e\u6cd5\u662f\u5728Package.json\u4e2d\u52a0\u5165:   <code>\"homepage\": \".\"</code></p> </li> </ul>"},{"location":"Frontend/react/redux/","title":"React\u72b6\u6001\u7ba1\u7406Redux","text":""},{"location":"Frontend/react/redux/#1-redux","title":"1, <code>redux</code> :","text":"<ul> <li>\u5b89\u88c5redux:</li> </ul> <pre><code>npm install redux\n</code></pre> <ul> <li>\u914d\u7f6e <code>store</code> :</li> <li>\u521b\u5efa <code>store.js</code> , \u521b\u5efa<code>store</code> (\u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528 <code>combineReducers</code> \u521b\u5efa\uff0c\u4ee5\u4fbf\u5206\u6a21\u5757\u5f00\u53d1)</li> </ul> <pre><code>import {createStore, combineReducers} from \"redux\";\nimport {reducerA} from \"../reducer/ReducerA\";\nimport {reducerB} from \"../reducer/ReducerB\";\n\nconst cr = combineReducers({\n    a: reducerA,\n    b: reducerB\n})\nconst store = createStore(cr);\nexport default store;\n</code></pre> <ul> <li><code>ReducerA.js</code>:</li> </ul> <pre><code>const reducerA = function(state = { aa: 1 }, action){\nswitch (action.type){\n    case \"Add\":\n        return { ...state, aa: state.aa + 1}\n        break;\n    default:\n        return state\n    }\n}\nexport { reducerA }\n</code></pre> <ul> <li><code>ReducerB.js</code>:</li> </ul> <pre><code>const reducerB = function(state = {bb: true}, action){\n    switch (action.type){\n        case \"Sub\":\n            return { ...state, bb: !state.bb}\n            break;\n        default:\n            return state\n    }\n}\nexport { reducerB }\n</code></pre>"},{"location":"Frontend/react/redux/#_1","title":"\u7ec4\u4ef6\u5185\u90e8\u8ba2\u9605\uff1a","text":"<pre><code>import store from \"../../redux/store\";\ncomponentDidMount() {\n    store.subscribe( () =&gt; {\n        this.forceUpdate()\n    })\n}\n</code></pre> <ul> <li>\u7ec4\u4ef6\u5185\u90e8\u89e6\u53d1 <code>action</code> \uff1a</li> </ul> <pre><code>add(){\n    store.dispatch({\n        type: \"Add\",\n        payload: 123\n    })\n    console.log(store.getState())\n}\n</code></pre> <ul> <li>\u7ec4\u4ef6\u5185\u90e8\u83b7\u53d6 <code>state</code> \uff1a</li> </ul> <pre><code>store.getState()\n</code></pre>"},{"location":"Frontend/react/redux/#_2","title":"\u7d44\u4ef6\u95f4\u6570\u636e\u7ba1\u7406\uff1a","text":"<ul> <li>\u7ec4\u4ef6A\u6539\u53d8\u6570\u636e\uff1a</li> </ul> <pre><code>    store.dispatch({\n        type: \"Change\",\n        payload: {\n            p1 : \"p1\",\n            p2 : \"p2\"\n        }\n    })\n</code></pre> <ul> <li>\u7ec4\u4ef6B\u8ba2\u9605\u6570\u636e\u53d8\u5316</li> </ul> <pre><code>    constructor() {\n        super();\n        this.state = { myData: store.getState().myData }\n    }\n    componentDidMount() {\n        store.subscribe(() =&gt; {\n            this.setState({\n                myData: store.getState().myData\n            })\n        })\n    }\n</code></pre> <ul> <li><code>reducer</code>\u5b9a\u4e49\uff1a</li> </ul> <pre><code>const reducerC = function(state = { p1:\"\", p2:\"\" }, action){\n    switch (action.type){\n        case \"Change\":\n            return { ...state,\n                p1: action.payload.p1,\n                p2: action.payload.p2\n            }\n            break;\n        default:\n            return state\n    }\n}\nexport {reducerC}\n</code></pre>"},{"location":"Frontend/react/redux/#reducer","title":"<code>reducer</code> \u662f\u4ec0\u4e48\uff1a","text":"<pre><code>reducer \u63cf\u8ff0\u4e00\u4e2a\u72b6\u6001\u6a21\u578b\u3002\u5728 Redux \u4e0b\uff0c\u5e94\u7528\u7684\u72b6\u6001\u5b58\u50a8\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u3002\nreducer \u5904\u7406 Action\uff0c\u4e00\u4e2a Action \u89e6\u53d1\uff0c\u6839\u636e\u8fd9\u4e2a Action \u7684\u7c7b\u578b\u8fdb\u884c\u76f8\u5e94\u7684\u64cd\u4f5c, \u5bf9 \u65e7State \u8fdb\u884c\u4fee\u6539\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684State\u3002\n\u6bcf\u4e2a diapatch \u7684 Action \u4f1a\u8c03\u7528 combineReducers(REDUCERS) \u4e2d\u6240\u6709\u7684 REDUCERS \u8fdb\u884c\u5904\u7406\uff0c\u4e00\u4e2a Action \u4f1a\u88ab\u6bcf\u4e2a REDUCER \u90fd\u5904\u7406\u4e00\u904d.\n</code></pre>"},{"location":"Frontend/react/redux/#2-mobx","title":"2, <code>mobx</code> \u4f7f\u7528","text":"<pre><code>import { makeObservable, observable, action } from \"mobx\";\n\nclass Store {\n\n    param1: boolean = '';\n    constructor() {\n        makeObservable(this, {\n        param1: observable\n        setValue: action,\n        });\n    }\n\n    setValue() {}\n}\nexport const store = new Store();\n\n// \u7ec4\u4ef6\u793a\u4f8b\nimport { observer } from \"mobx-react-lite\";\nconst Component1: React.FC = observer(() =&gt; {\n  if (!store.param1) {\n    return null;\n  }\n\n  return (\n    &lt;div className={styles[\"aaa\"]}&gt;\n      &lt;Component2 /&gt;\n    &lt;/div&gt;\n  );\n});\n\n</code></pre>"},{"location":"Frontend/react/route/","title":"\u8def\u7531","text":"<p>React\u7684\u4e24\u79cdroute\uff1aBrowserRoute / HashRoute</p> <p>HashRoute\u5f62\u5f0f: localhost:3000/#/some/route, \u6b64\u65f6location.hash\u4e3a#/some/route\uff0c\u79f0\u4e3a\u6563\u5217\u503c\uff0c\u4e0d\u4f1a\u968f\u8bf7\u6c42\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\uff0c\u6240\u4ee5\u6539\u53d8hash\u4e0d\u4f1a\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u3002 BrowserRouter\u5f62\u5f0f\uff1alocalhost:3000/some/route</p> <p>\u5728\u5355\u9875\u9762web\u7f51\u9875\u4e2d\uff0c\u5355\u7eaf\u7684\u6d4f\u89c8\u5668\u5730\u5740\u6539\u53d8\uff0c\u7f51\u9875\u4e0d\u4f1a\u91cd\u8f7d\uff0c\u5982\u5355\u7eaf\u7684hash\u503c\u6539\u53d8\uff0c\u7f51\u9875\u662f\u4e0d\u4f1a\u53d8\u5316\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u8def\u7531\u9700\u8981\u76d1\u542c\u4e8b\u4ef6\uff0c\u5e76\u5229\u7528js\u5b9e\u73b0\u52a8\u6001\u6539\u53d8\u7f51\u9875\u3002 hash \u6a21\u5f0f\uff1a\u76d1\u542c\u6d4f\u89c8\u5668\u5730\u5740hash\u503c\u53d8\u5316\uff0conhashchange\u4e8b\u4ef6\u76d1\u542c\uff0c\u5e76\u6267\u884c\u76f8\u5e94\u7684js\u5207\u6362\u3002</p> <p>history \u6a21\u5f0f\uff1a\u5229\u7528H5 history API\u5b9e\u73b0url\u5730\u5740\u6539\u53d8\uff0c\u7f51\u9875\u5185\u5bb9\u6539\u53d8\uff1a istory\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u5806\u6808\uff0c\u65b9\u6cd5\uff1a History.back\uff1a\u79fb\u52a8\u4e0a\u4e00\u4e2a\u7f51\u5740\uff0c\u7b49\u540c\u4e8e\u6d4f\u89c8\u5668\u7684\u540e\u9000\u3002 History.forward:\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u7f51\u5740\uff0c\u7b49\u540c\u4e8e\u6d4f\u89c8\u5668\u524d\u8fdb\u3002 History.go:\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u4ee5\u5f53\u524d\u7f51\u9875\u4e3a\u57fa\u51c6\uff0c\u6765\u8fdb\u884c\u8df3\u8f6c\u3002\u9ed8\u8ba4history.go(0),\u5237\u65b0\u5f53\u524d\u754c\u9762\u3002 history.go(1) \u76f8\u5f53\u4e0ehistory.forward(); History.pushState():\u5f80history\u5806\u6808\u4e2d\u6dfb\u52a0\u4e00\u6761\u8bb0\u5f55\u3002\u4e0d\u4f1a\u5237\u65b0\u754c\u9762\uff0c\u53ea\u4f1a\u5bfc\u81f4History\u5bf9\u8c61\u53d8\u5316\uff0c\u5730\u5740\u680f\u53d1\u751f\u53d8\u5316\u3002 History.replaceState():\u662f\u66ff\u6362\u5f53\u524dhistory\u5806\u6808\u4e2d\u6700\u4e0a\u5c42\u7684\u8bb0\u5f55\u3002\u4e5f\u662f\u4e0d\u4f1a\u5237\u65b0\u754c\u9762\uff0c\u53ea\u4f1a\u662fHistoty\u5bf9\u8c61\u53d8\u5316\uff0c\u5730\u5740\u680f\u53d1\u751f\u53d8\u5316\u3002 \u6bcf\u5f53history\u5bf9\u8c61\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u4f1a\u89e6\u53d1popstate\u4e8b\u4ef6\uff1awindow.addEventListener(\"popstate\",function(){})</p> <p>\u4e24\u79cd\u5f62\u5f0f\u5bf9\u6bd4\uff1a 1\uff0c\u5730\u5740\u680f\u8868\u73b0\u5f62\u5f0f\u4e0d\u4e00\u6837\uff1a BrowserRouter\u7684\u8def\u5f84\uff1alocalhost:3000/demo/a HashRouter\u7684\u8def\u5f84\uff1alocalhost:3000/#/demo/a 2\uff0c\u5237\u65b0\u540e\u5bf9\u8def\u7531state\u53c2\u6570\u7684\u5f71\u54cd BrowserRouter\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u56e0\u4e3astate\u4fdd\u5b58\u5728history\u5bf9\u8c61\u4e2d\u3002 HashRouter\u5237\u65b0\u540e\u4f1a\u5bfc\u81f4\u8def\u7531state\u53c2\u6570\u7684\u4e22\u5931</p>"},{"location":"Frontend/shader/","title":"Index","text":""},{"location":"Frontend/shader/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>by Patricio Gonzalez Vivo and Jen Lowe</p> <p>This is a gentle step-by-step guide through the abstract and complex universe of Fragment Shaders.</p>"},{"location":"Frontend/shader/#contents","title":"Contents","text":"<ul> <li> <p>About this book</p> </li> <li> <p>Getting started</p> <ul> <li>What is a shader?</li> <li>\u201cHello world!\u201d</li> <li>Uniforms</li> <li>Running your shader</li> </ul> </li> <li> <p>Algorithmic drawing</p> <ul> <li>Shaping functions</li> <li>Colors</li> <li>Shapes</li> <li>Matrices</li> <li>Patterns</li> </ul> </li> <li> <p>Generative designs</p> <ul> <li>Random</li> <li>Noise</li> <li>Cellular noise</li> <li>Fractional brownian motion</li> <li>Fractals</li> </ul> </li> <li> <p>Image processing</p> <ul> <li>Textures</li> <li>Image operations</li> <li>Kernel convolutions</li> <li>Filters</li> <li>Other effects</li> </ul> </li> <li> <p>Simulation</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ripples</li> <li>Water color</li> <li>Reaction diffusion</li> </ul> </li> <li> <p>3D graphics</p> <ul> <li>Lights</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (spherical and cube)</li> <li>Reflect and refract</li> </ul> </li> <li> <p>Appendix: Other ways to use this book</p> <ul> <li>How can I navigate this book offline?</li> <li>How to run the examples on a Raspberry Pi?</li> <li>How to print this book?</li> <li>How can I collaborate?</li> <li>An introduction for those coming from JS by Nicolas Barradeau</li> </ul> </li> <li> <p>Examples Gallery</p> </li> <li> <p>Glossary</p> </li> </ul>"},{"location":"Frontend/shader/#about-the-authors","title":"About the Authors","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) is a New York based artist and developer. He explores interstitial spaces between organic and synthetic, analog and digital, individual and collective. In his work he uses code as an expressive language with the intention of developing a better together.</p> <p>Patricio studied and practiced psychotherapy and expressive art therapy. He holds an MFA in Design &amp; Technology from Parsons The New School, where he now teaches. Currently he works as a Graphic Engineer at Mapzen making openSource mapping tools.</p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe is an independent data scientist and data communicator at Datatelling where she brings together people + numbers + words. She teaches in SVA's Design for Social Innovation program, cofounded the School for Poetic Computation, taught Math for Artists at NYU ITP, researched at the Spatial Information Design Lab at Columbia University, and contributed ideas at the White House Office of Science and Technology Policy. She's spoken at SXSW and Eyeo. Her work has been covered by The New York Times and Fast Company. Her research, writing, and speaking explore the promises and implications of data and technology in society. She has a B.S. in Applied Math and a Master's in Information Science. Often oppositional, she's always on the side of love.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/#acknowledgements","title":"Acknowledgements","text":"<p>Thanks Scott Murray for the inspiration and advice.</p> <p>Thanks Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji for contributing with support, good ideas and code.</p> <p>Thanks Kenichi Yoneda (Kynd) and Sawako for the Japanese translation (\u65e5\u672c\u8a9e\u8a33)</p> <p>Thanks Tong Li and Yi Zhang for the Chinese translation (\u4e2d\u6587\u7248)</p> <p>Thanks Jae Hyun Yoo and June Kim for the Korean translation (\ud55c\uad6d\uc5b4)</p> <p>Thanks Nahuel Coppero (Necsoft) for the Spanish translation (espa\u00f1ol)</p> <p>Thanks Raphaela Prot\u00e1sio and Lucas Mendon\u00e7a for the Portuguese translation (portugues)</p> <p>Thanks Nicolas Barradeau and Karim Naaji for the French translation (fran\u00e7ais)</p> <p>Thanks Andrea Rovescalli for the Italian translation (italiano)</p> <p>Thanks Michael Tischer for the German translation (deutsch)</p> <p>Thanks Sergey Karchevsky for the Russian translation (russian)</p> <p>Thanks Vu Phuong Hoang for the Vietnamese translation (Ti\u1ebfng Vi\u1ec7t)</p> <p>Thanks Wojciech Pachowiak for the Polish translation (polski)</p> <p>Thanks Manoylov Andriy for the Ukrainian translation (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434)</p> <p>Thanks Andy Stanton for fixing and improving the pdf/epub export pipeline</p> <p>Thanks to everyone who has believed in this project and contributed with fixes or donations.</p>"},{"location":"Frontend/shader/#get-new-chapters","title":"Get new chapters","text":"<p>Sign up for the news letter or follow it on Twitter / Mastodon / Discord</p>"},{"location":"Frontend/shader/#license","title":"LICENSE","text":"<p>Copyright (c) Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/ All rights reserved.</p>"},{"location":"Frontend/shader/README-ch/","title":"README ch","text":""},{"location":"Frontend/shader/README-ch/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>by Patricio Gonzalez Vivo</p> <p>\u8fd9\u662f\u4e00\u672c\u5173\u4e8e Fragment Shaders\uff08\u7247\u6bb5\u7740\u8272\u5668\uff09\u7684\u5165\u95e8\u6307\u5357\uff0c\u5b83\u5c06\u4e00\u6b65\u4e00\u6b65\u5730\u5e26\u4f60\u9886\u7565\u5176\u4e2d\u7684\u7eb7\u7e41\u4e0e\u62bd\u8c61\u3002</p>"},{"location":"Frontend/shader/README-ch/#_1","title":"\u5173\u4e8e\u7ffb\u8bd1","text":"<p>\u8fd9\u672c\u4e66\u662f Patricio \u7684 the Book of Shaders \u7684\u4e2d\u6587\u7ffb\u8bd1\u3002\u6211\u4eec\u5e0c\u671b\u501f\u6b64\u5c06 Shader \u8fd9\u4e2a\u6709\u8da3\u6709\u76ca\u7684\u5de5\u5177\u4ecb\u7ecd\u7ed9\u66f4\u591a\u56fd\u4eba\u3002\u80fd\u529b\u6240\u9650\uff0c\u4e0d\u514d\u6709\u8bef\uff0c\u5982\u6709\u7ffb\u8bd1\u4e0d\u5f53\uff0c\u4e5f\u8bf7\u591a\u591a\u6307\u51fa\u3002</p> <p>\u611f\u8c22 Patricio \u5bf9\u6211\u4eec\u7684\u7ffb\u8bd1\u7684\u4fe1\u4efb\u548c\u652f\u6301\u3002</p>"},{"location":"Frontend/shader/README-ch/#_2","title":"\u76ee\u5f55","text":"<ul> <li> <p>\u5173\u4e8e\u8fd9\u672c\u4e66</p> </li> <li> <p>\u5f00\u59cb</p> <ul> <li>\u4ec0\u4e48\u662f\u7247\u6bb5\u7740\u8272\u5668\uff08Fragment Shader\uff09\uff1f</li> <li>\u201cHello world!\u201d</li> <li>Uniforms\u503c</li> <li>\u8fd0\u884c\u4f60\u7684 shader</li> </ul> </li> <li> <p>\u7528\u7b97\u6cd5\u7ed8\u753b</p> <ul> <li>\u9020\u578b\u51fd\u6570</li> <li>\u989c\u8272</li> <li>\u5f62\u72b6</li> <li>\u77e9\u9635</li> <li>\u56fe\u6848</li> </ul> </li> <li> <p>\u751f\u6210\u8bbe\u8ba1</p> <ul> <li>\u968f\u673a</li> <li>\u566a\u58f0</li> <li>\u7f51\u683c\u566a\u58f0</li> <li>\u5206\u5f62\u5e03\u6717\u8fd0\u52a8</li> <li>\u5206\u5f62</li> </ul> </li> <li> <p>\u56fe\u50cf\u5904\u7406:</p> <ul> <li>\u7eb9\u7406</li> <li>\u56fe\u50cf\u5904\u7406</li> <li>\u5377\u79ef\u6838</li> <li>\u6ee4\u955c</li> <li>\u5176\u4ed6\u6548\u679c</li> </ul> </li> <li> <p>\u6a21\u62df</p> <ul> <li>\u4e52\u4e53</li> <li>Conway\u751f\u547d\u6e38\u620f</li> <li>\u6c34\u6ce2</li> <li>\u6c34\u5f69</li> <li>\u53cd\u5e94\u6269\u6563</li> </ul> </li> <li> <p>3D \u56fe\u5f62</p> <ul> <li>\u706f\u5149</li> <li>\u6cd5\u7ebf\u8d34\u56fe</li> <li>\u51f9\u51f8\u8d34\u56fe</li> <li>\u5149\u7ebf\u8ddf\u8e2a\uff08Ray marching\uff09</li> <li>\u73af\u5883\u8d34\u56fe (spherical and cube)</li> <li>\u6298\u5c04\u548c\u53cd\u5c04</li> </ul> </li> <li> <p>\u9644\u5f55: \u5176\u4ed6\u9605\u8bfb\u672c\u4e66\u7684\u65b9\u5f0f</p> <ul> <li>\u5982\u4f55\u79bb\u7ebf\u9605\u8bfb\u6b64\u4e66?</li> <li>\u5982\u4f55\u5728\u6811\u8393\u6d3e\u4e0a\u8fd0\u884c\u793a\u4f8b\u7a0b\u5e8f?</li> <li>\u5982\u4f55\u6253\u5370\u8fd9\u672c\u4e66</li> <li>\u6211\u600e\u6837\u5171\u521b\u8fd9\u672c\u4e66</li> <li>\u7ed9\u90a3\u4e9b\u4eceJS\u8bed\u8a00\u8fc7\u6765\u7684\u4eba\u7684\u4ecb\u7ecd by Nicolas Barradeau</li> </ul> </li> <li> <p>example gallery</p> </li> <li> <p>\u8bcd\u6c47\u8868</p> </li> </ul>"},{"location":"Frontend/shader/README-ch/#_3","title":"\u5173\u4e8e\u4f5c\u8005","text":"<p>Patricio Gonzalez Vivo (1982, \u5e03\u5b9c\u8bfa\u65af\u827e\u5229\u65af, \u963f\u6839\u5ef7) \u662f\u4e00\u4e2a\u9a7b\u5730\u7ebd\u7ea6\u7684\u827a\u672f\u5bb6\u3001\u5f00\u53d1\u8005\u3002\u4ed6\u81f4\u529b\u4e8e\u63a2\u7d22\u6709\u673a\u548c\u4eba\u9020\u3001\u6a21\u62df\u4fe1\u53f7\u548c\u6570\u5b57\u4fe1\u53f7\u3001\u4e2a\u4f53\u548c\u6574\u4f53\u4e4b\u95f4\u7684\u7a7a\u95f4\u3002\u4ed6\u7528\u4ee3\u7801\u8fd9\u79cd\u5bcc\u6709\u8868\u8fbe\u529b\u7684\u8bed\u8a00\u6765\u521b\u9020\u66f4\u7f8e\u597d\u7684\u4e8b\u7269\u3002</p> <p>Patricio \u7814\u4e60\u548c\u5b9e\u8df5\u7cbe\u795e\u7597\u6cd5\uff08psychotherapy\uff09\u548c\u8868\u8fbe\u6027\u827a\u672f\u6cbb\u7597\uff08expressive art therapy\uff09\u3002\u4ed6\u6bd5\u4e1a\u4e8e Parsons \u7684\u8bbe\u8ba1\u4e0e\u79d1\u6280\u4e13\u4e1a\uff0c\u4e14\u76ee\u524d\u6267\u6559\u4e8e\u6b64\u3002\u76ee\u524d\u4ed6\u4f5c\u4e3a Mapzen \u7684\u56fe\u5f62\u5f00\u53d1\u5de5\u7a0b\u5e08\u5236\u4f5c\u4e00\u4e9b\u5f00\u6e90\u7684 mapping tool\u3002</p> Twitter - GitHub - Vimeo -  Flickr"},{"location":"Frontend/shader/README-ch/#_4","title":"\u5173\u4e8e\u8bd1\u8005","text":"<ul> <li> <p>tornote \u7ffb\u8bd1 00-05 \u53ca\u7b2c 11 \u7ae0\u3002</p> </li> <li> <p>Artrustee \u7ffb\u8bd1 06-10 \u7ae0\u3002</p> </li> </ul> <p>\u540e\u7eed\u7ae0\u8282\u4f5c\u8005\u4ecd\u5728\u64b0\u5199\u4e2d\uff0c\u5982\u679c\u611f\u5174\u8da3\u53ef\u4ee5\u5728 github \u4e0a\u67e5\u770b\u90e8\u5206\u540e\u7eed\u7ae0\u8282\u4ee3\u7801\u3002</p>"},{"location":"Frontend/shader/README-ch/#_5","title":"\u81f4\u8c22","text":"<p>\u611f\u8c22\u6211\u7684\u59bb\u5b50 Jen Lowe, \u611f\u8c22\u5979\u65e0\u6761\u4ef6\u7684\u652f\u6301\u3001\u5e2e\u52a9\u4ee5\u53ca\u7f16\u8f91\u6b64\u4e66\u3002</p> <p>\u611f\u8c22 Scott Murray \u7ed9\u4e88\u7684\u542f\u53d1\u548c\u5efa\u8bae\u3002</p> <p>\u611f\u8c22 Kenichi Yoneda (Kynd) \u548c Sawako \u7684 \u65e5\u6587\u7248\u7ffb\u8bd1(\u65e5\u672c\u8a9e\u8a33)</p> <p>\u611f\u8c22 Tong Li \u548c Yi Zhang \u7684 \u4e2d\u6587\u7248(Chinese) \u7ffb\u8bd1\u3002</p> <p>\u611f\u8c22 Jae Hyun Yoo \u7684 \u97e9\u6587\u7248 (\ud55c\uad6d\uc5b4) \u7ffb\u8bd1\u3002</p> <p>\u611f\u8c22 Nahuel Coppero (Necsoft) \u7684 \u897f\u73ed\u7259\u8bed(espa\u00f1ol) \u7ffb\u8bd1\u3002</p> <p>\u611f\u8c22 Manoylov Andriy \u7684 \u4e4c\u514b\u5170\u8bed(\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430) \u7ffb\u8bd1\u3002</p> <p>\u611f\u8c22 Karim Naaji \u5728\u4ee3\u7801\u548c\u60f3\u6cd5\u4e0a\u7684\u652f\u6301\u548c\u8d21\u732e\u3002</p> <p>\u611f\u8c22\u6240\u6709\u76f8\u4fe1\u8fd9\u4e2a\u9879\u76ee\u7684\u4ebacontributed with fixes \u4ee5\u53ca\u5927\u5bb6\u7684\u6350\u8d60.</p>"},{"location":"Frontend/shader/README-ch/#_6","title":"\u83b7\u53d6\u65b0\u7684\u7ae0\u8282","text":"<p>\u6ce8\u518c\u4ee5\u83b7\u5f97\u6700\u65b0\u7ae0\u8282\uff0c \u6216 \u5728 Twitter / Mastodon / Discord \u4e0a\u5173\u6ce8\uff1a</p>"},{"location":"Frontend/shader/README-de/","title":"README de","text":""},{"location":"Frontend/shader/README-de/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>von Patricio Gonzalez Vivo und Jen Lowe</p> <p>Dies ist eine behutsame Schritt-f\u00fcr-Schritt-Einf\u00fchrung in die komplexe und vielfach abstrakte Welt der Fragment Shader.</p>"},{"location":"Frontend/shader/README-de/#inhalt","title":"Inhalt","text":"<ul> <li> <p>\u00dcber dieses Buch</p> </li> <li> <p>Jetzt geht\u2019s los</p> <ul> <li>Was ist ein Shader?</li> <li>\u201cHallo Welt!\u201d</li> <li>Uniforms</li> <li>Ausf\u00fchrung Deiner Shader</li> </ul> </li> <li> <p>Algorithmisches Zeichnen</p> <ul> <li>Formgebende Funktionen</li> <li>Farben</li> <li>Formen</li> <li>Matrizen</li> <li>Muster</li> </ul> </li> <li> <p>Generative Designs</p> <ul> <li>Zufall</li> <li>Rauschen</li> <li>Zellul\u00e4res Rauschen</li> <li>Gebrochene Brownsche Bewegung</li> <li>Fraktale</li> </ul> </li> <li> <p>Bildverarbeitung</p> <ul> <li>Texturen</li> <li>Bildbearbeitungsfunktionen</li> <li>Kernel Verwindungen</li> <li>Filter</li> <li>Weitere Effekte</li> </ul> </li> <li> <p>Simulationen</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Wellen</li> <li>Wasserfarben</li> <li>Reaktionsausbreitung</li> </ul> </li> <li> <p>3D Grafiken</p> <ul> <li>Licht</li> <li>Normal Mapping</li> <li>Bump-Mapping</li> <li>Ray Marching</li> <li>Environmental-Maps (sph\u00e4risch und kubisch)</li> <li>Reflektionen und Ablenkungen</li> </ul> </li> <li> <p>Anhang: Weitere Wege zur Nutzung dieses Buches</p> <ul> <li>Wie kann ich dieses Buch offline lesen?</li> <li>Wie lasse ich die Beispielprogramme auf einem Raspberry Pi ablaufen?</li> <li>Wie drucke ich dieses Buch aus?</li> <li>Wie kann ich zu diesem Buch beitragen?</li> <li>Eine Einf\u00fchrung f\u00fcr alle, die von JavaScript kommen von Nicolas Barradeau (Englisch)</li> </ul> </li> <li> <p>Beispielgalerien</p> </li> <li> <p>Glossar (Englisch)</p> </li> </ul>"},{"location":"Frontend/shader/README-de/#uber-die-autoren","title":"\u00dcber die Autoren","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentinien) ist ein K\u00fcnstler und Entwickler, der in New York lebt. Er erforscht die R\u00e4ume zwischen organisch und synthetisch, analog und digital, einzeln und zusammen. In seinen Arbeiten nutzt er Programmcode als Ausdrucksform, um das Zusammenwirken von Menschen zu verbessern.</p> <p>Patricio hat Psychologie studiert, au\u00dferdem kunstorientiertes Handeln (die sogenannte Expressive Arts Therapy). Er hat einen MFA-Abschluss in Design und Technologie von der Parsons New School For Design, wo er auch unterrichtet. Zur Zeit arbeitet Patricio als Grafikingenieur bei der Firma Mapzen und entwickelt dort Open-Source-Werkzeuge f\u00fcr die Computer-Kartographie.</p> Webseite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe ist eine unabh\u00e4ngige Datenwissenschaftlerin und Datenkommunikatorin bei der Firma Datatelling, wo sie Menschen, Zahlen und Sprache zusammenf\u00fchrt. Sie unterrichtet an der SVA das Fach Design for Social Innovation, hat die Schule f\u00fcr \u201ePoetic Computation\u201c mitbegr\u00fcndet, Mathematik f\u00fcr K\u00fcnstler an der New Yorker ITP-Universit\u00e4t unterrichtet, Forschungen am \u201eSpatial Information Design Lab\u201c der Columbia Universit\u00e4t durchgef\u00fchrt und Beitr\u00e4ge f\u00fcr das \u201eWhite House Office of Science and Technology\u201c geliefert, das den US-Pr\u00e4sidenten in Fragen des technischen Fortschritts ber\u00e4t. Als Sprecherin ist Jen auf Konferenzen wie der SXSW und der Eyeo aufgetreten. Von ihren Arbeiten hat unter anderem die New York Times, sowie das Magazin FastCompany berichtet. Ihre Forschungsarbeiten, Publikationen und Vortr\u00e4ge kreisen um die Versprechungen und Folgen von Daten und Technologien f\u00fcr die gesellschaftliche Entwicklung. Sie hat einen Bachelor in angewandter Mathematik und einen Master in Informatik. Obwohl man angesichts dieser Biographie vielleicht etwas anderes vermuten k\u00f6nnte, schl\u00e4gt sich Jen immer auf die Seite der Liebe.</p> Webseite - Twitter - GitHub"},{"location":"Frontend/shader/README-de/#danksagungen","title":"Danksagungen","text":"<p>Dank an Scott Murray f\u00fcr die Inspirationen und Ratschl\u00e4ge.</p> <p>Dank an Kenichi Yoneda (Kynd), Nicolas Barradeau und Karim Naaji f\u00fcr ihre Unterst\u00fctzung, Anregungen und Programmcode.</p> <p>Dank an Kenichi Yoneda (Kynd) und Sawako f\u00fcr die japanische \u00dcbersetzung des Textes (\u65e5\u672c\u8a9e\u8a33)</p> <p>Dank an Tong Li und Yi Zhang f\u00fcr die chinesische \u00dcbersetzung des Textes (\u4e2d\u6587\u7248)</p> <p>Dank an Jae Hyun Yoo f\u00fcr die koreanische \u00dcbersetzung des Textes (\ud55c\uad6d\uc5b4)</p> <p>Dank an Nahuel Coppero (Necsoft) f\u00fcr die spanische \u00dcbersetzung des Textes (espa\u00f1ol)</p> <p>Dank an Nicolas Barradeau und Karim Naaji f\u00fcr die franz\u00f6sische \u00dcbersetzung des Textes (fran\u00e7ais)</p> <p>Dank an Andrea Rovescalli f\u00fcr die  italienische \u00dcbersetzung des Textes (italiano)</p> <p>Dank an Michael Tischer f\u00fcr die deutsche \u00dcbersetzung des Textes</p> <p>Dank an Manoylov Andriy f\u00fcr die ukrainische \u00dcbersetzung des Textes (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>Und nat\u00fcrlich Danke an alle, die an dieses Projekt geglaubt, daf\u00fcr gespendet oder durch Hinweise und Korrekturen daran mitgewirkt haben.</p>"},{"location":"Frontend/shader/README-de/#hol-dir-die-neuen-kapitel","title":"Hol Dir die neuen Kapitel","text":"<p>Melde Dich f\u00fcr den Newsletter an oder folge uns auf Twitter / Mastodon / Discord</p>"},{"location":"Frontend/shader/README-es/","title":"README es","text":""},{"location":"Frontend/shader/README-es/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>por Patricio Gonzalez Vivo</p> <p>Esta es una gu\u00eda paso a paso a trav\u00e9s del abstracto y complejo universo de los Fragment Shaders.</p>"},{"location":"Frontend/shader/README-es/#contenidos","title":"Contenidos","text":"<ul> <li> <p>Acerca de este libro</p> </li> <li> <p>Comenzando</p> <ul> <li>\u00bfQu\u00e9 es un shader?</li> <li>\u201cHola Mundo!\u201d</li> <li>Uniforms</li> <li>Ejecutando tu shader</li> </ul> </li> <li> <p>Dibujando con algoritmos</p> <ul> <li>Funciones de forma</li> <li>Colores</li> <li>Formas</li> <li>Matrices</li> <li>Patrones</li> </ul> </li> <li> <p>Dise\u00f1os generativos</p> <ul> <li>Random</li> <li>Noise</li> <li>Movimiento browniano</li> <li>Fractales</li> </ul> </li> <li> <p>Procesamiento de im\u00e1genes</p> <ul> <li>Texturas</li> <li>Operaciones de Imagen</li> <li>Convoluciones de Kernel</li> <li>Filtros</li> <li>Otros efectos</li> </ul> </li> <li> <p>Simulaci\u00f3n</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ripples</li> <li>Water color</li> <li>Reaction diffusion</li> </ul> </li> <li> <p>Gr\u00e1ficos 3D</p> <ul> <li>Luces</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (esf\u00e9ricas y c\u00fabicas)</li> <li>Reflecci\u00f3n y refracci\u00f3n</li> </ul> </li> <li> <p>Ap\u00e9ndice: Otras formas de usar este libro</p> <ul> <li>\u00bfC\u00f3mo puedo ver el libro offline?</li> <li>\u00bfC\u00f3mo puedo correr los ejemplos en una Raspberry Pi?</li> <li>\u00bfC\u00f3mo imprimir este libro?</li> </ul> </li> <li> <p>Galer\u00eda de ejemplos</p> </li> <li> <p>Glosario</p> </li> </ul>"},{"location":"Frontend/shader/README-es/#acerca-del-autor","title":"Acerca del autor","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) es un artista y desarrollador que actualmente reside en New York. Explora los espacios que convergen entre lo org\u00e1nico y lo sint\u00e9tico, lo anal\u00f3gico y lo digital, lo individual y lo colectivo. En su trabajo utiliza el c\u00f3digo como un lenguaje expresivo con la intenci\u00f3n de lograr algo superador.</p> <p>Patricio estudi\u00f3 y ejerci\u00f3 psicoterapia y terapia de artes expresivas. Tiene un MFA en dise\u00f1o y tecnolog\u00eda de la Parsons The New School, donde hoy da clases. Actualmente el trabaja como Graphic Engineer en Mapzen, creando herramientas open source para trabajar con mapas.</p> Twitter - GitHub - Vimeo -  Flickr"},{"location":"Frontend/shader/README-es/#agradecimientos","title":"Agradecimientos","text":"<p>Gracias a mi esposa Jen Lowe, por su apoyo incondicional, su ayuda y el tiempo dedicado editando este libro.</p> <p>Gracias a Scott Murray por inspirarme y aconsejarme.</p> <p>Gracias a Kenichi Yoneda (Kynd) y a Sawako por la Traducci\u00f3n al japon\u00e9s (\u65e5\u672c\u8a9e\u8a33).</p> <p>Gracias a Tong Li y a Yi Zhangpor la Traducci\u00f3n al chino (\u4e2d\u6587\u7248).</p> <p>Gracias a Jae Hyun Yoo por la Traducci\u00f3n al coreano (\ud55c\uad6d\uc5b4).</p> <p>Gracias a Manoylov Andriy por la traducci\u00f3n al ucraniano (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>Gracias a Karim Naaji por su contribuci\u00f3n, su apoyo, su c\u00f3digo y sus buenas ideas.</p> <p>Gracias a todos los que creyeron en este proyecto y contribuyeron con sus aportes o donaciones.</p>"},{"location":"Frontend/shader/README-es/#como-conseguir-los-nuevos-capitulos","title":"\u00bfC\u00f3mo conseguir los nuevos cap\u00edtulos?","text":"<p>Suscribirse al newsletter o seguirnos en Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-fa/","title":"README fa","text":""},{"location":"Frontend/shader/README-fa/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>by Patricio Gonzalez Vivo and Jen Lowe</p> <p>\u0627\u06cc\u0646 \u06cc\u06a9 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u06af\u0627\u0645 \u0628\u0647 \u06af\u0627\u0645 \u0628\u0631\u0627\u06cc \u0648\u0631\u0648\u062f \u0628\u0647 \u062f\u0646\u06cc\u0627\u06cc \u0627\u0646\u062a\u0632\u0627\u0639\u06cc \u0648 \u067e\u06cc\u0686\u06cc\u062f\u0647 \u0641\u0631\u06af\u0645\u0646\u062a \u0634\u06cc\u062f\u0631 \u0647\u0627\u0633\u062a.</p>"},{"location":"Frontend/shader/README-fa/#_1","title":"\u0641\u0647\u0631\u0633\u062a","text":"<ul> <li> <p>\u062f\u0631\u0628\u0627\u0631\u0647 \u0627\u06cc\u0646 \u06a9\u062a\u0627\u0628</p> </li> <li> <p>\u0634\u0631\u0648\u0639</p> <ul> <li>\u0634\u06cc\u062f\u0631 \u0686\u06cc\u0633\u062a\u061f</li> <li>\u201cHello world!\u201d</li> <li>\u06cc\u0648\u0646\u06cc\u0641\u0631\u0645 \u0647\u0627</li> <li>\u0627\u062c\u0631\u0627 \u06a9\u0631\u062f\u0646 \u0634\u06cc\u062f\u0631</li> </ul> </li> <li> <p>\u0631\u0633\u0645 \u0627\u0644\u06af\u0648\u0631\u06cc\u062a\u0645\u06cc</p> <ul> <li>\u062a\u0648\u0627\u0628\u0639 \u0634\u06a9\u0644\u06cc</li> <li>\u0631\u0646\u06af \u0647\u0627</li> <li>\u0634\u06a9\u0644 \u0647\u0627</li> <li>\u0645\u0627\u062a\u0631\u06cc\u0633 \u0647\u0627</li> <li>\u0627\u0644\u06af\u0648 \u0647\u0627</li> </ul> </li> <li> <p>\u0637\u0631\u0627\u062d\u06cc \u0645\u0648\u0644\u062f</p> <ul> <li>\u0631\u0646\u062f\u0648\u0645</li> <li>\u0646\u0648\u06cc\u0632</li> <li>\u0646\u0648\u06cc\u0632 \u0633\u0644\u0648\u0644\u06cc</li> <li>\u062d\u0631\u06a9\u062a \u0628\u0631\u0627\u0648\u0646\u06cc \u06a9\u0633\u0631\u06cc</li> <li>\u0641\u0631\u0627\u06a9\u062a\u0627\u0644</li> </ul> </li> <li> <p>\u067e\u0631\u062f\u0627\u0632\u0634 \u062a\u0635\u0648\u06cc\u0631</p> <ul> <li>\u062a\u06a9\u0633\u062a\u0686\u0631 \u0647\u0627</li> <li>\u0639\u0645\u0644\u06cc\u0627\u062a \u062a\u0635\u0648\u06cc\u0631\u06cc</li> <li>\u067e\u06cc\u0686\u06cc\u062f\u06af\u06cc \u0647\u0627\u06cc \u0647\u0633\u062a\u0647</li> <li>\u0641\u06cc\u0644\u062a\u0631 \u0647\u0627</li> <li>\u062f\u06cc\u06af\u0631 \u0627\u0641\u06a9\u062a \u0647\u0627</li> </ul> </li> <li> <p>\u0634\u0628\u06cc\u0647 \u0633\u0627\u0632\u06cc</p> <ul> <li>\u067e\u06cc\u0646\u06af \u067e\u0646\u06af</li> <li>Conway</li> <li>\u0645\u0648\u062c \u062f\u0627\u0631</li> <li>\u0631\u0646\u06af \u0622\u0628</li> <li>\u0627\u0646\u062a\u0634\u0627\u0631 \u0648\u0627\u06a9\u0646\u0634</li> </ul> </li> <li> <p>\u06af\u0631\u0627\u0641\u06cc\u06a9 3 \u0628\u0639\u062f\u06cc</p> <ul> <li>\u0646\u0648\u0631 \u0647\u0627</li> <li>\u0646\u0631\u0645\u0627\u0644 \u0645\u067e \u0647\u0627</li> <li>\u0628\u0627\u0645\u067e \u0645\u067e \u0647\u0627</li> <li>Ray marching</li> <li>\u0645\u067e \u0647\u0627\u06cc \u0645\u062d\u06cc\u0637\u06cc</li> <li>\u0627\u0646\u0639\u06a9\u0627\u0633 \u0648 \u0634\u06a9\u0633\u062a</li> </ul> </li> <li> <p>\u0636\u0645\u06cc\u0645\u0647: \u0631\u0627\u0647 \u0647\u0627\u06cc \u062f\u06cc\u06af\u0631 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632\u06cc\u0646 \u06a9\u062a\u0627\u0628</p> <ul> <li>\u0686\u06af\u0648\u0646\u0647 \u0628\u0635\u0648\u0631\u062a \u0622\u0641\u0644\u0627\u06cc\u0646 \u0627\u0632 \u0627\u06cc\u0646 \u06a9\u062a\u0627\u0628 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u0645\u061f</li> <li>\u0686\u06af\u0648\u0646\u0647 \u0631\u0648\u06cc \u0631\u0632\u0628\u0631\u06cc \u067e\u0627\u06cc \u0645\u062b\u0627\u0644 \u0647\u0627 \u0631\u0627 \u0627\u062c\u0631\u0627 \u06a9\u0646\u0645\u061f</li> <li>\u0686\u06af\u0648\u0646\u0647 \u0627\u06cc\u0646 \u06a9\u062a\u0627\u0628 \u0631\u0627 \u0686\u0627\u067e \u06a9\u0646\u0645\u061f</li> <li>\u0686\u06af\u0648\u0646\u0647 \u0645\u0634\u0627\u0631\u06a9\u062a \u06a9\u0646\u0645\u061f</li> <li>\u0645\u0642\u062f\u0645\u0647 \u0627\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0633\u0627\u0646\u06cc \u06a9\u0647 \u0627\u0632 \u062c\u0627\u0648\u0627 \u0627\u0633\u06a9\u0631\u06cc\u067e\u062a \u0622\u0645\u062f\u0647 \u0627\u0646\u062f. \u062a\u0648\u0633\u0637 Nicolas Barradeau</li> </ul> </li> <li> <p>\u06af\u0627\u0644\u0631\u06cc \u0645\u062b\u0627\u0644 \u0647\u0627</p> </li> <li> <p>\u0648\u0627\u0698\u0647 \u0646\u0627\u0645\u0647</p> </li> </ul>"},{"location":"Frontend/shader/README-fa/#_2","title":"\u062f\u0631\u0628\u0627\u0631\u0647 \u0646\u0648\u06cc\u0633\u0646\u062f\u06af\u0627\u0646","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) \u06cc\u06a9 \u0622\u0631\u062a\u06cc\u0633\u062a \u0648 \u062a\u0648\u0633\u0639\u0647 \u062f\u0647\u0646\u062f\u0647 \u0627\u0647\u0644 \u0646\u06cc\u0648\u06cc\u0648\u0631\u06a9 \u0627\u0633\u062a. \u0627\u0648 \u0641\u0636\u0627 \u0647\u0627\u06cc \u0628\u06cc\u0646\u0627\u0628\u06cc\u0646\u06cc \u0631\u0627 \u062c\u0633\u062a\u062c\u0648 \u0645\u06cc\u200c\u06a9\u0646\u062f\u060c \u0628\u06cc\u0646 \u0627\u0631\u06af\u0627\u0646\u06cc\u06a9 \u0648 \u0645\u0635\u0646\u0648\u0639\u06cc\u060c \u0628\u06cc\u0646 \u0622\u0646\u0627\u0644\u0648\u06af \u0648 \u062f\u06cc\u062c\u06cc\u062a\u0627\u0644\u060c \u0628\u06cc\u0646 \u0641\u0631\u062f\u06cc \u0648 \u0627\u062c\u062a\u0645\u0627\u0639\u06cc. \u0627\u0648 \u0627\u0632 \u06a9\u062f \u0628\u0639\u0646\u0648\u0627\u0646 \u06cc\u06a9 \u0632\u0628\u0627\u0646 \u0631\u0633\u0627 \u0628\u0631\u0627\u06cc \u062a\u0648\u0633\u0639\u0647 \u0628\u0647\u062a\u0631 \u062f\u0631 \u06a9\u0627\u0631 \u062e\u0648\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u06a9\u0646\u062f.</p> <p>\u0627\u0648 \u062f\u0627\u0646\u0634 \u0622\u0645\u0648\u062e\u062a\u0647 \u0631\u0648\u0627\u0646 \u062f\u0631\u0645\u0627\u0646\u06cc \u0648 expressive art therapy \u0627\u0633\u062a. \u0647\u0645\u0686\u0646\u06cc\u0646 \u062f\u0627\u0631\u0627\u06cc \u0645\u062f\u0631\u06a9 MFA \u062f\u0631 \u0632\u0645\u06cc\u0646\u0647 \u0637\u0631\u0627\u062d\u06cc \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u0627\u0632 Parsons The new School \u0647\u0633\u062a \u0648 \u0627\u06a9\u0646\u0648\u0646 \u062f\u0631 \u0622\u0646\u062c\u0627 \u062a\u062f\u0631\u06cc\u0633 \u0645\u06cc\u200c\u06a9\u0646\u062f. \u0647\u0645 \u0627\u06a9\u0646\u0648\u0646 \u0628\u0639\u0646\u0648\u0627\u0646 \u0645\u0647\u0646\u062f\u0633 \u06af\u0631\u0627\u0641\u06cc\u06a9 \u062f\u0631 Mapzen \u0645\u0634\u063a\u0648\u0644 \u0633\u0627\u062e\u062a \u0627\u0628\u0632\u0627\u0631 \u0646\u0642\u0634\u0647 \u0628\u0631\u062f\u0627\u0631\u06cc open Source \u0647\u0633\u062a. </p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe \u06cc\u06a9 \u062f\u0627\u0646\u0634\u0645\u0646\u062f \u0648 \u0627\u0631\u062a\u0628\u0627\u0637 \u062f\u0647\u0646\u062f\u0647 \u062f\u0627\u062f\u0647 \u0645\u0633\u062a\u0642\u0644 \u062f\u0631 Datatelling \u0627\u0633\u062a. \u062c\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0641\u0631\u0627\u062f \u0648 \u0627\u0639\u062f\u0627\u062f \u0648 \u062d\u0631\u0648\u0641 \u0631\u0627 \u06a9\u0646\u0627\u0631 \u0647\u0645 \u062c\u0645\u0639 \u0645\u06cc\u200c\u06a9\u0646\u062f. \u0627\u0648 \u0647\u0645\u0686\u0646\u06cc\u0646 \u0637\u0631\u0627\u062d\u06cc SVA \u062a\u062f\u0631\u06cc\u0633 \u0645\u06cc\u200c\u06a9\u0646\u062f\u060c \u0648 \u0647\u0645 \u0628\u0646\u06cc\u0627\u0646\u06af\u0630\u0627\u0631 \u062f\u0627\u0646\u0634\u06a9\u062f\u0647 \u0645\u062d\u0627\u0633\u0628\u0627\u062a \u0634\u0627\u0639\u0631\u0627\u0646\u0647 \u0627\u0633\u062a. \u0647\u0645\u0686\u0646\u06cc\u0646 \u062f\u0631 SXSW \u0648 Eyeo \u0633\u062e\u0646\u0631\u0627\u0646 \u0627\u0633\u062a. \u06a9\u0627\u0631 \u0647\u0627\u06cc \u0627\u0648 \u062a\u0648\u0633\u0637 \u0646\u06cc\u0648\u06cc\u0648\u0631\u06a9 \u062a\u0627\u06cc\u0645\u0632 \u0648 Fast Company \u067e\u0648\u0634\u0634 \u062f\u0627\u062f\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a. \u062a\u062d\u0642\u06cc\u0642\u060c \u0646\u0648\u0634\u062a\u0627\u0631 \u0648 \u06af\u0641\u062a\u0627\u0631 \u0627\u0648 \u067e\u06cc\u0627\u0645\u062f \u0647\u0627\u06cc \u062f\u0627\u062f\u0647 \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u062f\u0631 \u062c\u0627\u0645\u0639\u0647 \u0631\u0627 \u06a9\u0627\u0648\u0634 \u0645\u06cc\u200c\u06a9\u0646\u062f. \u0627\u0648 \u062f\u0627\u0631\u0627\u06cc \u0645\u062f\u0631\u06a9 B.S \u062f\u0631 \u0631\u06cc\u0627\u0636\u06cc\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u0648 \u06a9\u0627\u0631\u0634\u0646\u0627\u0633\u06cc \u0627\u0631\u0634\u062f \u062f\u0631 \u0639\u0644\u0648\u0645 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0627\u0633\u062a. \u0627\u063a\u0644\u0628 \u0645\u062e\u0627\u0644\u0641 \u0627\u0633\u062a \u0648 \u0647\u0645\u06cc\u0634\u0647 \u062f\u0631 \u06a9\u0646\u0627\u0631 \u0639\u0634\u0642.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-fa/#_3","title":"\u0633\u067e\u0627\u0633 \u06af\u0630\u0627\u0631\u06cc \u0647\u0627","text":"<p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Scott Murray \u0628\u0631\u0627\u06cc \u0627\u0644\u0647\u0627\u0645 \u0648 \u0645\u0634\u0627\u0648\u0631\u0647.</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji \u0628\u0631\u0627\u06cc \u06a9\u0645\u06a9 \u0648 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc\u060c \u0647\u0645\u0686\u0646\u06cc\u0646 \u0627\u06cc\u062f\u0647 \u0647\u0627 \u0648 \u06a9\u062f \u062e\u0648\u0628.</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Kenichi Yoneda (Kynd) and Sawako \u0628\u0631\u0627\u06cc Japanese   (\u65e5\u672c\u8a9e\u8a33)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Tong Li \u0648 Yi Zhang \u0628\u0631\u0627\u06cc  Chinese translation (\u4e2d\u6587\u7248)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Jae Hyun Yoo \u0628\u0631\u0627\u06cc  Korean translation (\ud55c\uad6d\uc5b4)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Nahuel Coppero (Necsoft) \u0628\u0631\u0627\u06cc Spanish translation (espa\u00f1ol)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Raphaela Prot\u00e1sio \u0648 Lucas Mendon\u00e7a \u0628\u0631\u0627\u06cc Portuguese translation (portugues)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Nicolas Barradeau \u0648 Karim Naaji \u0628\u0631\u0627\u06cc  French translation (fran\u00e7ais)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Andrea Rovescalli \u0628\u0631\u0627\u06cc  Italian translation (italiano)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Michael Tischer \u0628\u0631\u0627\u06cc  German translation (deutsch)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Sergey Karchevsky \u0628\u0631\u0627\u06cc Russian translation (russian)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Manoylov Andriy \u0628\u0631\u0627\u06cc Ukrainian translation (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 Andy Stanton \u0628\u0631\u0627\u06cc \u0627\u0635\u0644\u0627\u062d \u0648 \u0628\u0647\u0628\u0648\u062f the pdf/epub export pipeline</p> <p>\u0645\u0645\u0646\u0648\u0646 \u0627\u0632 \u0647\u0645\u0647 \u06a9\u0633\u0627\u0646\u06cc \u06a9\u0647 \u0628\u0647 \u0627\u06cc\u0646 \u067e\u0631\u0648\u0698\u0647 \u0627\u06cc\u0645\u0627\u0646 \u062f\u0627\u0634\u062a\u0646\u062f \u0648\u062f\u0631 \u0627\u0635\u0644\u0627\u062d\u0627\u062a \u0645\u0634\u0627\u0631\u06a9\u062a \u06a9\u0631\u062f\u0646\u062f \u0648 \u06cc\u0627 \u0627\u0647\u062f\u0627 \u06a9\u0631\u062f\u0646\u062f.</p>"},{"location":"Frontend/shader/README-fa/#_4","title":"\u0642\u0633\u0645\u062a \u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \u0631\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u062f","text":"<p>\u0628\u0631\u0627\u06cc \u0627\u062e\u0628\u0627\u0631 \u0648 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062c\u062f\u06cc\u062f \u062b\u0628\u062a \u0646\u0627\u0645 \u06a9\u0646\u06cc\u062f \u06cc\u0627 \u062f\u0631 \u062a\u0648\u06cc\u06cc\u062a\u0631 \u0641\u0627\u0644\u0648 \u06a9\u0646\u06cc\u062f / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-fr/","title":"README fr","text":""},{"location":"Frontend/shader/README-fr/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>par Patricio Gonzalez Vivo et Jen Lowe</p> <p>Ceci est un guide \u00e9tape-par-\u00e9tape \u00e0 travers le monde abstrait et complexe des Fragment Shaders.</p>"},{"location":"Frontend/shader/README-fr/#contenu","title":"Contenu","text":"<ul> <li> <p>A propos de ce livre</p> </li> <li> <p>Pour commencer</p> <ul> <li>Qu'est ce qu'un shader?</li> <li>\u201cHello world!\u201d</li> <li>Les uniforms</li> <li>Ex\u00e9cuter votre shader</li> </ul> </li> <li> <p>Le dessin algorithmique</p> <ul> <li>Les fonctions</li> <li>Les couleurs</li> <li>Les formes</li> <li>Les matrices</li> <li>Les motifs</li> </ul> </li> <li> <p>Le design g\u00e9n\u00e9ratif</p> <ul> <li>L'al\u00e9atoire</li> <li>Le bruit</li> <li>Le bruit cellulaire</li> <li>Fractional Brownian Motion</li> <li>Les Fractals</li> </ul> </li> <li> <p>Traitement d'image:</p> <ul> <li>Textures</li> <li>Convolution</li> <li>Filtres</li> <li>Effets</li> </ul> </li> <li> <p>Simulation</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ondes</li> <li>Aquarelle</li> <li>R\u00e9action-Diffusion</li> </ul> </li> <li> <p>3D graphics</p> <ul> <li>Lumi\u00e8res</li> <li>Normales</li> <li>Environment-maps (spherical and cube)</li> <li>Bump</li> <li>Ray marching</li> <li>R\u00e9flection &amp; r\u00e9fraction</li> </ul> </li> <li> <p>Annexes : Autres mani\u00e8res d'utiliser ce livre</p> <ul> <li>Comment puis-je consulter ce livre hors-ligne ?</li> <li>Comment ex\u00e9cuter les exemples sur un Raspberry Pi ?</li> <li>Comment imprimer ce livre ?</li> <li>Comment puis-je contribuer \u00e0 ce livre?</li> <li>Une introduction pour ceux qui viennent de JS de Nicolas Barradeau</li> </ul> </li> <li> <p>Galerie d'exemples</p> </li> <li> <p>Glossaire</p> </li> </ul>"},{"location":"Frontend/shader/README-fr/#a-propos-de-lauteur","title":"A propos de l'auteur","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentine) est un artiste et d\u00e9veloppeur install\u00e9 \u00e0 New York. Il explore les espaces interstitiels entre l'organique et le synth\u00e9tique, l'analogique et le num\u00e9rique, l'individuel et le collectif. Dans son travail, il utilise le code comme un langage expressif avec l'intention de d\u00e9velopper un mieux-vivre ensemble.</p> <p>Patricio a \u00e9tudi\u00e9 et a pratiqu\u00e9 la psychoth\u00e9rapie et l'art-th\u00e9rapie. Il d\u00e9tient un MFA en Design &amp; Technologie de Parsons The New School, o\u00f9 il enseigne maintenant. Actuellement il travaille comme ing\u00e9nieur graphique pour Mapzen, travaillant sur des outils cartographiques openSource.</p> Twitter - GitHub - Vimeo -  Flickr"},{"location":"Frontend/shader/README-fr/#remerciements","title":"Remerciements","text":"<p>Merci \u00e0 ma femme Jen Lowe, pour son support sans faille, son aide et son temps pass\u00e9 \u00e0 la r\u00e9vision de ce livre.</p> <p>Merci \u00e0 Scott Murray pour l'inspiration et les conseils.</p> <p>Merci \u00e0 Kenichi Yoneda (Kynd) et Sawako pour la traduction (\u65e5\u672c\u8a9e\u8a33) japonaise</p> <p>Merci \u00e0 Tong Li et Yi Zhang pour la traduction (\u4e2d\u6587\u7248) chinoise</p> <p>Merci \u00e0 Jae Hyun Yoo pour la traduction (\ud55c\uad6d\uc5b4) cor\u00e9enne</p> <p>Merci \u00e0 Manoylov Andriy pour la traduction (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430) l'ukrainien</p> <p>Merci \u00e0 Karim Naaji qui a contribu\u00e9 par son support, ses bonnes id\u00e9es et son code.</p> <p>Merci \u00e0 tous ceux qui ont cru en ce projet et \u00e0 ceux qui ont contribut\u00e9 aux corrections ou qui ont fait des dons.</p>"},{"location":"Frontend/shader/README-fr/#de-nouveaux-chapitres","title":"De nouveaux chapitres","text":"<p>Abonnez-vous \u00e0 la newsletter ou suivez-nous sur Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-id/","title":"README id","text":""},{"location":"Frontend/shader/README-id/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>oleh Patricio Gonzalez Vivo dan Jen Lowe</p> <p>Panduan langkah demi langkah untuk melalui semesta Fragment Shaders yang abstrak dan kompleks.</p>"},{"location":"Frontend/shader/README-id/#konten","title":"Konten","text":"<ul> <li> <p>Pengenalan</p> </li> <li> <p>Memulai</p> <ul> <li>Apa itu shader?</li> <li>\u201cHello world!\u201d</li> <li>Uniforms</li> <li>Menjalankan shader</li> </ul> </li> <li> <p>Menggambar secara algoritmik</p> <ul> <li>Funsi Membentuk</li> <li>Warna</li> <li>Bentuk</li> <li>Matriks</li> <li>Pola</li> </ul> </li> <li> <p>Desain generatif</p> <ul> <li>Acak</li> <li>Noise</li> <li>Noise seluler</li> <li>Gerak Pecahan Brownian</li> <li>Fraktal</li> </ul> </li> <li> <p>Pemrosesan gambar</p> <ul> <li>Tekstur</li> <li>Operasi Gambar</li> <li>Konvolusi Kernel</li> <li>Filter</li> <li>Efek lainnya</li> </ul> </li> <li> <p>Simulasi</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Riak</li> <li>Warna air</li> <li>Reaksi difusi</li> </ul> </li> <li> <p>Grafik 3D</p> <ul> <li>Cahaya</li> <li>Peta-normal</li> <li>Peta benjolan</li> <li>Ray berbaris</li> <li>Peta lingkungan (bulat dan kubus)</li> <li>Merefleksikan dan membiaskan</li> </ul> </li> <li> <p>Lampiran: Cara lain untuk menggunakan buku ini</p> <ul> <li>Bagaimana saya mendapatkan buku ini secara offline?</li> <li>Bagaimana cara menjalankan contoh di Raspberry Pi?</li> <li>Bagaimana mencetak buku ini?</li> <li>Bagaimana saya bisa berkolaburasi?</li> <li>An introduction for those coming from JS oleh Nicolas Barradeau</li> </ul> </li> <li> <p>Galeri contoh</p> </li> <li> <p>Glosarium</p> </li> </ul>"},{"location":"Frontend/shader/README-id/#tentang-penulis","title":"Tentang Penulis","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) adalah seorang artis dan developer yang tinggal di New York. Dia menjelajahi ruang interstisial antara organik dan sintetis, analog dan digital, individu dan kolektif. Dalam karyanya ia menggunakan kode sebagai bahasa ekspresif dengan tujuan untuk mengembangkan bersama menjadi lebih baik.</p> <p>Patricio mempelajari dan mempraktikkan psikoterapi dan terapi seni ekspresif. Dia memegang gelar MFA dalam Desain &amp; Teknologi dari Parsons The New School, tempat dia sekarang mengajar. Saat ini dia bekerja sebagai Graphic Engineer di Mapzen membuat alat pemetaan openSource.</p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe adalah seorang ilmuwan data independen dan komunikator data di Datatelling tempat dia mengumpulkan orang + angka + kata. Dia mengajar di program SVA's Design for Social Innovation, mendirikan School for Poetic Computation, mengajar Matematika untuk Seniman di NYU ITP, meneliti di Lab Desain Informasi Spasial di Universitas Columbia, dan menyumbangkan ide di White House Office of Science and Technology Policy. Dia berbicara di SXSW dan Eyeo. Karyanya telah diliput oleh The New York Times dan Fast Company. Penelitian, penulisan, dan ceramahnya mengeksplorasi janji dan implikasi data dan teknologi di masyarakat. Dia memiliki gelar B.S. dalam Matematika Terapan dan Magister Ilmu Informasi. Seringkali berlawanan, dia selalu berada di sisi cinta.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-id/#ucapan-terima-kasih","title":"Ucapan Terima Kasih","text":"<p>Terima kasih kepada Scott Murray untuk nasihat dan inspirasi.</p> <p>Terima kasih kepada Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji untuk kontribusi dengan dukungan, ide bagus dan kode.</p> <p>Terima kasih kepada Kenichi Yoneda (Kynd) dan Sawako untuk terjemahan Bahasa Jepang (\u65e5\u672c\u8a9e\u8a33)</p> <p>Terima kasih kepada Tong Li dan Yi Zhang untuk terjemahan Bahasa China (\u4e2d\u6587\u7248)</p> <p>Terima kasih kepada Jae Hyun Yoo untuk terjemahan Bahasa Korea (\ud55c\uad6d\uc5b4)</p> <p>Terima kasih kepada Nahuel Coppero (Necsoft) untuk terjemahan Bahasa Spanyol (espa\u00f1ol)</p> <p>Terima kasih kepada Raphaela Prot\u00e1sio dan Lucas Mendon\u00e7a untuk terjemahan terjemahan Bahasa Portugis</p> <p>Terima kasih kepada Nicolas Barradeau and Karim Naaji for the French translation (fran\u00e7ais)</p> <p>Terima kasih kepada Andrea Rovescalli untuk terjemahan Bahasa Italia (italiano)</p> <p>Terima kasih kepada Michael Tischer untuk terjemahan Bahasa Jerman (deutsch)</p> <p>Terima kasih kepada Sergey Karchevsky untuk terjemahan Bahasa Rusia (russian)</p> <p>Terima kasih kepada Andy Stanton untuk perbaikan dan improvisasi the pdf/epub export pipeline</p> <p>Terima kasih kepada Naufal Adriansyah untuk terjemahan Bahasa Indonesia</p> <p>Terima kasih kepada Manoylov Andriy untuk terjemahan Bahasa Ukraina (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>Terima kasih kepada semua orang yang telah percaya pada proyek ini dan telah berkontribusi dalam perbaikan atau donasi.</p>"},{"location":"Frontend/shader/README-id/#dapatkan-bagian-baru","title":"Dapatkan bagian baru","text":"<p>Daftar untuk surat berita atau follow di Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-it/","title":"README it","text":""},{"location":"Frontend/shader/README-it/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>di Patricio Gonzalez Vivo e Jen Lowe</p> <p>Questa \u00e8 una guida passo passo attraverso l'universo astratto e complesso dei Fragment Shaders.</p>"},{"location":"Frontend/shader/README-it/#contenuto","title":"Contenuto","text":"<ul> <li> <p>A proposito di questo libro</p> </li> <li> <p>Introduzione</p> <ul> <li>Che cosa \u00e8 uno shader?</li> <li>\"Ciao mondo!\"</li> <li>Uniforms</li> <li>Eseguite il vostro shader</li> </ul> </li> <li> <p>Disegno algoritmico</p> <ul> <li>Le funzioni di forma</li> <li>Colori</li> <li>Figure</li> <li>Matrici</li> <li>Motivi</li> </ul> </li> <li> <p>Progettazione generativa</p> <ul> <li>Random</li> <li>Rumore</li> <li>Rumore cellulare</li> <li>Moto browniano frazionario</li> <li>Frattali</li> </ul> </li> <li> <p>Trattamento delle immagini:</p> <ul> <li>Textures</li> <li>Operazioni d'immagine</li> <li>Convoluzioni di Kernel</li> <li>Filtri</li> <li>Altri effetti</li> </ul> </li> <li> <p>Simulazione</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Increspature</li> <li>Acquerello</li> <li>Reazione-diffusione</li> </ul> </li> <li> <p>Grafica 3D</p> <ul> <li>Luci</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (sferiche e cubiche)</li> <li>Riflesso e rifrazione</li> </ul> </li> <li> <p>Appendice: Altri modi per utilizzare questo libro</p> <ul> <li>Come posso consultare questo libro offline?</li> <li>Come posso eseguire gli esempi su un Raspberry Pi?</li> <li>Come posso stampare questo libro?</li> <li>Come posso collaborare a questo libro?</li> <li>Un'introduzione per chi proviene da JS di Nicolas Barradeau</li> </ul> </li> <li> <p>Galleria d'esempi</p> </li> <li> <p>Glossario</p> </li> </ul>"},{"location":"Frontend/shader/README-it/#a-proposito-dellautore","title":"A proposito dell'autore","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) \u00e8 un artista e sviluppatore con sede a New York. Esplora lo spazio interstiziale fra organico e sintetico, analogico e digitale, individuale e collettivo. Nel suo lavoro usa il codice come un linguaggio espressivo con l'intenzione di creare un migliore vivere insieme.</p> <p>Patricio studi\u00f2 e pratic\u00f2 la psicoterapia e l'arteterapia. Ha conseguito un MFA in Design e Tecnologia alla Parsons The New School dove ora insegna. Attualmente lavora come Ingegnere Grafico alla Mapzen realizzando strumenti cartografici openSource.</p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe \u00e8 una scienziata indipendente e comunicatrice di dati alla Datatelling dove riunisce persone + numeri + parole. Insegna alla SVA's Design per il programma di Social Innovation, ha co-fondato la School for Poetic Computation, ha insegnato Matematica per Artisti al NYU ITP, ha fatto della ricerca al Spatial Information Design Lab presso la Columbia University, e ha contribuito con idee alla White House Office of Science and Technology Policy. Ha parlato al SXSW e Eyeo. Il suo lavoro \u00e8 stato trattato dal The New York Times and Fast Company. La sua ricerca, i suoi scritti e la sue dissertazioni esplorano le promesse e le implicazioni dei dati e della tecnologia nella societ\u00e0. Ha una laurea triennale in Matematica Applicata e una laurea specialistica in Scienze Informatiche. Spesso combattiva, \u00e8 sempre dalla parte dell'amore.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-it/#ringraziamenti","title":"Ringraziamenti","text":"<p>Grazie a Scott Murray per l'ispirazione e i consigli.</p> <p>Grazie a Kenichi Yoneda (Kynd), a Nicolas Barradeau, a Karim Naaji per aver contribuito con il loro sostegno, con delle buone idee e con del codice.</p> <p>Grazie a Kenichi Yoneda (Kynd) e a Sawako per la traduzione giapponese (\u65e5\u672c\u8a9e\u8a33)</p> <p>Grazie a Tong Li e a Yi Zhang per la traduzione cinese (\u4e2d\u6587\u7248)</p> <p>Grazie a Jae Hyun Yoo per la traduzione (\ud55c\uad6d\uc5b4) coreana</p> <p>Grazie a Nahuel Coppero (Necsoft) per la traduzione (espa\u00f1ol) spagnola</p> <p>Grazie a Nicolas Barradeau e a Karim Naaji per la traduzione (fran\u00e7ais) francese</p> <p>Grazie a Andrea Rovescalli per la traduzione italiana</p> <p>Grazie a Manoylov Andriy per la traduzione ucraina (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>Grazie a tutti coloro i quali hanno creduto in questo progetto e contribuito con correzioni o donazioni.</p>"},{"location":"Frontend/shader/README-it/#come-ottenere-i-nuovi-capitoli","title":"Come ottenere i nuovi capitoli?","text":"<p>Iscriviti alla newsletter o seguici su Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-jp/","title":"README jp","text":""},{"location":"Frontend/shader/README-jp/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>Patricio Gonzalez Vivo\u3001Jen Lowe\u8457</p> <p>\u3053\u306e\u672c\u306f\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\u306b\u3064\u3044\u3066\u306e\u30ac\u30a4\u30c9\u30d6\u30c3\u30af\u3067\u3059\u3002\u96e3\u89e3\u3067\u8907\u96d1\u306a\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u4e16\u754c\u3092\u3001\u4e00\u6b69\u4e00\u6b69\u308f\u304b\u308a\u3084\u3059\u304f\u3054\u6848\u5185\u3057\u307e\u3059\u3002</p>"},{"location":"Frontend/shader/README-jp/#_1","title":"\u7ffb\u8a33\u306b\u3064\u3044\u3066","text":"<p>\u3053\u306e\u6587\u66f8\u306fPatricio Gonzalez Vivo\u306eThe Book of Shader\u306e\u65e5\u672c\u8a9e\u8a33\u3067\u3059\u3002 \u6280\u8853\u7684\u306a\u5185\u5bb9\u306f\u3067\u304d\u308b\u9650\u308a\u6b63\u78ba\u306b\u4f1d\u3048\u308b\u3088\u3046\u306b\u5fc3\u304c\u3051\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u4ed6\u306e\u90e8\u5206\u3067\u306f\u8a00\u8449\u3092\u88dc\u3063\u305f\u308a\u7c21\u7565\u5316\u3057\u305f\u308a\u3001\u8868\u73fe\u3092\u5909\u3048\u3066\u3044\u308b\u90e8\u5206\u3082\u3042\u308a\u307e\u3059\u3002\u82f1\u8a9e\u304c\u5f97\u610f\u306a\u65b9\u306f\u305c\u3072\u539f\u6587\u3082\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002 \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306b\u306fgithub\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"Frontend/shader/README-jp/#_2","title":"\u76ee\u6b21","text":"<ul> <li> <p>\u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3</p> </li> <li> <p>\u521d\u3081\u306e\u4e00\u6b69</p> <ul> <li>\u30b7\u30a7\u30fc\u30c0\u30fc\u3068\u306f\uff1f</li> <li>\u30cf\u30ed\u30fc\u30fb\u30ef\u30fc\u30eb\u30c9\uff01</li> <li>\u30e6\u30cb\u30d5\u30a9\u30fc\u30e0\u5909\u6570</li> <li>\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u4f7f\u3046</li> </ul> </li> <li> <p>\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u7d75\u3092\u63cf\u304f</p> <ul> <li>\u30b7\u30a7\u30a4\u30d4\u30f3\u30b0\u95a2\u6570</li> <li>\u8272\u306b\u3064\u3044\u3066</li> <li>\u5f62\u306b\u3064\u3044\u3066</li> <li>\u4e8c\u6b21\u5143\u884c\u5217</li> <li>\u30d1\u30bf\u30fc\u30f3</li> </ul> </li> <li> <p>Generative designs</p> <ul> <li>\u30e9\u30f3\u30c0\u30e0</li> <li>\u30ce\u30a4\u30ba</li> <li>\u30bb\u30eb\u30e9\u30fc\u30ce\u30a4\u30ba</li> <li>Fractional brownian motion</li> <li>Fractals</li> </ul> </li> <li> <p>Image processing:</p> <ul> <li>Textures</li> <li>Image operations</li> <li>Kernel convolutions</li> <li>Filters</li> <li>Others effects</li> </ul> </li> <li> <p>Simulation</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ripples</li> <li>Water color</li> <li>Reaction diffusion</li> <li>Voronoi</li> </ul> </li> <li> <p>3D graphics</p> <ul> <li>Lights</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (spherical and cube)</li> <li>Reflect and refract</li> </ul> </li> <li> <p>Appendix: Other ways to use this book</p> <ul> <li>How can I navigate this book offline?</li> <li>How to run the examples on a Raspberry Pi?</li> <li>How to print this book?</li> </ul> </li> <li> <p>Examples Gallery</p> </li> <li> <p>Glossary</p> </li> </ul>"},{"location":"Frontend/shader/README-jp/#_3","title":"\u8457\u8005\u306b\u3064\u3044\u3066","text":"<p>Patricio Gonzalez Vivo\uff081982\u5e74\u3001\u30a2\u30eb\u30bc\u30f3\u30c1\u30f3\u3001\u30d6\u30a8\u30ce\u30b9\u30a2\u30a4\u30ec\u30b9\u751f\uff09 \u306f\u30cb\u30e5\u30fc\u30e8\u30fc\u30af\u5728\u4f4f\u306e\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\uff0f\u958b\u767a\u8005\u3067\u3059\u3002\u6709\u6a5f\u7684\u306a\u3082\u306e\u3068\u4eba\u5de5\u7684\u306a\u3082\u306e\u3001\u30a2\u30ca\u30ed\u30b0\u3068\u30c7\u30b8\u30bf\u30eb\u3001\u500b\u4eba\u3068\u96c6\u56e3\u306e\u72ed\u9593\u3092\u63a2\u6c42\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30fc\u30c9\u3092\u8868\u73fe\u624b\u6bb5\u3068\u3057\u3066\u3088\u308a\u826f\u3044\u5171\u5b58\u306e\u3042\u308a\u65b9\u3092\u6a21\u7d22\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>Patricio\u306f\u5fc3\u7406\u7642\u6cd5\uff08psychotherapy\uff09\u3068\u8868\u73fe\u7642\u6cd5\uff08expressive art therapy\uff09\u306b\u7cbe\u901a\u3057\u3066\u304a\u308a\u3001\u30d1\u30fc\u30bd\u30f3\u30ba\u7f8e\u8853\u5927\u5b66\u3067\u30c7\u30b6\u30a4\u30f3&amp;\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u306eMFA\uff08Master of Fine Arts - \u7f8e\u8853\u7cfb\u306e\u4fee\u58eb\u306b\u76f8\u5f53\uff09\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u73fe\u5728\u306fMapzen\u3067\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30a8\u30f3\u30b8\u30cb\u30a2\u3068\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u30c4\u30fc\u30eb\u306e\u958b\u767a\u306b\u643a\u308f\u3063\u3066\u3044\u307e\u3059\u3002</p> WebSite - Twitter - GitHub - Vimeo -  Flickr"},{"location":"Frontend/shader/README-jp/#_4","title":"\u8a33\u8005\u306b\u3064\u3044\u3066","text":"<p>\u3053\u306e\u4eba \u304c\u7ffb\u8a33\u3057\u307e\u3057\u305f\u3002\u5192\u967a\u91ce\u90ce\u30de\u30af\u30ac\u30a4\u30d0\u30fc\u306f\u898b\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u4e00\u90e8\u52a9\u3063\u4eba\u306e\u529b\u3082\u501f\u308a\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"Frontend/shader/README-jp/#_5","title":"\u8b1d\u8f9e","text":"<p>\u59bb\u306eJen Lowe\u306f\u3053\u306e\u672c\u306e\u7de8\u96c6\u306e\u305f\u3081\u306b\u6642\u9593\u3092\u5272\u304d\u3001\u732e\u8eab\u7684\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3002</p> <p>\u30a4\u30f3\u30b9\u30d4\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u4e0e\u3048\u3066\u304f\u308c\u305fScott Murray\u3001\u65e5\u672c\u8a9e\u8a33\u3092\u62c5\u5f53\u3057\u3066\u304f\u308c\u305fKynd\u3001\u7d20\u6674\u3089\u3057\u3044\u30a2\u30a4\u30c7\u30a2\u3068\u30b3\u30fc\u30c9\u3067\u8ca2\u732e\u3057\u3066\u304f\u308c\u305fKarim Naaji \u306b\u3082\u611f\u8b1d\u3057\u307e\u3059\u3002</p> <p>(\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430) \u30a6\u30af\u30e9\u30a4\u30ca\u8a9e\u306e\u7ffb\u8a33\u3092\u3057\u3066\u304f\u308c\u305f Manoylov Andriy \u306b\u3082\u611f\u8b1d\u3057\u307e\u3059\u3002</p> <p>\u305d\u3057\u3066\u6700\u5f8c\u306b\u3001\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5fdc\u63f4\u3057\u6539\u5584\u306e\u624b\u52a9\u3051\u3092\u3057\u3066\u304f\u308c\u305f\u65b9\u3005\u3001\u5bc4\u4ed8\u3092\u304f\u3060\u3055\u3063\u305f\u3059\u3079\u3066\u306e\u7686\u69d8\u306b\u611f\u8b1d\u3092\u8ff0\u3079\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002</p>"},{"location":"Frontend/shader/README-jp/#_6","title":"\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u304a\u77e5\u3089\u305b","text":"<p>\u30cb\u30e5\u30fc\u30b9\u30ec\u30bf\u30fc\u306b\u30b5\u30a4\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u304b Twitter / Mastodon / Discord \u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u65e5\u672c\u8a9e\u7248\u306e\u66f4\u65b0\u306f\u8a33\u8005\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u3082\u304a\u77e5\u3089\u305b\u3057\u307e\u3059\u3002</p>"},{"location":"Frontend/shader/README-kr/","title":"README kr","text":""},{"location":"Frontend/shader/README-kr/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>by Patricio Gonzalez Vivo</p> <p>\uc774\uac83\uc740 \ud669\ub7c9\ud558\uac8c \ub113\uace0 \ubcf5\uc7a1\ud55c Fragment Shader\uc758 \uc138\uacc4\ub97c \ud55c\ub2e8\uacc4\uc529 \uc0b4\ud3b4\ubcf4\ub294 \uc9c0\uce68\uc11c\uc785\ub2c8\ub2e4.</p>"},{"location":"Frontend/shader/README-kr/#_1","title":"\ubc88\uc5ed\uc5d0 \ub300\ud558\uc5ec","text":"<p>\uc774 \ubb38\uc11c\ub294 Patricio Gonzalez Vivo\uc758 The Book of Shader\uc758 \ud55c\uad6d\uc5b4 \ubc88\uc5ed\uc785\ub2c8\ub2e4.</p>"},{"location":"Frontend/shader/README-kr/#_2","title":"\ucc28\ub840","text":"<ul> <li> <p>\uc774 \ucc45\uc5d0 \ub300\ud558\uc5ec</p> </li> <li> <p>\uc2dc\uc791\ud558\uae30 \uc55e\uc11c</p> <ul> <li>\uc250\uc774\ub354\ub780 \ubb34\uc5c7\uc778\uac00?</li> <li>\u201c\ud5ec\ub85c \uc6d4\ub4dc!\u201d</li> <li>\uc720\ub2c8\ud3fc</li> <li>\uc250\uc774\ub354 \uc2e4\ud589\ud558\uae30</li> </ul> </li> <li> <p>Algorithmic drawing</p> <ul> <li>\ubaa8\uc591 \uadf8\ub9ac\uae30</li> <li>\uc0c9\uc5d0 \ub300\ud574</li> <li>\ud615\ud0dc\uc5d0 \ub300\ud574</li> <li>\ud589\ub82c</li> <li>\ud328\ud134</li> </ul> </li> <li> <p>Generative designs</p> <ul> <li>\ub79c\ub364</li> <li>\ub178\uc774\uc988</li> <li>\uc140\ub8f0\ub7ec \ub178\uc774\uc988</li> <li>\ubd84\uc218 \ube0c\ub77c\uc6b4\uc6b4\ub3d9</li> <li>\ud504\ub799\ud0c8</li> </ul> </li> <li> <p>Image processing:</p> <ul> <li>Textures</li> <li>Image operations</li> <li>Kernel convolutions</li> <li>Filters</li> <li>Others effects</li> </ul> </li> <li> <p>Simulation</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ripples</li> <li>Water color</li> <li>Reaction diffusion</li> </ul> </li> <li> <p>3D graphics</p> <ul> <li>Lights</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (spherical and cube)</li> <li>Reflect and refract</li> </ul> </li> <li> <p>\ubd80\ub85d: \uc774 \ucc45\uc744 \ud65c\uc6a9\ud558\ub294 \ub2e4\ub978 \ubc29\ubc95\ub4e4</p> <ul> <li>\uc774 \ucc45\uc744 \uc624\ud504\ub77c\uc778(off-line)\uc73c\ub85c \ubcf4\ub294 \ubc29\ubc95</li> <li>\ub77c\uc988\ubca0\ub9ac \ud30c\uc774\uc5d0\uc11c \uc608\uc81c\ub97c \uc2e4\ud589\ud558\ub294 \ubc29\ubc95</li> <li>\uc774 \ucc45\uc744 \uc778\uc1c4\ud558\ub294\ubc95</li> <li>Collaborator\ub85c \uae30\uc5ec\ud558\uae30</li> <li>JS \uc0ac\uc6a9\uc790\ubd84\ub4e4\uc744 \uc704\ud55c \uc548\ub0b4\uc11c by Nicolas Barradeau</li> </ul> </li> <li> <p>\uc608\uc81c \uac24\ub7ec\ub9ac</p> </li> <li> <p>\uc6a9\uc5b4\uc9d1</p> </li> </ul>"},{"location":"Frontend/shader/README-kr/#_3","title":"\uc800\uc790 \uc18c\uac1c","text":"<p>Patricio Gonzalez Vivo (1982, \ubd80\uc5d0\ub178\uc2a4 \uc544\uc774\ub808\uc2a4, \uc544\ub974\ud5e8\ud2f0\ub098) \ub294 \ub274\uc695 \uae30\ubc18\uc758 \uc544\ud2f0\uc2a4\ud2b8 \uacb8 \uac1c\ubc1c\uc790\uc774\ub2e4. \uadf8\ub294 \uc720\uae30\uc801\uc694\uc18c\uc640 \uc778\uacf5\uc801\uc694\uc18c, \uc544\ub0a0\ub85c\uadf8\uc640 \ub514\uc9c0\ud138, \ub2e8\uc77c\uc801\uc694\uc18c\uc640 \uc9d1\ub2e8\uc801\uc694\uc18c \uc0ac\uc774\ub97c \ud0d0\ud5d8\ud55c\ub2e4. \uadf8\ub294 \uc0ac\ub78c\ub4e4\uacfc \ud568\uaed8 \uac1c\ubc1c\ud558\uae30\uc704\ud574 \ucf54\ub4dc\ub97c \ud45c\ud604\uc694\uc18c\ub85c \uc0ac\uc6a9\ud574 \uc791\uc5c5\uc744 \ud55c\ub2e4.</p> <p>Patricio\ub294 \uc2ec\ub9ac\uce58\ub8cc \ubc0f \ud45c\ud604\uc608\uc220\uc744 \uacf5\ubd80\ud588\ub2e4. \uadf8\ub294 \ud30c\uc2a8\uc2a4\ub300\ud559\uc5d0\uc11c \ub514\uc790\uc778 \ubc0f \uae30\uc220 \uc11d\uc0ac\ud559\uc704\ub97c \ubcf4\uc720\ud558\uace0 \uc788\uace0 \uadf8\uacf3\uc5d0\uc11c \ud559\uc0dd\uc744 \uac00\ub974\uce58\uace0 \uc788\ub2e4. \ub610\ud55c \uadf8\ub294 \ud604\uc7ac Mapzen\uc5d0\uc11c \uadf8\ub798\ud53d\uc2a4 \uc5d4\uc9c0\ub2c8\uc5b4\ub85c \ub9f5\uc744 \ub9cc\ub4dc\ub294 \uc624\ud508\uc18c\uc2a4\ud234\uc744 \uac1c\ubc1c\uc911\uc5d0 \uc788\ub2e4.</p> Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe \uc740 Datatelling\uc5d0\uc11c \uc0ac\ub78c+\uc22b\uc790+\ub2e8\uc5b4\ub97c \ud55c\ub370 \ubaa8\uc73c\ub294 \ub370\uc774\ud130\uacfc\ud559\uc790\uc774\uc790 \ucee4\ubba4\ub2c8\ucf00\uc774\ud130\ub2e4. \uadf8\ub140\ub294 SVA\uc758 \uc0ac\ud68c\ud601\uc2e0 \ud504\ub85c\uadf8\ub7a8 \uc124\uacc4\ub97c \uac15\uc758\ud558\uace0, \uc2dc\uc801\uc5f0\uc0b0\ud559\uad50\ub97c \uacf5\ub3d9 \uc124\ub9bd\ud588\uc73c\uba70, NYU ITP\uc5d0\uc11c \uc544\ud2f0\uc2a4\ud2b8\ub97c \uc704\ud55c \uc218\ud559\uc744 \uac00\ub974\ucce4\uace0, \uceec\ub7fc\ube44\uc544 \ub300\ud559\uad50\uc758 \uacf5\uac04 \uc815\ubcf4 \ub514\uc790\uc778 \uc5f0\uad6c\uc18c\uc5d0\uc11c \uc5f0\uad6c\ud588\uc73c\uba70, \ubc31\uc545\uad00 \uacfc\ud559\uae30\uc220 \uc815\ucc45\uc2e4\uc5d0\uc11c \uc544\uc774\ub514\uc5b4\ub97c \uae30\uc5ec\ud588\ub2e4. \uadf8\ub140\ub294 SXSW\uc640 Eyeo\uc5d0\uc11c \uc5f0\uc124\ud574\uc654\ub2e4. \uadf8\ub140\uc758 \uc791\ud488\uc740 \ub274\uc695\ud0c0\uc784\uc988\uc640 \ud328\uc2a4\ud2b8 \ucef4\ud37c\ub2c8\uc5d0\uc11c \ubcf4\ub3c4 \ub418\uc5c8\ub2e4. \uadf8\ub140\uc758 \uc5f0\uad6c, \uae00\uc4f0\uae30 \ubc0f \uc5f0\uc124\uc740 \uc0ac\ud68c\uc5d0\uc11c \ub370\uc774\ud130\uc640 \uae30\uc220\uc758 \uc57d\uc18d\uacfc \uc2dc\uc0ac\uc810\uc744 \ud0d0\uad6c\ud55c\ub2e4. \uadf8\ub140\ub294 \uc751\uc6a9\uc218\ud559 \ud559\uc0ac, \uc815\ubcf4\uacfc\ud559 \uc11d\uc0ac \ud559\uc704\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \uadf8\ub140\ub294 \uc885\uc885 \uc800\ud56d\uc801\uc774\uba74\uc11c\ub3c4 \ud56d\uc0c1 \uc0ac\ub791\uc758 \ud3b8\uc5d0 \uc120\ub2e4.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-kr/#_4","title":"\uac10\uc0ac\uc758 \ud45c\uc2dc","text":"<p>\uc601\uac10\uacfc \uaca9\ub824\ub97c \uc544\ub07c\uc9c0 \uc54a\ub294 Scott Murray\uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4.</p> <p>\uc88b\uc740 \uc544\uc774\ub514\uc5b4\uc640 \ucf54\ub4dc\ub97c \uc81c\uacf5\ud574\uc8fc\ub294 Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji\uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4.</p> <p>\uc77c\ubcf8\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Kenichi Yoneda (Kynd) \uc640 Sawako \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Japanese translation (\u65e5\u672c\u8a9e\u8a33)</p> <p>\uc911\uad6d\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Tong Li \uc640 Yi Zhang \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Chinese translation (\u4e2d\u56fd\u7684\u7ffb\u8bd1)</p> <p>\ud55c\uad6d\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 \uc720\uc7ac\ud604 \uacfc  \uae40\uc900 \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Korean translation (\ud55c\uad6d\uc5b4)</p> <p>\uc2a4\ud398\uc778\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Nahuel Coppero (Necsoft) \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Espa\u00f1ol translation</p> <p>\ud3ec\ub974\ud22c\uac08\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Raphaela Prot\u00e1sio \uc640 Lucas Mendon\u00e7a \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Portugues translation</p> <p>\ud504\ub791\uc2a4\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Nicolas Barradeau \uc640 Karim Naaji \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Fran\u00e7ais translation</p> <p>\uc774\ud0c8\ub9ac\uc544\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Andrea Rovescalli \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Italiano translation</p> <p>\ub3c5\uc77c\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Michael Tischer \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4.Deutsch translation</p> <p>\ub7ec\uc2dc\uc544\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Sergey Karchevsky \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Russian translation</p> <p>\ub7ec\uc2dc\uc544\uc5b4 \ubc88\uc5ed\uc744 \ub9e1\uace0 \uc788\ub294 Manoylov Andriy \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4. Ukrainian translation (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>pdf/epub \ubc30\ud3ec \uc218\uc815 \ubc0f \uac1c\uc120\uc744 \ub9e1\uace0 \uc788\ub294 Andy Stanton \uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4.</p> <p>\uc774 \ud504\ub85c\uc81d\ud2b8\ub97c \uaca9\ub824\ud574\uc8fc\uc2dc\uace0 \uae30\ubd80\ud574\uc8fc\uc2e0 \ubaa8\ub4e0 \ubd84\ub4e4\uaed8 \uac10\uc0ac\ub97c \ub4dc\ub9bd\ub2c8\ub2e4. Contributed with fixes</p>"},{"location":"Frontend/shader/README-kr/#_5","title":"\uc0c8\ub85c\uc6b4 \ucc55\ud130 \uc5c5\ub370\uc774\ud2b8 \ubc1b\uae30","text":"<p>\ub274\uc2a4 \uc5c5\ub370\uc774\ud2b8\ub97c \uc704\ud574 \ud314\ub85c\uc6b0 \ud574\uc8fc\uc138\uc694. follow it on Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/README-pl/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>autorstwa Patricio Gonzalez Vivo i Jen Lowe</p> <p>\u0141agodny, krok po kroku przewodnik przez abstrakcyjny i z\u0142o\u017cony \u015bwiat Fragment Shader\u00f3w.</p>"},{"location":"Frontend/shader/README-pl/#spis-tresci","title":"Spis tre\u015bci","text":"<ul> <li> <p>O ksi\u0105\u017cce</p> </li> <li> <p>Wprowadzenie</p> <ul> <li>Czym jest shader?</li> <li>\"Witaj \u015bwiecie!\"</li> <li>Uniformy</li> <li>Uruchomienie shaderu</li> </ul> </li> <li> <p>Rysowanie algorytmiczne</p> <ul> <li>Shaping functions</li> <li>Kolory</li> <li>Kszta\u0142ty</li> <li>Macierze</li> <li>Wzorce</li> </ul> </li> <li> <p>Design generatywny</p> <ul> <li>Random</li> <li>Noise</li> <li>Cellular noise</li> <li>Fractal Brownian Motion</li> <li>Fraktale</li> </ul> </li> <li> <p>Image processing</p> <ul> <li>Textures</li> <li>Image operations</li> <li>Kernel convolutions</li> <li>Filters</li> <li>Other effects</li> </ul> </li> <li> <p>Simulation</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ripples</li> <li>Water color</li> <li>Reaction diffusion</li> </ul> </li> <li> <p>3D graphics</p> <ul> <li>Lights</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (spherical and cube)</li> <li>Reflect and refract</li> </ul> </li> <li> <p>Dodatek: Inne sposoby korzystania z tej ksi\u0105\u017cki</p> <ul> <li>Jak mog\u0119 korzysta\u0107 z tej ksi\u0105\u017cki offline?</li> <li>Jak uruchomi\u0107 przyk\u0142ady na Raspberry Pi?</li> <li>Jak wydrukowa\u0107 t\u0119 ksi\u0105\u017ck\u0119?</li> <li>Jak mog\u0119 pom\u00f3c?</li> <li>Wprowadzenie dla bieg\u0142ych w JavaScript by Nicolas Barradeau</li> </ul> </li> <li> <p>Galeria przyk\u0142ad\u00f3w</p> </li> <li> <p>Glosariusz</p> </li> </ul>"},{"location":"Frontend/shader/README-pl/#o-autorach","title":"O autorach","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentyna) jest nowojorskim artyst\u0105 i developerem. Bada granice mi\u0119dzy organicznym a syntetycznym, analogowym a cyfrowym, indywidualnym i kolektywnym. W swojej pracy u\u017cywa kodu jako ekspresywnego j\u0119zyka, z intencj\u0105 rozwijania wsp\u00f3\u0142pracy mi\u0119dzyludzkiej.</p> <p>Patricio studiowa\u0142 i praktykowa\u0142 psychoterapi\u0119 oraz arteterapi\u0119. Otrzyma\u0142 tytu\u0142 magistra sztuk pi\u0119knych w Design &amp; Technology od Parsons The New School, gdzie aktualnie uczy. Obecnie pracuje jako in\u017cynier graficzny w Mapzen, gdzie tworzy opensource'owe narz\u0119dzia do kartografii komputerowej. </p> www - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe jest niezale\u017cn\u0105 data scientist i komunikatork\u0105 danych w Datatelling, gdzie \u0142\u0105czy ludzi + liczby + s\u0142owa. Uczy w ramach programu Design for Social Innovation na SVA, wsp\u00f3\u0142za\u0142o\u017cy\u0142a School for Poetic Computation, uczy\u0142a matematyki dla artyst\u00f3w w NYU ITP, by\u0142a badaczk\u0105 w Spatial Information Design Lab na Uniwersytecie Columbia oraz zg\u0142asza\u0142a swoje pomys\u0142y do Office of Science and Technology Policy Bia\u0142ego Domu. Przemawia\u0142a na SXSW i w Eyeo. Jej prac\u0119 opisywa\u0142y The New York Times i Fast Company. Jej dzia\u0142alno\u015b\u0107 badawcza, pisarska i m\u00f3wnicza eksploruj\u0105 obietnice oraz implikacje danych i technologii dla spo\u0142ecze\u0144stwa. Obroni\u0142a tytu\u0142y licencjata matematyki stosowanej oraz magistra informatyki. Cz\u0119sto opozycyjna, ale zawsze po stronie mi\u0142o\u015bci.</p> www - Twitter - GitHub"},{"location":"Frontend/shader/README-pl/#podziekowania","title":"Podzi\u0119kowania","text":"<p>Podzi\u0119kowania dla Scott Murray za porady i inspiracj\u0119.</p> <p>Podzi\u0119kowania dla Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji za wsparcie, dobre pomys\u0142y i kod.</p> <p>Podzi\u0119kowania dla Kenichi Yoneda (Kynd) i Sawako za japo\u0144skie t\u0142umaczenie (\u65e5\u672c\u8a9e\u8a33)</p> <p>Podzi\u0119kowania dla Tong Li i Yi Zhang za chi\u0144skie t\u0142umaczenie (\u4e2d\u6587\u7248)</p> <p>Podzi\u0119kowania dla Jae Hyun Yoo i June Kim za korea\u0144skie t\u0142umaczenie (\ud55c\uad6d\uc5b4)</p> <p>Podzi\u0119kowania dla Nahuel Coppero (Necsoft) za hiszpa\u0144skie t\u0142umaczenie (espa\u00f1ol)</p> <p>Podzi\u0119kowania dla Raphaela Prot\u00e1sio i Lucas Mendon\u00e7a za portugalskie t\u0142umaczenie (portugues)</p> <p>Podzi\u0119kowania dla Nicolas Barradeau i Karim Naaji za francuskie t\u0142umaczenie (fran\u00e7ais)</p> <p>Podzi\u0119kowania dla Andrea Rovescalli za w\u0142oskie t\u0142umaczenie (italiano)</p> <p>Podzi\u0119kowania dla Michael Tischer za niemieckie t\u0142umaczenie (deutsch)</p> <p>Podzi\u0119kowania dla Sergey Karchevsky za rosyjskie t\u0142umaczenie (russian)</p> <p>Podzi\u0119kowania dla Vu Phuong Hoang za wietnamskie t\u0142umaczenie (Ti\u1ebfng Vi\u1ec7t)</p> <p>Podzi\u0119kowania dla Wojciecha Pachowiaka za polskie t\u0142umaczenie (polski)</p> <p>Podzi\u0119kowania dla Manoylov Andriy za ukrai\u0144skie t\u0142umaczenie (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>Podzi\u0119kowania dla Andy Stanton za napraw\u0119 i usprawnienie funkcji eksportu pdf/epub </p> <p>Podzi\u0119kowania dla ka\u017cdego, kto wsp\u00f3\u0142tworzy ten projekt poprzez swoje rady, korekty lub finansowe wsparcie.</p>"},{"location":"Frontend/shader/README-pl/#zdobadz-nowe-rozdziay","title":"Zdob\u0105d\u017a nowe rozdzia\u0142y","text":"<p>Zapisz si\u0119 do newslettera lub obserwuj na Twitter / Mastodon / Discord</p>"},{"location":"Frontend/shader/README-pt/","title":"README pt","text":""},{"location":"Frontend/shader/README-pt/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>por Patricio Gonzalez Vivo e Jen Lowe</p> <p>Este \u00e9 um guia passo-a-passo pelo universo abstrato e complexo de Fragment Shaders.</p>"},{"location":"Frontend/shader/README-pt/#conteudo","title":"Conte\u00fado","text":"<ul> <li> <p>Sobre este livro</p> </li> <li> <p>In\u00edcio</p> <ul> <li>O que \u00e9 um shader?</li> <li>\u201cOl\u00e1 mundo!\u201d</li> <li>Uniforms</li> <li>Executando seu shader</li> </ul> </li> <li> <p>Desenho algor\u00edtmico</p> <ul> <li>Fun\u00e7\u00f5es de forma</li> <li>Cores</li> <li>Formas</li> <li>Matrizes</li> <li>Padr\u00f5es</li> </ul> </li> <li> <p>Design generativo</p> <ul> <li>Aleat\u00f3rio</li> <li>Noise</li> <li>Cellular noise</li> <li>Movimento browniano fracion\u00e1rio</li> <li>Fractais</li> </ul> </li> <li> <p>Processamento de imagem</p> <ul> <li>Texturas</li> <li>Opera\u00e7\u00f5es de imagem</li> <li>Convolu\u00e7\u00f5es do kernel</li> <li>Filtros</li> <li>Outros efeitos</li> </ul> </li> <li> <p>Simula\u00e7\u00e3o</p> <ul> <li>Pingpong</li> <li>Conway</li> <li>Ondula\u00e7\u00f5es</li> <li>Aquarela</li> <li>Rea\u00e7\u00e3o-Difus\u00e3o</li> </ul> </li> <li> <p>Gr\u00e1ficos em 3D</p> <ul> <li>Luzes</li> <li>Normal-maps</li> <li>Bump-maps</li> <li>Ray marching</li> <li>Environmental-maps (esf\u00e9rico e c\u00fabico)</li> <li>Reflex\u00e3o e refra\u00e7\u00e3o</li> </ul> </li> <li> <p>Ap\u00eandice: Outras formas de usar este livro</p> <ul> <li>Como eu posso ler este livro offline?</li> <li>Como eu posso rodar os exemplos em um Raspberry Pi?</li> <li>Como imprimir este livro?</li> <li>Como eu posso colaborar?</li> <li>Uma introdu\u00e7\u00e3o para quem \u00e9 familiarizado com JS por Nicolas Barradeau</li> </ul> </li> <li> <p>Galeria de exemplos</p> </li> <li> <p>Gloss\u00e1rio</p> </li> </ul>"},{"location":"Frontend/shader/README-pt/#sobre-os-autores","title":"Sobre os autores","text":"<p>Patricio Gonzalez Vivo (1982, Buenos Aires, Argentina) \u00e9 um artista e desenvolvedor residente em New York. Ele explora os espa\u00e7os intersticiais entre o org\u00e2nico e sint\u00e9tico, anal\u00f3gico e digital, individual e coletivo. Em seu trabalho utiliza c\u00f3digo como linguagem expressiva com a inten\u00e7\u00e3o de desenvolver uma melhor conex\u00e3o entre as pessoas.</p> <p>Patricio estudou e praticou psicoterapia e terapia de arte expressiva. Ele possui MFA em Design &amp; Technologia pela Parsons The New School, onde hoje leciona. Atualmente trabalha como Engenheiro Gr\u00e1fico na Mapzen, criando ferramentas open source de mapeamento.</p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe \u00e9 uma cientista de dados independente e comunicadora de dados na Datatelling, onde une pessoas + n\u00fameros + palavras. Ela leciona no SVA's Design for Social Innovation program, co-fundou a School for Poetic Computation, ensinou Math for Artists na NYU ITP, pesquisou no Spatial Information Design Lab na Columbia University, e contribuiu com ideias na White House Office of Science and Technology Policy. Ela discursou no SXSW e Eyeo. Seu trabalho foi coberto pelo The New York Times e Fast Company. Sua pesquisa, escritos, e palestras exploram as promessas e implica\u00e7\u00f5es dos dados e da technologia na sociedade. Ela \u00e9 bacharel em Matem\u00e1tica Aplicada e mestre em Ci\u00eancia da Informa\u00e7\u00e3o. Frequentemente oposicionista, ela est\u00e1 sempre do lado do amor.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-pt/#acknowledgements","title":"Acknowledgements","text":"<p>Obrigado Scott Murray pela inspira\u00e7\u00e3o e conselhos.</p> <p>Obrigado Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji por contribuir com apoio, boas ideias e c\u00f3digo.</p> <p>Obrigado Kenichi Yoneda (Kynd) e Sawako pela tradu\u00e7\u00e3o em Japon\u00eas (\u65e5\u672c\u8a9e\u8a33)</p> <p>Obrigado Tong Li e Yi Zhang pela tradu\u00e7\u00e3o em Chin\u00eas (\u4e2d\u6587\u7248)</p> <p>Obrigado Jae Hyun Yoo pela tradu\u00e7\u00e3o em Koreano (\ud55c\uad6d\uc5b4)</p> <p>Obrigado Nahuel Coppero (Necsoft) pela tradu\u00e7\u00e3o em Espanhol (espa\u00f1ol)</p> <p>Obrigado Nicolas Barradeau e Karim Naaji pela tradu\u00e7\u00e3o em Franc\u00eas (fran\u00e7ais)</p> <p>Obrigado Andrea Rovescalli pela tradu\u00e7\u00e3o em Italiano (italiano)</p> <p>Obrigado Michael Tischer pela tradu\u00e7\u00e3o em Alem\u00e3o (deutsch)</p> <p>Obrigado Sergey Karchevsky pela tradu\u00e7\u00e3o em Russo (russian)</p> <p>Obrigado Manoylov Andriy pela tradu\u00e7\u00e3o em Ucraniano (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>Obrigado Andy Stanton por corrigir e melhorar a pipeline para exportar pdf/epub</p> <p>Obrigado a todos que acreditaram neste projeto e contribu\u00edram com corre\u00e7\u00f5es ou doa\u00e7\u00f5es.</p>"},{"location":"Frontend/shader/README-pt/#receba-novos-capitulos","title":"Receba novos cap\u00edtulos","text":"<p>Assine a newsletter ou nos siga no Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-ru/","title":"README ru","text":""},{"location":"Frontend/shader/README-ru/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>\u041f\u0430\u0442\u0440\u0438\u0446\u0438\u043e \u0413\u043e\u043d\u0437\u0430\u043b\u0435\u0441 \u0412\u0438\u0432\u043e \u0438 \u0414\u0436\u0435\u043d \u041b\u0430\u0432</p> <p>\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0439 \u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0432\u0441\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u043e\u0432.</p>"},{"location":"Frontend/shader/README-ru/#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li> <p>\u041e\u0431 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0435</p> </li> <li> <p>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435</p> <ul> <li>\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0448\u0435\u0439\u0434\u0435\u0440?</li> <li>\u201cHello world!\u201d</li> <li>Uniform-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a \u0448\u0435\u0439\u0434\u0435\u0440\u0430</li> </ul> </li> <li> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435</p> <ul> <li>\u0424\u043e\u0440\u043c\u043e\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0449\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438</li> <li>\u0426\u0432\u0435\u0442\u0430</li> <li>\u0424\u0438\u0433\u0443\u0440\u044b</li> <li>\u041c\u0430\u0442\u0440\u0438\u0446\u044b</li> <li>\u0423\u0437\u043e\u0440\u044b</li> </ul> </li> <li> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d</p> <ul> <li>\u0411\u0435\u0441\u043f\u043e\u0440\u044f\u0434\u043e\u043a</li> <li>\u0428\u0443\u043c</li> <li>\u041a\u043b\u0435\u0442\u043e\u0447\u043d\u044b\u0439 \u0448\u0443\u043c</li> <li>\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0431\u0440\u043e\u0443\u043d\u043e\u0432\u0441\u043a\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435</li> <li>\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u044b</li> </ul> </li> <li> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439</p> <ul> <li>\u0422\u0435\u043a\u0441\u0442\u0443\u0440\u044b</li> <li>\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438</li> <li>\u0421\u0432\u0451\u0440\u0442\u043a\u0430 \u0441 \u044f\u0434\u0440\u043e\u043c</li> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u044b</li> <li>\u0414\u0440\u0443\u0433\u0438\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b</li> </ul> </li> <li> <p>\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f</p> <ul> <li>\u041f\u0438\u043d\u0433-\u043f\u043e\u043d\u0433</li> <li>\u0418\u0433\u0440\u0430 \u00ab\u0416\u0438\u0437\u043d\u044c\u00bb \u041a\u043e\u043d\u0432\u0435\u044f</li> <li>\u0420\u044f\u0431\u044c</li> <li>\u0412\u043e\u0434\u0430</li> <li>\u0420\u0435\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e-\u0434\u0438\u0444\u0444\u0443\u0437\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c</li> </ul> </li> <li> <p>3D-\u0433\u0440\u0430\u0444\u0438\u043a\u0430</p> <ul> <li>\u041e\u0441\u0432\u0435\u0449\u0435\u043d\u0438\u0435</li> <li>\u041a\u0430\u0440\u0442\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u0435\u0439</li> <li>\u041a\u0430\u0440\u0442\u044b \u0432\u044b\u0441\u043e\u0442</li> <li>Ray marching</li> <li>\u041a\u0430\u0440\u0442\u044b \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f (\u0441\u0444\u0435\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438 \u043a\u0443\u0431\u0438\u0447\u0435\u0441\u043a\u0438\u0435)</li> <li>\u041e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u0435\u043b\u043e\u043c\u043b\u0435\u043d\u0438\u0435</li> </ul> </li> <li> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435: \u0414\u0440\u0443\u0433\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438</p> <ul> <li>\u041a\u0430\u043a \u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043e\u0444\u0444\u043b\u0430\u0439\u043d?</li> <li>\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Raspberry Pi?</li> <li>\u041a\u0430\u043a \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443?</li> <li>\u041a\u0430\u043a \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043d\u0438\u0433\u0438?</li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u043b\u044f JavaScript-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 (\u041d\u0438\u043a\u043e\u043b\u044f \u0411\u0430\u0440\u0440\u0430\u0434\u043e)</li> </ul> </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b</p> </li> <li> <p>\u0413\u043b\u043e\u0441\u0441\u0430\u0440\u0438\u0439</p> </li> </ul>"},{"location":"Frontend/shader/README-ru/#_2","title":"\u041e\u0431 \u0430\u0432\u0442\u043e\u0440\u0430\u0445","text":"<p>\u041f\u0430\u0442\u0440\u0438\u0446\u0438\u043e \u0413\u043e\u043d\u0437\u0430\u043b\u0435\u0441 \u0412\u0438\u0432\u043e (1982, \u0411\u0443\u044d\u043d\u043e\u0441 \u0410\u0439\u0440\u0435\u0441, \u0410\u0440\u0433\u0435\u043d\u0442\u0438\u043d\u0430) - \u0445\u0443\u0434\u043e\u0436\u043d\u0438\u043a \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0436\u0438\u0432\u0443\u0449\u0438\u0439 \u0432 \u041d\u044c\u044e-\u0419\u043e\u0440\u043a\u0435. \u041e\u043d \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0440\u043e\u0434\u043d\u044b\u043c \u0438 \u0440\u0443\u043a\u043e\u0442\u0432\u043e\u0440\u043d\u044b\u043c, \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u043c \u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u043c, \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c. \u0412 \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u0434 \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0434\u0435\u043b\u0430\u044f \u044d\u0442\u043e\u0442 \u043c\u0438\u0440 \u043b\u0443\u0447\u0448\u0435.</p> <p>\u041f\u0430\u0442\u0440\u0438\u0446\u0438\u043e \u0438\u0437\u0443\u0447\u0430\u043b \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0432\u0430\u043b \u043f\u0441\u0438\u0445\u043e\u0442\u0435\u0440\u0430\u043f\u0438\u044e \u0438 \u0430\u0440\u0442-\u0442\u0435\u0440\u0430\u043f\u0438\u044e. \u041e\u043d \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043c\u0430\u0433\u0438\u0441\u0442\u0440\u0430 \u043d\u0430\u0443\u043a \u0438 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0434\u0438\u0437\u0430\u0439\u043d\u0430 \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0432 Parsons The New School, \u0433\u0434\u0435 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0451\u0442. \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u043c \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432 Mapzen, \u0433\u0434\u0435 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c.</p> \u0421\u0430\u0439\u0442 - Twitter - GitHub - Vimeo -  Flickr <p>\u0414\u0436\u0435\u043d \u041b\u0430\u0432 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u043e\u0435\u0434\u0438\u043d\u043e \u043b\u044e\u0434\u0435\u0439, \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u043b\u043e\u0432\u0430, \u0440\u0430\u0431\u043e\u0442\u0430\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Datatelling. \u041e\u043d\u0430 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0451\u0442 \u0432 \u041d\u044c\u044e-\u0419\u043e\u0440\u043a\u0441\u043a\u043e\u0439 \u0448\u043a\u043e\u043b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0430 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u043d\u043e\u0432\u0430\u0446\u0438\u0439, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u0443\u0447\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u043c \u0428\u043a\u043e\u043b\u044b \u043f\u043e\u044d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0439, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u043b\u0430 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443 \u0434\u043b\u044f \u0445\u0443\u0434\u043e\u0436\u043d\u0438\u043a\u043e\u0432 \u0432 NYU ITP, \u0437\u0430\u043d\u0438\u043c\u0430\u043b\u0430\u0441\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0432 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0438\u0437\u0430\u0439\u043d\u0430 \u0432 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u041a\u043e\u043b\u0443\u043c\u0431\u0438\u0438, \u0432\u043d\u043e\u0441\u0438\u043b\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u043e\u0444\u0438\u0441 \u0411\u0435\u043b\u043e\u0433\u043e \u0434\u043e\u043c\u0430 \u043f\u043e \u043d\u0430\u0443\u043a\u0435 \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. \u0412\u044b\u0441\u0442\u0443\u043f\u0430\u043b\u0430 \u043d\u0430 SXSW \u0438 Eyeo. \u0415\u0451 \u0440\u0430\u0431\u043e\u0442\u044b \u043e\u0441\u0432\u0435\u0449\u0430\u043b\u0438\u0441\u044c \u0432 The New York Times \u0438 Fast Company. \u0415\u0451 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0434\u043e\u043a\u043b\u0430\u0434\u044b \u0437\u0430\u0442\u0440\u0430\u0433\u0438\u0432\u0430\u044e\u0442 \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u044b \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430. \u0418\u043c\u0435\u0435\u0442 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0430 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u043e\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438 \u0438 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043c\u0430\u0433\u0438\u0441\u0442\u0440\u0430 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0438.</p> \u0421\u0430\u0439\u0442 - Twitter - GitHub"},{"location":"Frontend/shader/README-ru/#_3","title":"\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u043d\u043e\u0441\u0442\u0438","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0421\u043a\u043e\u0442\u0442\u0443 \u041c\u044e\u0440\u0440\u0435\u044e \u0437\u0430 \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0432\u0435\u0442\u044b.</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u041a\u0435\u043d\u0438\u0447\u0438 \u0419\u043e\u043d\u0435\u0434\u0435 (Kynd), \u041d\u0438\u043a\u043e\u043b\u044f \u0411\u0430\u0440\u0440\u0430\u0434\u043e \u0438 \u041a\u0430\u0440\u0438\u043c\u0443 \u041d\u0430\u0430\u0434\u0436\u0438 \u0437\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443, \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0438\u0434\u0435\u0438 \u0438 \u043a\u043e\u0434.</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u041a\u0435\u043d\u0438\u0447\u0438 \u0419\u043e\u043d\u0435\u0434\u0435 (Kynd) \u0438 \u0421\u0430\u0432\u0430\u043a\u043e \u0437\u0430 \u044f\u043f\u043e\u043d\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (\u65e5\u672c\u8a9e\u8a33)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0422\u043e\u043d\u044c \u041b\u0438 \u0438 \u0418 \u0416\u0430\u043d\u044c \u0437\u0430 \u043a\u0438\u0442\u0430\u0439\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (\u4e2d\u6587\u7248)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0427\u0430 \u0425\u044c\u044e\u043d \u042e \u0437\u0430 \u043a\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (\ud55c\uad6d\uc5b4)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u041d\u0430\u0443\u044d\u043b\u044e \u041a\u043e\u043f\u043f\u0435\u0440\u043e (Necsoft) \u0437\u0430 \u0438\u0441\u043f\u0430\u043d\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (espa\u00f1ol)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u041d\u0438\u043a\u043e\u043b\u044f \u0411\u0430\u0440\u0440\u0430\u0434\u043e \u0438 \u041a\u0430\u0440\u0438\u043c\u0443 \u041d\u0430\u0430\u0434\u0436\u0438 \u0437\u0430 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (fran\u00e7ais)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0410\u043d\u0434\u0440\u0435\u0430 \u0420\u043e\u0432\u0435\u0441\u043a\u0430\u043b\u043b\u0438 \u0437\u0430 \u0438\u0442\u0430\u043b\u044c\u044f\u043d\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (italiano)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u041c\u0430\u0439\u043a\u043b\u0443 \u0422\u0438\u0448\u0435\u0440\u0443 \u0437\u0430 \u043d\u0435\u043c\u0435\u0446\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 (deutsch)</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0421\u0435\u0440\u0433\u0435\u044e \u041a\u0430\u0440\u0447\u0435\u0432\u0441\u043a\u043e\u043c\u0443 \u0437\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0410\u043d\u0434\u0440\u0435\u044e \u041c\u0430\u043d\u043e\u0439\u043b\u043e\u0432\u0443 \u0437\u0430 \u0443\u043a\u0440\u0430\u0438\u043d\u0441\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0432\u0441\u0435\u043c \u043a\u0442\u043e \u043f\u043e\u0432\u0435\u0440\u0438\u043b \u0432 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043b \u0435\u0433\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u043b\u0438 \u043f\u043e\u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438.</p>"},{"location":"Frontend/shader/README-ru/#_4","title":"\u041d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u044b","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u043e\u0432\u044b\u0445 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u0430\u0445, \u043f\u043e\u0434\u043f\u0438\u0448\u0438\u0442\u0435\u0441\u044c \u043d\u0430 \u043f\u043e\u0447\u0442\u043e\u0432\u0443\u044e \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0443 \u0438\u043b\u0438 \u0422\u0432\u0438\u0442\u0442\u0435\u0440 / Mastodon / Discord </p>"},{"location":"Frontend/shader/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/README-ua/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>\u0430\u0432\u0442\u043e\u0440\u0438: Patricio Gonzalez Vivo \u0456 Jen Lowe</p> <p>\u041b\u0435\u0433\u043a\u0438\u0439 \u043f\u043e\u043a\u0440\u043e\u043a\u043e\u0432\u0438\u0439 \u043f\u0440\u043e\u0432\u0456\u0434\u043d\u0438\u043a \u0447\u0435\u0440\u0435\u0437 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0438\u0439 \u0456 \u0441\u043a\u043b\u0430\u0434\u043d\u0438\u0439 \u0432\u0441\u0435\u0441\u0432\u0456\u0442 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0456\u0432.</p>"},{"location":"Frontend/shader/README-ua/#_1","title":"\u0417\u043c\u0456\u0441\u0442","text":"<ul> <li> <p>\u041f\u0440\u043e \u043a\u043d\u0438\u0433\u0443</p> </li> <li> <p>\u0412\u0441\u0442\u0443\u043f</p> <ul> <li>\u0429\u043e \u0442\u0430\u043a\u0435 \u0448\u0435\u0439\u0434\u0435\u0440?</li> <li>\u201cHello world!\u201d</li> <li>Uniforms</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a \u0448\u0435\u0439\u0434\u0435\u0440\u0430</li> </ul> </li> <li> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0456\u0447\u043d\u0435 \u043c\u0430\u043b\u044e\u0432\u0430\u043d\u043d\u044f</p> <ul> <li>\u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</li> <li>\u041a\u043e\u043b\u044c\u043e\u0440\u0438</li> <li>\u0424\u0456\u0433\u0443\u0440\u0438</li> <li>\u041c\u0430\u0442\u0440\u0438\u0446\u0456</li> <li>\u041f\u0430\u0442\u0435\u0440\u043d\u0438</li> </ul> </li> <li> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u0438\u0439 \u0434\u0438\u0437\u0430\u0439\u043d</p> <ul> <li>\u0412\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0456\u0441\u0442\u044c</li> <li>\u0428\u0443\u043c</li> <li>\u041a\u043b\u0456\u0442\u0438\u043d\u043d\u0438\u0439 \u0448\u0443\u043c</li> <li>\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u044c\u043d\u0438\u0439 \u0431\u0440\u043e\u0443\u043d\u0456\u0432\u0441\u044c\u043a\u0438\u0439 \u0440\u0443\u0445</li> <li>\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u0438</li> </ul> </li> <li> <p>\u041e\u0431\u0440\u043e\u0431\u043a\u0430 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u044c</p> <ul> <li>\u0422\u0435\u043a\u0441\u0442\u0443\u0440\u0438</li> <li>\u041e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u0456\u0437 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f\u043c\u0438</li> <li>\u0417\u0433\u043e\u0440\u0442\u043a\u0430 \u044f\u0434\u0440\u0430</li> <li>\u0424\u0456\u043b\u044c\u0442\u0440\u0438</li> <li>\u0406\u043d\u0448\u0456 \u0435\u0444\u0435\u043a\u0442\u0438</li> </ul> </li> <li> <p>\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0456\u0457</p> <ul> <li>\u041f\u0456\u043d\u0433-\u043f\u043e\u043d\u0433</li> <li>Conway</li> <li>\u0411\u0440\u0438\u0436\u0456 \u0432\u043e\u0434\u0438</li> <li>\u0410\u043a\u0432\u0430\u0440\u0435\u043b\u044c</li> <li>\u0420\u0435\u0430\u043a\u0446\u0456\u0439\u043d\u043e-\u0434\u0438\u0444\u0443\u0437\u0456\u0439\u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430</li> </ul> </li> <li> <p>3D-\u0433\u0440\u0430\u0444\u0456\u043a\u0430</p> <ul> <li>\u041e\u0441\u0432\u0456\u0442\u043b\u0435\u043d\u043d\u044f</li> <li>\u041a\u0430\u0440\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0435\u0439</li> <li>\u041a\u0430\u0440\u0442\u0438 \u0432\u0438\u0441\u043e\u0442</li> <li>Ray marching</li> <li>\u041a\u0430\u0440\u0442\u0438 \u043e\u0442\u043e\u0447\u0435\u043d\u043d\u044f (\u0441\u0444\u0435\u0440\u0438\u0447\u043d\u0456 \u0442\u0430 \u043a\u0443\u0431\u0456\u0447\u043d\u0456)</li> <li>\u0412\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0442\u0430 \u0437\u0430\u043b\u043e\u043c\u043b\u0435\u043d\u043d\u044f</li> </ul> </li> <li> <p>\u0414\u043e\u0434\u0430\u0442\u043e\u043a: \u0406\u043d\u0448\u0456 \u0441\u043f\u043e\u0441\u043e\u0431\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0446\u0456\u0454\u0457 \u043a\u043d\u0438\u0433\u0438</p> <ul> <li>\u042f\u043a \u043c\u043e\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434\u0430\u0442\u0438 \u043a\u043d\u0438\u0433\u0443 \u043e\u0444\u043b\u0430\u0439\u043d?</li> <li>\u042f\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u043d\u0430 Raspberry Pi?</li> <li>\u042f\u043a \u043d\u0430\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u043a\u043d\u0438\u0433\u0443?</li> <li>\u042f\u043a \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0438 \u0443\u0447\u0430\u0441\u0442\u044c \u0443 \u0440\u043e\u0437\u0432\u0438\u0442\u043a\u0443 \u043a\u043d\u0438\u0433\u0438?</li> <li>\u0412\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u0442\u0438\u0445, \u0445\u0442\u043e \u043f\u0440\u0438\u0439\u0448\u043e\u0432 \u0456\u0437 JS \u0432\u0456\u0434 Nicolas Barradeau</li> </ul> </li> <li> <p>\u0413\u0430\u043b\u0435\u0440\u0435\u044f \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432</p> </li> <li> <p>\u0413\u043b\u043e\u0441\u0430\u0440\u0456\u0439</p> </li> </ul>"},{"location":"Frontend/shader/README-ua/#_2","title":"\u041f\u0440\u043e \u0430\u0432\u0442\u043e\u0440\u0456\u0432","text":"<p>Patricio Gonzalez Vivo (1982, \u0411\u0443\u0435\u043d\u043e\u0441-\u0410\u0439\u0440\u0435\u0441, \u0410\u0440\u0433\u0435\u043d\u0442\u0438\u043d\u0430) \u2014 \u043c\u0438\u0442\u0435\u0446\u044c \u0456 \u0440\u043e\u0437\u0440\u043e\u0431\u043d\u0438\u043a \u0456\u0437 \u041d\u044c\u044e-\u0419\u043e\u0440\u043a\u0430. \u0414\u043e\u0441\u043b\u0456\u0434\u0436\u0443\u0454 \u0456\u043d\u0442\u0435\u0440\u0441\u0442\u0438\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u0456\u0440 \u043c\u0456\u0436 \u043e\u0440\u0433\u0430\u043d\u0456\u0447\u043d\u0438\u043c \u0456 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u043d\u0438\u043c, \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0438\u043c \u0456 \u0446\u0438\u0444\u0440\u043e\u0432\u0438\u043c, \u0456\u043d\u0434\u0438\u0432\u0456\u0434\u0443\u0430\u043b\u044c\u043d\u0438\u043c \u0456 \u043a\u043e\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u0438\u043c. \u0423 \u0441\u0432\u043e\u0457\u0439 \u0440\u043e\u0431\u043e\u0442\u0456 \u0432\u0456\u043d \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454 \u043a\u043e\u0434 \u044f\u043a \u0432\u0438\u0440\u0430\u0437\u043d\u0443 \u043c\u043e\u0432\u0443 \u0437 \u043c\u0435\u0442\u043e\u044e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043a\u0440\u0430\u0449\u043e\u0433\u043e \u0440\u0430\u0437\u043e\u043c.</p> <p>\u041f\u0430\u0442\u0440\u0456\u0441\u0456\u043e \u0432\u0438\u0432\u0447\u0430\u0432 \u0456 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u0432\u0430\u0432 \u043f\u0441\u0438\u0445\u043e\u0442\u0435\u0440\u0430\u043f\u0456\u044e \u0442\u0430 \u0430\u0440\u0442\u0442\u0435\u0440\u0430\u043f\u0456\u044e. \u0412\u0456\u043d \u0437\u0434\u043e\u0431\u0443\u0432 \u0441\u0442\u0443\u043f\u0456\u043d\u044c \u043c\u0430\u0433\u0456\u0441\u0442\u0440\u0430 \u043c\u0438\u0441\u0442\u0435\u0446\u0442\u0432\u0430 \u0432 \u0433\u0430\u043b\u0443\u0437\u0456 \u0434\u0438\u0437\u0430\u0439\u043d\u0443 \u0442\u0430 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0456\u0439 \u0443 Parsons The New School, \u0434\u0435 \u0437\u0430\u0440\u0430\u0437 \u0456 \u0432\u0438\u043a\u043b\u0430\u0434\u0430\u0454. \u041d\u0430\u0440\u0430\u0437\u0456 \u0432\u0456\u043d \u043f\u0440\u0430\u0446\u044e\u0454 \u044f\u043a \u0433\u0440\u0430\u0444\u0456\u0447\u043d\u0438\u0439 \u0456\u043d\u0436\u0435\u043d\u0435\u0440 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0456\u0457 Mapzen, \u0440\u043e\u0437\u0440\u043e\u0431\u043b\u044f\u044e\u0447\u0438 open-source \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0443\u0432\u0430\u043d\u043d\u044f.</p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe - \u043d\u0435\u0437\u0430\u043b\u0435\u0436\u043d\u0430 \u043d\u0430\u0443\u043a\u043e\u0432\u0430 \u0444\u0430\u0445\u0456\u0432\u0447\u0438\u043d\u044f \u0443 \u0433\u0430\u043b\u0443\u0437\u0456 \u043e\u0431\u0440\u043e\u0431\u043a\u0438 \u0442\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0456 \u0434\u0430\u043d\u0438\u0445 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0456\u0457 Datatelling, \u0434\u0435 \u0432\u043e\u043d\u0430 \u043f\u043e\u0454\u0434\u043d\u0443\u0454 \u043b\u044e\u0434\u0435\u0439, \u0447\u0438\u0441\u043b\u0430 \u0442\u0430 \u0441\u043b\u043e\u0432\u0430. \u0412\u043e\u043d\u0430 \u0432\u0438\u043a\u043b\u0430\u0434\u0430\u0454 \u0443 SVA Design \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438 \u0441\u043e\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0456\u043d\u043d\u043e\u0432\u0430\u0446\u0456\u0439, \u0441\u043f\u0456\u0432\u0437\u0430\u0441\u043d\u043e\u0432\u043d\u0438\u0446\u044f School for Poetic Computation, \u0432\u0438\u043a\u043b\u0430\u0434\u0430\u043b\u0430 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443 \u0434\u043b\u044f \u0445\u0443\u0434\u043e\u0436\u043d\u0438\u043a\u0456\u0432 \u0432 NYU ITP, \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0430 \u0434\u043e\u0441\u043b\u0456\u0434\u0436\u0435\u043d\u043d\u044f \u0432 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0456\u0457 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0439\u043d\u043e\u0433\u043e \u0434\u0438\u0437\u0430\u0439\u043d\u0443 \u0443 \u041a\u043e\u043b\u0443\u043c\u0431\u0456\u0439\u0441\u044c\u043a\u043e\u043c\u0443 \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0456 \u0442\u0430 \u0434\u043e\u043f\u043e\u043c\u0430\u0433\u0430\u043b\u0430 \u0437 \u0456\u0434\u0435\u044f\u043c\u0438 \u0432 \u0411\u0456\u043b\u043e\u043c\u0443 \u0434\u043e\u043c\u0456 \u0441\u0442\u043e\u0441\u043e\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u043d\u0430\u0443\u043a\u0438 \u0442\u0430 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0456\u0447\u043d\u043e\u0457 \u043f\u043e\u043b\u0456\u0442\u0438\u043a\u0438. \u0412\u043e\u043d\u0430 \u0432\u0438\u0441\u0442\u0443\u043f\u0430\u043b\u0430 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u044f\u0445 SXSW \u0442\u0430 Eyeo. \u0407\u0457 \u0440\u043e\u0431\u043e\u0442\u0438 \u0432\u0438\u0441\u0432\u0456\u0442\u043b\u044e\u0432\u0430\u043b\u0438\u0441\u044f \u0432 The New York Times \u0442\u0430 Fast Company.  \u0423 \u0441\u0432\u043e\u0457\u0445 \u0434\u043e\u0441\u043b\u0456\u0434\u0436\u0435\u043d\u043d\u044f\u0445, \u043f\u0443\u0431\u043b\u0456\u043a\u0430\u0446\u0456\u044f\u0445 \u0442\u0430 \u0432\u0438\u0441\u0442\u0443\u043f\u0430\u0445 \u0432\u043e\u043d\u0430 \u0434\u043e\u0441\u043b\u0456\u0434\u0436\u0443\u0454 \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0438 \u0442\u0430 \u043d\u0430\u0441\u043b\u0456\u0434\u043a\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0434\u0430\u043d\u0438\u0445 \u0456 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0456\u0439 \u0443 \u0441\u0443\u0441\u043f\u0456\u043b\u044c\u0441\u0442\u0432\u0456. \u041c\u0430\u0454 \u0441\u0442\u0443\u043f\u0456\u043d\u044c \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0430 \u0437 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u043e\u0457 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438 \u0442\u0430 \u043c\u0430\u0433\u0456\u0441\u0442\u0440\u0430 \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043d\u0430\u0443\u043a. \u0427\u0430\u0441\u0442\u043e \u0437\u0430\u0439\u043c\u0430\u044e\u0447\u0438 \u043e\u043f\u043e\u0437\u0438\u0446\u0456\u0439\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0456\u044e, \u0432\u043e\u043d\u0430 \u0437\u0430\u0432\u0436\u0434\u0438 \u043d\u0430 \u0431\u043e\u0446\u0456 \u043b\u044e\u0431\u043e\u0432\u0456.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-ua/#_3","title":"\u041f\u043e\u0434\u044f\u043a\u0438","text":"<p>\u0414\u044f\u043a\u0443\u044e Scott Murray \u0437\u0430 \u043d\u0430\u0442\u0445\u043d\u0435\u043d\u043d\u044f \u0442\u0430 \u043f\u043e\u0440\u0430\u0434\u0438.</p> <p>\u0414\u044f\u043a\u0443\u044e Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji \u0437\u0430 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0443, \u0433\u0430\u0440\u043d\u0456 \u0456\u0434\u0435\u0457 \u0442\u0430 \u043a\u043e\u0434.</p> <p>\u0414\u044f\u043a\u0443\u044e Kenichi Yoneda (Kynd) \u0456 Sawako \u0437\u0430 \u044f\u043f\u043e\u043d\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (\u65e5\u672c\u8a9e\u8a33)</p> <p>\u0414\u044f\u043a\u0443\u044e Tong Li \u0456 Yi Zhang \u0437\u0430 \u043a\u0438\u0442\u0430\u0439\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (\u4e2d\u6587\u7248)</p> <p>\u0414\u044f\u043a\u0443\u044e Jae Hyun Yoo \u0456 June Kim \u0437\u0430 \u043a\u043e\u0440\u0435\u0439\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (\ud55c\uad6d\uc5b4)</p> <p>\u0414\u044f\u043a\u0443\u044e Nahuel Coppero (Necsoft) \u0437\u0430 \u0456\u0441\u043f\u0430\u043d\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (espa\u00f1ol)</p> <p>\u0414\u044f\u043a\u0443\u044e Raphaela Prot\u00e1sio \u0456 Lucas Mendon\u00e7a \u0437\u0430 \u043f\u043e\u0440\u0442\u0443\u0433\u0430\u043b\u044c\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (portugues)</p> <p>\u0414\u044f\u043a\u0443\u044e Nicolas Barradeau \u0456 Karim Naaji \u0437\u0430 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (fran\u00e7ais)</p> <p>\u0414\u044f\u043a\u0443\u044e Andrea Rovescalli \u0437\u0430 \u0456\u0442\u0430\u043b\u0456\u0439\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (italiano)</p> <p>\u0414\u044f\u043a\u0443\u044e Michael Tischer \u0437\u0430 \u043d\u0456\u043c\u0435\u0446\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (deutsch)</p> <p>\u0414\u044f\u043a\u0443\u044e Sergey Karchevsky \u0437\u0430 \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434</p> <p>\u0414\u044f\u043a\u0443\u044e Vu Phuong Hoang \u0437\u0430 \u0432'\u0454\u0442\u043d\u0430\u043c\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (Ti\u1ebfng Vi\u1ec7t)</p> <p>\u0414\u044f\u043a\u0443\u044e Wojciech Pachowiak \u0437\u0430 \u043f\u043e\u043b\u044c\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 (polski)</p> <p>\u0414\u044f\u043a\u0443\u044e \u041c\u0430\u043d\u043e\u0439\u043b\u043e\u0432\u0443 \u0410\u043d\u0434\u0440\u0456\u044e \u0437\u0430 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434</p> <p>\u0414\u044f\u043a\u0443\u044e Andy Stanton \u0437\u0430 \u0432\u0438\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0442\u0430 \u0432\u0434\u043e\u0441\u043a\u043e\u043d\u0430\u043b\u0435\u043d\u043d\u044f the pdf/epub export pipeline</p> <p>\u0414\u044f\u043a\u0443\u044e \u0432\u0441\u0456\u043c, \u0445\u0442\u043e \u043f\u043e\u0432\u0456\u0440\u0438\u0432 \u0443 \u0446\u0435\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0456 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0432 \u0439\u043e\u0433\u043e \u0432\u0438\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f\u043c\u0438 \u0430\u0431\u043e \u043f\u043e\u0436\u0435\u0440\u0442\u0432\u0443\u0432\u0430\u043d\u043d\u044f\u043c\u0438.</p>"},{"location":"Frontend/shader/README-ua/#_4","title":"\u041d\u043e\u0432\u0456 \u0440\u043e\u0437\u0434\u0456\u043b\u0438","text":"<p>\u0414\u043b\u044f \u043e\u043f\u043e\u0432\u0456\u0449\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u043d\u043e\u0432\u0456 \u0440\u043e\u0437\u0434\u0456\u043b\u0438, \u043f\u0456\u0434\u043f\u0438\u0448\u0456\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u043e\u0448\u0442\u043e\u0432\u0443 \u0440\u043e\u0437\u0441\u0438\u043b\u043a\u0443 \u0430\u0431\u043e \u043d\u0430 Twitter / Mastodon / Discord</p>"},{"location":"Frontend/shader/README-ua/#license","title":"LICENSE","text":"<p>Copyright (c) Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/ All rights reserved.</p>"},{"location":"Frontend/shader/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/README-vi/#the-book-of-shaders","title":"The Book of Shaders","text":"<p>T\u00e1c gi\u1ea3: Patricio Gonzalez Vivo v\u00e0 Jen Lowe</p> <p>Quy\u1ec3n s\u00e1ch n\u00e0y s\u1ebd h\u01b0\u1edbng d\u1eabn ng\u01b0\u1eddi \u0111\u1ecdc kh\u00e1m ph\u00e1 d\u1ea7n v\u0169 tr\u1ee5 tr\u1eebu t\u01b0\u1ee3ng v\u00e0 ph\u1ee9c t\u1ea1p c\u1ee7a Fragment Shader.</p>"},{"location":"Frontend/shader/README-vi/#noi-dung","title":"N\u1ed9i dung","text":"<ul> <li> <p>L\u1eddi n\u00f3i \u0111\u1ea7u</p> </li> <li> <p>Gi\u1edbi thi\u1ec7u</p> <ul> <li>Shader l\u00e0 g\u00ec?</li> <li>\u201cHello world!\u201d</li> <li>Uniform</li> <li>Ch\u1ea1y th\u1eed shader</li> </ul> </li> <li> <p>C\u00e1c thu\u1eadt to\u00e1n h\u00ecnh h\u1ecdc</p> <ul> <li>C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</li> <li>M\u00e0u s\u1eafc</li> <li>H\u00ecnh d\u1ea1ng</li> <li>Ma tr\u1eadn</li> <li>M\u1eabu hoa v\u0103n (Pattern)</li> </ul> </li> <li> <p>C\u00e1c thi\u1ebft k\u1ebf ng\u1eabu nhi\u00ean</p> <ul> <li>Ng\u1eabu nhi\u00ean</li> <li>Nhi\u1ec5u (Noise)</li> <li>Nhi\u1ec5u m\u00f4 ph\u1ecfng t\u1ebf b\u00e0o (Cellular noise)</li> <li>Chuy\u1ec3n \u0111\u1ed9ng Brown (Fractional Brownian motion)</li> <li>Ph\u00e2n d\u1ea1ng (Fractals)</li> </ul> </li> <li> <p>X\u1eed l\u00fd \u1ea3nh</p> <ul> <li>\u1ea2nh v\u00e2n b\u1ec1 m\u1eb7t (Texture)</li> <li>C\u00e1c ph\u00e9p to\u00e1n x\u1eed l\u00fd \u1ea3nh</li> <li>T\u00edch ch\u1eadp (Kernel convolution)</li> <li>B\u1ed9 l\u1ecdc (Filter)</li> <li>C\u00e1c hi\u1ec7u \u1ee9ng kh\u00e1c</li> </ul> </li> <li> <p>M\u00f4 ph\u1ecfng</p> <ul> <li>B\u00f3ng b\u00e0n (Pingpong)</li> <li>Ti\u1ebfn tr\u00ecnh s\u1ed1ng c\u1ee7a Conway</li> <li>G\u1ee3n s\u00f3ng</li> <li>M\u00e0u n\u01b0\u1edbc</li> <li>M\u00f4 h\u00ecnh Ph\u1ea3n \u1ee9ng-Khu\u1ebfch t\u00e1n (Reaction-Diffusion)</li> </ul> </li> <li> <p>\u0110\u1ed3 ho\u1ea1 3 chi\u1ec1u</p> <ul> <li>\u00c1nh s\u00e1ng</li> <li>Gi\u1ea3 l\u1eadp chi ti\u1ebft b\u1ec1 m\u1eb7t b\u1eb1ng vector ph\u00e1p tuy\u1ebfn (Normal map)</li> <li>Gi\u1ea3 l\u1eadp chi ti\u1ebft b\u1ec1 m\u1eb7t t\u1eeb m\u1eb7t cong (Bump map)</li> <li>D\u00f2 tia quang h\u1ecdc (Ray marching)</li> <li>\u00c1nh x\u1ea1 t\u1eeb m\u00f4i tr\u01b0\u1eddng b\u1eb1ng m\u1eb7t c\u1ea7u ho\u1eb7c kh\u1ed1i l\u1eadp ph\u01b0\u01a1ng (Environmental map)</li> <li>Ph\u1ea3n x\u1ea1 v\u00e0 kh\u00fac x\u1ea1</li> </ul> </li> <li> <p>Ph\u1ee5 l\u1ee5c: C\u00e1c c\u00e1ch kh\u00e1c \u0111\u1ec3 \u0111\u1ecdc v\u00e0 \u0111\u00f3ng g\u00f3p cho quy\u1ec3n s\u00e1ch n\u00e0y</p> <ul> <li>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 \u0111\u1ecdc quy\u1ec3n s\u00e1ch n\u00e0y m\u00e0 kh\u00f4ng c\u1ea7n Internet ?</li> <li>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ch\u1ea1y th\u1eed v\u00ed d\u1ee5 tr\u00ean Raspberry Pi ?</li> <li>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 in quy\u1ec3n s\u00e1ch n\u00e0y ?</li> </ul> </li> <li>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 g\u00f3p s\u1ee9c cho quy\u1ec3n s\u00e1ch n\u00e0y ?</li> <li> <p>Gi\u1edbi thi\u1ec7u cho ng\u01b0\u1eddi \u0111\u00e3 bi\u1ebft Javascript t\u1eeb Nicolas Barradeau</p> </li> <li> <p>Th\u01b0 vi\u1ec7n c\u00e1c v\u00ed d\u1ee5</p> </li> <li> <p>Ch\u00fa gi\u1ea3i</p> </li> </ul>"},{"location":"Frontend/shader/README-vi/#tac-gia","title":"T\u00e1c gi\u1ea3","text":"<p>Patricio Gonzalez Vivo (sinh n\u0103m 1982 t\u1ea1i Buenos Aires, Argentina) l\u00e0 artist ki\u00eam developer \u1edf New York\u3002 Anh \u1ea5y kh\u00e1m ph\u00e1 s\u1ef1 giao thoa gi\u1eefa h\u1eefu c\u01a1 v\u00e0 v\u00f4 c\u01a1, analog v\u00e0 k\u1ef9 thu\u1eadt s\u1ed1, c\u00e1 nh\u00e2n v\u00e0 t\u1eadp th\u1ec3. Trong c\u00f4ng vi\u1ec7c, anh \u1ea5y d\u00f9ng code nh\u01b0 m\u1ed9t c\u00e1ch \u0111\u00f3ng g\u00f3p t\u1ea1o n\u00ean nh\u1eefng \u0111i\u1ec1u t\u1ed1t \u0111\u1eb9p h\u01a1n cho c\u1ed9ng \u0111\u1ed3ng.</p> <p>Patricio \u0111\u00e3 h\u1ecdc t\u1eadp v\u00e0 c\u00f4ng t\u00e1c trong ng\u00e0nh t\u00e2m l\u00fd tr\u1ecb li\u1ec7u v\u00e0 ngh\u1ec7 thu\u1eadt bi\u1ec3u c\u1ea3m. Anh \u1ea5y c\u00f3 b\u1eb1ng Th\u1ea1c s\u1ef9 ng\u00e0nh Thi\u1ebft k\u1ebf v\u00e0 C\u00f4ng ngh\u1ec7 t\u1eeb tr\u01b0\u1eddng Parson The New School, c\u0169ng l\u00e0 n\u01a1i anh \u1ea5y \u0111ang gi\u1ea3ng d\u1ea1y. Hi\u1ec7n t\u1ea1i, anh \u1ea5y l\u00e0 K\u1ef9 s\u01b0 \u0111\u1ed3 ho\u1ea1 t\u1ea1i Mapzen \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c c\u00f4ng c\u1ee5 cho openSource.</p> WebSite - Twitter - GitHub - Vimeo -  Flickr <p>Jen Lowe l\u00e0 m\u1ed9t nh\u00e0 khoa h\u1ecdc d\u1eef li\u1ec7u \u0111\u1ed9c l\u1eadp \u1edf Datatelling, n\u01a1i m\u00e0 c\u00f4 \u1ea5y kh\u00e1m ph\u00e1 m\u1ed1i li\u00ean h\u1ec7 gi\u1eefa con ng\u01b0\u1eddi v\u1edbi ch\u1eef s\u1ed1 v\u00e0 ng\u00f4n t\u1eeb. C\u00f4 \u1ea5y hi\u1ec7n \u0111ang gi\u1ea3ng d\u1ea1y \u1edf khoa Thi\u1ebft k\u1ebf c\u1ee7a tr\u01b0\u1eddng M\u1ef9 thu\u1eadt New York theo ch\u01b0\u01a1ng tr\u00ecnh Social Innovation. C\u00f4 \u1ea5y \u0111\u00e3 c\u00f9ng s\u00e1ng l\u1eadp ra School for Poetic Computation, d\u1ea1y m\u00f4n To\u00e1n chuy\u00ean ng\u00e0nh ngh\u1ec7 thu\u1eadt \u1edf khoa Sau \u0110\u1ea1i H\u1ecdc c\u1ee7a tr\u01b0\u1eddng New York, c\u00f4ng t\u00e1c t\u1ea1i ph\u00f2ng nghi\u00ean c\u1ee9u Spatial Information Design t\u1ea1i \u0110\u1ea1i h\u1ecdc Columbia v\u00e0 c\u00f2n \u0111\u00f3ng g\u00f3p nhi\u1ec1u \u00fd t\u01b0\u1edfng cho V\u0103n ph\u00f2ng Nh\u00e0 Tr\u1eafng v\u1ec1 c\u00e1c ch\u00ednh s\u00e1ch Khoa h\u1ecdc c\u00f4ng ngh\u1ec7. C\u00f4 \u1ea5y \u0111\u00e3 t\u1eebng thuy\u1ebft tr\u00ecnh \u1edf SXSW v\u00e0 Eyeo. S\u1ea3n ph\u1ea9m c\u1ee7a c\u00f4 \u1ea5y \u0111\u00e3 xu\u1ea5t hi\u1ec7n tr\u00ean trang b\u00eca c\u1ee7a t\u1edd The New York Times v\u00e0 Fast Company. C\u00f4ng vi\u1ec7c nghi\u00ean c\u1ee9u, s\u00e1ng t\u00e1c v\u00e0 thuy\u1ebft tr\u00ecnh c\u1ee7a c\u00f4 \u1ea5y ch\u1ee7 y\u1ebfu khai th\u00e1c \u0111\u1ec1 t\u00e0i v\u1ec1 ti\u1ec1m n\u0103ng v\u00e0 \u00fd ngh\u0129a c\u1ee7a vi\u1ec7c \u00e1p d\u1ee5ng c\u00e1c th\u00e0nh t\u1ef1u c\u1ee7a ng\u00e0nh d\u1eef li\u1ec7u v\u00e0 c\u00f4ng ngh\u1ec7 cho c\u1ed9ng \u0111\u1ed3ng. C\u00f4 \u1ea5y c\u00f3 b\u1eb1ng C\u1eed nh\u00e2n khoa h\u1ecdc ng\u00e0nh To\u00e1n \u1ee9ng d\u1ee5ng v\u00e0 b\u1eb1ng Th\u1ea1c s\u1ef9 ng\u00e0nh Khoa h\u1ecdc th\u00f4ng tin. Nh\u01b0ng c\u00f4 \u1ea5y c\u0169ng l\u00e0 m\u1ed9t ng\u01b0\u1eddi hay m\u01a1 m\u1ed9ng.</p> WebSite - Twitter - GitHub"},{"location":"Frontend/shader/README-vi/#loi-cam-on","title":"L\u1eddi c\u1ea3m \u01a1n","text":"<p>C\u1ea3m \u01a1n Scott Murray v\u00ec ni\u1ec1m c\u1ea3m h\u1ee9ng v\u00e0 nh\u1eefng l\u1eddi khuy\u00ean.</p> <p>C\u1ea3m \u01a1n Kenichi Yoneda (Kynd), Nicolas Barradeau, Karim Naaji v\u00ec \u0111\u00e3 h\u1ed7 tr\u1ee3 c\u1ea3 v\u1ec1 \u00fd t\u01b0\u1edfng l\u1eabn code.</p> <p>C\u1ea3m \u01a1n Kenichi Yoneda (Kynd) v\u00e0 Sawako v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng Nh\u1eadt (\u65e5\u672c\u8a9e\u8a33)</p> <p>C\u1ea3m \u01a1n Tong Li v\u00e0 Yi Zhang v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng Trung (\u4e2d\u6587\u7248)</p> <p>C\u1ea3m \u01a1n Jae Hyun Yoo v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng H\u00e0n (\ud55c\uad6d\uc5b4)</p> <p>C\u1ea3m \u01a1n Nahuel Coppero (Necsoft) v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng T\u00e2y Ban Nha (espa\u00f1ol)</p> <p>C\u1ea3m \u01a1n Raphaela Prot\u00e1sio v\u00e0 Lucas Mendon\u00e7a v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng B\u1ed3 \u0110\u00e0o Nha (portugues)</p> <p>C\u1ea3m \u01a1n Nicolas Barradeau v\u00e0 Karim Naaji v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng Ph\u00e1p (fran\u00e7ais)</p> <p>C\u1ea3m \u01a1n Andrea Rovescalli v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng \u00dd (italiano)</p> <p>C\u1ea3m \u01a1n Michael Tischer v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng \u0110\u1ee9c (deutsch)</p> <p>C\u1ea3m \u01a1n Sergey Karchevsky v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng Nga (russian)</p> <p>C\u1ea3m \u01a1n Vu Phuong Hoang v\u00e0 Minh-Phuc Bui v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng Vi\u1ec7t</p> <p>C\u1ea3m \u01a1n Manoylov Andriy v\u00ec B\u1ea3n d\u1ecbch ti\u1ebfng Ukraina (\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)</p> <p>C\u1ea3m \u01a1n Andy Stanton v\u00ec \u0111\u00e3 s\u1eeda l\u1ed7i v\u00e0 c\u1ea3i ti\u1ebfn c\u00e1ch export quy\u1ec3n s\u00e1ch ra \u0111\u1ecbnh d\u1ea1ng pdf/epub</p> <p>C\u1ea3m \u01a1n t\u1ea5t c\u1ea3 m\u1ecdi ng\u01b0\u1eddi \u0111\u00e3 tin t\u01b0\u1edfng, c\u00f9ng s\u1eeda l\u1ed7i v\u00e0 quy\u00ean g\u00f3p cho d\u1ef1 \u00e1n n\u00e0y.</p>"},{"location":"Frontend/shader/README-vi/#thong-bao-khi-co-chuong-moi","title":"Th\u00f4ng b\u00e1o khi c\u00f3 ch\u01b0\u01a1ng m\u1edbi","text":"<p>\u0110\u0103ng k\u00fd nh\u1eadn th\u01b0 \u0111\u1ecbnh k\u1ef3 ho\u1eb7c theo d\u00f5i tr\u00ean Twitter / Mastodon / Discord </p>"},{"location":"Frontend/shader/00/","title":"Introduction","text":"<p>The images above were made in different ways. The first one was made by Van Gogh's hand applying layer over layer of paint. It took him hours. The second was produced in seconds by the combination of four matrices of pixels: one for cyan, one for magenta, one for yellow and one for black. The key difference is that the second image is produced in a non-serial way (that means not step-by-step, but all at the same time).</p> <p>This book is about the revolutionary computational technique, fragment shaders, that is taking digitally generated images to the next level. You can think of it as the equivalent of Gutenberg's press for graphics.</p> <p></p> <p>Fragment shaders give you total control over the pixels rendered on the screen at a super fast speed. This is why they're used in all sort of cases, from video filters on cellphones to incredible 3D video games.</p> <p></p> <p>In the following chapters you will discover how incredibly fast and powerful this technique is and how to apply it to your professional and personal work.</p>"},{"location":"Frontend/shader/00/#who-is-this-book-for","title":"Who is this book for?","text":"<p>This book is written for creative coders, game developers and engineers who have coding experience, a basic knowledge of linear algebra and trigonometry, and who want to take their work to an exciting new level of graphical quality. (If you want to learn how to code, I highly recommend you start with Processing and come back later when you are comfortable with it.)</p> <p>This book will teach you how to use and integrate shaders into your projects, improving their performance and graphical quality. Because GLSL (OpenGL Shading Language) shaders compile and run on a variety of platforms, you will be able to apply what you learn here to any environment that uses OpenGL, OpenGL ES or WebGL. In other words, you will be able to apply and use your knowledge with Processing sketches, openFrameworks applications, Cinder interactive installations, Three.js websites or iOS/Android games.</p>"},{"location":"Frontend/shader/00/#what-does-this-book-cover","title":"What does this book cover?","text":"<p>This book will focus on the use of GLSL pixel shaders. First we'll define what shaders are; then we'll learn how to make procedural shapes, patterns, textures and animations with them. You'll learn the foundations of shading language and apply it to more useful scenarios such as: image processing (image operations, matrix convolutions, blurs, color filters, lookup tables and other effects) and simulations (Conway's game of life, Gray-Scott's reaction-diffusion, water ripples, watercolor effects, Voronoi cells, etc.). Towards the end of the book we'll see a set of advanced techniques based on Ray Marching.</p> <p>There are interactive examples for you to play with in every chapter. When you change the code, you will see the changes immediately. The concepts can be abstract and confusing, so the interactive examples are essential to helping you learn the material. The faster you put the concepts into motion the easier the learning process will be.</p> <p>What this book doesn't cover:</p> <ul> <li> <p>This is not an OpenGL or webGL book. OpenGL/webGL is a bigger subject than GLSL or fragment shaders. To learn more about OpenGL/webGL I recommend taking a look at:  OpenGL Introduction, the 8th edition of the OpenGL Programming Guide (also known as the red book) or WebGL: Up and Running</p> </li> <li> <p>This is not a math book. Although we will cover a number of algorithms and techniques that rely on an understanding of algebra and trigonometry, we will not explain them in detail. For questions regarding the math I recommend keeping one of the following books nearby: 3rd Edition of Mathematics for 3D Game Programming and computer Graphics or 2nd Edition of Essential Mathematics for Games and Interactive Applications.</p> </li> </ul>"},{"location":"Frontend/shader/00/#what-do-you-need-to-start","title":"What do you need to start?","text":"<p>Not much! If you have a modern browser that can do WebGL (like Chrome, Firefox or Safari) and a internet connection, click the \u201cNext\u201d Chapter button at the end of this page to get started.</p> <p>Alternatively, based on what you have or what you need from this book you can:</p> <ul> <li> <p>Make an off-line version of this book</p> </li> <li> <p>Run the examples on a Raspberry Pi without a browser</p> </li> <li> <p>Make a PDF of the book to print</p> </li> <li> <p>Check the GitHub repository of this book to help resolve issues and share code.</p> </li> </ul>"},{"location":"Frontend/shader/00/README-ch/","title":"\u5173\u4e8e\u8fd9\u672c\u4e66","text":""},{"location":"Frontend/shader/00/README-ch/#_2","title":"\u5f15\u8a00","text":"<p>\u4e0a\u9762\u4e24\u5e45\u56fe\u662f\u7531\u4e0d\u540c\u7684\u65b9\u5f0f\u5236\u6210\u7684\u3002\u7b2c\u4e00\u5f20\u662f\u68b5\u9ad8\u4e00\u5c42\u4e00\u5c42\u5f92\u624b\u753b\u51fa\u6765\u7684\uff0c\u9700\u8981\u82b1\u8d39\u4e9b\u65f6\u95f4\u3002\u7b2c\u4e8c\u5f20\u5219\u662f\u7528 4 \u4e2a\u50cf\u7d20\u77e9\u9635\u5206\u79d2\u949f\u751f\u6210\u7684\uff1a\u4e00\u4e2a\u9752\u8272\uff0c\u4e00\u4e2a\u54c1\u7ea2\uff0c\u4e00\u4e2a\u9ec4\u8272\uff0c\u548c\u4e00\u4e2a\u9ed1\u8272\u77e9\u9635\u3002\u5173\u952e\u7684\u533a\u522b\u5728\u4e8e\u7b2c\u4e8c\u5f20\u56fe\u662f\u7528\u975e\u5e8f\u5217\u65b9\u5f0f\u5b9e\u73b0\u7684\uff08\u5373\u4e0d\u662f\u4e00\u6b65\u4e00\u6b65\u5b9e\u73b0\uff0c\u800c\u662f\u591a\u4e2a\u540c\u65f6\u8fdb\u884c\uff09\u3002</p> <p>\u8fd9\u672c\u4e66\u662f\u5173\u4e8e\u8fd9\u4e2a\u9769\u547d\u6027\u7684\u8ba1\u7b97\u673a\u6280\u672f\uff0c\u7247\u6bb5\u7740\u8272\u5668\uff08fragment shaders\uff09\uff0c\u5b83\u5c06\u6570\u5b57\u751f\u6210\u7684\u56fe\u50cf\u63d0\u5230\u4e86\u65b0\u7684\u5c42\u6b21\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u770b\u505a\u5f53\u5e74\u7684\u53e4\u817e\u5821\u5370\u5237\u672f\u3002</p> <p></p> <p>Fragment shaders\uff08\u7247\u6bb5\u7740\u8272\u5668\uff09\u53ef\u4ee5\u8ba9\u4f60\u63a7\u5236\u50cf\u7d20\u5728\u5c4f\u5e55\u4e0a\u7684\u5feb\u901f\u6e32\u67d3\u3002\u8fd9\u5c31\u662f\u5b83\u5728\u5404\u79cd\u573a\u5408\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u539f\u56e0\uff0c\u4ece\u624b\u673a\u7684\u89c6\u9891\u6ee4\u955c\u5230\u9177\u70ab\u7684\u76843D\u89c6\u9891\u6e38\u620f\u3002</p> <p></p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9879\u6280\u672f\u662f\u591a\u4e48\u96be\u4ee5\u7f6e\u4fe1\u5730\u5feb\u901f\u548c\u5f3a\u5927\uff0c\u8fd8\u6709\u5982\u4f55\u5c06\u5b83\u5e94\u7528\u5230\u4e13\u4e1a\u7684\u548c\u4e2a\u4eba\u7684\u4f5c\u54c1\u4e2d\u3002</p>"},{"location":"Frontend/shader/00/README-ch/#git","title":"\u8fd9\u672c\u4e66\u7684git\u5730\u5740\uff1a","text":"<p>\u70b9\u51fb\u8df3\u8f6c\u5230git</p>"},{"location":"Frontend/shader/00/README-ch/#_3","title":"\u8fd9\u672c\u4e66\u662f\u4e3a\u8c01\u800c\u5199\u7684\uff1f","text":"<p>\u8fd9\u672c\u4e66\u662f\u5199\u7ed9\u6709\u4ee3\u7801\u7ecf\u9a8c\u548c\u7ebf\u6027\u4ee3\u6570\u3001\u4e09\u89d2\u5b66\u7684\u57fa\u672c\u77e5\u8bc6\u7684\u521b\u610f\u7f16\u7a0b\u8005\u3001\u6e38\u620f\u5f00\u53d1\u8005\u548c\u5de5\u7a0b\u5e08\u7684\uff0c\u8fd8\u6709\u90a3\u4e9b\u60f3\u8981\u63d0\u5347\u4ed6\u4eec\u7684\u4f5c\u54c1\u7684\u56fe\u50cf\u8d28\u91cf\u5230\u4e00\u4e2a\u4ee4\u4eba\u6fc0\u52a8\u7684\u65b0\u5c42\u6b21\u7684\u4eba\u3002\uff08\u5982\u679c\u4f60\u60f3\u8981\u5b66\u4e60\u7f16\u7a0b\uff0c\u6211\u5f3a\u70c8\u63a8\u8350\u4f60\u5148\u5b66\u4e60Processing\uff0c\u7b49\u4f60\u73a9\u8d77\u6765processing\uff0c\u518d\u56de\u6765\u770b\u8fd9\u4e2a\uff09\u3002</p> <p>\u8fd9\u672c\u4e66\u4f1a\u6559\u4f60\u5982\u4f55\u4f7f\u7528 shaders\uff08\u7740\u8272\u5668\uff09\u5e76\u628a\u5b83\u6574\u5408\u8fdb\u4f60\u7684\u9879\u76ee\u91cc\uff0c\u4ee5\u63d0\u5347\u4f5c\u54c1\u7684\u8868\u73b0\u529b\u548c\u56fe\u5f62\u8d28\u91cf\u3002\u56e0\u4e3aGLSL\uff08OpenGL\u7684\u7ed8\u5236\u8bed\u8a00\uff09\u7684shaders \u5728\u5f88\u591a\u5e73\u53f0\u90fd\u53ef\u4ee5\u7f16\u8bd1\u548c\u8fd0\u884c\uff0c\u4f60\u5c06\u53ef\u4ee5\u628a\u5728\u8fd9\u91cc\u5b66\u7684\u8fd0\u7528\u5230\u4efb\u4f55\u4f7f\u7528OpenGL, OpenGL ES \u548c WebGL \u7684\u73af\u5883\u4e2d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5c06\u53ef\u4ee5\u628a\u5b66\u5230\u7684\u77e5\u8bc6\u5e94\u7528\u5230Processing\uff0copenFrameworks\uff0cCinder\uff0cThree.js\u548ciOS/Android\u6e38\u620f\u4e2d\u3002</p>"},{"location":"Frontend/shader/00/README-ch/#_4","title":"\u8fd9\u672c\u4e66\u5305\u542b\u54ea\u4e9b\u5185\u5bb9\uff1f","text":"<p>\u8fd9\u672c\u4e66\u4e13\u95e8\u5173\u4e8e GLSL pixel shaders\u3002\u9996\u5148\u6211\u4eec\u4f1a\u7ed9\u51fashaders\u7684\u5b9a\u4e49\uff1b\u7136\u540e\u6211\u4eec\u4f1a\u5b66\u4e60\u5982\u4f55\u5236\u4f5c\u7a0b\u5e8f\u91cc\u7684\u5f62\u72b6\uff0c\u56fe\u6848\uff0c\u6750\u8d28\uff0c\u548c\u4e0e\u4e4b\u76f8\u5173\u7684\u52a8\u753b\u3002\u4f60\u5c06\u4f1a\u5b66\u5230\u57fa\u7840\u7684\u7740\u8272\u8bed\u8a00\u5e76\u628a\u5b83\u4eec\u5e94\u7528\u5230\u6709\u7528\u7684\u60c5\u666f\u4e2d\uff0c\u6bd4\u5982\uff1a\u56fe\u50cf\u5904\u7406\uff08\u56fe\u50cf\u8fd0\u7b97\uff0c\u77e9\u9635\u5377\u79ef\uff0c\u6a21\u7cca\uff0c\u989c\u8272\u6ee4\u955c\uff0c\u67e5\u627e\u8868\u53ca\u5176\u4ed6\u6548\u679c\uff09\u548c\u6a21\u62df\uff08Conway \u7684\u751f\u547d\u6e38\u620f\uff0cGray-Scott \u53cd\u5e94\u6269\u6563\uff0c\u6c34\u6ce2\uff0c\u6c34\u5f69\u6548\u679c\uff0cVoronoi \u7ec6\u80de\u7b49\u7b49\uff09\u3002\u5230\u4e66\u7684\u6700\u540e\u6211\u4eec\u5c06\u770b\u5230\u4e00\u7cfb\u5217\u57fa\u4e8e\u5149\u7ebf\u8ddf\u8e2a\uff08Ray Marching\uff09\u7684\u8fdb\u9636\u6280\u672f\u3002</p> <p>\u6bcf\u7ae0\u90fd\u4f1a\u6709\u53ef\u4ee5\u73a9\u7684\u4ea4\u4e92\u7684\u4f8b\u5b50\u3002\u5f53\u4f60\u6539\u52a8\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u7acb\u523b\u770b\u5230\u8fd9\u4e9b\u53d8\u5316\u3002\u4e00\u4e9b\u6982\u5ff5\u53ef\u80fd\u4f1a\u6666\u6da9\u96be\u61c2\uff0c\u800c\u8fd9\u4e9b\u53ef\u4ea4\u4e92\u7684\u4f8b\u5b50\u4f1a\u5bf9\u4f60\u5b66\u4e60\u8fd9\u4e9b\u6750\u6599\u975e\u5e38\u6709\u76ca\u3002\u4f60\u8d8a\u5feb\u628a\u8fd9\u4e9b\u4ee3\u7801\u4ed8\u8bf8\u5b9e\u8df5\uff0c\u4f60\u5b66\u4e60\u7684\u8fc7\u7a0b\u5c31\u4f1a\u8d8a\u5bb9\u6613\u3002</p> <p>\u8fd9\u672c\u4e66\u91cc\u4e0d\u5305\u62ec\u7684\u5185\u5bb9\u6709\uff1a</p> <ul> <li> <p>\u8fd9\u4e0d\u662f\u4e00\u672c openGL \u6216 webGL \u7684\u4e66\u3002OpenGL/webGL \u662f\u4e00\u4e2a\u6bd4GLSL \u6216 fragment shaders \u66f4\u5927\u7684\u4e3b\u9898\u3002\u5982\u679c\u4f60\u60f3\u8981\u5b66\u4e60 openGL/webGL \u63a8\u8350\u770b\uff1a OpenGL Introduction, the 8th edition of the OpenGL Programming Guide (\u4e5f\u88ab\u53eb\u505a\u7ea2\u5b9d\u4e66) \u6216 WebGL: Up and Running \u3002</p> </li> <li> <p>\u8fd9\u4e0d\u662f\u4e00\u672c\u6570\u5b66\u4e66\u3002\u867d\u7136\u6211\u4eec\u4f1a\u6d89\u53ca\u5230\u5f88\u591a\u5173\u4e8e\u7ebf\u4ee3\u548c\u4e09\u89d2\u5b66\u7684\u7b97\u6cd5\u548c\u6280\u672f\uff0c\u4f46\u6211\u4eec\u4e0d\u4f1a\u8be6\u7ec6\u89e3\u91ca\u5b83\u3002\u5173\u4e8e\u6570\u5b66\u7684\u95ee\u9898\u6211\u63a8\u8350\u624b\u8fb9\u5907\u4e00\u672c\uff1a3rd Edition of Mathematics for 3D Game Programming and computer Graphics \u6216 2nd Edition of Essential Mathematics for Games and Interactive Applications\u3002</p> </li> </ul>"},{"location":"Frontend/shader/00/README-ch/#_5","title":"\u5f00\u59cb\u5b66\u4e60\u9700\u8981\u4ec0\u4e48\u51c6\u5907\uff1f","text":"<p>\u6ca1\u4ec0\u4e48\u3002\u5982\u679c\u4f60\u6709\u53ef\u4ee5\u8fd0\u884c WebGL \u7684\u6d4f\u89c8\u5668\uff08\u50cfChrome\uff0cFirefox\u6216Safari\uff09\u548c\u7f51\u7edc\uff0c\u70b9\u51fb\u9875\u9762\u5e95\u7aef\u7684\u201c\u4e0b\u4e00\u7ae0\u201d\u6309\u94ae\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86\u3002</p> <p>\u6b64\u5916\uff0c\u57fa\u4e8e\u4f60\u6709\u7684\u6761\u4ef6\u6216\u9700\u6c42\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li> <p>\u5236\u4f5c\u4e00\u4e2a\u79bb\u7ebf\u7248\u7684\u672c\u4e66</p> </li> <li> <p>\u7528\u4e0d\u5e26\u6d4f\u89c8\u5668\u7684\u6811\u8393\u6d3e\u6765\u8fd0\u884c\u4e66\u4e2d\u793a\u4f8b</p> </li> <li> <p>\u505a\u4e00\u4e2aPDF\u7248\u7684\u4e66\u7528\u4e8e\u6253\u5370</p> </li> <li> <p>\u7528github\u4ed3\u5e93\u6765\u5e2e\u52a9\u89e3\u51b3\u95ee\u9898\u548c\u5206\u4eab\u4ee3\u7801</p> </li> </ul>"},{"location":"Frontend/shader/00/TITLE-gr/","title":"\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae","text":""},{"location":"Frontend/shader/00/TITLE-pt/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"Frontend/shader/00/TITLE/","title":"Introduction","text":""},{"location":"Frontend/shader/00/tmp/","title":"Introduction","text":"<p>The images above were made in different ways. The first one was made by Van Gogh's hand applying layer over layer of paint. It took him hours. The second was produced in seconds by the combination of four matrices of pixels: one for cyan, one for magenta, one for yellow and one for black. The key difference is that the second image is produced in a non-serial way (that means not step-by-step, but all at the same time).</p> <p>This book is about the revolutionary computational technique, fragment shaders, that is taking digitally generated images to the next level. You can think of it as the equivalent of Gutenberg's press for graphics.</p> <p></p> <p>Fragment shaders give you total control over the pixels rendered on the screen at a super fast speed. This is why they're used in all sort of cases, from video filters on cellphones to incredible 3D video games.</p> <p></p> <p>In the following chapters you will discover how incredibly fast and powerful this technique is and how to apply it to your professional and personal work.</p>"},{"location":"Frontend/shader/00/tmp/#who-is-this-book-for","title":"Who is this book for?","text":"<p>This book is written for creative coders, game developers and engineers who have coding experience, a basic knowledge of linear algebra and trigonometry, and who want to take their work to an exciting new level of graphical quality. (If you want to learn how to code, I highly recommend you start with Processing and come back later when you are comfortable with it.)</p> <p>This book will teach you how to use and integrate shaders into your projects, improving their performance and graphical quality. Because GLSL (OpenGL Shading Language) shaders compile and run on a variety of platforms, you will be able to apply what you learn here to any environment that uses OpenGL, OpenGL ES or WebGL. In other words, you will be able to apply and use your knowledge with Processing sketches, openFrameworks applications, Cinder interactive installations, Three.js websites or iOS/Android games.</p>"},{"location":"Frontend/shader/00/tmp/#what-does-this-book-cover","title":"What does this book cover?","text":"<p>This book will focus on the use of GLSL pixel shaders. First we'll define what shaders are; then we'll learn how to make procedural shapes, patterns, textures and animations with them. You'll learn the foundations of shading language and apply it to more useful scenarios such as: image processing (image operations, matrix convolutions, blurs, color filters, lookup tables and other effects) and simulations (Conway's game of life, Gray-Scott's reaction-diffusion, water ripples, watercolor effects, Voronoi cells, etc.). Towards the end of the book we'll see a set of advanced techniques based on Ray Marching.</p> <p>There are interactive examples for you to play with in every chapter. When you change the code, you will see the changes immediately. The concepts can be abstract and confusing, so the interactive examples are essential to helping you learn the material. The faster you put the concepts into motion the easier the learning process will be.</p> <p>What this book doesn't cover:</p> <ul> <li> <p>This is not an OpenGL or webGL book. OpenGL/webGL is a bigger subject than GLSL or fragment shaders. To learn more about OpenGL/webGL I recommend taking a look at:  OpenGL Introduction, the 8th edition of the OpenGL Programming Guide (also known as the red book) or WebGL: Up and Running</p> </li> <li> <p>This is not a math book. Although we will cover a number of algorithms and techniques that rely on an understanding of algebra and trigonometry, we will not explain them in detail. For questions regarding the math I recommend keeping one of the following books nearby: 3rd Edition of Mathematics for 3D Game Programming and computer Graphics or 2nd Edition of Essential Mathematics for Games and Interactive Applications.</p> </li> </ul>"},{"location":"Frontend/shader/00/tmp/#what-do-you-need-to-start","title":"What do you need to start?","text":"<p>Not much! If you have a modern browser that can do WebGL (like Chrome, Firefox or Safari) and a internet connection, click the \u201cNext\u201d Chapter button at the end of this page to get started.</p> <p>Alternatively, based on what you have or what you need from this book you can:</p> <ul> <li> <p>Make an off-line version of this book</p> </li> <li> <p>Run the examples on a Raspberry Pi without a browser</p> </li> <li> <p>Make a PDF of the book to print</p> </li> <li> <p>Check the GitHub repository of this book to help resolve issues and share code.</p> </li> </ul>"},{"location":"Frontend/shader/01/","title":"Getting started","text":""},{"location":"Frontend/shader/01/#what-is-a-fragment-shader","title":"What is a fragment shader?","text":"<p>In the previous chapter we described shaders as the equivalent of the Gutenberg press for graphics. Why? And more importantly: what's a shader?</p> <p></p> <p>If you already have experience making drawings with computers, you know that in that process you draw a circle, then a rectangle, a line, some triangles until you compose the image you want. That process is very similar to writing a letter or a book by hand - it is a set of instructions that do one task after another.</p> <p>Shaders are also a set of instructions, but the instructions are executed all at once for every single pixel on the screen. That means the code you write has to behave differently depending on the position of the pixel on the screen. Like a type press, your program will work as a function that receives a position and returns a color, and when it's compiled it will run extraordinarily fast.</p> <p></p>"},{"location":"Frontend/shader/01/#why-are-shaders-fast","title":"Why are shaders fast?","text":"<p>To answer this, I present the wonders of parallel processing.</p> <p>Imagine the CPU of your computer as a big industrial pipe, and every task as something that passes through it - like a factory line. Some tasks are bigger than others, which means they require more time and energy to deal with. We say they require more processing power. Because of the architecture of computers the jobs are forced to run in a series; each job has to be finished one at a time. Modern computers usually have groups of four processors that work like these pipes, completing tasks one after another to keep things running smoothly. Each pipe is also known as a thread.</p> <p></p> <p>Video games and other graphic applications require a lot more processing power than other programs. Because of their graphic content they have to do huge numbers of pixel-by-pixel operations. Every single pixel on the screen needs to be computed, and in 3D games geometries and perspectives need to be calculated as well.</p> <p>Let's go back to our metaphor of the pipes and tasks. Each pixel on the screen represents a simple small task. Individually each pixel task isn't an issue for the CPU, but (and here is the problem) the tiny task has to be done to each pixel on the screen! That means in an old 800x600 screen, 480,000 pixels have to processed per frame which means 14,400,000 calculations per second! Yes! That\u2019s a problem big enough to overload a microprocessor. In a modern 2880x1800 retina display running at 60 frames per second that calculation adds up to 311,040,000 calculations per second. How do graphics engineers solve this problem?</p> <p></p> <p>This is when parallel processing becomes a good solution. Instead of having a couple of big and powerful microprocessors, or pipes, it is smarter to have lots of tiny microprocessors running in parallel at the same time. That\u2019s what a Graphic Processor Unit (GPU) is.</p> <p></p> <p>Picture the tiny microprocessors as a table of pipes, and the data of each pixel as a ping pong ball. 14,400,000 ping pong balls a second can obstruct almost any pipe. But a table of 800x600 tiny pipes receiving 30 waves of 480,000 pixels a second can be handled smoothly. This works the same at higher resolutions - the more parallel hardware you have, the bigger the stream it can manage.</p> <p>Another \u201csuper power\u201d of the GPU is special math functions accelerated via hardware, so complicated math operations are resolved directly by the microchips instead of by software. That means extra fast trigonometrical and matrix operations - as fast as electricity can go.</p>"},{"location":"Frontend/shader/01/#what-is-glsl","title":"What is GLSL?","text":"<p>GLSL stands for OpenGL Shading Language, which is the specific standard of shader programs you'll see in the following chapters. There are other types of shaders depending on hardware and Operating Systems. Here we will work with the OpenGL specs regulated by Khronos Group. Understanding the history of OpenGL can be helpful for understanding most of its weird conventions, for that I recommend taking a look at: openglbook.com/chapter-0-preface-what-is-opengl.html</p>"},{"location":"Frontend/shader/01/#why-are-shaders-famously-painful","title":"Why are Shaders famously painful?","text":"<p>As Uncle Ben said \u201cwith great power comes great responsibility,\u201d and parallel computation follows this rule; the powerful architectural design of the GPU comes with its own constraints and restrictions.</p> <p>In order to run in parallel every pipe, or thread, has to be independent from every other thread. We say the threads are blind to what the rest of the threads are doing. This restriction implies that all data must flow in the same direction. So it\u2019s impossible to check the result of another thread, modify the input data, or pass the outcome of a thread into another thread. Allowing thread-to-thread communications puts the integrity of the data at risk.</p> <p>Also the GPU keeps the parallel micro-processor (the pipes) constantly busy; as soon as they get free they receive new information to process. It's impossible for a thread to know what it was doing in the previous moment. It could be drawing a button from the UI of the operating system, then rendering a portion of sky in a game, then displaying the text of an email. Each thread is not just blind but also memoryless. Besides the abstraction required to code a general function that changes the result pixel by pixel depending on its position, the blind and memoryless constraints make shaders not very popular among beginning programmers.</p> <p>Don't worry! In the following chapters, we will learn step-by-step how to go from simple to advanced shading computations. If you are reading this with a modern browser, you will appreciate playing with the interactive examples. So let's not delay the fun any longer and press Next &gt;&gt; to jump into the code!</p>"},{"location":"Frontend/shader/01/README-ch/","title":"\u5f00\u59cb","text":""},{"location":"Frontend/shader/01/README-ch/#fragment-shader","title":"\u4ec0\u4e48\u662f Fragment Shader(\u7247\u6bb5\u7740\u8272\u5668)\uff1f","text":"<p>\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u6211\u4eec\u628a shaders \u548c\u53e4\u817e\u5821\u5370\u5237\u672f\u76f8\u63d0\u5e76\u8bba\u3002\u4e3a\u4ec0\u4e48\u8fd9\u6837\u7c7b\u6bd4\u5462\uff1f\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4ec0\u4e48\u662f shader\uff1f</p> <p></p> <p>\u5982\u679c\u4f60\u66fe\u7ecf\u6709\u7528\u8ba1\u7b97\u673a\u7ed8\u56fe\u7684\u7ecf\u9a8c\uff0c\u4f60\u5c31\u77e5\u9053\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f60\u9700\u8981\u753b\u4e00\u4e2a\u5706\uff0c\u7136\u540e\u4e00\u4e2a\u957f\u65b9\u5f62\uff0c\u4e00\u6761\u7ebf\uff0c\u4e00\u4e9b\u4e09\u89d2\u5f62\u2026\u2026\u76f4\u5230\u753b\u51fa\u4f60\u60f3\u8981\u7684\u56fe\u50cf\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u50cf\u7528\u624b\u5199\u4e00\u5c01\u4fe1\u6216\u4e00\u672c\u4e66 \u2014\u2014 \u90fd\u662f\u4e00\u7cfb\u5217\u7684\u6307\u4ee4\uff0c\u9700\u8981\u4f60\u4e00\u4ef6\u4e00\u4ef6\u5b8c\u6210\u3002</p> <p>Shaders \u4e5f\u662f\u4e00\u7cfb\u5217\u7684\u6307\u4ee4\uff0c\u4f46\u662f\u8fd9\u4e9b\u6307\u4ee4\u4f1a\u5bf9\u5c4f\u5e55\u4e0a\u7684\u6bcf\u4e2a\u50cf\u7d20\u540c\u65f6\u4e0b\u8fbe\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u7684\u4ee3\u7801\u5fc5\u987b\u6839\u636e\u50cf\u7d20\u5728\u5c4f\u5e55\u4e0a\u7684\u4e0d\u540c\u4f4d\u7f6e\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u5c31\u50cf\u6d3b\u5b57\u5370\u5237\uff0c\u4f60\u7684\u7a0b\u5e8f\u5c31\u50cf\u4e00\u4e2a function\uff08\u51fd\u6570\uff09\uff0c\u8f93\u5165\u4f4d\u7f6e\u4fe1\u606f\uff0c\u8f93\u51fa\u989c\u8272\u4fe1\u606f\uff0c\u5f53\u5b83\u7f16\u8bd1\u5b8c\u4e4b\u540e\u4f1a\u4ee5\u76f8\u5f53\u5feb\u7684\u901f\u5ea6\u8fd0\u884c\u3002</p> <p></p>"},{"location":"Frontend/shader/01/README-ch/#shaders","title":"\u4e3a\u4ec0\u4e48 shaders \u8fd0\u884c\u7279\u522b\u5feb\uff1f","text":"<p>\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e0d\u5f97\u4e0d\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u5e76\u884c\u5904\u7406\uff08parallel processing\uff09\u7684\u795e\u5947\u4e4b\u5904\u3002</p> <p>\u60f3\u8c61\u4f60\u7684 CPU \u662f\u4e00\u4e2a\u5927\u7684\u5de5\u4e1a\u7ba1\u9053\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u4efb\u52a1\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u7ba1\u9053\u7684\u67d0\u4e9b\u4e1c\u897f \u2014\u2014 \u5c31\u50cf\u4e00\u4e2a\u751f\u4ea7\u6d41\u6c34\u7ebf\u90a3\u6837\u3002\u6709\u4e9b\u4efb\u52a1\u8981\u6bd4\u522b\u7684\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\u548c\u7cbe\u529b\u53bb\u5904\u7406\u3002\u6211\u4eec\u5c31\u79f0\u5b83\u8981\u6c42\u66f4\u5f3a\u7684\u5904\u7406\u80fd\u529b\u3002\u7531\u4e8e\u8ba1\u7b97\u673a\u81ea\u8eab\u7684\u67b6\u6784\uff0c\u8fd9\u4e9b\u4efb\u52a1\u9700\u8981\u4e32\u884c\uff1b\u5373\u4e00\u6b21\u4e00\u4e2a\u5730\u4f9d\u5e8f\u5b8c\u6210\u3002\u73b0\u4ee3\u8ba1\u7b97\u673a\u901a\u5e38\u6709\u4e00\u7ec4\u56db\u4e2a\u5904\u7406\u5668\uff0c\u5c31\u50cf\u8fd9\u4e2a\u7ba1\u9053\u4e00\u6837\u8fd0\u884c\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5904\u7406\u8fd9\u4e9b\u4efb\u52a1\uff0c\u4ece\u800c\u4f7f\u8ba1\u7b97\u673a\u6d41\u7545\u8fd0\u884c\u3002\u6bcf\u4e2a\u7ba1\u9053\u901a\u5e38\u88ab\u79f0\u4e3a\u7ebf\u7a0b\u3002</p> <p></p> <p>\u89c6\u9891\u6e38\u620f\u548c\u5176\u4ed6\u56fe\u5f62\u5e94\u7528\u6bd4\u8d77\u522b\u7684\u7a0b\u5e8f\u6765\u8bf4\uff0c\u9700\u8981\u9ad8\u5f97\u591a\u7684\u5904\u7406\u80fd\u529b\u3002\u56e0\u4e3a\u5b83\u4eec\u7684\u56fe\u5f62\u5185\u5bb9\u9700\u8981\u64cd\u4f5c\u65e0\u6570\u50cf\u7d20\u3002\u60f3\u60f3\u770b\uff0c\u5c4f\u5e55\u4e0a\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u9700\u8981\u8ba1\u7b97\uff0c\u800c\u5728 3D \u6e38\u620f\u4e2d\u51e0\u4f55\u548c\u900f\u89c6\u4e5f\u90fd\u9700\u8981\u8ba1\u7b97\u3002</p> <p>\u8ba9\u6211\u4eec\u56de\u5230\u5f00\u59cb\u90a3\u4e2a\u5173\u4e8e\u7ba1\u9053\u548c\u4efb\u52a1\u7684\u6bd4\u55bb\u3002\u5c4f\u5e55\u4e0a\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u4ee3\u8868\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u4efb\u52a1\u3002\u5355\u72ec\u6765\u770b\u5b8c\u6210\u4efb\u4f55\u4e00\u4e2a\u50cf\u7d20\u7684\u4efb\u52a1\u5bf9 CPU \u6765\u8bf4\u90fd\u5f88\u5bb9\u6613\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5c4f\u5e55\u4e0a\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u9700\u8981\u89e3\u51b3\u8fd9\u6837\u7684\u5c0f\u4efb\u52a1\uff01\u4e5f\u5c31\u662f\u8bf4\uff0c\u54ea\u6015\u662f\u5bf9\u4e8e\u4e00\u4e2a\u8001\u5f0f\u7684\u5c4f\u5e55\uff08\u5206\u8fa8\u7387 800x600\uff09\u6765\u8bf4\uff0c\u90fd\u9700\u8981\u6bcf\u5e27\u5904\u7406480000\u4e2a\u50cf\u7d20\uff0c\u5373\u6bcf\u79d2\u8fdb\u884c14400000\u6b21\u8ba1\u7b97\uff01\u662f\u7684\uff0c\u8fd9\u5bf9\u4e8e\u5fae\u5904\u7406\u5668\u5c31\u662f\u5927\u95ee\u9898\u4e86\uff01\u800c\u5bf9\u4e8e\u4e00\u4e2a\u73b0\u4ee3\u7684 2800x1800 \u89c6\u7f51\u819c\u5c4f\uff0c\u6bcf\u79d2\u8fd0\u884c60\u5e27\uff0c\u5c31\u9700\u8981\u6bcf\u79d2\u8fdb\u884c311040000\u6b21\u8ba1\u7b97\u3002\u56fe\u5f62\u5de5\u7a0b\u5e08\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff1f</p> <p></p> <p>\u8fd9\u4e2a\u65f6\u5019\uff0c\u5e76\u884c\u5904\u7406\u5c31\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6bd4\u8d77\u7528\u4e09\u4e94\u4e2a\u5f3a\u5927\u7684\u5fae\u5904\u7406\u5668\uff08\u6216\u8005\u8bf4\u201c\u7ba1\u9053\u201d\uff09\u6765\u5904\u7406\u8fd9\u4e9b\u4fe1\u606f\uff0c\u7528\u4e00\u5927\u5806\u5c0f\u7684\u5fae\u5904\u7406\u5668\u6765\u5e76\u884c\u8ba1\u7b97\uff0c\u5c31\u8981\u597d\u5f97\u591a\u3002\u8fd9\u5c31\u662f\u56fe\u5f62\u5904\u7406\u5668\uff08GPU : Graphic Processor Unit)\u7684\u6765\u7531\u3002</p> <p></p> <p>\u8bbe\u60f3\u4e00\u5806\u5c0f\u578b\u5fae\u5904\u7406\u5668\u6392\u6210\u4e00\u4e2a\u5e73\u9762\u7684\u753b\u9762\uff0c\u5047\u8bbe\u6bcf\u4e2a\u50cf\u7d20\u7684\u6570\u636e\u662f\u4e52\u4e53\u7403\u300214400000\u4e2a\u4e52\u4e53\u7403\u53ef\u4ee5\u5728\u4e00\u79d2\u5185\u963b\u585e\u51e0\u4e4e\u4efb\u4f55\u7ba1\u9053\u3002\u4f46\u662f\u4e00\u9762800x600\u7684\u7ba1\u9053\u5899\uff0c\u6bcf\u79d2\u63a5\u653630\u6ce2480000\u4e2a\u50cf\u7d20\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u6d41\u7545\u5b8c\u6210\u3002\u8fd9\u5728\u66f4\u9ad8\u7684\u5206\u8fa8\u7387\u4e0b\u4e5f\u662f\u6210\u7acb\u7684 \u2014\u2014 \u5e76\u884c\u7684\u5904\u7406\u5668\u8d8a\u591a\uff0c\u53ef\u4ee5\u5904\u7406\u7684\u6570\u636e\u6d41\u5c31\u8d8a\u5927\u3002</p> <p>\u53e6\u4e00\u4e2a GPU \u7684\u9b54\u6cd5\u662f\u7279\u6b8a\u6570\u5b66\u51fd\u6570\u53ef\u901a\u8fc7\u786c\u4ef6\u52a0\u901f\u3002\u975e\u5e38\u590d\u6742\u7684\u6570\u5b66\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u88ab\u5fae\u82af\u7247\u89e3\u51b3\uff0c\u800c\u65e0\u987b\u901a\u8fc7\u8f6f\u4ef6\u3002\u8fd9\u5c31\u8868\u793a\u53ef\u4ee5\u6709\u66f4\u5feb\u7684\u4e09\u89d2\u548c\u77e9\u9635\u8fd0\u7b97 \u2014\u2014 \u548c\u7535\u6d41\u4e00\u6837\u5feb\u3002</p>"},{"location":"Frontend/shader/01/README-ch/#glsl","title":"GLSL\u662f\u4ec0\u4e48\uff1f","text":"<p>GLSL \u4ee3\u8868 openGL Shading Language\uff0copenGL \u7740\u8272\u8bed\u8a00\uff0c\u8fd9\u662f\u4f60\u5728\u63a5\u4e0b\u6765\u7ae0\u8282\u770b\u5230\u7684\u7a0b\u5e8f\u6240\u9075\u5faa\u7684\u5177\u4f53\u6807\u51c6\u3002\u6839\u636e\u786c\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\uff0c\u8fd8\u6709\u5176\u4ed6\u7684\u7740\u8272\u5668\uff08shaders)\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u4f9d\u7167Khronos Group\u7684\u89c4\u5219\u6765\u6267\u884c\u3002\u4e86\u89e3 OpenGL \u7684\u5386\u53f2\u5c06\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u5927\u591a\u6570\u5947\u602a\u7684\u7ea6\u5b9a\uff0c\u6240\u4ee5\u5efa\u8bae\u4e0d\u59a8\u9605\u8bfbopenglbook.com/chapter-0-preface-what-is-opengl.html\u3002</p>"},{"location":"Frontend/shader/01/README-ch/#shaders_1","title":"\u4e3a\u4ec0\u4e48 Shaders \u6709\u540d\u5730\u4e0d\u597d\u5b66\uff1f","text":"<p>\u5c31\u50cf\u8718\u86db\u4fa0\u91cc\u7684\u90a3\u53e5\u540d\u8a00\uff0c\u80fd\u529b\u8d8a\u5927\u8d23\u4efb\u8d8a\u5927\uff0c\u5e76\u884c\u8ba1\u7b97\u4e5f\u662f\u5982\u6b64\uff1bGPU \u7684\u5f3a\u5927\u7684\u67b6\u6784\u8bbe\u8ba1\u4e5f\u6709\u5176\u9650\u5236\u4e0e\u4e0d\u8db3\u3002</p> <p>\u4e3a\u4e86\u80fd\u4f7f\u8bb8\u591a\u7ba1\u7ebf\u5e76\u884c\u8fd0\u884c\uff0c\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5fc5\u987b\u4e0e\u5176\u4ed6\u7684\u76f8\u72ec\u7acb\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u7ebf\u7a0b\u5bf9\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u5728\u8fdb\u884c\u7684\u8fd0\u7b97\u662f\u201c\u76f2\u89c6\u201d\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u5c31\u4f1a\u4f7f\u5f97\u6240\u6709\u6570\u636e\u5fc5\u987b\u4ee5\u76f8\u540c\u7684\u65b9\u5411\u6d41\u52a8\u3002\u6240\u4ee5\u5c31\u4e0d\u53ef\u80fd\u68c0\u67e5\u5176\u4ed6\u7ebf\u7a0b\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u4fee\u6539\u8f93\u5165\u7684\u6570\u636e\uff0c\u6216\u8005\u628a\u4e00\u4e2a\u7ebf\u7a0b\u7684\u8f93\u51fa\u7ed3\u679c\u8f93\u5165\u7ed9\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u3002\u5141\u8bb8\u6570\u636e\u5728\u7ebf\u7a0b\u4e4b\u95f4\u7ebf\u7a0b\u6d41\u52a8\u4f1a\u4f7f\u6570\u636e\u7684\u6574\u4f53\u6027\u9762\u4e34\u5a01\u80c1\u3002</p> <p>\u5e76\u4e14 GPU \u4f1a\u8ba9\u6240\u6709\u5e76\u884c\u7684\u5fae\u5904\u7406\u5668\uff08\u7ba1\u9053\u4eec\uff09\u4e00\u76f4\u5904\u5728\u5fd9\u788c\u72b6\u6001\uff1b\u53ea\u8981\u5b83\u4eec\u4e00\u6709\u7a7a\u95f2\u5c31\u4f1a\u63a5\u5230\u65b0\u7684\u4fe1\u606f\u3002\u4e00\u4e2a\u7ebf\u7a0b\u4e0d\u53ef\u80fd\u77e5\u9053\u5b83\u524d\u4e00\u523b\u5728\u505a\u4ec0\u4e48\u3002\u5b83\u53ef\u80fd\u662f\u5728\u753b\u64cd\u4f5c\u7cfb\u7edf\u754c\u9762\u4e0a\u7684\u4e00\u4e2a\u6309\u94ae\uff0c\u7136\u540e\u6e32\u67d3\u4e86\u6e38\u620f\u4e2d\u7684\u4e00\u90e8\u5206\u5929\u7a7a\uff0c\u7136\u540e\u663e\u793a\u4e86\u4e00\u5c01 email \u4e2d\u7684\u4e00\u4e9b\u6587\u5b57\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u4e0d\u4ec5\u662f\u201c\u76f2\u89c6\u201d\u7684\uff0c\u800c\u4e14\u8fd8\u662f\u201c\u65e0\u8bb0\u5fc6\u201d\u7684\u3002\u540c\u65f6\uff0c\u5b83\u8981\u6c42\u7f16\u5199\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4f9d\u636e\u50cf\u7d20\u7684\u4e0d\u540c\u4f4d\u7f6e\u4f9d\u6b21\u8f93\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u8fd9\u79cd\u62bd\u8c61\u6027\uff0c\u548c\u76f2\u89c6\u3001\u65e0\u8bb0\u5fc6\u7684\u9650\u5236\u4f7f\u5f97 shaders \u5728\u7a0b\u5e8f\u5458\u65b0\u624b\u4e2d\u4e0d\u662f\u5f88\u53d7\u6b22\u8fce\u3002</p> <p>\u4f46\u662f\u4e0d\u8981\u62c5\u5fc3\uff01\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u4e00\u6b65\u4e00\u6b65\u5730\uff0c\u7531\u6d45\u5165\u6df1\u5730\u5b66\u4e60\u7740\u8272\u8bed\u8a00\u3002\u5982\u679c\u4f60\u662f\u5728\u7528\u4e00\u4e2a\u9760\u8c31\u7684\u6d4f\u89c8\u5668\u9605\u8bfb\u8fd9\u4e2a\u6559\u7a0b\uff0c\u4f60\u4f1a\u559c\u6b22\u8fb9\u8bfb\u8fb9\u73a9\u4e66\u4e2d\u7684\u793a\u4f8b\u7684\u3002\u597d\u4e86\uff0c\u4e0d\u8981\u518d\u6d6a\u8d39\u65f6\u95f4\u4e86\uff0c\u8d76\u5feb\u53bb\u73a9\u8d77\u6765\u5427\uff01 \u70b9\u51fb Next &gt;&gt; \u5f00\u542f shader \u4e4b\u65c5\uff01</p>"},{"location":"Frontend/shader/01/TITLE-gr/","title":"\u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2","text":""},{"location":"Frontend/shader/01/TITLE-gr/#fragment-shader","title":"\u03a4\u03af \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03bd\u03b1\u03c2 fragment shader (\u03c6\u03c9\u03c4\u03bf\u03c3\u03ba\u03b9\u03b1\u03c3\u03c4\u03ae\u03c2 \u03c4\u03b5\u03bc\u03b1\u03c7\u03af\u03c9\u03bd);","text":""},{"location":"Frontend/shader/01/TITLE-pt/","title":"Come\u00e7ando","text":""},{"location":"Frontend/shader/01/TITLE-pt/#o-que-e-um-shader","title":"O que \u00e9 um shader?","text":""},{"location":"Frontend/shader/01/TITLE/","title":"Getting started","text":""},{"location":"Frontend/shader/01/TITLE/#what-is-a-fragment-shader","title":"What is a fragment shader?","text":""},{"location":"Frontend/shader/01/notes/","title":"Notes","text":""},{"location":"Frontend/shader/01/notes/#scott-m","title":"Scott M","text":"<ul> <li>You say \u201cpipes\u201d and also \u201cthreads\u201d.  This is a small thing but I wonder if you can reconcile those metaphors.  I think in terms of threads, but \u201cpipes\u201d makes more sense with your illustration.  Also works better with the concept of a \u201cpipeline\u201d or \u201cgraphics/rendering pipeline\u201d.</li> </ul>"},{"location":"Frontend/shader/01/notes/#nicolas-b","title":"Nicolas B","text":"<ul> <li>clearly answer the \"what is a fragment shader?\" question in some sort of recap paragraph.</li> <li>beef up explanations around the compilation step (a brief overview will do).</li> </ul>"},{"location":"Frontend/shader/01/tmp/","title":"Getting started","text":""},{"location":"Frontend/shader/01/tmp/#what-is-a-fragment-shader","title":"What is a fragment shader?","text":"<p>In the previous chapter we described shaders as the equivalent of the Gutenberg press for graphics. Why? And more importantly: what's a shader?</p> <p></p> <p>If you already have experience making drawings with computers, you know that in that process you draw a circle, then a rectangle, a line, some triangles until you compose the image you want. That process is very similar to writing a letter or a book by hand - it is a set of instructions that do one task after another.</p> <p>Shaders are also a set of instructions, but the instructions are executed all at once for every single pixel on the screen. That means the code you write has to behave differently depending on the position of the pixel on the screen. Like a type press, your program will work as a function that receives a position and returns a color, and when it's compiled it will run extraordinarily fast.</p> <p></p>"},{"location":"Frontend/shader/01/tmp/#why-are-shaders-fast","title":"Why are shaders fast?","text":"<p>To answer this, I present the wonders of parallel processing.</p> <p>Imagine the CPU of your computer as a big industrial pipe, and every task as something that passes through it - like a factory line. Some tasks are bigger than others, which means they require more time and energy to deal with. We say they require more processing power. Because of the architecture of computers the jobs are forced to run in a series; each job has to be finished one at a time. Modern computers usually have groups of four processors that work like these pipes, completing tasks one after another to keep things running smoothly. Each pipe is also known as a thread.</p> <p></p> <p>Video games and other graphic applications require a lot more processing power than other programs. Because of their graphic content they have to do huge numbers of pixel-by-pixel operations. Every single pixel on the screen needs to be computed, and in 3D games geometries and perspectives need to be calculated as well.</p> <p>Let's go back to our metaphor of the pipes and tasks. Each pixel on the screen represents a simple small task. Individually each pixel task isn't an issue for the CPU, but (and here is the problem) the tiny task has to be done to each pixel on the screen! That means in an old 800x600 screen, 480,000 pixels have to processed per frame which means 14,400,000 calculations per second! Yes! That\u2019s a problem big enough to overload a microprocessor. In a modern 2880x1800 retina display running at 60 frames per second that calculation adds up to 311,040,000 calculations per second. How do graphics engineers solve this problem?</p> <p></p> <p>This is when parallel processing becomes a good solution. Instead of having a couple of big and powerful microprocessors, or pipes, it is smarter to have lots of tiny microprocessors running in parallel at the same time. That\u2019s what a Graphic Processor Unit (GPU) is.</p> <p></p> <p>Picture the tiny microprocessors as a table of pipes, and the data of each pixel as a ping pong ball. 14,400,000 ping pong balls a second can obstruct almost any pipe. But a table of 800x600 tiny pipes receiving 30 waves of 480,000 pixels a second can be handled smoothly. This works the same at higher resolutions - the more parallel hardware you have, the bigger the stream it can manage.</p> <p>Another \u201csuper power\u201d of the GPU is special math functions accelerated via hardware, so complicated math operations are resolved directly by the microchips instead of by software. That means extra fast trigonometrical and matrix operations - as fast as electricity can go.</p>"},{"location":"Frontend/shader/01/tmp/#what-is-glsl","title":"What is GLSL?","text":"<p>GLSL stands for OpenGL Shading Language, which is the specific standard of shader programs you'll see in the following chapters. There are other types of shaders depending on hardware and Operating Systems. Here we will work with the OpenGL specs regulated by Khronos Group. Understanding the history of OpenGL can be helpful for understanding most of its weird conventions, for that I recommend taking a look at: openglbook.com/chapter-0-preface-what-is-opengl.html</p>"},{"location":"Frontend/shader/01/tmp/#why-are-shaders-famously-painful","title":"Why are Shaders famously painful?","text":"<p>As Uncle Ben said \u201cwith great power comes great responsibility,\u201d and parallel computation follows this rule; the powerful architectural design of the GPU comes with its own constraints and restrictions.</p> <p>In order to run in parallel every pipe, or thread, has to be independent from every other thread. We say the threads are blind to what the rest of the threads are doing. This restriction implies that all data must flow in the same direction. So it\u2019s impossible to check the result of another thread, modify the input data, or pass the outcome of a thread into another thread. Allowing thread-to-thread communications puts the integrity of the data at risk.</p> <p>Also the GPU keeps the parallel micro-processor (the pipes) constantly busy; as soon as they get free they receive new information to process. It's impossible for a thread to know what it was doing in the previous moment. It could be drawing a button from the UI of the operating system, then rendering a portion of sky in a game, then displaying the text of an email. Each thread is not just blind but also memoryless. Besides the abstraction required to code a general function that changes the result pixel by pixel depending on its position, the blind and memoryless constraints make shaders not very popular among beginning programmers.</p> <p>Don't worry! In the following chapters, we will learn step-by-step how to go from simple to advanced shading computations. If you are reading this with a modern browser, you will appreciate playing with the interactive examples. So let's not delay the fun any longer and press Next &gt;&gt; to jump into the code!</p>"},{"location":"Frontend/shader/02/","title":"Index","text":""},{"location":"Frontend/shader/02/#hello-world","title":"Hello World","text":"<p>Usually the \"Hello world!\" example is the first step to learning a new language. It's a simple one-line program that outputs an enthusiastic welcoming message and declares opportunities ahead.</p> <p>In GPU-land rendering text is an overcomplicated task for a first step, instead we'll choose a bright welcoming color to shout our enthusiasm!</p> <p>If you are reading this book in a browser the previous block of code is interactive. That means you can click and change any part of the code you want to explore. Changes will be updated immediately thanks to the GPU architecture that compiles and replaces shaders on the fly. Give it a try by changing the values on line 8.</p> <p>Although these simple lines of code don't look like a lot, we can infer substantial knowledge from them:</p> <ol> <li> <p>Shader Language has a single <code>main</code> function that returns a color at the end. This is similar to C.</p> </li> <li> <p>The final pixel color is assigned to the reserved global variable <code>gl_FragColor</code>.</p> </li> <li> <p>This C-flavored language has built in variables (like <code>gl_FragColor</code>), functions and types. In this case we've just been introduced to <code>vec4</code> that stands for a four dimensional vector of floating point precision. Later we will see more types like <code>vec3</code> and <code>vec2</code> together with the popular: <code>float</code>, <code>int</code> and <code>bool</code>.</p> </li> <li> <p>If we look closely to the <code>vec4</code> type we can infer that the four arguments respond to the RED, GREEN, BLUE and ALPHA channels. Also we can see that these values are normalized, which means they go from <code>0.0</code> to <code>1.0</code>. Later, we will learn how normalizing values makes it easier to map values between variables.</p> </li> <li> <p>Another important C feature we can see in this example is the presence of preprocessor macros. Macros are part of a pre-compilation step. With them it is possible to <code>#define</code> global variables and do some basic conditional operation (with <code>#ifdef</code> and <code>#endif</code>). All the macro commands begin with a hashtag (<code>#</code>). Pre-compilation happens right before compiling and copies all the calls to <code>#defines</code> and check <code>#ifdef</code> (is defined) and <code>#ifndef</code> (is not defined) conditionals. In our \"hello world!\" example above, we only insert the line 2 if <code>GL_ES</code> is defined, which mostly happens when the code is compiled on mobile devices and browsers.</p> </li> <li> <p>Float types are vital in shaders, so the level of precision is crucial. Lower precision means faster rendering, but at the cost of quality. You can be picky and specify the precision of each variable that uses floating point. In the second line (<code>precision mediump float;</code>) we are setting all floats to medium precision. But we can choose to set them to low (<code>precision lowp float;</code>) or high (<code>precision highp float;</code>).</p> </li> <li> <p>The last, and maybe most important, detail is that GLSL specs don\u2019t guarantee that variables will be automatically casted. What does that mean? Manufacturers have different approaches to accelerate graphics card processes but they are forced to guarantee minimum specs. Automatic casting is not one of them. In our \u201chello world!\u201d example <code>vec4</code> has floating point precision and for that it expects to be assigned with <code>floats</code>. If you want to make good consistent code and not spend hours debugging white screens, get used to putting the point (<code>.</code>) in your floats. This kind of code will not always work:</p> </li> </ol> <pre><code>void main() {\n    gl_FragColor = vec4(1,0,0,1);   // ERROR\n}\n</code></pre> <p>Now that we've described the most relevant elements of our \"hello world!\" program, it's time to click on the code block and start challenging all that we've learned. You will note that on errors, the program will fail to compile, showing a white screen. There are some interesting things to try, for example:</p> <ul> <li> <p>Try replacing the floats with integers, your graphic card may or may not tolerate this behavior.</p> </li> <li> <p>Try commenting out line 8 and not assigning any pixel value to the function.</p> </li> <li> <p>Try making a separate function that returns a specific color and use it inside <code>main()</code>. As a hint, here is the code for a function that returns a red color:</p> </li> </ul> <pre><code>vec4 red(){\n    return vec4(1.0,0.0,0.0,1.0);\n}\n</code></pre> <ul> <li>There are multiple ways of constructing <code>vec4</code> types, try to discover other ways. The following is one of them:</li> </ul> <pre><code>vec4 color = vec4(vec3(1.0,0.0,1.0),1.0);\n</code></pre> <p>Although this example isn't very exciting, it is the most basic example - we are changing all the pixels inside the canvas to the same exact color. In the following chapter we will see how to change the pixel colors by using two types of input: space (the place of the pixel on the screen) and time (the number of seconds since the page was loaded).</p>"},{"location":"Frontend/shader/02/README-ch/","title":"2","text":""},{"location":"Frontend/shader/02/README-ch/#hello-world","title":"Hello World","text":"<p>\u201cHello world!\u201d\u901a\u5e38\u90fd\u662f\u5b66\u4e60\u4e00\u4e2a\u65b0\u8bed\u8a00\u7684\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u6709\u4e00\u884c\u7684\u7a0b\u5e8f\u3002\u5b83\u65e2\u662f\u4e00\u4e2a\u70ed\u60c5\u7684\u6b22\u8fce\uff0c\u4e5f\u4f20\u8fbe\u4e86\u7f16\u7a0b\u6240\u80fd\u5e26\u6765\u7684\u53ef\u80fd\u6027\u3002</p> <p>\u7136\u800c\u5728 GPU \u7684\u4e16\u754c\u91cc\uff0c\u7b2c\u4e00\u6b65\u5c31\u6e32\u67d3\u4e00\u884c\u6587\u5b57\u592a\u96be\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6539\u4e3a\u9009\u62e9\u4e00\u4e2a\u9c9c\u8273\u7684\u6b22\u8fce\u8272\uff0c\u6765\u5427\u8e81\u8d77\u6765\uff01</p> <p>\u5982\u679c\u4f60\u662f\u5728\u7ebf\u9605\u8bfb\u8fd9\u672c\u4e66\u7684\u8bdd\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u90fd\u662f\u53ef\u4ee5\u4ea4\u4e92\u7684\u3002\u4f60\u53ef\u4ee5\u70b9\u51fb\u6216\u8005\u6539\u52a8\u4ee3\u7801\u4e2d\u4efb\u4f55\u4e00\u90e8\u5206\uff0c\u5c3d\u60c5\u63a2\u7d22\u3002\u591a\u4e8f GPU \u7684\u67b6\u6784\uff0cshader \u4f1a\u98de\u901f\u5730\u7f16\u8bd1\u548c\u66f4\u65b0\uff0c\u8fd9\u4f7f\u5f97\u4f60\u7684\u6539\u52a8\u90fd\u4f1a\u7acb\u523b\u51fa\u73b0\u5728\u4f60\u773c\u524d\u3002\u8bd5\u8bd5\u6539\u52a8\u7b2c 8 \u884c\u7684\u503c\uff0c\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</p> <p>\u5c3d\u7ba1\u8fd9\u51e0\u884c\u7b80\u5355\u7684\u4ee3\u7801\u770b\u8d77\u6765\u4e0d\u50cf\u6709\u5f88\u591a\u5185\u5bb9\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u636e\u6b64\u63a8\u6d4b\u51fa\u4e00\u4e9b\u77e5\u8bc6\u70b9\uff1a</p> <ol> <li> <p>shader \u8bed\u8a00 \u6709\u4e00\u4e2a  <code>main</code> \u51fd\u6570\uff0c\u4f1a\u5728\u6700\u540e\u8fd4\u56de\u989c\u8272\u503c\u3002\u8fd9\u70b9\u548c C \u8bed\u8a00\u5f88\u50cf\u3002</p> </li> <li> <p>\u6700\u7ec8\u7684\u50cf\u7d20\u989c\u8272\u53d6\u51b3\u4e8e\u9884\u8bbe\u7684\u5168\u5c40\u53d8\u91cf <code>gl_FragColor</code>\u3002</p> </li> <li> <p>\u8fd9\u4e2a\u7c7b C \u8bed\u8a00\u6709\u5185\u5efa\u7684\u53d8\u91cf\uff08\u50cf<code>gl_FragColor</code>\uff09\uff0c\u51fd\u6570\u548c\u6570\u636e\u7c7b\u578b\u3002\u5728\u672c\u4f8b\u4e2d\u6211\u4eec\u521a\u521a\u4ecb\u7ecd\u4e86<code>vec4</code>\uff08\u56db\u5206\u91cf\u6d6e\u70b9\u5411\u91cf\uff09\u3002\u4e4b\u540e\u6211\u4eec\u4f1a\u89c1\u5230\u66f4\u591a\u7684\u7c7b\u578b\uff0c\u50cf <code>vec3</code> \uff08\u4e09\u5206\u91cf\u6d6e\u70b9\u5411\u91cf\uff09\u548c <code>vec2</code> \uff08\u4e8c\u5206\u91cf\u6d6e\u70b9\u5411\u91cf\uff09\uff0c\u8fd8\u6709\u975e\u5e38\u8457\u540d\u7684\uff1a<code>float</code>\uff08\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\uff09\uff0c <code>int</code>\uff08\u6574\u578b\uff09 \u548c <code>bool</code>\uff08\u5e03\u5c14\u578b\uff09\u3002</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf <code>vec4</code> \u7c7b\u578b\uff0c\u53ef\u4ee5\u63a8\u6d4b\u8fd9\u56db\u4e2a\u53d8\u5143\u5206\u522b\u54cd\u5e94\u7ea2\uff0c\u7eff\uff0c\u84dd\u548c\u900f\u660e\u5ea6\u901a\u9053\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u53d8\u91cf\u662f\u89c4\u8303\u5316\u7684\uff0c\u610f\u601d\u662f\u5b83\u4eec\u7684\u503c\u662f\u4ece0\u52301\u7684\u3002\u4e4b\u540e\u6211\u4eec\u4f1a\u5b66\u4e60\u5982\u4f55\u89c4\u8303\u5316\u53d8\u91cf\uff0c\u4f7f\u5f97\u5728\u53d8\u91cf\u95f4map\uff08\u6620\u5c04\uff09\u6570\u503c\u66f4\u52a0\u5bb9\u6613\u3002</p> </li> <li> <p>\u53e6\u4e00\u4e2a\u53ef\u4ee5\u4ece\u672c\u4f8b\u770b\u51fa\u6765\u7684\u5f88\u91cd\u8981\u7684\u7c7b C \u8bed\u8a00\u7279\u5f81\u662f\uff0c\u9884\u5904\u7406\u7a0b\u5e8f\u7684\u5b8f\u6307\u4ee4\u3002\u5b8f\u6307\u4ee4\u662f\u9884\u7f16\u8bd1\u7684\u4e00\u90e8\u5206\u3002\u6709\u4e86\u5b8f\u624d\u53ef\u4ee5 <code>#define</code> \uff08\u5b9a\u4e49\uff09\u5168\u5c40\u53d8\u91cf\u548c\u8fdb\u884c\u4e00\u4e9b\u57fa\u7840\u7684\u6761\u4ef6\u8fd0\u7b97\uff08\u901a\u8fc7\u4f7f\u7528 <code>#ifdef</code> \u548c <code>#endif</code>\uff09\u3002\u6240\u6709\u7684\u5b8f\u90fd\u4ee5 <code>#</code> \u5f00\u5934\u3002\u9884\u7f16\u8bd1\u4f1a\u5728\u7f16\u8bd1\u524d\u4e00\u523b\u53d1\u751f\uff0c\u628a\u6240\u6709\u7684\u547d\u4ee4\u590d\u5236\u5230 <code>#defines</code> \u91cc\uff0c\u68c0\u67e5<code>#ifdef</code> \u6761\u4ef6\u53e5\u662f\u5426\u5df2\u88ab\u5b9a\u4e49\uff0c <code>#ifndef</code> \u6761\u4ef6\u53e5\u662f\u5426\u6ca1\u6709\u88ab\u5b9a\u4e49\u3002\u5728\u6211\u4eec\u521a\u521a\u7684\u201chello world!\u201d\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u5b9a\u4e49\u4e86<code>GL_ES</code>\u8fd9\u4e2a\u53d8\u91cf\uff0c\u624d\u4f1a\u63d2\u5165\u8fd0\u884c\u7b2c2\u884c\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u901a\u5e38\u7528\u5728\u79fb\u52a8\u7aef\u6216\u6d4f\u89c8\u5668\u7684\u7f16\u8bd1\u4e2d\u3002</p> </li> <li> <p><code>float</code>\u7c7b\u578b\u5728 shaders \u4e2d\u975e\u5e38\u91cd\u8981\uff0c\u6240\u4ee5\u7cbe\u5ea6\u975e\u5e38\u91cd\u8981\u3002\u66f4\u4f4e\u7684\u7cbe\u5ea6\u4f1a\u6709\u66f4\u5feb\u7684\u6e32\u67d3\u901f\u5ea6\uff0c\u4f46\u662f\u4f1a\u4ee5\u8d28\u91cf\u4e3a\u4ee3\u4ef7\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u6bcf\u4e00\u4e2a\u6d6e\u70b9\u503c\u7684\u7cbe\u5ea6\u3002\u5728\u7b2c\u4e00\u884c\uff08<code>precision mediump float;</code>\uff09\u6211\u4eec\u5c31\u662f\u8bbe\u5b9a\u4e86\u6240\u6709\u7684\u6d6e\u70b9\u503c\u90fd\u662f\u4e2d\u7b49\u7cbe\u5ea6\u3002\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u628a\u8fd9\u4e2a\u503c\u8bbe\u4e3a\u201c\u4f4e\u201d\uff08<code>precision lowp float;</code>\uff09\u6216\u8005\u201c\u9ad8\u201d\uff08<code>precision highp float;</code>\uff09\u3002</p> </li> <li> <p>\u6700\u540e\u53ef\u80fd\u4e5f\u662f\u6700\u91cd\u8981\u7684\u7ec6\u8282\u662f\uff0cGLSL \u8bed\u8a00\u89c4\u8303\u5e76\u4e0d\u4fdd\u8bc1\u53d8\u91cf\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u7c7b\u522b\u3002\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u663e\u5361\u7684\u786c\u4ef6\u5236\u9020\u5546\u5404\u6709\u4e0d\u540c\u7684\u663e\u5361\u52a0\u901f\u65b9\u5f0f\uff0c\u4f46\u662f\u5374\u88ab\u8981\u6c42\u6709\u6700\u7cbe\u7b80\u7684\u8bed\u8a00\u89c4\u8303\u3002\u56e0\u800c\uff0c\u81ea\u52a8\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5e76\u6ca1\u6709\u5305\u62ec\u5728\u5176\u4e2d\u3002\u5728\u6211\u4eec\u7684\u201chello world!\u201d\u4f8b\u5b50\u4e2d\uff0c<code>vec4</code> \u7cbe\u786e\u5230\u5355\u7cbe\u5ea6\u6d6e\u70b9\uff0c\u6240\u4ee5\u5e94\u88ab\u8d4b\u4e88 <code>float</code> \u683c\u5f0f\u3002\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u4ee3\u7801\u524d\u540e\u4e00\u81f4\uff0c\u4e0d\u8981\u4e4b\u540e\u82b1\u8d39\u5927\u91cf\u65f6\u95f4 debug \u7684\u8bdd\uff0c\u6700\u597d\u517b\u6210\u5728 <code>float</code> \u578b\u6570\u503c\u91cc\u52a0\u4e00\u4e2a <code>.</code> \u7684\u597d\u4e60\u60ef\u3002\u5982\u4e0b\u8fd9\u79cd\u4ee3\u7801\u5c31\u53ef\u80fd\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\uff1a</p> </li> </ol> <pre><code>void main() {\n    gl_FragColor = vec4(1,0,0,1);   // \u51fa\u9519\n}\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u57fa\u672c\u8ba8\u8bba\u5b8c\u4e86\u201chello world!\u201d\u4f8b\u5b50\u4e2d\u6240\u6709\u4e3b\u8981\u7684\u5185\u5bb9\uff0c\u662f\u65f6\u5019\u70b9\u51fb\u4ee3\u7801\uff0c\u68c0\u9a8c\u4e00\u4e0b\u6211\u4eec\u6240\u5b66\u7684\u77e5\u8bc6\u4e86\u3002\u4f60\u4f1a\u53d1\u73b0\u51fa\u9519\u65f6\u7a0b\u5e8f\u4f1a\u7f16\u8bd1\u5931\u8d25\uff0c\u53ea\u7559\u4e00\u4e2a\u5bc2\u5bde\u7684\u767d\u5c4f\u3002\u4f60\u53ef\u4ee5\u8bd5\u8bd5\u4e00\u4e9b\u597d\u73a9\u7684\u5c0f\u70b9\u5b50\uff0c\u6bd4\u5982\u8bf4\uff1a</p> <ul> <li> <p>\u628a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u503c\u6362\u6210\u6574\u578b\u6570\u503c\uff0c\u731c\u731c\u4f60\u7684\u663e\u5361\u80fd\u4e0d\u80fd\u5bb9\u5fcd\u8fd9\u4e2a\u884c\u4e3a\u3002</p> </li> <li> <p>\u8bd5\u8bd5\u628a\u7b2c\u516b\u884c\u6ce8\u91ca\u6389\uff0c\u4e0d\u7ed9\u51fd\u6570\u8d4b\u4efb\u4f55\u50cf\u7d20\u7684\u503c\u3002</p> </li> <li> <p>\u5c1d\u8bd5\u53e6\u5916\u5199\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u67d0\u4e2a\u989c\u8272\uff0c\u7136\u540e\u5728 <code>main()</code> \u91cc\u9762\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u7ed9\u4e2a\u63d0\u793a\uff0c\u8fd9\u4e2a\u51fd\u6570\u5e94\u8be5\u957f\u8fd9\u6837\uff1a</p> </li> </ul> <pre><code>vec4 red(){\n    return vec4(1.0,0.0,0.0,1.0);\n}\n</code></pre> <ul> <li>\u6709\u5f88\u591a\u79cd\u6784\u9020 <code>vec4</code> \u7c7b\u578b\u7684\u65b9\u5f0f\uff0c\u8bd5\u8bd5\u770b\u5176\u4ed6\u65b9\u5f0f\u3002\u4e0b\u9762\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\u65b9\u5f0f\uff1a</li> </ul> <pre><code>vec4 color = vec4(vec3(1.0,0.0,1.0),1.0);\n</code></pre> <p>\u5c3d\u7ba1\u8fd9\u4e2a\u4f8b\u5b50\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u523a\u6fc0\uff0c\u5b83\u5374\u662f\u6700\u6700\u57fa\u7840\u7684 \u2014\u2014 \u6211\u4eec\u628a\u753b\u5e03\u4e0a\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u6539\u6210\u4e86\u4e00\u4e2a\u786e\u5207\u7684\u989c\u8272\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u5982\u4f55\u7528\u4e24\u79cd\u8f93\u5165\u6e90\u6765\u6539\u53d8\u50cf\u7d20\u7684\u989c\u8272\uff1a\u7a7a\u95f4\uff08\u4f9d\u636e\u50cf\u7d20\u5728\u5c4f\u5e55\u4e0a\u7684\u4f4d\u7f6e\uff09\u548c\u65f6\u95f4\uff08\u4f9d\u636e\u9875\u9762\u52a0\u8f7d\u4e86\u591a\u5c11\u79d2\uff09\u3002</p>"},{"location":"Frontend/shader/02/SUMMARY/","title":"SUMMARY","text":"<p>Usually the \"Hello world!\" example is the first step to learning a new language. In GPU-land rendering text is an overcomplicated task for a first step, instead we'll choose a bright welcoming color to shout our enthusiasm!</p>"},{"location":"Frontend/shader/02/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/02/TITLE/#hello-world","title":"Hello World","text":""},{"location":"Frontend/shader/02/notes/","title":"Notes","text":""},{"location":"Frontend/shader/02/notes/#scott","title":"Scott","text":"<ul> <li> <p>After reading 1\u20137 I understand that there is some relationship between shader language and C, but I\u2019m not sure what it is.  Can you tell us explicitly?  Is GLSL (shader language) C?  Is GLSL a subset of C?</p> </li> <li> <p>In point #5 you explain preprocessor macros, but you don\u2019t explain why you used one here.  You probably don\u2019t want to go off topic just yet, but I would appreciate a sidebar or brief comment explaining why you are including special handling for GL_ES.  (My mind goes:  Interesting, but why is mobile OpenGL different from non-mobile?)</p> </li> <li> <p>Point #6:  I hope later in the book you will show us an example of how changing float precision affects things visually.  (I sense it\u2019s important, but don\u2019t see how yet, and I recognize it is too soon to address it here.)</p> </li> <li> <p>Point #7:  I had to read this two times to get that you meant including the period (.) is casting.  I haven\u2019t used C, so I didn\u2019t understand that.  I am used to Processing/Java-style casting, like:</p> </li> </ul> <pre><code>    (float) 1 == 1.0\n</code></pre> <ul> <li>I figured out that vec4() is a vector with 4 values, but perhaps you could make that explicit somewhere.</li> </ul>"},{"location":"Frontend/shader/02/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/02/tmp/#hello-world","title":"Hello World","text":"<p>Usually the \"Hello world!\" example is the first step to learning a new language. It's a simple one-line program that outputs an enthusiastic welcoming message and declares opportunities ahead.</p> <p>In GPU-land rendering text is an overcomplicated task for a first step, instead we'll choose a bright welcoming color to shout our enthusiasm!</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float u_time;\n\nvoid main() {\n    gl_FragColor = vec4(1.0,0.0,1.0,1.0);\n}\n</code></pre> <p></p> <p>If you are reading this book in a browser the previous block of code is interactive. That means you can click and change any part of the code you want to explore. Changes will be updated immediately thanks to the GPU architecture that compiles and replaces shaders on the fly. Give it a try by changing the values on line 8.</p> <p>Although these simple lines of code don't look like a lot, we can infer substantial knowledge from them:</p> <ol> <li> <p>Shader Language has a single <code>main</code> function that returns a color at the end. This is similar to C.</p> </li> <li> <p>The final pixel color is assigned to the reserved global variable <code>gl_FragColor</code>.</p> </li> <li> <p>This C-flavored language has built in variables (like <code>gl_FragColor</code>), functions and types. In this case we've just been introduced to <code>vec4</code> that stands for a four dimensional vector of floating point precision. Later we will see more types like <code>vec3</code> and <code>vec2</code> together with the popular: <code>float</code>, <code>int</code> and <code>bool</code>.</p> </li> <li> <p>If we look closely to the <code>vec4</code> type we can infer that the four arguments respond to the RED, GREEN, BLUE and ALPHA channels. Also we can see that these values are normalized, which means they go from <code>0.0</code> to <code>1.0</code>. Later, we will learn how normalizing values makes it easier to map values between variables.</p> </li> <li> <p>Another important C feature we can see in this example is the presence of preprocessor macros. Macros are part of a pre-compilation step. With them it is possible to <code>#define</code> global variables and do some basic conditional operation (with <code>#ifdef</code> and <code>#endif</code>). All the macro commands begin with a hashtag (<code>#</code>). Pre-compilation happens right before compiling and copies all the calls to <code>#defines</code> and check <code>#ifdef</code> (is defined) and <code>#ifndef</code> (is not defined) conditionals. In our \"hello world!\" example above, we only insert the line 2 if <code>GL_ES</code> is defined, which mostly happens when the code is compiled on mobile devices and browsers.</p> </li> <li> <p>Float types are vital in shaders, so the level of precision is crucial. Lower precision means faster rendering, but at the cost of quality. You can be picky and specify the precision of each variable that uses floating point. In the second line (<code>precision mediump float;</code>) we are setting all floats to medium precision. But we can choose to set them to low (<code>precision lowp float;</code>) or high (<code>precision highp float;</code>).</p> </li> <li> <p>The last, and maybe most important, detail is that GLSL specs don\u2019t guarantee that variables will be automatically casted. What does that mean? Manufacturers have different approaches to accelerate graphics card processes but they are forced to guarantee minimum specs. Automatic casting is not one of them. In our \u201chello world!\u201d example <code>vec4</code> has floating point precision and for that it expects to be assigned with <code>floats</code>. If you want to make good consistent code and not spend hours debugging white screens, get used to putting the point (<code>.</code>) in your floats. This kind of code will not always work:</p> </li> </ol> <pre><code>void main() {\n    gl_FragColor = vec4(1,0,0,1);   // ERROR\n}\n</code></pre> <p>Now that we've described the most relevant elements of our \"hello world!\" program, it's time to click on the code block and start challenging all that we've learned. You will note that on errors, the program will fail to compile, showing a white screen. There are some interesting things to try, for example:</p> <ul> <li> <p>Try replacing the floats with integers, your graphic card may or may not tolerate this behavior.</p> </li> <li> <p>Try commenting out line 8 and not assigning any pixel value to the function.</p> </li> <li> <p>Try making a separate function that returns a specific color and use it inside <code>main()</code>. As a hint, here is the code for a function that returns a red color:</p> </li> </ul> <pre><code>vec4 red(){\n    return vec4(1.0,0.0,0.0,1.0);\n}\n</code></pre> <ul> <li>There are multiple ways of constructing <code>vec4</code> types, try to discover other ways. The following is one of them:</li> </ul> <pre><code>vec4 color = vec4(vec3(1.0,0.0,1.0),1.0);\n</code></pre> <p>Although this example isn't very exciting, it is the most basic example - we are changing all the pixels inside the canvas to the same exact color. In the following chapter we will see how to change the pixel colors by using two types of input: space (the place of the pixel on the screen) and time (the number of seconds since the page was loaded).</p>"},{"location":"Frontend/shader/03/","title":"Index","text":""},{"location":"Frontend/shader/03/#uniforms","title":"Uniforms","text":"<p>So far we have seen how the GPU manages large numbers of parallel threads, each one responsible for assigning the color to a fraction of the total image. Although each parallel thread is blind to the others, we need to be able to send some inputs from the CPU to all the threads. Because of the architecture of the graphics card those inputs are going to be equal (uniform) to all the threads and necessarily set as read only. In other words, each thread receives the same data which it can read but cannot change.</p> <p>These inputs are called <code>uniform</code> and come in most of the supported types: <code>float</code>, <code>vec2</code>, <code>vec3</code>, <code>vec4</code>, <code>mat2</code>, <code>mat3</code>, <code>mat4</code>, <code>sampler2D</code> and <code>samplerCube</code>. Uniforms are defined with the corresponding type at the top of the shader right after assigning the default floating point precision.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;  // Canvas size (width,height)\nuniform vec2 u_mouse;       // mouse position in screen pixels\nuniform float u_time;       // Time in seconds since load\n</code></pre> <p>You can picture the uniforms like little bridges between the CPU and the GPU. The names will vary from implementation to implementation but in this series of examples I\u2019m always passing: <code>u_time</code> (time in seconds since the shader started), <code>u_resolution</code> (billboard size where the shader is being drawn) and <code>u_mouse</code> (mouse position inside the billboard in pixels). I\u2019m following the convention of putting <code>u_</code> before the uniform name to be explicit about the nature of this variable but you will find all kinds of names for uniforms. For example ShaderToy.com uses the same uniforms but with the following names:</p> <pre><code>uniform vec3 iResolution;   // viewport resolution (in pixels)\nuniform vec4 iMouse;        // mouse pixel coords. xy: current, zw: click\nuniform float iTime;        // shader playback time (in seconds)\n</code></pre> <p>Enough talking, let's see the uniforms in action. In the following code we use <code>u_time</code> - the number of seconds since the shader started running - together with a sine function to animate the transition of the amount of red in the billboard.</p> <p>As you can see GLSL has more surprises. The GPU has hardware accelerated angle, trigonometric and exponential functions. Some of those functions are: <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>asin()</code>, <code>acos()</code>, <code>atan()</code>, <code>pow()</code>, <code>exp()</code>, <code>log()</code>, <code>sqrt()</code>, <code>abs()</code>, <code>sign()</code>, <code>floor()</code>, <code>ceil()</code>, <code>fract()</code>, <code>mod()</code>, <code>min()</code>, <code>max()</code> and <code>clamp()</code>.</p> <p>Now it is time again to play with the above code.</p> <ul> <li> <p>Slow down the frequency until the color change becomes almost imperceptible.</p> </li> <li> <p>Speed it up until you see a single color without flickering.</p> </li> <li> <p>Play with the three channels (RGB) in different frequencies to get interesting patterns and behaviors.</p> </li> </ul>"},{"location":"Frontend/shader/03/#gl_fragcoord","title":"gl_FragCoord","text":"<p>In the same way GLSL gives us a default output, <code>vec4 gl_FragColor</code>, it also gives us a default input, <code>vec4 gl_FragCoord</code>, which holds the screen coordinates of the pixel or screen fragment that the active thread is working on. With <code>vec4 gl_FragCoord</code>, we know where a thread is working inside the billboard. In this case we don't call it <code>uniform</code> because it will be different from thread to thread, instead <code>gl_FragCoord</code> is called a varying.</p> <p>In the above code we normalize the coordinate of the fragment by dividing it by the total resolution of the billboard. By doing this the values will go between <code>0.0</code> and <code>1.0</code>, which makes it easy to map the X and Y values to the RED and GREEN channel.</p> <p>In shader-land we don\u2019t have too many resources for debugging besides assigning strong colors to variables and trying to make sense of them. You will discover that sometimes coding in GLSL is very similar to putting ships inside bottles. It is equally hard, beautiful and gratifying.</p> <p></p> <p>Now it is time to try and challenge our understanding of this code.</p> <ul> <li> <p>Can you tell where the coordinate <code>(0.0, 0.0)</code> is in our canvas?</p> </li> <li> <p>What about <code>(1.0, 0.0)</code>, <code>(0.0, 1.0)</code>, <code>(0.5, 0.5)</code> and <code>(1.0, 1.0)</code>?</p> </li> <li> <p>Can you figure out how to use <code>u_mouse</code>, knowing that the values are in pixels and NOT normalized values? Can you use it to move colors around?</p> </li> <li> <p>Can you imagine an interesting way of changing this color pattern using <code>u_time</code> and <code>u_mouse</code> coordinates?</p> </li> </ul> <p>After doing these exercises you might wonder where else you can try your new shader-powers. In the following chapter we will see how to make your own shader tools in three.js, Processing, and openFrameworks.</p>"},{"location":"Frontend/shader/03/README-ch/","title":"3","text":""},{"location":"Frontend/shader/03/README-ch/#uniforms","title":"Uniforms","text":"<p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 GPU \u5982\u4f55\u5904\u7406\u5e76\u884c\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u7ed9\u5b8c\u6574\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u914d\u7f6e\u989c\u8272\u3002\u5c3d\u7ba1\u6bcf\u4e2a\u7ebf\u7a0b\u548c\u5176\u4ed6\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u80fd\u6709\u6570\u636e\u4ea4\u6362\uff0c\u4f46\u6211\u4eec\u80fd\u4ece CPU \u7ed9\u6bcf\u4e2a\u7ebf\u7a0b\u8f93\u5165\u6570\u636e\u3002\u56e0\u4e3a\u663e\u5361\u7684\u67b6\u6784\uff0c\u6240\u6709\u7ebf\u7a0b\u7684\u8f93\u5165\u503c\u5fc5\u987b\u7edf\u4e00\uff08uniform\uff09\uff0c\u800c\u4e14\u5fc5\u987b\u8bbe\u4e3a\u53ea\u8bfb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6761\u7ebf\u7a0b\u63a5\u6536\u76f8\u540c\u7684\u6570\u636e\uff0c\u5e76\u4e14\u662f\u4e0d\u53ef\u6539\u53d8\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u4e9b\u8f93\u5165\u503c\u53eb\u505a <code>uniform</code> \uff08\u7edf\u4e00\u503c\uff09\uff0c\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u901a\u5e38\u4e3a\uff1a<code>float</code>, <code>vec2</code>, <code>vec3</code>, <code>vec4</code>, <code>mat2</code>, <code>mat3</code>, <code>mat4</code>, <code>sampler2D</code> and <code>samplerCube</code>\u3002uniform \u503c\u9700\u8981\u6570\u503c\u7c7b\u578b\u524d\u540e\u4e00\u81f4\u3002\u4e14\u5728 shader \u7684\u5f00\u5934\uff0c\u5728\u8bbe\u5b9a\u7cbe\u5ea6\u4e4b\u540e\uff0c\u5c31\u5bf9\u5176\u8fdb\u884c\u5b9a\u4e49\u3002</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution; // \u753b\u5e03\u5c3a\u5bf8\uff08\u5bbd\uff0c\u9ad8\uff09\nuniform vec2 u_mouse;      // \u9f20\u6807\u4f4d\u7f6e\uff08\u5728\u5c4f\u5e55\u4e0a\u54ea\u4e2a\u50cf\u7d20\uff09\nuniform float u_time;     // \u65f6\u95f4\uff08\u52a0\u8f7d\u540e\u7684\u79d2\u6570\uff09\n</code></pre> <p>\u4f60\u53ef\u4ee5\u628a uniforms \u60f3\u8c61\u6210\u8fde\u901a GPU \u548c CPU \u7684\u8bb8\u591a\u5c0f\u7684\u6865\u6881\u3002\u867d\u7136\u8fd9\u4e9b uniforms \u7684\u540d\u5b57\u5343\u5947\u767e\u602a\uff0c\u4f46\u662f\u5728\u8fd9\u4e00\u7cfb\u5217\u7684\u4f8b\u5b50\u4e2d\u6211\u4e00\u76f4\u6709\u7528\u5230\uff1a<code>u_time</code> \uff08\u65f6\u95f4\uff09, <code>u_resolution</code> \uff08\u753b\u5e03\u5c3a\u5bf8\uff09\u548c <code>u_mouse</code> \uff08\u9f20\u6807\u4f4d\u7f6e\uff09\u3002\u6309\u4e1a\u754c\u4f20\u7edf\u5e94\u5728 uniform \u503c\u7684\u540d\u5b57\u524d\u52a0 <code>u_</code> \uff0c\u8fd9\u6837\u4e00\u770b\u5373\u77e5\u662f uniform\u3002\u5c3d\u7ba1\u5982\u6b64\u4f60\u4e5f\u8fd8\u4f1a\u89c1\u5230\u5404\u79cd\u5404\u6837\u7684\u540d\u5b57\u3002\u6bd4\u5982ShaderToy.com\u5c31\u7528\u4e86\u5982\u4e0b\u7684\u540d\u5b57\uff1a</p> <pre><code>uniform vec3 iResolution;   // \u89c6\u53e3\u5206\u8fa8\u7387\uff08\u4ee5\u50cf\u7d20\u8ba1\uff09\nuniform vec4 iMouse;        // \u9f20\u6807\u5750\u6807 xy\uff1a \u5f53\u524d\u4f4d\u7f6e, zw\uff1a \u70b9\u51fb\u4f4d\u7f6e\nuniform float iTime;        // shader \u8fd0\u884c\u65f6\u95f4\uff08\u4ee5\u79d2\u8ba1\uff09\n</code></pre> <p>\u597d\u4e86\u8bf4\u7684\u8db3\u591f\u591a\u4e86\uff0c\u6211\u4eec\u6765\u770b\u770b\u5b9e\u9645\u64cd\u4f5c\u4e2d\u7684 uniform \u5427\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u4f7f\u7528  <code>u_time</code> \u52a0\u4e0a\u4e00\u4e2a sin \u51fd\u6570\uff0c\u6765\u5c55\u793a\u56fe\u4e2d\u7ea2\u8272\u7684\u52a8\u6001\u53d8\u5316\u3002</p> <p>GLSL \u8fd8\u6709\u66f4\u591a\u60ca\u559c\u3002GPU \u7684\u786c\u4ef6\u52a0\u901f\u652f\u6301\u6211\u4eec\u4f7f\u7528\u89d2\u5ea6\uff0c\u4e09\u89d2\u51fd\u6570\u548c\u6307\u6570\u51fd\u6570\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u8fd9\u4e9b\u51fd\u6570\u7684\u4ecb\u7ecd\uff1a<code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>asin()</code>, <code>acos()</code>, <code>atan()</code>, <code>pow()</code>, <code>exp()</code>, <code>log()</code>, <code>sqrt()</code>, <code>abs()</code>, <code>sign()</code>, <code>floor()</code>, <code>ceil()</code>, <code>fract()</code>, <code>mod()</code>, <code>min()</code>, <code>max()</code> \u548c <code>clamp()</code>\u3002</p> <p>\u73b0\u5728\u53c8\u5230\u4f60\u6765\u73a9\u7684\u65f6\u5019\u4e86\u3002</p> <ul> <li> <p>\u964d\u4f4e\u989c\u8272\u53d8\u5316\u7684\u901f\u7387\uff0c\u76f4\u5230\u8089\u773c\u90fd\u770b\u4e0d\u51fa\u6765\u3002</p> </li> <li> <p>\u52a0\u901f\u53d8\u5316\uff0c\u76f4\u5230\u989c\u8272\u9759\u6b62\u4e0d\u52a8\u3002</p> </li> <li> <p>\u73a9\u4e00\u73a9 RGB \u4e09\u4e2a\u901a\u9053\uff0c\u5206\u522b\u7ed9\u4e09\u4e2a\u989c\u8272\u4e0d\u540c\u7684\u53d8\u5316\u901f\u5ea6\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u505a\u51fa\u6709\u8da3\u7684\u6548\u679c\u3002</p> </li> </ul>"},{"location":"Frontend/shader/03/README-ch/#gl_fragcoord","title":"gl_FragCoord","text":"<p>\u5c31\u50cf GLSL \u6709\u4e2a\u9ed8\u8ba4\u8f93\u51fa\u503c <code>vec4 gl_FragColor</code> \u4e00\u6837\uff0c\u5b83\u4e5f\u6709\u4e00\u4e2a\u9ed8\u8ba4\u8f93\u5165\u503c\uff08 <code>vec4 gl_FragCoord</code> \uff09\u3002<code>gl_FragCoord</code>\u5b58\u50a8\u4e86\u6d3b\u52a8\u7ebf\u7a0b\u6b63\u5728\u5904\u7406\u7684\u50cf\u7d20\u6216\u5c4f\u5e55\u788e\u7247\u7684\u5750\u6807\u3002\u6709\u4e86\u5b83\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u5c4f\u5e55\u4e0a\u7684\u54ea\u4e00\u4e2a\u7ebf\u7a0b\u6b63\u5728\u8fd0\u8f6c\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u53eb <code>gl_FragCoord</code> uniform \uff08\u7edf\u4e00\u503c\uff09\u5462\uff1f\u56e0\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u7684\u5750\u6807\u90fd\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u53eb\u505a varying\uff08\u53d8\u5316\u503c\uff09\u3002</p> <p>\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6211\u4eec\u7528 <code>gl_FragCoord.xy</code> \u9664\u4ee5 <code>u_resolution</code>\uff0c\u5bf9\u5750\u6807\u8fdb\u884c\u4e86\u89c4\u8303\u5316\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4f7f\u6240\u6709\u7684\u503c\u843d\u5728 <code>0.0</code> \u5230 <code>1.0</code> \u4e4b\u95f4\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u628a X \u6216 Y \u7684\u503c\u6620\u5c04\u5230\u7ea2\u8272\u6216\u8005\u7eff\u8272\u901a\u9053\u3002</p> <p>\u5728 shader \u7684\u9886\u57df\u6211\u4eec\u6ca1\u6709\u592a\u591a\u8981 debug \u7684\uff0c\u66f4\u591a\u5730\u662f\u8bd5\u7740\u7ed9\u53d8\u91cf\u8d4b\u4e00\u4e9b\u5f88\u70ab\u7684\u989c\u8272\uff0c\u8bd5\u56fe\u505a\u51fa\u4e00\u4e9b\u6548\u679c\u3002\u6709\u65f6\u4f60\u4f1a\u89c9\u5f97\u7528 GLSL \u7f16\u7a0b\u5c31\u50cf\u662f\u628a\u4e00\u641c\u8239\u653e\u5230\u4e86\u74f6\u5b50\u91cc\u3002\u5b83\u540c\u7b49\u5730\u56f0\u96be\u3001\u7f8e\u4e3d\u800c\u4ee4\u4eba\u6ee1\u8db3\u3002</p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u6765\u68c0\u9a8c\u4e00\u4e0b\u6211\u4eec\u5bf9\u4e0a\u9762\u4ee3\u7801\u7684\u7406\u89e3\u7a0b\u5ea6\u3002</p> <ul> <li> <p>\u4f60\u660e\u767d <code>(0.0,0.0)</code> \u5750\u6807\u5728\u753b\u5e03\u4e0a\u7684\u54ea\u91cc\u5417\uff1f</p> </li> <li> <p>\u90a3 <code>(1.0,0.0)</code>, <code>(0.0,1.0)</code>, <code>(0.5,0.5)</code> \u548c <code>(1.0,1.0)</code> \u5462\uff1f</p> </li> <li> <p>\u4f60\u77e5\u9053\u5982\u4f55\u7528\u672a\u89c4\u8303\u5316\uff08normalized\uff09\u7684 <code>u_mouse</code> \u5417\uff1f\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u79fb\u52a8\u989c\u8272\u5417\uff1f</p> </li> <li> <p>\u4f60\u53ef\u4ee5\u7528 <code>u_time</code> \u548c <code>u_mouse</code> \u6765\u6539\u53d8\u989c\u8272\u7684\u56fe\u6848\u5417\uff1f\u4e0d\u59a8\u7422\u78e8\u4e00\u4e9b\u6709\u8da3\u7684\u9014\u5f84\u3002</p> </li> </ul> <p>\u7ecf\u8fc7\u8fd9\u4e9b\u5c0f\u7ec3\u4e60\u540e\uff0c\u4f60\u53ef\u80fd\u4f1a\u597d\u5947\u8fd8\u80fd\u7528\u5f3a\u5927\u7684 shader \u505a\u4ec0\u4e48\u3002\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4f60\u4f1a\u77e5\u9053\u5982\u4f55\u628a\u4f60\u7684 shader \u548c three.js\uff0cProcessing\uff0c\u548c openFrameworks \u7ed3\u5408\u8d77\u6765\u3002</p>"},{"location":"Frontend/shader/03/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>Aprenda como usar vari\u00e1veis Uniform. Vari\u00e1veis uniform, ou simplesmente uniformes s\u00e3o as vari\u00e1veis que carregam informa\u00e7\u00e3o acess\u00edvel igualmente de todas as threads do seu shader. O editor GSLS tem tr\u00eas uniformes setados para voc\u00ea.</p> <pre><code>uniform vec2 u_resolution; // Tamanho do canvas  (largura,altura)\nuniform vec2 u_mouse;      // posi\u00e7\u00e3o do mouse em pixels da tela\nuniform float u_time;     // Tempo em segundos desde carregamento\n</code></pre>"},{"location":"Frontend/shader/03/SUMMARY/","title":"SUMMARY","text":"<p>Learn how to use Uniform variables. Uniform variables, or simply uniforms are the variables that carry information equally accessible from all of the threads of your shader. The GSLS editor has three uniforms set up for you.</p> <pre><code>uniform vec2 u_resolution; // Canvas size (width,height)\nuniform vec2 u_mouse;      // mouse position in screen pixels\nuniform float u_time;     // Time in seconds since load\n</code></pre>"},{"location":"Frontend/shader/03/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/03/TITLE/#uniforms","title":"Uniforms","text":""},{"location":"Frontend/shader/03/notes/","title":"Notes","text":""},{"location":"Frontend/shader/03/notes/#scott","title":"Scott","text":"<ul> <li>For these uniforms:</li> </ul> <pre><code>uniform vec2 u_resolution; // Canvas size (width,height)\nuniform vec2 u_mouse;      // mouse position in screen pixels\nuniform float u_time;      // Time in seconds since load\n````\n\u2026what determines these variable names?  Are these set by you, so I could change them, or are these determined by the graphics card, GLSL, or something else?\n\n* This list of GLSL-supported functions is super.  Maybe you could link to a comprehensive list here, too.\n\n\u2022 In \"Slow down the frequency until the color change becomes almost imperceptible\" took me a minute to figure out the right place to do that.  I ended up writing:\n</code></pre> <pre><code>gl_FragColor = vec4( abs(sin(u_time * 0.4)) ,0.0,0.0,1.0);\n</code></pre> <p>```</p> <p>I mention it because I felt this is the first place where you might lose some people.  Consider giving a little more guidance with this instruction.</p> <ul> <li> <p>So gl_FragCoord is a varying, so it doesn\u2019t have to be declared.  But uniforms do have to be declared before you can use them?  Is that right?</p> </li> <li> <p>Starting in this example, I need to be told what the components of a vec4() are.  It looks like you are using vec4.x and vec4.y.  But you didn\u2019t introduce these.  What other options do I have?</p> </li> <li> <p>Also I would want the fields of gl_FragCoord explained.  You used gl_FragCoord.xy but didn\u2019t explain it.  I assume it\u2019s a vec2 with the x and y values, of course.</p> </li> </ul> <p>Come to think of it, it is crazy that you can write:</p> <pre><code>gl_FragCoord.xy / u_resolution\n</code></pre> <p>and have that return a vec2!  In Processing you have to use something like vector.divide().  Maybe it would be worth explaining a bit what your line of code above does?  Does it really divide both the X and Y values by u_resolution?</p> <p>NOTES:</p> <p>uniform vec2 u_resolution;  // vec2(500.0,500.0) uniform vec2 u_mouse; uniform float u_time;</p> <p>void main() {     //                          X  Y     // gl_FragCoord.xy = vec2(0.0,0.0);     //                          / /     //                   vec2(500.0,500.0);</p> <pre><code>vec2 st = gl_FragCoord.xy/u_resolution;\n\n// ST -&gt; vec2(0.0,0.0) to vec2(1.0,1.0)\n\n//                  RED   GREEN   BLUE  ALPHA\ngl_FragColor = vec4(st.x, st.y,   0.0,  1.0);\n</code></pre> <p>}</p>"},{"location":"Frontend/shader/03/notes/#nicolas","title":"Nicolas","text":"<ul> <li> <p>You can picture the uniforms like little bridges between the CPU and the GPU</p> <pre><code>a 'one-way'' bridges that is :) I translated it to:\n\n&gt;We can picture the uniforms as small one-way bridges from the CPU (our main program) to the GPU (where the shader will be executed).\n</code></pre> </li> <li> <p>In the same way GLSL gives us a default output, <code>vec4 gl_FragColor</code>, it also gives us a default input, <code>vec4 gl_FragCoord</code>, which holds the screen coordinates of the pixel or screen fragment that the active thread is working on.</p> <p>I developped a bit more to disambiguate pixel &amp; fragment, I think it's an important step, the first time we meet the word fragment for real</p> </li> <li> <p>I've stressed the fact that gl_FragCoord is implicitly declared so that people don't panic when they don't find it in the new code sample :)     also those are reserved names, so I stressed the fact that you can't use them as var names in your custom code.</p> </li> </ul>"},{"location":"Frontend/shader/03/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/03/tmp/#uniforms","title":"Uniforms","text":"<p>So far we have seen how the GPU manages large numbers of parallel threads, each one responsible for assigning the color to a fraction of the total image. Although each parallel thread is blind to the others, we need to be able to send some inputs from the CPU to all the threads. Because of the architecture of the graphics card those inputs are going to be equal (uniform) to all the threads and necessarily set as read only. In other words, each thread receives the same data which it can read but cannot change.</p> <p>These inputs are called <code>uniform</code> and come in most of the supported types: <code>float</code>, <code>vec2</code>, <code>vec3</code>, <code>vec4</code>, <code>mat2</code>, <code>mat3</code>, <code>mat4</code>, <code>sampler2D</code> and <code>samplerCube</code>. Uniforms are defined with the corresponding type at the top of the shader right after assigning the default floating point precision.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;  // Canvas size (width,height)\nuniform vec2 u_mouse;       // mouse position in screen pixels\nuniform float u_time;       // Time in seconds since load\n</code></pre> <p>You can picture the uniforms like little bridges between the CPU and the GPU. The names will vary from implementation to implementation but in this series of examples I\u2019m always passing: <code>u_time</code> (time in seconds since the shader started), <code>u_resolution</code> (billboard size where the shader is being drawn) and <code>u_mouse</code> (mouse position inside the billboard in pixels). I\u2019m following the convention of putting <code>u_</code> before the uniform name to be explicit about the nature of this variable but you will find all kinds of names for uniforms. For example ShaderToy.com uses the same uniforms but with the following names:</p> <pre><code>uniform vec3 iResolution;   // viewport resolution (in pixels)\nuniform vec4 iMouse;        // mouse pixel coords. xy: current, zw: click\nuniform float iTime;        // shader playback time (in seconds)\n</code></pre> <p>Enough talking, let's see the uniforms in action. In the following code we use <code>u_time</code> - the number of seconds since the shader started running - together with a sine function to animate the transition of the amount of red in the billboard.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float u_time;\n\nvoid main() {\n    gl_FragColor = vec4(abs(sin(u_time)),0.0,0.0,1.0);\n}\n</code></pre> <p></p> <p>As you can see GLSL has more surprises. The GPU has hardware accelerated angle, trigonometric and exponential functions. Some of those functions are: <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>asin()</code>, <code>acos()</code>, <code>atan()</code>, <code>pow()</code>, <code>exp()</code>, <code>log()</code>, <code>sqrt()</code>, <code>abs()</code>, <code>sign()</code>, <code>floor()</code>, <code>ceil()</code>, <code>fract()</code>, <code>mod()</code>, <code>min()</code>, <code>max()</code> and <code>clamp()</code>.</p> <p>Now it is time again to play with the above code.</p> <ul> <li> <p>Slow down the frequency until the color change becomes almost imperceptible.</p> </li> <li> <p>Speed it up until you see a single color without flickering.</p> </li> <li> <p>Play with the three channels (RGB) in different frequencies to get interesting patterns and behaviors.</p> </li> </ul>"},{"location":"Frontend/shader/03/tmp/#gl_fragcoord","title":"gl_FragCoord","text":"<p>In the same way GLSL gives us a default output, <code>vec4 gl_FragColor</code>, it also gives us a default input, <code>vec4 gl_FragCoord</code>, which holds the screen coordinates of the pixel or screen fragment that the active thread is working on. With <code>vec4 gl_FragCoord</code>, we know where a thread is working inside the billboard. In this case we don't call it <code>uniform</code> because it will be different from thread to thread, instead <code>gl_FragCoord</code> is called a varying.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n}\n</code></pre> <p></p> <p>In the above code we normalize the coordinate of the fragment by dividing it by the total resolution of the billboard. By doing this the values will go between <code>0.0</code> and <code>1.0</code>, which makes it easy to map the X and Y values to the RED and GREEN channel.</p> <p>In shader-land we don\u2019t have too many resources for debugging besides assigning strong colors to variables and trying to make sense of them. You will discover that sometimes coding in GLSL is very similar to putting ships inside bottles. It is equally hard, beautiful and gratifying.</p> <p></p> <p>Now it is time to try and challenge our understanding of this code.</p> <ul> <li> <p>Can you tell where the coordinate <code>(0.0, 0.0)</code> is in our canvas?</p> </li> <li> <p>What about <code>(1.0, 0.0)</code>, <code>(0.0, 1.0)</code>, <code>(0.5, 0.5)</code> and <code>(1.0, 1.0)</code>?</p> </li> <li> <p>Can you figure out how to use <code>u_mouse</code>, knowing that the values are in pixels and NOT normalized values? Can you use it to move colors around?</p> </li> <li> <p>Can you imagine an interesting way of changing this color pattern using <code>u_time</code> and <code>u_mouse</code> coordinates?</p> </li> </ul> <p>After doing these exercises you might wonder where else you can try your new shader-powers. In the following chapter we will see how to make your own shader tools in three.js, Processing, and openFrameworks.</p>"},{"location":"Frontend/shader/04/","title":"Index","text":""},{"location":"Frontend/shader/04/#running-your-shader","title":"Running your shader","text":"<p>As part of the construction of this book and my art practice I made an ecosystem of tools to create, display, share and curate shaders. These tools work consistently across Linux, MacOS, Windows and Raspberry Pi and browsers without the need of changing your code.</p>"},{"location":"Frontend/shader/04/#running-your-shaders-on-the-browser","title":"Running your shaders on the browser","text":"<p>Display: all live examples in this book are displayed using glslCanvas which makes the process of running standalone shader incredibly easy.</p> <pre><code>&lt;canvas class=\"glslCanvas\" data-fragment-url=\u201cyourShader.frag\" data-textures=\u201cyourInputImage.png\u201d width=\"500\" height=\"500\"&gt;&lt;/canvas&gt;\n</code></pre> <p>As you can see, it just needs a <code>canvas</code> element with <code>class=\"glslCanvas\"</code> and the url to your shader in the <code>data-fragment-url</code>. Learn more about it here.</p> <p>If you are like me, you will probably want to run shaders directly from the console, in that case you should check out glslViewer. This application allows you to incorporate shaders into your <code>bash</code> scripts or unix pipelines and use it in a similar way to ImageMagick. Also glslViewer is a great way to compile shaders on your Raspberry Pi, which is the reason openFrame.io uses it to display shader artwork. Learn more about this application here.</p> <pre><code>glslViewer yourShader.frag yourInputImage.png \u2014w 500 -h 500 -E screenshot,yourOutputImage.png\n</code></pre> <p>Create: in order to illuminate the experience of coding shaders I made an online editor called glslEditor. This editor is embedded on the book's live examples, it brings a series of handy widgets to make more tangible the abstract experience of working with glsl code. You can also run it as a standalone web application from editor.thebookofshaders.com/. Learn more about it here.</p> <p></p> <p>If you prefer to work offline using SublimeText you can install this package for glslViewer. Learn more about it here.</p> <p></p> <p>Share: the online editor (editor.thebookofshaders.com/) can share your shaders! Both the embedded and standalone version have an export button where you can get an unique URL's to your shader. Also it has the ability to export directly to an openFrame.io.</p> <p></p> <p>Curate: Sharing your code is the beginning of you sharing your shader as artwork! Beside the option to export to openFrame.io I made a tool to curate your shaders into a gallery that can be embedded on any site, it\u2019s name is glslGallery. Learn more here.</p> <p></p>"},{"location":"Frontend/shader/04/#running-your-shaders-on-your-favorite-framework","title":"Running your shaders on your favorite framework","text":"<p>In case you already have experience programming in a framework like: Processing, Three.js, OpenFrameworks or SFML, you're probably excited to try shaders on these platforms you feel comfortable with. The following are examples of how to set shaders in some popular frameworks with the same uniforms that we are going to use throughout this book. (In the GitHub repository for this chapter, you'll find the full source code for these three frameworks.)</p>"},{"location":"Frontend/shader/04/#in-threejs","title":"In Three.js","text":"<p>The brilliant and very humble Ricardo Cabello (aka MrDoob ) has been developing along with other contributors probably one of the most famous frameworks for WebGL, called Three.js. You will find a lot of examples, tutorials and books that teach you how to use this JavaScript library to make cool 3D graphics.</p> <p>Below is an example of the HTML and JS you need to get started with shaders in three.js. Pay attention to the <code>id=\"fragmentShader\"</code> script, here is where you can copy the shaders you find in this book.</p> <pre><code>&lt;body&gt;\n    &lt;div id=\"container\"&gt;&lt;/div&gt;\n    &lt;script src=\"js/three.min.js\"&gt;&lt;/script&gt;\n    &lt;script id=\"vertexShader\" type=\"x-shader/x-vertex\"&gt;\n        void main() {\n            gl_Position = vec4( position, 1.0 );\n        }\n    &lt;/script&gt;\n    &lt;script id=\"fragmentShader\" type=\"x-shader/x-fragment\"&gt;\n        uniform vec2 u_resolution;\n        uniform float u_time;\n\n        void main() {\n            vec2 st = gl_FragCoord.xy/u_resolution.xy;\n            gl_FragColor=vec4(st.x,st.y,0.0,1.0);\n        }\n    &lt;/script&gt;\n    &lt;script&gt;\n        var container;\n        var camera, scene, renderer, clock;\n        var uniforms;\n\n        init();\n        animate();\n\n        function init() {\n            container = document.getElementById( 'container' );\n\n            camera = new THREE.Camera();\n            camera.position.z = 1;\n\n            scene = new THREE.Scene();\n            clock = new THREE.Clock();\n\n            var geometry = new THREE.PlaneBufferGeometry( 2, 2 );\n\n            uniforms = {\n                u_time: { type: \"f\", value: 1.0 },\n                u_resolution: { type: \"v2\", value: new THREE.Vector2() },\n                u_mouse: { type: \"v2\", value: new THREE.Vector2() }\n            };\n\n            var material = new THREE.ShaderMaterial( {\n                uniforms: uniforms,\n                vertexShader: document.getElementById( 'vertexShader' ).textContent,\n                fragmentShader: document.getElementById( 'fragmentShader' ).textContent\n            } );\n\n            var mesh = new THREE.Mesh( geometry, material );\n            scene.add( mesh );\n\n            renderer = new THREE.WebGLRenderer();\n            renderer.setPixelRatio( window.devicePixelRatio );\n\n            container.appendChild( renderer.domElement );\n\n            onWindowResize();\n            window.addEventListener( 'resize', onWindowResize, false );\n\n            document.onmousemove = function(e){\n              uniforms.u_mouse.value.x = e.pageX\n              uniforms.u_mouse.value.y = e.pageY\n            }\n        }\n\n        function onWindowResize( event ) {\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            uniforms.u_resolution.value.x = renderer.domElement.width;\n            uniforms.u_resolution.value.y = renderer.domElement.height;\n        }\n\n        function animate() {\n            requestAnimationFrame( animate );\n            render();\n        }\n\n        function render() {\n            uniforms.u_time.value += clock.getDelta();\n            renderer.render( scene, camera );\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Frontend/shader/04/#in-processing","title":"In Processing","text":"<p>Started by Ben Fry and Casey Reas in 2001, Processing is an extraordinarily simple and powerful environment in which to take your first steps in code (it was for me at least). Andres Colubri has made important updates to the OpenGL and video in Processing, making it easier than ever to use and play with GLSL shaders in this friendly environment. Processing will search for the shader named <code>\"shader.frag\"</code> in the <code>data</code> folder of the sketch. Be sure to copy the examples you find here into that folder and rename the file.</p> <pre><code>PShader shader;\n\nvoid setup() {\n  size(640, 360, P2D);\n  noStroke();\n\n  shader = loadShader(\"shader.frag\");\n}\n\nvoid draw() {\n  shader.set(\"u_resolution\", float(width), float(height));\n  shader.set(\"u_mouse\", float(mouseX), float(mouseY));\n  shader.set(\"u_time\", millis() / 1000.0);\n  shader(shader);\n  rect(0,0,width,height);\n}\n</code></pre> <p>In order for the shader to work on versions previous to 2.1, you need to add the following line at the beginning of your shader: <code>#define PROCESSING_COLOR_SHADER</code>. So that it looks like this:</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PROCESSING_COLOR_SHADER\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.st/u_resolution;\n    gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n}\n</code></pre> <p>For more information about shaders in Processing check out this tutorial.</p>"},{"location":"Frontend/shader/04/#in-openframeworks","title":"In openFrameworks","text":"<p>Everybody has a place where they feel comfortable, in my case, that\u2019s still the openFrameworks community. This C++ framework wraps around OpenGL and other open source C++ libraries. In many ways it's very similar to Processing, but with the obvious complications of dealing with C++ compilers. In the same way as Processing, openFrameworks will search for your shader files in the data folder, so don\u2019t forget to copy the <code>.frag</code> files you want to use and change the name when you load them.</p> <pre><code>void ofApp::draw(){\n    ofShader shader;\n    shader.load(\"\",\"shader.frag\");\n\n    shader.begin();\n    shader.setUniform1f(\"u_time\", ofGetElapsedTimef());\n    shader.setUniform2f(\"u_resolution\", ofGetWidth(), ofGetHeight());\n    ofRect(0,0,ofGetWidth(), ofGetHeight());\n    shader.end();\n}\n</code></pre> <p>If you want to use the full set of uniforms contain on the specs of GlslViewer and GlslCanvas in a more simple way on OpenFrameworks I recommend using the ofxShader addon which will also have support for multiple buffers, material shaders, hotreload and automatic conversion for OpenGL ES in the Raspberry Pi. And your code will be as simple as doing</p> <pre><code>//--------------------------------------------------------------\nvoid ofApp::setup(){\n    ofDisableArbTex();\n\n    sandbox.allocate(ofGetWidth(), ofGetHeight());\n    sandbox.load(\"grayscott.frag\");\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    sandbox.render();\n    sandbox.draw(0, 0);\n}\n</code></pre> <p>For more information about shaders in openFrameworks go to this excellent tutorial made by Joshua Noble.</p>"},{"location":"Frontend/shader/04/README-ch/","title":"4","text":""},{"location":"Frontend/shader/04/README-ch/#shader","title":"\u8fd0\u884c\u4f60\u7684 shader","text":"<p>\u6211\u5236\u4f5c\u4e86\u4e00\u5957\u5de5\u5177\u751f\u6001\u7cfb\u7edf\uff0c\u7528\u4e8e\u521b\u5efa\u3001\u663e\u793a\u3001\u5206\u4eab\u4e0e\u4f7f\u7528 shader\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u672c\u4e66\u7ed3\u6784\u53ca\u6211\u827a\u672f\u5b9e\u8df5\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e9b\u5de5\u5177\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u65e0\u9700\u66f4\u6539\u4ee3\u7801\u5c31\u80fd\u5728 Linux\u3001MacOS\u3001Windows\u3001\u6811\u8393\u6d3e \u548c\u6d4f\u89c8\u5668\u4e0a\u8868\u73b0\u4e00\u81f4\u3002</p>"},{"location":"Frontend/shader/04/README-ch/#shader_1","title":"\u5728\u6d4f\u89c8\u5668\u4e0a\u8fd0\u884c\u4f60\u7684 shader","text":"<p>\u663e\u793a: \u672c\u4e66\u4e2d\u6240\u6709\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u7528 glslCanvas \u6765\u663e\u793a\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u8fd0\u884c\u72ec\u7acb\u7684 shader \u7a0b\u5e8f\u5c31\u53d8\u5f97\u975e\u5e38\u7b80\u5355.</p> <pre><code>&lt;canvas class=\"glslCanvas\" data-fragment-url=\u201cyourShader.frag\" data-textures=\u201cyourInputImage.png\u201d width=\"500\" height=\"500\"&gt;&lt;/canvas&gt;\n</code></pre> <p>\u5982\u4f60\u6240\u89c1, \u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7c7b\u540d\u4e3a <code>class=\"glslCanvas\"</code> \u7684 <code>canvas</code> \u5143\u7d20\uff0c\u5e76\u5c06\u4f60\u7684 shader \u94fe\u63a5\u653e\u5728  <code>data-fragment-url</code> \u4e2d. \u5728 \u8fd9\u91cc \u53ef\u4ee5\u4e86\u89e3\u66f4\u591a.</p> <p>\u4f60\u53ef\u80fd\u4f1a\u50cf\u6211\u4e00\u6837\u60f3\u8981\u4ece\u547d\u4ee4\u884c\u76f4\u63a5\u8fd0\u884c shader\uff0c\u90a3\u4f60\u9700\u8981\u770b\u770b glslViewer\u3002\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5c06 shader \u653e\u5230  <code>bash</code> \u811a\u672c\u6216 unix \u7ba1\u9053\u91cc\uff0c\u5e76\u4e14\u50cf ImageMagick \u4e00\u6837\u4f7f\u7528\u5b83\u3002\u6b64\u5916\uff0cglslViewer \u4e5f\u662f\u4e00\u4e2a\u5728 \u6811\u8393\u6d3e \u4e0a\u7f16\u8bd1 shader \u7684\u597d\u529e\u6cd5, \u8fd9\u5c31\u662f openFrame.io \u7528\u5b83\u6765\u5c55\u793ashader \u4f5c\u54c1\u7684\u539f\u56e0\u3002\u5728 \u8fd9\u91cc \u53ef\u4ee5\u4e86\u89e3\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u66f4\u591a\u4fe1\u606f\u3002</p> <pre><code>glslViewer yourShader.frag yourInputImage.png \u2014w 500 -h 500 -s 1 -o yourOutputImage.png\n</code></pre> <p>\u521b\u5efa: \u4e3a\u4e86\u4ecb\u7ecd shader \u7f16\u7801\u7684\u7ecf\u9a8c\uff0c\u6211\u5236\u4f5c\u4e86\u5728\u7ebf\u7f16\u8f91\u5668 glslEditor\u3002\u672c\u4e66\u7684\u5b9e\u4f8b\u4e2d\u5185\u5d4c\u4e86\u8fd9\u4e2a\u7f16\u8f91\u5668\u3002\u8fd9\u4e2a\u7f16\u8f91\u5668\u6709\u5f88\u591a\u597d\u7528\u7684\u5c0f\u7ec4\u4ef6\uff0c\u4f7f\u7f16\u5199 glsl \u4ee3\u7801\u7684\u4f53\u9a8c\u66f4\u52a0\u76f4\u89c2\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728 editor.thebookofshaders.com/ \u4e0a\u5c06\u5176\u4f5c\u4e3a\u72ec\u7acb\u7684 Web \u5e94\u7528\u8fd0\u884c\u3002\u5728 \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u3002</p> <p></p> <p>\u5982\u679c\u4f60\u66f4\u559c\u6b22\u7528 SublimeText \u79bb\u7ebf\u7f16\u7a0b\uff0c\u4f60\u53ef\u4ee5\u5b89\u88c5 package for glslViewer\u3002 \u5728 \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a.</p> <p></p> <p>\u5206\u4eab: \u5728\u7ebf\u7f16\u8f91\u5668 (editor.thebookofshaders.com/) \u53ef\u4ee5\u5206\u4eab\u4f60\u7684 shader\uff01\u5185\u5d4c\u7248\u548c\u72ec\u7acb\u7248\u90fd\u6709\u5bfc\u51fa\u6309\u94ae\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6309\u94ae\u83b7\u5f97 shader \u7684\u552f\u4e00\u94fe\u63a5\u3002\u7f16\u8f91\u5668\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 shader \u5bfc\u51fa\u5230 openFrame.io\u3002</p> <p></p> <p>\u4f7f\u7528: \u5206\u4eab\u4ee3\u7801\u53ea\u662f\u5206\u4eab shader \u4f5c\u54c1\u7684\u5f00\u59cb\uff01\u9664\u4e86\u5bfc\u51fa\u5230 openFrame.io\uff0c\u6211\u8fd8\u5236\u4f5c\u4e86\u4f7f\u7528 shader \u7684\u5de5\u5177 glslGallery\uff0c\u5b83\u53ef\u4ee5\u5c06 shader \u653e\u5165\u753b\u5eca\u4e2d\uff0c\u4ee5\u4fbf\u5d4c\u5165\u5230\u4efb\u4f55\u7f51\u7ad9. \u5728 \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a.</p> <p></p>"},{"location":"Frontend/shader/04/README-ch/#shader_2","title":"\u5728\u4f60\u559c\u6b22\u7684\u6846\u67b6\u4e0a\u8fd0\u884c\u4f60\u7684 shader","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528\u8fc7\u8fd9\u4e9b\u8fd9\u4e9b\u6846\u67b6: Processing, Three.js, OpenFrameworks \u6216 SFML, \u4f60\u53ef\u80fd\u66f4\u613f\u610f\u5728\u4f60\u89c9\u5f97\u8212\u670d\u7684\u8fd9\u4e9b\u5e73\u53f0\u4e0a\u7f16\u5199 shader\u3002\u4e0b\u9762\u5c06\u4f1a\u4ecb\u7ecd\u5728\u8fd9\u4e9b\u6846\u67b6\u4e2d\uff0c\u7528\u672c\u4e66\u8303\u5f0f\u7f16\u5199 shader \u7684\u65b9\u6cd5\u3002 (\u5728 \u672c\u7ae0\u8282\u7684 GitHub \u4ed3\u5e93\u4e2d, \u4f60\u80fd\u627e\u5230\u8fd9\u4e09\u4e2a\u6846\u67b6\u7684\u5b8c\u6574\u6e90\u7801.)</p>"},{"location":"Frontend/shader/04/README-ch/#threejs","title":"Three.js","text":"<p>\u4e3a\u4eba\u8c26\u900a\u800c\u975e\u5e38\u6709\u624d\u534e\u7684 Ricardo Cabello (\u4e5f\u5c31\u662f MrDoob )\u548c\u8bb8\u591a\u8d21\u732e\u8005 \u4e00\u8d77\u642d\u4e86\u53ef\u80fd\u662f WebGL \u6700\u77e5\u540d\u7684\u5e73\u53f0\uff0cThree.js\u3002\u4f60\u53ef\u4ee5\u627e\u5230\u65e0\u6570\u7a0b\u5e8f\u793a\u4f8b\uff0c\u6559\u7a0b\uff0c\u4e66\u7c4d\uff0c\u6559\u4f60\u5982\u4f55\u7528\u8fd9\u4e2a JavaScript \u5e93\u505a\u51fa\u9177\u70ab\u7684 3D \u56fe\u50cf\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f60\u9700\u8981\u7684\u4f8b\u5b50\uff0c\u6559\u4f60\u7528 three.js \u73a9\u8f6c shader\u3002\u6ce8\u610f <code>id=\"fragmentShader\"</code>\u811a\u672c\uff0c\u4f60\u8981\u628a\u4e0b\u9762\u7684\u4ee3\u7801\u62f7\u5230\u91cc\u9762\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a HTML \u548c JS \u7684\u793a\u4f8b\uff0c</p> <pre><code>&lt;body&gt;\n    &lt;div id=\"container\"&gt;&lt;/div&gt;\n    &lt;script src=\"js/three.min.js\"&gt;&lt;/script&gt;\n    &lt;script id=\"vertexShader\" type=\"x-shader/x-vertex\"&gt;\n        void main() {\n            gl_Position = vec4( position, 1.0 );\n        }\n    &lt;/script&gt;\n    &lt;script id=\"fragmentShader\" type=\"x-shader/x-fragment\"&gt;\n        uniform vec2 u_resolution;\n        uniform float u_time;\n\n        void main() {\n            vec2 st = gl_FragCoord.xy/u_resolution.xy;\n            gl_FragColor=vec4(st.x,st.y,0.0,1.0);\n        }\n    &lt;/script&gt;\n    &lt;script&gt;\n        var container;\n        var camera, scene, renderer, clock;\n        var uniforms;\n\n        init();\n        animate();\n\n        function init() {\n            container = document.getElementById( 'container' );\n\n            camera = new THREE.Camera();\n            camera.position.z = 1;\n\n            scene = new THREE.Scene();\n            clock = new THREE.Clock();\n\n            var geometry = new THREE.PlaneBufferGeometry( 2, 2 );\n\n            uniforms = {\n                u_time: { type: \"f\", value: 1.0 },\n                u_resolution: { type: \"v2\", value: new THREE.Vector2() }\n            };\n\n            var material = new THREE.ShaderMaterial( {\n                uniforms: uniforms,\n                vertexShader: document.getElementById( 'vertexShader' ).textContent,\n                fragmentShader: document.getElementById( 'fragmentShader' ).textContent\n            } );\n\n            var mesh = new THREE.Mesh( geometry, material );\n            scene.add( mesh );\n\n            renderer = new THREE.WebGLRenderer();\n            renderer.setPixelRatio( window.devicePixelRatio );\n\n            container.appendChild( renderer.domElement );\n\n            onWindowResize();\n            window.addEventListener( 'resize', onWindowResize, false );\n        }\n\n        function onWindowResize( event ) {\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            uniforms.u_resolution.value.x = renderer.domElement.width;\n            uniforms.u_resolution.value.y = renderer.domElement.height;\n        }\n\n        function animate() {\n            requestAnimationFrame( animate );\n            render();\n        }\n\n        function render() {\n            uniforms.u_time.value += clock.getDelta();\n            renderer.render( scene, camera );\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Frontend/shader/04/README-ch/#processing","title":"Processing","text":"<p>2001\u5e74\u7531Ben Fry \u548c Casey Reas \u521b\u5efa\uff0cProcessing\u662f\u4e00\u4e2a\u6781\u5176\u7b80\u7ea6\u800c\u5f3a\u5927\u7684\u73af\u5883\uff0c\u975e\u5e38\u9002\u5408\u521d\u5c1d\u4ee3\u7801\u7684\u4eba\uff08\u81f3\u5c11\u5bf9\u4e8e\u6211\u6765\u662f\u8fd9\u6837\uff09\u3002\u5173\u4e8e OpenGL \u548c\u89c6\u9891\uff0cAndres Colubri\u4e3a Processing \u5e73\u53f0\u505a\u4e86\u5f88\u91cd\u8981\u7684\u66f4\u65b0\uff0c\u4f7f\u5f97\u73af\u5883\u975e\u5e38\u53cb\u597d\uff0c\u73a9 GLSL shader \u6bd4\u8d77\u4ee5\u524d\u5927\u5927\u5bb9\u6613\u4e86\u3002Processing \u4f1a\u5728\u4f60\u7684 sketch \u7684 <code>data</code> \u6587\u4ef6\u5939\u641c\u7d22\u540d\u4e3a <code>\"shader.frag\"</code> \u7684\u6587\u4ef6\u3002\u8bb0\u5f97\u628a\u8fd9\u91cc\u7684\u793a\u4f8b\u4ee3\u7801\u62f7\u5230\u4f60\u7684\u6587\u4ef6\u5939\u91cc\u7136\u540e\u91cd\u547d\u540d shader\u3002</p> <pre><code>PShader shader;\n\nvoid setup() {\n  size(640, 360, P2D);\n  noStroke();\n\n  shader = loadShader(\"shader.frag\");\n}\n\nvoid draw() {\n  shader.set(\"u_resolution\", float(width), float(height));\n  shader.set(\"u_mouse\", float(mouseX), float(mouseY));\n  shader.set(\"u_time\", millis() / 1000.0);\n  shader(shader);\n  rect(0,0,width,height);\n}\n</code></pre> <p>\u5728 2.1 \u7248\u4e4b\u524d\u7684\u7248\u672c\u8fd0\u884c shader\uff0c\u4f60\u9700\u8981\u5728\u4f60\u7684 shader \u6587\u4ef6\u5f00\u5934\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a  <code>#define PROCESSING_COLOR_SHADER</code>\u3002\u6240\u4ee5\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u662f\u8fd9\u6837\uff1a</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PROCESSING_COLOR_SHADER\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.st/u_resolution;\n    gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n}\n</code></pre> <p>\u66f4\u591a Processing \u7684 shader \u6559\u7a0b\u6233 tutorial\u3002</p>"},{"location":"Frontend/shader/04/README-ch/#openframeworks","title":"openFrameworks","text":"<p>\u6bcf\u4e2a\u4eba\u90fd\u6709\u81ea\u5df1\u7684\u8212\u9002\u533a\uff0c\u6211\u7684\u5219\u662fopenFrameworks community\u3002\u8fd9\u4e2a C++ \u6846\u67b6\u6253\u5305\u4e86 OpenGL \u548c\u5176\u4ed6\u5f00\u6e90 C++ \u5e93\u3002\u5728\u5f88\u591a\u65b9\u9762\u5b83\u548c Processing \u975e\u5e38\u50cf\uff0c\u4f46\u662f\u660e\u663e\u548c C++ \u7f16\u8bd1\u5668\u6253\u4ea4\u9053\u4e00\u5b9a\u6bd4\u8f83\u9ebb\u70e6\u3002\u548c Processing \u5f88\u50cf\u5730\uff0copenFrameworks \u4f1a\u5728\u4f60\u7684 data \u6587\u4ef6\u5939\u91cc\u5bfb\u627e shader \u6587\u4ef6\uff0c\u6240\u4ee5\u4e0d\u8981\u5fd8\u8bb0\u628a\u4f60\u7684\u540e\u7f00 <code>.frag</code> \u7684\u6587\u4ef6\u62f7\u8fdb\u53bb\uff0c\u52a0\u8f7d\u7684\u65f6\u5019\u8bb0\u5f97\u6539\u540d\u3002</p> <pre><code>void ofApp::draw(){\n    ofShader shader;\n    shader.load(\"\",\"shader.frag\");\n\n    shader.begin();\n    shader.setUniform1f(\"u_time\", ofGetElapsedTimef());\n    shader.setUniform2f(\"u_resolution\", ofGetWidth(), ofGetHeight());\n    ofRect(0,0,ofGetWidth(), ofGetHeight());\n    shader.end();\n}\n</code></pre> <p>\u5173\u4e8e shader \u5728 openFrameworks \u7684\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003\u8fd9\u7bc7excellent tutorial\uff0c\u4f5c\u8005\u662f Joshua Noble\u3002</p>"},{"location":"Frontend/shader/04/TITLE-pt/","title":"TITLE pt","text":""},{"location":"Frontend/shader/04/TITLE-pt/#rodando-o-seu-shader","title":"Rodando o seu shader","text":""},{"location":"Frontend/shader/04/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/04/TITLE/#running-your-shader","title":"Running your shader","text":""},{"location":"Frontend/shader/04/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/04/tmp/#running-your-shader","title":"Running your shader","text":"<p>As part of the construction of this book and my art practice I made an ecosystem of tools to create, display, share and curate shaders. These tools work consistently across Linux, MacOS, Windows and Raspberry Pi and browsers without the need of changing your code.</p>"},{"location":"Frontend/shader/04/tmp/#running-your-shaders-on-the-browser","title":"Running your shaders on the browser","text":"<p>Display: all live examples in this book are displayed using glslCanvas which makes the process of running standalone shader incredibly easy.</p> <pre><code>&lt;canvas class=\"glslCanvas\" data-fragment-url=\u201cyourShader.frag\" data-textures=\u201cyourInputImage.png\u201d width=\"500\" height=\"500\"&gt;&lt;/canvas&gt;\n</code></pre> <p>As you can see, it just needs a <code>canvas</code> element with <code>class=\"glslCanvas\"</code> and the url to your shader in the <code>data-fragment-url</code>. Learn more about it here.</p> <p>If you are like me, you will probably want to run shaders directly from the console, in that case you should check out glslViewer. This application allows you to incorporate shaders into your <code>bash</code> scripts or unix pipelines and use it in a similar way to ImageMagick. Also glslViewer is a great way to compile shaders on your Raspberry Pi, which is the reason openFrame.io uses it to display shader artwork. Learn more about this application here.</p> <pre><code>glslViewer yourShader.frag yourInputImage.png \u2014w 500 -h 500 -E screenshot,yourOutputImage.png\n</code></pre> <p>Create: in order to illuminate the experience of coding shaders I made an online editor called glslEditor. This editor is embedded on the book's live examples, it brings a series of handy widgets to make more tangible the abstract experience of working with glsl code. You can also run it as a standalone web application from editor.thebookofshaders.com/. Learn more about it here.</p> <p></p> <p>If you prefer to work offline using SublimeText you can install this package for glslViewer. Learn more about it here.</p> <p></p> <p>Share: the online editor (editor.thebookofshaders.com/) can share your shaders! Both the embedded and standalone version have an export button where you can get an unique URL's to your shader. Also it has the ability to export directly to an openFrame.io.</p> <p></p> <p>Curate: Sharing your code is the beginning of you sharing your shader as artwork! Beside the option to export to openFrame.io I made a tool to curate your shaders into a gallery that can be embedded on any site, it\u2019s name is glslGallery. Learn more here.</p> <p></p>"},{"location":"Frontend/shader/04/tmp/#running-your-shaders-on-your-favorite-framework","title":"Running your shaders on your favorite framework","text":"<p>In case you already have experience programming in a framework like: Processing, Three.js, OpenFrameworks or SFML, you're probably excited to try shaders on these platforms you feel comfortable with. The following are examples of how to set shaders in some popular frameworks with the same uniforms that we are going to use throughout this book. (In the GitHub repository for this chapter, you'll find the full source code for these three frameworks.)</p>"},{"location":"Frontend/shader/04/tmp/#in-threejs","title":"In Three.js","text":"<p>The brilliant and very humble Ricardo Cabello (aka MrDoob ) has been developing along with other contributors probably one of the most famous frameworks for WebGL, called Three.js. You will find a lot of examples, tutorials and books that teach you how to use this JavaScript library to make cool 3D graphics.</p> <p>Below is an example of the HTML and JS you need to get started with shaders in three.js. Pay attention to the <code>id=\"fragmentShader\"</code> script, here is where you can copy the shaders you find in this book.</p> <pre><code>&lt;body&gt;\n    &lt;div id=\"container\"&gt;&lt;/div&gt;\n    &lt;script src=\"js/three.min.js\"&gt;&lt;/script&gt;\n    &lt;script id=\"vertexShader\" type=\"x-shader/x-vertex\"&gt;\n        void main() {\n            gl_Position = vec4( position, 1.0 );\n        }\n    &lt;/script&gt;\n    &lt;script id=\"fragmentShader\" type=\"x-shader/x-fragment\"&gt;\n        uniform vec2 u_resolution;\n        uniform float u_time;\n\n        void main() {\n            vec2 st = gl_FragCoord.xy/u_resolution.xy;\n            gl_FragColor=vec4(st.x,st.y,0.0,1.0);\n        }\n    &lt;/script&gt;\n    &lt;script&gt;\n        var container;\n        var camera, scene, renderer, clock;\n        var uniforms;\n\n        init();\n        animate();\n\n        function init() {\n            container = document.getElementById( 'container' );\n\n            camera = new THREE.Camera();\n            camera.position.z = 1;\n\n            scene = new THREE.Scene();\n            clock = new THREE.Clock();\n\n            var geometry = new THREE.PlaneBufferGeometry( 2, 2 );\n\n            uniforms = {\n                u_time: { type: \"f\", value: 1.0 },\n                u_resolution: { type: \"v2\", value: new THREE.Vector2() },\n                u_mouse: { type: \"v2\", value: new THREE.Vector2() }\n            };\n\n            var material = new THREE.ShaderMaterial( {\n                uniforms: uniforms,\n                vertexShader: document.getElementById( 'vertexShader' ).textContent,\n                fragmentShader: document.getElementById( 'fragmentShader' ).textContent\n            } );\n\n            var mesh = new THREE.Mesh( geometry, material );\n            scene.add( mesh );\n\n            renderer = new THREE.WebGLRenderer();\n            renderer.setPixelRatio( window.devicePixelRatio );\n\n            container.appendChild( renderer.domElement );\n\n            onWindowResize();\n            window.addEventListener( 'resize', onWindowResize, false );\n\n            document.onmousemove = function(e){\n              uniforms.u_mouse.value.x = e.pageX\n              uniforms.u_mouse.value.y = e.pageY\n            }\n        }\n\n        function onWindowResize( event ) {\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            uniforms.u_resolution.value.x = renderer.domElement.width;\n            uniforms.u_resolution.value.y = renderer.domElement.height;\n        }\n\n        function animate() {\n            requestAnimationFrame( animate );\n            render();\n        }\n\n        function render() {\n            uniforms.u_time.value += clock.getDelta();\n            renderer.render( scene, camera );\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Frontend/shader/04/tmp/#in-processing","title":"In Processing","text":"<p>Started by Ben Fry and Casey Reas in 2001, Processing is an extraordinarily simple and powerful environment in which to take your first steps in code (it was for me at least). Andres Colubri has made important updates to the OpenGL and video in Processing, making it easier than ever to use and play with GLSL shaders in this friendly environment. Processing will search for the shader named <code>\"shader.frag\"</code> in the <code>data</code> folder of the sketch. Be sure to copy the examples you find here into that folder and rename the file.</p> <pre><code>PShader shader;\n\nvoid setup() {\n  size(640, 360, P2D);\n  noStroke();\n\n  shader = loadShader(\"shader.frag\");\n}\n\nvoid draw() {\n  shader.set(\"u_resolution\", float(width), float(height));\n  shader.set(\"u_mouse\", float(mouseX), float(mouseY));\n  shader.set(\"u_time\", millis() / 1000.0);\n  shader(shader);\n  rect(0,0,width,height);\n}\n</code></pre> <p>In order for the shader to work on versions previous to 2.1, you need to add the following line at the beginning of your shader: <code>#define PROCESSING_COLOR_SHADER</code>. So that it looks like this:</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PROCESSING_COLOR_SHADER\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.st/u_resolution;\n    gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n}\n</code></pre> <p>For more information about shaders in Processing check out this tutorial.</p>"},{"location":"Frontend/shader/04/tmp/#in-openframeworks","title":"In openFrameworks","text":"<p>Everybody has a place where they feel comfortable, in my case, that\u2019s still the openFrameworks community. This C++ framework wraps around OpenGL and other open source C++ libraries. In many ways it's very similar to Processing, but with the obvious complications of dealing with C++ compilers. In the same way as Processing, openFrameworks will search for your shader files in the data folder, so don\u2019t forget to copy the <code>.frag</code> files you want to use and change the name when you load them.</p> <pre><code>void ofApp::draw(){\n    ofShader shader;\n    shader.load(\"\",\"shader.frag\");\n\n    shader.begin();\n    shader.setUniform1f(\"u_time\", ofGetElapsedTimef());\n    shader.setUniform2f(\"u_resolution\", ofGetWidth(), ofGetHeight());\n    ofRect(0,0,ofGetWidth(), ofGetHeight());\n    shader.end();\n}\n</code></pre> <p>If you want to use the full set of uniforms contain on the specs of GlslViewer and GlslCanvas in a more simple way on OpenFrameworks I recommend using the ofxShader addon which will also have support for multiple buffers, material shaders, hotreload and automatic conversion for OpenGL ES in the Raspberry Pi. And your code will be as simple as doing</p> <pre><code>//--------------------------------------------------------------\nvoid ofApp::setup(){\n    ofDisableArbTex();\n\n    sandbox.allocate(ofGetWidth(), ofGetHeight());\n    sandbox.load(\"grayscott.frag\");\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    sandbox.render();\n    sandbox.draw(0, 0);\n}\n</code></pre> <p>For more information about shaders in openFrameworks go to this excellent tutorial made by Joshua Noble.</p>"},{"location":"Frontend/shader/05/","title":"Algorithmic drawing","text":""},{"location":"Frontend/shader/05/#shaping-functions","title":"Shaping functions","text":"<p>This chapter could be named \"Mr. Miyagi's fence lesson.\" Previously, we mapped the normalized position of x and y to the red and green channels. Essentially we made a function that takes a two dimensional vector (x and y) and returns a four dimensional vector (r, g, b and a). But before we go further transforming data between dimensions we need to start simpler... much simpler. That means understanding how to make one dimensional functions. The more energy and time you spend learning and mastering this, the stronger your shader karate will be.</p> <p></p> <p>The following code structure is going to be our fence. In it, we visualize the normalized value of the x coordinate (<code>st.x</code>) in two ways: one with brightness (observe the nice gradient from black to white) and the other by plotting a green line on top (in that case the x value is assigned directly to y). Don't focus too much on the plot function, we will go through it in more detail in a moment.</p> <p>Quick Note: The <code>vec3</code> type constructor \"understands\" that you want to assign the three color channels with the same value, while <code>vec4</code> understands that you want to construct a four dimensional vector with a three dimensional one plus a fourth value (in this case the value that controls the alpha or opacity). See for example lines 19 and 25 above.</p> <p>This code is your fence; it's important to observe and understand it. You will come back over and over to this space between 0.0 and 1.0. You will master the art of blending and shaping this line.</p> <p>This one-to-one relationship between  x and y (or the brightness) is known as linear interpolation. From here we can use some mathematical functions to shape the line. For example we can raise x to the power of 5 to make a curved line.</p> <p>Interesting, right? On line 22 try different exponents: 20.0, 2.0, 1.0, 0.0, 0.2 and 0.02 for example. Understanding this relationship between the value and the exponent will be very helpful. Using these types of mathematical functions here and there will give you expressive control over your code, a sort of data acupuncture that let you control the flow of values.</p> <p><code>pow()</code> is a native function in GLSL and there are many others. Most of them are accelerated at the level of the hardware, which means if they are used in the right way and with discretion they will make your code faster.</p> <p>Replace the power function on line 22. Try other ones like: <code>exp()</code>, <code>log()</code> and <code>sqrt()</code>. Some of these functions are more interesting when you play with them using PI. You can see on line 8 that I have defined a macro that will replace any use of <code>PI</code> with the value <code>3.14159265359</code>.</p>"},{"location":"Frontend/shader/05/#step-and-smoothstep","title":"Step and Smoothstep","text":"<p>GLSL also has some unique native interpolation functions that are hardware accelerated.</p> <p>The <code>step()</code> interpolation receives two parameters. The first one is the limit or threshold, while the second one is the value we want to check or pass. Any value under the limit will return <code>0.0</code> while everything above the limit will return <code>1.0</code>.</p> <p>Try changing this threshold value on line 20 of the following code.</p> <p>The other unique function is known as <code>smoothstep()</code>. Given a range of two numbers and a value, this function will interpolate the value between the defined range. The two first parameters are for the beginning and end of the transition, while the third is for the value to interpolate.</p> <p>In the previous example, on line 12, notice that we\u2019ve been using smoothstep to draw the green line on the <code>plot()</code> function. For each position along the x axis this function makes a bump at a particular value of y. How? By connecting two <code>smoothstep()</code> together. Take a look at the following function, replace it for line 20 above and think of it as a vertical cut. The background does look like a line, right?</p> <pre><code>float y = smoothstep(0.2,0.5,st.x) - smoothstep(0.5,0.8,st.x);\n</code></pre>"},{"location":"Frontend/shader/05/#sine-and-cosine","title":"Sine and Cosine","text":"<p>When you want to use some math to animate, shape or blend values, there is nothing better than being friends with sine and cosine.</p> <p>These two basic trigonometric functions work together to construct circles that are as handy as MacGyver\u2019s Swiss army knife. It\u2019s important to know how they behave and in what ways they can be combined. In a nutshell, given an angle (in radians) they will return the correct position of x (cosine) and y (sine) of a point on the edge of a circle with a radius equal to 1. But, the fact that they return normalized values (values between -1 and 1) in such a smooth way makes them an incredible tool.</p> <p></p> <p>While it's difficult to describe all the relationships between trigonometric functions and circles, the above animation does a beautiful job of visually summarizing these relationships.</p> <p>Take a careful look at this sine wave. Note how the y values flow smoothly between +1 and -1. As we saw in the time example in the previous chapter, you can use this rhythmic behavior of <code>sin()</code> to animate properties. If you are reading this example in a browser you will see that you can change the code in the formula above to watch how the wave changes. (Note: don't forget the semicolon at the end of the lines.)</p> <p>Try the following exercises and notice what happens:</p> <ul> <li> <p>Add time (<code>u_time</code>) to x before computing the <code>sin</code>. Internalize that motion along x.</p> </li> <li> <p>Multiply x by <code>PI</code> before computing the <code>sin</code>. Note how the two phases shrink so each cycle repeats every 2 integers.</p> </li> <li> <p>Multiply time (<code>u_time</code>) by x before computing the <code>sin</code>. See how the frequency between phases becomes more and more compressed. Note that u_time may have already become very large, making the graph hard to read.</p> </li> <li> <p>Add 1.0 to <code>sin(x)</code>. See how all the wave is displaced up and now all values are between 0.0 and 2.0.</p> </li> <li> <p>Multiply <code>sin(x)</code> by 2.0. See how the amplitude doubles in size.</p> </li> <li> <p>Compute the absolute value (<code>abs()</code>) of <code>sin(x)</code>. It looks like the trace of a bouncing ball.</p> </li> <li> <p>Extract just the fraction part (<code>fract()</code>) of the resultant of <code>sin(x)</code>.</p> </li> <li> <p>Add the higher integer (<code>ceil()</code>) and the smaller integer (<code>floor()</code>) of the resultant of <code>sin(x)</code> to get a digital wave of 1 and -1 values.</p> </li> </ul>"},{"location":"Frontend/shader/05/#some-extra-useful-functions","title":"Some extra useful functions","text":"<p>At the end of the last exercise we introduced some new functions. Now it\u2019s time to experiment with each one by uncommenting the lines below one at a time. Get to know these functions and study how they behave. I know, you are wondering... why? A quick google search on \"generative art\" will tell you. Keep in mind that these functions are our fence. We are mastering the movement in one dimension, up and down. Soon, it will be time for two, three and four dimensions!</p> <p></p>"},{"location":"Frontend/shader/05/#advance-shaping-functions","title":"Advance shaping functions","text":"<p>Golan Levin has great documentation of more complex shaping functions that are extraordinarily helpful. Porting them to GLSL is a really smart move, to start building your own resource of snippets of code.</p> <ul> <li> <p>Polynomial Shaping Functions: www.flong.com/archive/texts/code/shapers_poly</p> </li> <li> <p>Exponential Shaping Functions: www.flong.com/archive/texts/code/shapers_exp</p> </li> <li> <p>Circular &amp; Elliptical Shaping Functions: www.flong.com/archive/texts/code/shapers_circ</p> </li> <li> <p>Bezier and Other Parametric Shaping Functions: www.flong.com/archive/texts/code/shapers_bez</p> </li> </ul> <p>Like chefs that collect spices and exotic ingredients, digital artists and creative coders have a particular love of working on their own shaping functions.</p> <p>I\u00f1igo Quiles has a great collection of useful functions. After reading this article take a look at the following translation of these functions to GLSL. Pay attention to the small changes required, like putting the \".\" (dot) on floating point numbers and using the GLSL name for C functions; for example instead of <code>powf()</code> use <code>pow()</code>:</p> <p>To keep your motivation up, here is an elegant example (made by Danguafer) of mastering the shaping-functions karate.</p> <p>In the Next &gt;&gt; chapter we will start using our new moves. First with mixing colors and then drawing shapes.</p>"},{"location":"Frontend/shader/05/#exercise","title":"Exercise","text":"<p>Take a look at the following table of equations made by Kynd. See how he is combining functions and their properties to control the values between 0.0 and 1.0. Now it's time for you to practice by replicating these functions. Remember the more you practice the better your karate will be.</p> <p></p>"},{"location":"Frontend/shader/05/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li> <p>LYGIA is a shader library of reusable functions that can be include easily on your projects. It's very granular, designed for reusability, performance and flexibility. And can be easily be added to any projects and frameworks. It's divided in different sections and it have an entire one for math operations</p> </li> <li> <p>GraphToy: once again I\u00f1igo Quilez made a tool to visualize GLSL functions in WebGL.</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/05/README-ch/","title":"\u7b97\u6cd5\u7ed8\u753b","text":""},{"location":"Frontend/shader/05/README-ch/#_2","title":"\u9020\u578b\u51fd\u6570","text":"<p>\u8fd9\u4e00\u7ae0\u5e94\u8be5\u53eb\u505a\u5bab\u57ce\u5148\u751f\u7684\u7c89\u5237\u8bfe\uff08\u6765\u81ea\u7535\u5f71\u9f99\u5a01\u5c0f\u5b50\u7684\u7ecf\u5178\u6865\u6bb5\uff09\u3002\u4e4b\u524d\u6211\u4eec\u628a\u89c4\u8303\u5316\u540e\u7684 x,y \u5750\u6807\u6620\u5c04\uff08map\uff09\u5230\u4e86\u7ea2\u8272\u548c\u7eff\u8272\u901a\u9053\u3002\u672c\u8d28\u4e0a\u8bf4\u6211\u4eec\u662f\u5efa\u9020\u4e86\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\uff1a\u8f93\u5165\u4e00\u4e2a\u4e8c\u7ef4\u5411\u91cf\uff08x\uff0cy)\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u56db\u7ef4\u5411\u91cf\uff08r\uff0cg\uff0cb\uff0ca\uff09\u3002\u4f46\u5728\u6211\u4eec\u8de8\u7ef4\u5ea6\u8f6c\u6362\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u4ece\u66f4\u52a0\u2026\u66f4\u52a0\u7b80\u5355\u7684\u5f00\u59cb\u3002\u6211\u4eec\u6765\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u7ef4\u53d8\u91cf\u7684\u51fd\u6570\u3002\u4f60\u82b1\u8d8a\u591a\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u5728\u8fd9\u4e0a\u9762\uff0c\u4f60\u7684 shader \u529f\u592b\u5c31\u8d8a\u5389\u5bb3\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u7ed3\u6784\u5c31\u662f\u6211\u4eec\u7684\u57fa\u672c\u529f\u3002\u5728\u5b83\u4e4b\u4e2d\u6211\u4eec\u5bf9\u89c4\u8303\u5316\u7684 x \u5750\u6807\uff08<code>st.x</code>\uff09\u8fdb\u884c\u53ef\u89c6\u5316\u3002\u6709\u4e24\u79cd\u9014\u5f84\uff1a\u4e00\u79cd\u662f\u7528\u4eae\u5ea6\uff08\u5ea6\u91cf\u4ece\u9ed1\u8272\u5230\u767d\u8272\u7684\u6e10\u53d8\u8fc7\u7a0b\uff09\uff0c\u53e6\u4e00\u79cd\u662f\u5728\u9876\u5c42\u7ed8\u5236\u4e00\u6761\u7eff\u8272\u7684\u7ebf\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b x \u88ab\u76f4\u63a5\u8d4b\u503c\u7ed9 y\uff09\u3002\u4e0d\u7528\u8fc7\u5206\u5728\u610f\u7ed8\u5236\u51fd\u6570\uff0c\u6211\u4eec\u9a6c\u4e0a\u4f1a\u66f4\u52a0\u8be6\u7ec6\u5730\u89e3\u91ca\u5b83\u3002</p> <p>\u7b80\u6ce8 \uff1a<code>vec3</code> \u7c7b\u578b\u6784\u9020\u5668\u201c\u660e\u767d\u201d\u4f60\u60f3\u8981\u628a\u4e00\u4e2a\u503c\u8d4b\u503c\u5230\u989c\u8272\u7684\u4e09\u4e2a\u901a\u9053\u91cc\uff0c\u5c31\u50cf <code>vec4</code> \u660e\u767d\u4f60\u60f3\u8981\u6784\u5efa\u4e00\u4e2a\u56db\u7ef4\u5411\u91cf\uff0c\u4e09\u7ef4\u5411\u91cf\u52a0\u4e0a\u7b2c\u56db\u4e2a\u503c\uff08\u6bd4\u5982\u989c\u8272\u7684\u4e09\u4e2a\u503c\u52a0\u4e0a\u900f\u660e\u5ea6\uff09\u3002\u8bf7\u53c2\u7167\u4e0a\u9762\u793a\u4f8b\u7684\u7b2c 19 \u5230 25 \u884c\u3002</p> <p>\u8fd9\u4e9b\u4ee3\u7801\u5c31\u662f\u4f60\u7684\u57fa\u672c\u529f\uff1b\u9075\u5b88\u548c\u7406\u89e3\u5b83\u975e\u5e38\u91cd\u8981\u3002\u4f60\u5c06\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u5730\u56de\u5230 0.0 \u5230 1.0 \u8fd9\u4e2a\u533a\u95f4\u3002\u4f60\u5c06\u4f1a\u638c\u63e1\u878d\u5408\u4e0e\u6784\u5efa\u8fd9\u4e9b\u4ee3\u7801\u7684\u827a\u672f\u3002</p> <p>\u8fd9\u4e9b x \u4e0e y\uff08\u6216\u4eae\u5ea6\uff09\u4e4b\u95f4\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\u79f0\u4f5c\u7ebf\u6027\u63d2\u503c\uff08linear interpolation\uff09\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u63d2\u503c\u662f\u79bb\u6563\u51fd\u6570\u903c\u8fd1\u7684\u91cd\u8981\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u901a\u8fc7\u51fd\u6570\u5728\u6709\u9650\u4e2a\u70b9\u5904\u7684\u53d6\u503c\u72b6\u51b5\uff0c\u4f30\u7b97\u51fa\u51fd\u6570\u5728\u5176\u4ed6\u70b9\u5904\u7684\u8fd1\u4f3c\u503c\u3002\u56e0\u4e3a\u5bf9\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u5c4f\u5e55\u50cf\u7d20\u662f\u79bb\u6563\u7684\u800c\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5e38\u7528\u63d2\u503c\u6765\u586b\u5145\u56fe\u50cf\u50cf\u7d20\u4e4b\u95f4\u7684\u7a7a\u9699\u3002\uff09\u73b0\u5728\u8d77\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e9b\u6570\u5b66\u51fd\u6570\u6765\u6539\u9020\u8fd9\u4e9b\u4ee3\u7801\u884c\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u6c42 x \u7684 5 \u6b21\u5e42\u7684\u66f2\u7ebf\u3002</p> <p>\u5f88\u6709\u8da3\uff0c\u5bf9\u5427\uff1f\u8bd5\u8bd5\u770b\u628a\u7b2c 19 \u884c\u7684\u6307\u6570\u6539\u4e3a\u4e0d\u540c\u7684\u503c\uff0c\u6bd4\u5982\uff1a20.0\uff0c2.0\uff0c1.0\uff0c0.0\uff0c0.2 \u6216 0.02\u3002\u7406\u89e3\u503c\u548c\u6307\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u4e9b\u6570\u5b66\u51fd\u6570\u53ef\u4ee5\u8ba9\u4f60\u7075\u52a8\u5730\u63a7\u5236\u4f60\u7684\u4ee3\u7801\uff0c\u5c31\u50cf\u662f\u7ed9\u6570\u636e\u505a\u9488\u7078\u4e00\u6837\u3002</p> <p><code>pow()</code> \uff08\u6c42x\u7684y\u6b21\u5e42\uff09\u662f GLSL \u7684\u4e00\u4e2a\u539f\u751f\u51fd\u6570\uff0cGLSL \u6709\u5f88\u591a\u539f\u751f\u51fd\u6570\u3002\u5927\u591a\u6570\u539f\u751f\u51fd\u6570\u90fd\u662f\u786c\u4ef6\u52a0\u901f\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4f60\u6b63\u786e\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u4f60\u7684\u4ee3\u7801\u5c31\u4f1a\u8dd1\u5f97\u66f4\u5feb\u3002</p> <p>\u6362\u6389\u7b2c 19 \u884c\u7684\u5e42\u51fd\u6570\uff0c\u8bd5\u8bd5\u770b<code>exp()</code>\uff08\u4ee5\u81ea\u7136\u5e38\u6570e\u4e3a\u5e95\u7684\u6307\u6570\u51fd\u6570\uff09\uff0c<code>log()</code>(\u5bf9\u6570\u51fd\u6570) \u548c <code>sqrt()</code>\uff08\u5e73\u65b9\u6839\u51fd\u6570\uff09\u3002\u5f53\u4f60\u7528 Pi \u6765\u73a9\u7684\u65f6\u5019\u6709\u4e9b\u65b9\u7a0b\u4f1a\u53d8\u5f97\u66f4\u6709\u8da3\u3002\u5728\u7b2c 5 \u884c\u6211\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b8f\uff0c\u4f7f\u5f97\u6bcf\u5f53\u7a0b\u5e8f\u8c03\u7528 <code>PI</code> \u7684\u65f6\u5019\u5c31\u7528 <code>3.14159265359</code> \u6765\u66ff\u6362\u5b83\u3002</p>"},{"location":"Frontend/shader/05/README-ch/#step-smoothstep","title":"Step \u548c Smoothstep","text":"<p>GLSL \u8fd8\u6709\u4e00\u4e9b\u72ec\u7279\u7684\u539f\u751f\u63d2\u503c\u51fd\u6570\u53ef\u4ee5\u88ab\u786c\u4ef6\u52a0\u901f\u3002</p> <p><code>step()</code> \u63d2\u503c\u51fd\u6570\u9700\u8981\u8f93\u5165\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u662f\u6781\u9650\u6216\u9608\u503c\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6211\u4eec\u60f3\u8981\u68c0\u6d4b\u6216\u901a\u8fc7\u7684\u503c\u3002\u5bf9\u4efb\u4f55\u5c0f\u4e8e\u9608\u503c\u7684\u503c\uff0c\u8fd4\u56de <code>0.0</code>\uff0c\u5927\u4e8e\u9608\u503c\uff0c\u5219\u8fd4\u56de <code>1.0</code>\u3002</p> <p>\u8bd5\u8bd5\u770b\u6539\u53d8\u4e0b\u8ff0\u4ee3\u7801\u4e2d\u7b2c 20 \u884c\u7684\u503c\u3002</p> <p>\u53e6\u4e00\u4e2a GLSL \u7684\u7279\u6b8a\u51fd\u6570\u662f <code>smoothstep()</code>\u3002\u5f53\u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u7684\u4e0a\u4e0b\u9650\u548c\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5728\u5df2\u6709\u7684\u8303\u56f4\u5185\u7ed9\u51fa\u63d2\u503c\u3002\u524d\u4e24\u4e2a\u53c2\u6570\u89c4\u5b9a\u8f6c\u6362\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u70b9\uff0c\u7b2c\u4e09\u4e2a\u662f\u7ed9\u51fa\u4e00\u4e2a\u503c\u7528\u6765\u63d2\u503c\u3002</p> <p>\u5728\u4e4b\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6ce8\u610f\u7b2c 12 \u884c\uff0c\u6211\u4eec\u7528\u5230 smoothstep \u5728 <code>plot()</code> \u51fd\u6570\u4e2d\u753b\u4e86\u4e00\u6761\u7eff\u8272\u7684\u7ebf\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5bf9\u7ed9\u51fa\u7684 x \u8f74\u4e0a\u7684\u6bcf\u4e2a\u503c\uff0c\u5728\u7279\u5b9a\u7684 y \u503c\u5904\u5236\u9020\u4e00\u4e2a\u51f9\u51f8\u5f62\u53d8\u3002\u5982\u4f55\u505a\u5230\u5462\uff1f\u901a\u8fc7\u628a\u4e24\u4e2a <code>smoothstep()</code> \u8fde\u63a5\u5230\u4e00\u8d77\u3002\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\uff0c\u7528\u5b83\u66ff\u6362\u4e0a\u9762\u7684\u7b2c 20 \u884c\uff0c\u628a\u5b83\u60f3\u6210\u662f\u4e00\u4e2a\u5782\u76f4\u5207\u5272\u3002\u80cc\u666f\u770b\u8d77\u6765\u5f88\u50cf\u4e00\u6761\u7ebf\uff0c\u4e0d\u662f\u5417\uff1f</p> <pre><code>    float y = smoothstep(0.2,0.5,st.x) - smoothstep(0.5,0.8,st.x);\n</code></pre>"},{"location":"Frontend/shader/05/README-ch/#_3","title":"\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570","text":"<p>\u5f53\u4f60\u60f3\u7528\u6570\u5b66\u6765\u5236\u9020\u52a8\u6548\uff0c\u5f62\u6001\u6216\u53bb\u6df7\u5408\u6570\u503c\uff0csin \u548c cos \u5c31\u662f\u4f60\u7684\u6700\u4f73\u4f19\u4f34\u3002</p> <p>\u8fd9\u4e24\u4e2a\u57fa\u7840\u7684\u4e09\u89d2\u51fd\u6570\u662f\u6784\u9020\u5706\u7684\u6781\u4f73\u5de5\u5177\uff0c\u5c31\u50cf\u5f20\u5c0f\u6cc9\u7684\u526a\u5200\u4e00\u6837\u79f0\u624b\u3002\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\u4f60\u9700\u8981\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u8fd0\u8f6c\u7684\uff0c\u8fd8\u6709\u5982\u4f55\u628a\u5b83\u4eec\u7ed3\u5408\u8d77\u6765\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5f53\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u89d2\u5ea6\uff08\u8fd9\u91cc\u91c7\u7528\u5f27\u5ea6\u5236\uff09\uff0c\u5b83\u5c31\u4f1a\u8fd4\u56de\u534a\u5f84\u4e3a\u4e00\u7684\u5706\u4e0a\u4e00\u4e2a\u70b9\u7684 x \u5750\u6807\uff08cos\uff09\u548c y \u5750\u6807\uff08sin\uff09\u3002\u6b63\u56e0\u4e3a sin \u548c cos \u8fd4\u56de\u7684\u662f\u89c4\u8303\u5316\u7684\u503c\uff08\u5373\u503c\u57df\u5728 -1 \u548c 1 \u4e4b\u95f4\uff09\uff0c\u4e14\u5982\u6b64\u6d41\u7545\uff0c\u8fd9\u5c31\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u4e2a\u6781\u5176\u5f3a\u5927\u7684\u5de5\u5177\u3002</p> <p></p> <p>\u5c3d\u7ba1\u63cf\u8ff0\u4e09\u89d2\u51fd\u6570\u548c\u5706\u7684\u5173\u7cfb\u662f\u4e00\u4ef6\u86ee\u56f0\u96be\u7684\u4e8b\u60c5\uff0c\u4e0a\u56fe\u52a8\u753b\u5f88\u68d2\u5730\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u89c6\u89c9\u5316\u5c55\u73b0\u4e86\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> <p>\u4ed4\u7ec6\u770b sin \u66f2\u7ebf\u3002\u89c2\u5bdf y \u503c\u662f\u5982\u4f55\u5e73\u6ed1\u5730\u5728 +1 \u548c -1 \u4e4b\u95f4\u53d8\u5316\u3002\u5c31\u50cf\u4e4b\u524d\u7ae0\u8282\u5173\u4e8e\u7684 time \u7684\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u7528 <code>sin()</code> \u7684\u6709\u8282\u594f\u7684\u53d8\u52a8\u7ed9\u5176\u4ed6\u4e1c\u897f\u52a0\u52a8\u6548\u3002\u5982\u679c\u4f60\u662f\u5728\u7528\u6d4f\u89c8\u5668\u9605\u8bfb\u7684\u8bdd\u4f60\u53ef\u4ee5\u6539\u52a8\u4e0a\u8ff0\u516c\u5f0f\uff0c\u770b\u770b\u66f2\u7ebf\u4f1a\u5982\u4f55\u53d8\u52a8\u3002(\u6ce8\uff1a\u4e0d\u8981\u5fd8\u8bb0\u6bcf\u884c\u6700\u540e\u8981\u52a0\u5206\u53f7\uff01\uff09</p> <p>\u8bd5\u8bd5\u4e0b\u9762\u7684\u5c0f\u7ec3\u4e60\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <ul> <li> <p>\u5728 <code>sin</code> \u91cc\u8ba9 x \u52a0\u4e0a\u65f6\u95f4\uff08<code>u_time</code>\uff09\u3002\u8ba9sin \u66f2\u7ebf\u968f x \u8f74\u52a8\u8d77\u6765\u3002</p> </li> <li> <p>\u5728 <code>sin</code> \u91cc\u7528 <code>PI</code> \u4e58\u4ee5 x\u3002\u6ce8\u610f sin \u66f2\u7ebf\u4e0a\u4e0b\u6ce2\u52a8\u7684\u4e24\u90e8\u5206\u5982\u4f55\u6536\u7f29\u4e86\uff0c\u73b0\u5728 sin \u66f2\u7ebf\u6bcf\u4e24\u4e2a\u6574\u6570\u5faa\u73af\u4e00\u6b21\u3002</p> </li> <li> <p>\u5728 <code>sin</code> \u91cc\u7528\u65f6\u95f4\uff08 <code>u_time</code>)\u4e58\u4ee5 x\u3002\u89c2\u5bdf\u5404\u9636\u6bb5\u7684\u5faa\u73af\u5982\u4f55\u53d8\u5f97\u8d8a\u6765\u8d8a\u9891\u7e41\u3002\u6ce8\u610f u_time \u53ef\u80fd\u5df2\u7ecf\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u4f7f\u5f97\u56fe\u50cf\u96be\u4ee5\u8fa8\u8ba4\u3002</p> </li> <li> <p>\u7ed9 <code>sin(x)</code>\uff08\u6ce8\u610f\u4e0d\u662f sin \u91cc\u7684 x\uff09\u52a0 1.0\u3002\u89c2\u5bdf\u66f2\u7ebf\u662f\u5982\u4f55\u5411\u4e0a\u79fb\u52a8\u7684\uff0c\u73b0\u5728\u503c\u57df\u53d8\u6210\u4e86 0.0 \u5230 2.0\u3002</p> </li> <li> <p>\u7ed9 <code>sin(x)</code> \u4e58\u4ee5 2.0\u3002\u89c2\u5bdf\u66f2\u7ebf\u5927\u5c0f\u5982\u4f55\u589e\u5927\u4e24\u500d\u3002</p> </li> <li> <p>\u8ba1\u7b97 <code>sin(x)</code> \u7684\u7edd\u5bf9\u503c\uff08<code>abs()</code>\uff09\u3002\u73b0\u5728\u5b83\u770b\u8d77\u6765\u5c31\u50cf\u4e00\u4e2a\u5f39\u529b\u7403\u7684\u8f68\u8ff9\u3002</p> </li> <li> <p>\u53ea\u9009\u53d6 <code>sin(x)</code> \u7684\u5c0f\u6570\u90e8\u5206\uff08<code>fract()</code>\uff09\u3002</p> </li> <li> <p>\u4f7f\u7528\u5411\u6b63\u65e0\u7a77\u53d6\u6574\uff08<code>ceil()</code>\uff09\u548c\u5411\u8d1f\u65e0\u7a77\u53d6\u6574\uff08<code>floor()</code>\uff09\uff0c\u4f7f\u5f97 sin \u66f2\u7ebf\u53d8\u6210\u53ea\u6709 1 \u548c -1 \u7684\u7535\u5b50\u6ce2\u3002</p> </li> </ul>"},{"location":"Frontend/shader/05/README-ch/#_4","title":"\u5176\u4ed6\u6709\u7528\u7684\u51fd\u6570","text":"<p>\u6700\u540e\u4e00\u4e2a\u7ec3\u4e60\u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u65b0\u51fd\u6570\u3002\u73b0\u5728\u6211\u4eec\u6765\u4e00\u4e2a\u4e00\u4e2a\u8bd5\u4e00\u904d\u3002\u4f9d\u6b21\u53d6\u6d88\u6ce8\u91ca\u4e0b\u5217\u5404\u884c\uff0c\u7406\u89e3\u8fd9\u4e9b\u51fd\u6570\uff0c\u89c2\u5bdf\u5b83\u4eec\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\u3002\u4f60\u4e00\u5b9a\u5728\u5947\u602a\u2026\u2026\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff1fGoogle \u4e00\u4e0b\u201cgenerative art\u201d\uff08\u751f\u6210\u827a\u672f\uff09\u4f60\u5c31\u77e5\u9053\u4e86\u3002\u8981\u77e5\u9053\u8fd9\u4e9b\u51fd\u6570\u5c31\u662f\u6211\u4eec\u7684\u6805\u680f\u3002\u6211\u4eec\u73b0\u5728\u63a7\u5236\u7684\u662f\u5b83\u5728\u4e00\u7ef4\u4e2d\u7684\u79fb\u52a8\uff0c\u4e0a\u4e0a\u4e0b\u4e0b\u3002\u5f88\u5feb\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4e8c\u7ef4\u3001\u4e09\u7ef4\u751a\u81f3\u56db\u7ef4\u4e86\uff01</p> <p></p>"},{"location":"Frontend/shader/05/README-ch/#_5","title":"\u9020\u578b\u51fd\u6570\u8fdb\u9636","text":"<p>Golan Levin \u5199\u8fc7\u5173\u4e8e\u66f4\u52a0\u590d\u6742\u7684\u9020\u578b\u51fd\u6570\u7684\u6587\u6863\uff0c\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u628a\u5b83\u4eec\u5f15\u5165 GLSL \u662f\u975e\u5e38\u660e\u667a\u7684\u9009\u62e9\uff0c\u8fd9\u5c06\u662f\u4f60\u7684\u4ee3\u7801\u7684\u5e7f\u9614\u7684\u7d20\u6750\u5e93</p> <ul> <li> <p>\u591a\u9879\u5f0f\u9020\u578b\u51fd\u6570\uff08Polynomial Shaping Functions\uff09: www.flong.com/archive/texts/code/shapers_poly</p> </li> <li> <p>\u6307\u6570\u9020\u578b\u51fd\u6570\uff08Exponential Shaping Functions\uff09: www.flong.com/archive/texts/code/shapers_exp</p> </li> <li> <p>\u5706\u4e0e\u692d\u5706\u7684\u9020\u578b\u51fd\u6570\uff08Circular &amp; Elliptical Shaping Functions\uff09: www.flong.com/archive/texts/code/shapers_circ</p> </li> <li> <p>\u8d1d\u585e\u5c14\u548c\u5176\u4ed6\u53c2\u6570\u5316\u9020\u578b\u51fd\u6570\uff08Bezier and Other Parametric Shaping Functions\uff09: www.flong.com/archive/texts/code/shapers_bez</p> </li> </ul> <p>\u5c31\u50cf\u53a8\u5e08\u81ea\u4e3b\u9009\u62e9\u8fa3\u6912\u548c\u5404\u79cd\u539f\u6599\uff0c\u6570\u5b57\u827a\u672f\u5bb6\u548c\u521b\u610f\u7f16\u7a0b\u8005\u5f80\u5f80\u949f\u60c5\u4e8e\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u7684\u9020\u578b\u51fd\u6570\u3002</p> <p>I\u00f1igo Quiles \u6536\u96c6\u4e86\u4e00\u5957\u6709\u7528\u7684\u51fd\u6570\u3002\u5728\u770b\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u540e\uff0c\u770b\u770b\u4e0b\u5217\u51fd\u6570\u8f6c\u6362\u5230 GLSL \u7684\u6837\u5b50\u3002\u6ce8\u610f\u90a3\u4e9b\u7ec6\u5c0f\u7684\u6539\u53d8\uff0c\u6bd4\u5982\u7ed9\u6d6e\u70b9\u6570\uff08float)\u52a0\u5c0f\u6570\u70b9\u201c.\u201d\uff0c\u7ed9\u201cC \u7cfb\u51fd\u6570\u201d\u6362\u6210\u5b83\u4eec\u5728 GLSL \u91cc\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u4e0d\u662f\u7528 <code>powf()</code> \u800c\u662f\u7528 <code>pow()</code>\uff1a</p> <ul> <li>Impulse</li> <li>Cubic Pulse</li> <li>Exponential Step</li> <li>Parabola</li> <li>Power Curve</li> </ul> <p>\u7ed9\u4f60\u4eec\u770b\u4e9b\u4e1c\u897f\u523a\u6fc0\u4e00\u4e0b\u6597\u5fd7\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u4f18\u96c5\u7684\u4f8b\u5b50\uff08\u4f5c\u8005\u662f Danguafer\uff0c\u9020\u578b\u51fd\u6570\u7684\u7a7a\u624b\u9053\u9ed1\u5e26\uff09\u3002</p> <p>\u5728\u4e0b\u4e00\u7ae0\u6211\u4eec\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u8fdb\u5c55\u3002\u6211\u4eec\u4f1a\u5148\u6df7\u5408\u5404\u79cd\u989c\u8272\uff0c\u7136\u540e\u753b\u4e9b\u5f62\u72b6\u3002</p>"},{"location":"Frontend/shader/05/README-ch/#_6","title":"\u7ec3\u4e60","text":"<p>\u6765\u770b\u770b Kynd \u5e2e\u5927\u5bb6\u5236\u4f5c\u7684\u516c\u5f0f\u8868\u3002\u770b\u4ed6\u5982\u4f55\u7ed3\u5408\u5404\u79cd\u51fd\u6570\u53ca\u5b83\u4eec\u7684\u5c5e\u6027\uff0c\u59cb\u7ec8\u63a7\u5236\u503c\u7684\u8303\u56f4\u5728 0.0 \u5230 1.0\u3002\u597d\u4e86\uff0c\u73b0\u5728\u662f\u4f60\u81ea\u5df1\u7ec3\u4e60\u7684\u65f6\u5019\u4e86\uff01\u6765\u8bd5\u8bd5\u8fd9\u4e9b\u51fd\u6570\uff0c\u8bb0\u4f4f\uff1a\u719f\u80fd\u751f\u5de7\u3002</p> <p></p>"},{"location":"Frontend/shader/05/README-ch/#_7","title":"\u586b\u5145\u4f60\u7684\u5de5\u5177\u7bb1","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u5e2e\u4f60\u66f4\u8f7b\u677e\u5730\u53ef\u89c6\u5316\u8fd9\u4e9b\u51fd\u6570\u3002</p> <ul> <li>GraphToy\uff1a\u4ecd\u7136\u662f I\u00f1igo Quilez \u4e3a\u5927\u5bb6\u505a\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u5728 WebGL \u4e2d\u53ef\u89c6\u5316 GLSL \u51fd\u6570\u3002</li> </ul> <p></p> <ul> <li>LYGIA Shader Library a shader library of reusable functions that can be include easily on your projects. It's very granular, designed for reusability, performance and flexibility. And can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/05/SUMMARY/","title":"SUMMARY","text":"<p>Shaping functions is fundamental technique that is recursively used throughout this book that let you control the variation of the value at will. Study how different functions of x are used to create different shapes and try making your own function.</p>"},{"location":"Frontend/shader/05/TITLE/","title":"Algorithmic drawing","text":""},{"location":"Frontend/shader/05/TITLE/#shaping-functions","title":"Shaping functions","text":""},{"location":"Frontend/shader/05/notes/","title":"Notes","text":""},{"location":"Frontend/shader/05/notes/#scott","title":"Scott","text":"<ul> <li> <p>\"Essentially we made a function that takes a two dimensional vector (x and y) and returns a four dimensional vector (r, g, b and a).\" Really?  Are you sure that\u2019s what we did?</p> </li> <li> <p>What is smoothstep()?  This example starts to lose me.  There are many new elements here.  Could you include a step by step walkthrough of this whole example before proceeding to the next part?</p> </li> <li> <p>Actually, this is the point where you lose me. I want it to be more gradual.  It feels like there are 100 new concepts on this one page.</p> </li> </ul>"},{"location":"Frontend/shader/05/notes/#nicolas","title":"Nicolas","text":"<ul> <li>took the freedom to explain more indepth what interpolation is and why it rocks :)</li> </ul>"},{"location":"Frontend/shader/05/tmp/","title":"Algorithmic drawing","text":""},{"location":"Frontend/shader/05/tmp/#shaping-functions","title":"Shaping functions","text":"<p>This chapter could be named \"Mr. Miyagi's fence lesson.\" Previously, we mapped the normalized position of x and y to the red and green channels. Essentially we made a function that takes a two dimensional vector (x and y) and returns a four dimensional vector (r, g, b and a). But before we go further transforming data between dimensions we need to start simpler... much simpler. That means understanding how to make one dimensional functions. The more energy and time you spend learning and mastering this, the stronger your shader karate will be.</p> <p></p> <p>The following code structure is going to be our fence. In it, we visualize the normalized value of the x coordinate (<code>st.x</code>) in two ways: one with brightness (observe the nice gradient from black to white) and the other by plotting a green line on top (in that case the x value is assigned directly to y). Don't focus too much on the plot function, we will go through it in more detail in a moment.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Plot a line on Y using a value between 0.0-1.0\nfloat plot(vec2 st) {    \n    return smoothstep(0.02, 0.0, abs(st.y - st.x));\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n\n    float y = st.x;\n\n    vec3 color = vec3(y);\n\n    // Plot a line\n    float pct = plot(st);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Quick Note: The <code>vec3</code> type constructor \"understands\" that you want to assign the three color channels with the same value, while <code>vec4</code> understands that you want to construct a four dimensional vector with a three dimensional one plus a fourth value (in this case the value that controls the alpha or opacity). See for example lines 19 and 25 above.</p> <p>This code is your fence; it's important to observe and understand it. You will come back over and over to this space between 0.0 and 1.0. You will master the art of blending and shaping this line.</p> <p>This one-to-one relationship between  x and y (or the brightness) is known as linear interpolation. From here we can use some mathematical functions to shape the line. For example we can raise x to the power of 5 to make a curved line.</p> <pre><code>// Author: Inigo Quiles\n// Title: Expo\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n\n    float y = pow(st.x,5.0);\n\n    vec3 color = vec3(y);\n\n    float pct = plot(st,y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Interesting, right? On line 22 try different exponents: 20.0, 2.0, 1.0, 0.0, 0.2 and 0.02 for example. Understanding this relationship between the value and the exponent will be very helpful. Using these types of mathematical functions here and there will give you expressive control over your code, a sort of data acupuncture that let you control the flow of values.</p> <p><code>pow()</code> is a native function in GLSL and there are many others. Most of them are accelerated at the level of the hardware, which means if they are used in the right way and with discretion they will make your code faster.</p> <p>Replace the power function on line 22. Try other ones like: <code>exp()</code>, <code>log()</code> and <code>sqrt()</code>. Some of these functions are more interesting when you play with them using PI. You can see on line 8 that I have defined a macro that will replace any use of <code>PI</code> with the value <code>3.14159265359</code>.</p>"},{"location":"Frontend/shader/05/tmp/#step-and-smoothstep","title":"Step and Smoothstep","text":"<p>GLSL also has some unique native interpolation functions that are hardware accelerated.</p> <p>The <code>step()</code> interpolation receives two parameters. The first one is the limit or threshold, while the second one is the value we want to check or pass. Any value under the limit will return <code>0.0</code> while everything above the limit will return <code>1.0</code>.</p> <p>Try changing this threshold value on line 20 of the following code.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n\n    // Step will return 0.0 unless the value is over 0.5,\n    // in that case it will return 1.0\n    float y = step(0.5,st.x);\n\n    vec3 color = vec3(y);\n\n    float pct = plot(st,y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>The other unique function is known as <code>smoothstep()</code>. Given a range of two numbers and a value, this function will interpolate the value between the defined range. The two first parameters are for the beginning and end of the transition, while the third is for the value to interpolate.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n\n    // Smooth interpolation between 0.1 and 0.9\n    float y = smoothstep(0.1,0.9,st.x);\n\n    vec3 color = vec3(y);\n\n    float pct = plot(st,y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>In the previous example, on line 12, notice that we\u2019ve been using smoothstep to draw the green line on the <code>plot()</code> function. For each position along the x axis this function makes a bump at a particular value of y. How? By connecting two <code>smoothstep()</code> together. Take a look at the following function, replace it for line 20 above and think of it as a vertical cut. The background does look like a line, right?</p> <pre><code>float y = smoothstep(0.2,0.5,st.x) - smoothstep(0.5,0.8,st.x);\n</code></pre>"},{"location":"Frontend/shader/05/tmp/#sine-and-cosine","title":"Sine and Cosine","text":"<p>When you want to use some math to animate, shape or blend values, there is nothing better than being friends with sine and cosine.</p> <p>These two basic trigonometric functions work together to construct circles that are as handy as MacGyver\u2019s Swiss army knife. It\u2019s important to know how they behave and in what ways they can be combined. In a nutshell, given an angle (in radians) they will return the correct position of x (cosine) and y (sine) of a point on the edge of a circle with a radius equal to 1. But, the fact that they return normalized values (values between -1 and 1) in such a smooth way makes them an incredible tool.</p> <p></p> <p>While it's difficult to describe all the relationships between trigonometric functions and circles, the above animation does a beautiful job of visually summarizing these relationships.</p> <p>Take a careful look at this sine wave. Note how the y values flow smoothly between +1 and -1. As we saw in the time example in the previous chapter, you can use this rhythmic behavior of <code>sin()</code> to animate properties. If you are reading this example in a browser you will see that you can change the code in the formula above to watch how the wave changes. (Note: don't forget the semicolon at the end of the lines.)</p> <p>Try the following exercises and notice what happens:</p> <ul> <li> <p>Add time (<code>u_time</code>) to x before computing the <code>sin</code>. Internalize that motion along x.</p> </li> <li> <p>Multiply x by <code>PI</code> before computing the <code>sin</code>. Note how the two phases shrink so each cycle repeats every 2 integers.</p> </li> <li> <p>Multiply time (<code>u_time</code>) by x before computing the <code>sin</code>. See how the frequency between phases becomes more and more compressed. Note that u_time may have already become very large, making the graph hard to read.</p> </li> <li> <p>Add 1.0 to <code>sin(x)</code>. See how all the wave is displaced up and now all values are between 0.0 and 2.0.</p> </li> <li> <p>Multiply <code>sin(x)</code> by 2.0. See how the amplitude doubles in size.</p> </li> <li> <p>Compute the absolute value (<code>abs()</code>) of <code>sin(x)</code>. It looks like the trace of a bouncing ball.</p> </li> <li> <p>Extract just the fraction part (<code>fract()</code>) of the resultant of <code>sin(x)</code>.</p> </li> <li> <p>Add the higher integer (<code>ceil()</code>) and the smaller integer (<code>floor()</code>) of the resultant of <code>sin(x)</code> to get a digital wave of 1 and -1 values.</p> </li> </ul>"},{"location":"Frontend/shader/05/tmp/#some-extra-useful-functions","title":"Some extra useful functions","text":"<p>At the end of the last exercise we introduced some new functions. Now it\u2019s time to experiment with each one by uncommenting the lines below one at a time. Get to know these functions and study how they behave. I know, you are wondering... why? A quick google search on \"generative art\" will tell you. Keep in mind that these functions are our fence. We are mastering the movement in one dimension, up and down. Soon, it will be time for two, three and four dimensions!</p> <p></p>"},{"location":"Frontend/shader/05/tmp/#advance-shaping-functions","title":"Advance shaping functions","text":"<p>Golan Levin has great documentation of more complex shaping functions that are extraordinarily helpful. Porting them to GLSL is a really smart move, to start building your own resource of snippets of code.</p> <ul> <li> <p>Polynomial Shaping Functions: www.flong.com/archive/texts/code/shapers_poly</p> </li> <li> <p>Exponential Shaping Functions: www.flong.com/archive/texts/code/shapers_exp</p> </li> <li> <p>Circular &amp; Elliptical Shaping Functions: www.flong.com/archive/texts/code/shapers_circ</p> </li> <li> <p>Bezier and Other Parametric Shaping Functions: www.flong.com/archive/texts/code/shapers_bez</p> </li> </ul> <p>Like chefs that collect spices and exotic ingredients, digital artists and creative coders have a particular love of working on their own shaping functions.</p> <p>I\u00f1igo Quiles has a great collection of useful functions. After reading this article take a look at the following translation of these functions to GLSL. Pay attention to the small changes required, like putting the \".\" (dot) on floating point numbers and using the GLSL name for C functions; for example instead of <code>powf()</code> use <code>pow()</code>:</p> <p>To keep your motivation up, here is an elegant example (made by Danguafer) of mastering the shaping-functions karate.</p> <p>In the Next &gt;&gt; chapter we will start using our new moves. First with mixing colors and then drawing shapes.</p>"},{"location":"Frontend/shader/05/tmp/#exercise","title":"Exercise","text":"<p>Take a look at the following table of equations made by Kynd. See how he is combining functions and their properties to control the values between 0.0 and 1.0. Now it's time for you to practice by replicating these functions. Remember the more you practice the better your karate will be.</p> <p></p>"},{"location":"Frontend/shader/05/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li> <p>LYGIA is a shader library of reusable functions that can be include easily on your projects. It's very granular, designed for reusability, performance and flexibility. And can be easily be added to any projects and frameworks. It's divided in different sections and it have an entire one for math operations</p> </li> <li> <p>GraphToy: once again I\u00f1igo Quilez made a tool to visualize GLSL functions in WebGL.</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/06/","title":"Index","text":""},{"location":"Frontend/shader/06/#colors","title":"Colors","text":"<p>We haven't much of a chance to talk about GLSL vector types. Before going further it's important to learn more about these variables and the subject of colors is a great way to find out more about them.</p> <p>If you are familiar with object oriented programming paradigms you've probably noticed that we have been accessing the data inside the vectors like any regular C-like <code>struct</code>.</p> <pre><code>vec3 red = vec3(1.0,0.0,0.0);\nred.x = 1.0;\nred.y = 0.0;\nred.z = 0.0;\n</code></pre> <p>Defining color using an x, y and z notation can be confusing and misleading, right? That's why there are other ways to access this same information, but with different names. The values of <code>.x</code>, <code>.y</code> and <code>.z</code> can also be called <code>.r</code>, <code>.g</code> and <code>.b</code>, and <code>.s</code>, <code>.t</code> and <code>.p</code>. (<code>.s</code>, <code>.t</code> and <code>.p</code> are usually used for spatial coordinates of a texture, which we'll see in a later chapter.) You can also access the data in a vector by using the index position, <code>[0]</code>, <code>[1]</code> and <code>[2]</code>.</p> <p>The following lines show all the ways to access the same data:</p> <pre><code>vec4 vector;\nvector[0] = vector.r = vector.x = vector.s;\nvector[1] = vector.g = vector.y = vector.t;\nvector[2] = vector.b = vector.z = vector.p;\nvector[3] = vector.a = vector.w = vector.q;\n</code></pre> <p>These different ways of pointing to the variables inside a vector are just nomenclatures designed to help you write clear code. This flexibility embedded in shading language is a door for you to start thinking interchangeably about color and space coordinates.</p> <p>Another great feature of vector types in GLSL is that the properties can be combined in any order you want, which makes it easy to cast and mix values. This ability is called swizzle.</p> <pre><code>vec3 yellow, magenta, green;\n\n// Making Yellow\nyellow.rg = vec2(1.0);  // Assigning 1. to red and green channels\nyellow[2] = 0.0;        // Assigning 0. to blue channel\n\n// Making Magenta\nmagenta = yellow.rbg;   // Assign the channels with green and blue swapped\n\n// Making Green\ngreen.rgb = yellow.bgb; // Assign the blue channel of Yellow (0) to red and blue channels\n</code></pre>"},{"location":"Frontend/shader/06/#mixing-color","title":"Mixing color","text":"<p>Now that you know how colors are defined, it's time to integrate this with our previous knowledge. In GLSL there is a very useful function, <code>mix()</code>, that lets you mix two values in percentages. Can you guess what the percentage range is? Yes, values between 0.0 and 1.0! Which is perfect for you, after those long hours practicing your karate moves with the fence - it is time to use them!</p> <p></p> <p>Check the following code at line 18 and see how we are using the absolute values of a sin wave over time to mix <code>colorA</code> and <code>colorB</code>.</p> <p>Show off your skills by:</p> <ul> <li>Make an expressive transition between colors. Think of a particular emotion. What color seems most representative of it? How does it appear? How does it fade away? Think of another emotion and the matching color for it. Change the beginning and ending color of the above code to match those emotions. Then animate the transition using shaping functions. Robert Penner developed a series of popular shaping functions for computer animation known as easing functions, you can use this example as research and inspiration but the best result will come from making your own transitions.</li> </ul>"},{"location":"Frontend/shader/06/#playing-with-gradients","title":"Playing with gradients","text":"<p>The <code>mix()</code> function has more to offer. Instead of a single <code>float</code>, we can pass a variable type that matches the two first arguments, in our case a <code>vec3</code>. By doing that we gain control over the mixing percentages of each individual color channel, <code>r</code>, <code>g</code> and <code>b</code>.</p> <p></p> <p>Take a look at the following example. Like the examples in the previous chapter, we are hooking the transition to the normalized x coordinate and visualizing it with a line. Right now all the channels go along the same line.</p> <p>Now, uncomment line number 25 and watch what happens. Then try uncommenting lines 26 and 27. Remember that the lines visualize the amount of <code>colorA</code> and <code>colorB</code> to mix per channel.</p> <p>You probably recognize the three shaping functions we are using on lines 25 to 27. Play with them! It's time for you to explore and show off your skills from the previous chapter and make interesting gradients. Try the following exercises:</p> <p></p> <ul> <li> <p>Compose a gradient that resembles a William Turner sunset</p> </li> <li> <p>Animate a transition between a sunrise and sunset using <code>u_time</code>.</p> </li> <li> <p>Can you make a rainbow using what we have learned so far?</p> </li> <li> <p>Use the <code>step()</code> function to create a colorful flag.</p> </li> </ul>"},{"location":"Frontend/shader/06/#hsb","title":"HSB","text":"<p>We can't talk about color without speaking about color space. As you probably know there are different ways to organize color besides by red, green and blue channels.</p> <p>HSB stands for Hue, Saturation and Brightness (or Value) and is a more intuitive and useful organization of colors. Take a moment to read the <code>rgb2hsv()</code> and <code>hsv2rgb()</code> functions in the following code.</p> <p>By mapping the position on the x axis to the Hue and the position on the y axis to the Brightness, we obtain a nice spectrum of visible colors. This spatial distribution of color can be very handy; it's more intuitive to pick a color with HSB than with RGB.</p>"},{"location":"Frontend/shader/06/#hsb-in-polar-coordinates","title":"HSB in polar coordinates","text":"<p>HSB was originally designed to be represented in polar coordinates (based on the angle and radius) instead of cartesian coordinates (based on x and y). To map our HSB function to polar coordinates we need to obtain the angle and distance from the center of the billboard to the pixel coordinate. For that we will use the <code>length()</code> function and <code>atan(y,x)</code> (which is the GLSL version of the commonly used <code>atan2(y,x)</code>).</p> <p>When using vector and trigonometric functions, <code>vec2</code>, <code>vec3</code> and <code>vec4</code> are treated as vectors even when they represent colors. We will start treating colors and vectors similarly, in fact you will come to find this conceptual flexibility very empowering.</p> <p>Note: If you were wondering, there are more geometric functions besides <code>length</code> like: <code>distance()</code>, <code>dot()</code>, <code>cross</code>, <code>normalize()</code>, <code>faceforward()</code>, <code>reflect()</code> and <code>refract()</code>. Also GLSL has special vector relational functions such as: <code>lessThan()</code>, <code>lessThanEqual()</code>, <code>greaterThan()</code>, <code>greaterThanEqual()</code>, <code>equal()</code> and <code>notEqual()</code>.</p> <p>Once we obtain the angle and length we need to \u201cnormalize\u201d their values to the range between 0.0 to 1.0. On line 27, <code>atan(y,x)</code> will return an angle in radians between -PI and PI (-3.14 to 3.14), so we need to divide this number by <code>TWO_PI</code> (defined at the top of the code) to get values between -0.5 to 0.5, which by simple addition we change to the desired range of 0.0 to 1.0. The radius will return a maximum of 0.5 (because we are calculating the distance from the center of the viewport) so we need to double this range (by multiplying by two) to get a maximum of 1.0.</p> <p>As you can see, our game here is all about transforming and mapping ranges to the 0.0 to 1.0 that we like.</p> <p>Try the following exercises:</p> <ul> <li> <p>Modify the polar example to get a spinning color wheel, just like the waiting mouse icon.</p> </li> <li> <p>Use a shaping function together with the conversion function from HSB to RGB to expand a particular hue value and shrink the rest.</p> </li> </ul> <p></p> <ul> <li>If you look closely at the color wheel used on color pickers (see the image below), they use a different spectrum according to RYB color space. For example, the opposite color of red should be green, but in our example it is cyan. Can you find a way to fix that in order to look exactly like the following image? [Hint: this is a great moment to use shaping functions.]</li> </ul> <p></p> <ul> <li>Read Josef Albers' book Interaction of Color and use the following shaders examples as practice.</li> </ul>"},{"location":"Frontend/shader/06/#note-about-functions-and-arguments","title":"Note about functions and arguments","text":"<p>Before jumping to the next chapter let\u2019s stop and rewind. Go back and take look at the functions in previous examples. You will notice <code>in</code> before the type of the arguments. This is a qualifier and in this case it specifies that the variable is read only. In future examples we will see that it is also possible to define arguments as <code>out</code> or <code>inout</code>. This last one, <code>inout</code>, is conceptually similar to passing an argument by reference which will give us the possibility to modify a passed variable.</p> <pre><code>int newFunction(in vec4 aVec4,      // read-only\n                out vec3 aVec3,     // write-only\n                inout int aInt);    // read-write\n</code></pre> <p>You may not believe it but now we have all the elements to make cool drawings. In the next chapter we will learn how to combine all our tricks to make geometric forms by blending the space. Yep... blending the space.</p>"},{"location":"Frontend/shader/06/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's color shader functions  are set of reusable functions to manipulate colors in GLSL. It includes functions to convert between color spaces, to blend colors, to create gradients, and to apply color transformations. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/06/README-ch/","title":"6","text":""},{"location":"Frontend/shader/06/README-ch/#_1","title":"\u989c\u8272","text":"<p>\u6211\u4eec\u76ee\u524d\u4e3a\u6b62\u8fd8\u672a\u6d89\u53ca\u5230GLSL\u7684\u5411\u91cf\u7c7b\u578b\u3002\u5728\u6211\u4eec\u6df1\u5165\u5411\u91cf\u4e4b\u524d\uff0c\u5b66\u4e60\u66f4\u591a\u5173\u4e8e\u53d8\u91cf\u548c\u8272\u5f69\u4e3b\u9898\u662f\u4e00\u4e2a\u4e86\u89e3\u5411\u91cf\u7c7b\u578b\u7684\u597d\u65b9\u6cd5\u3002</p> <p>\u82e5\u4f60\u719f\u6089\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8303\u5f0f\uff08\u6216\u8005\u8bf4\u7f16\u7a0b\u601d\u7ef4\u6a21\u5f0f\uff09\uff0c\u4f60\u4e00\u5b9a\u6ce8\u610f\u5230\u6211\u4eec\u4ee5\u4e00\u79cd\u7c7bC\u7684 <code>struct</code>\u7684\u65b9\u5f0f\u8bbf\u95ee\u5411\u91cf\u6570\u636e\u7684\u5185\u90e8\u5206\u91cf\u3002</p> <pre><code>vec3 red = vec3(1.0,0.0,0.0);\nred.x = 1.0;\nred.y = 0.0;\nred.z = 0.0;\n</code></pre> <p>\u4ee5x,y,z\u5b9a\u4e49\u989c\u8272\u662f\u4e0d\u662f\u6709\u4e9b\u5947\u602a\uff1f\u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4eec\u6709\u5176\u4ed6\u65b9\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u53d8\u91cf\u2014\u2014\u4ee5\u4e0d\u540c\u7684\u540d\u5b57\u3002<code>.x</code>, <code>.y</code>, <code>.z</code>\u4e5f\u53ef\u4ee5\u88ab\u5199\u4f5c<code>.r</code>, <code>.g</code>, <code>.b</code> \u548c <code>.s</code>, <code>.t</code>, <code>.p</code>\u3002\uff08<code>.s</code>, <code>.t</code>, <code>.p</code>\u901a\u5e38\u88ab\u7528\u505a\u540e\u9762\u7ae0\u8282\u63d0\u5230\u7684\u8d34\u56fe\u7a7a\u95f4\u5750\u6807\uff09\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7d22\u5f15\u4f4d\u7f6e<code>[0]</code>, <code>[1]</code> \u548c <code>[2]</code>\u6765\u8bbf\u95ee\u5411\u91cf.</p> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u6240\u6709\u8bbf\u95ee\u76f8\u540c\u6570\u636e\u7684\u65b9\u5f0f\uff1a</p> <pre><code>vec4 vector;\nvector[0] = vector.r = vector.x = vector.s;\nvector[1] = vector.g = vector.y = vector.t;\nvector[2] = vector.b = vector.z = vector.p;\nvector[3] = vector.a = vector.w = vector.q;\n</code></pre> <p>\u8fd9\u4e9b\u6307\u5411\u5411\u91cf\u5185\u90e8\u53d8\u91cf\u7684\u4e0d\u540c\u65b9\u5f0f\u4ec5\u4ec5\u662f\u8bbe\u8ba1\u7528\u6765\u5e2e\u52a9\u4f60\u5199\u51fa\u5e72\u51c0\u4ee3\u7801\u7684\u672f\u8bed\u3002\u7740\u8272\u8bed\u8a00\u6240\u5305\u542b\u7684\u7075\u6d3b\u6027\u4e3a\u4f60\u4e92\u6362\u5730\u601d\u8003\u989c\u8272\u548c\u5750\u6807\u4f4d\u7f6e\u3002</p> <p>GLSL\u4e2d\u5411\u91cf\u7c7b\u578b\u7684\u53e6\u4e00\u5927\u7279\u70b9\u662f\u53ef\u4ee5\u7528\u4f60\u9700\u8981\u7684\u4efb\u610f\u987a\u5e8f\u7b80\u5355\u5730\u6295\u5c04\u548c\u6df7\u5408\uff08\u53d8\u91cf\uff09\u503c\u3002\u8fd9\u79cd\u80fd\u529b\u88ab\uff08\u5f62\u8c61\u5730\uff09\u79f0\u4e3a\uff1a\u9e21\u5c3e\u9152\u3002</p> <pre><code>vec3 yellow, magenta, green;\n\n// Making Yellow\nyellow.rg = vec2(1.0);  // Assigning 1. to red and green channels\nyellow[2] = 0.0;        // Assigning 0. to blue channel\n\n// Making Magenta\nmagenta = yellow.rbg;   // Assign the channels with green and blue swapped\n\n// Making Green\ngreen.rgb = yellow.bgb; // Assign the blue channel of Yellow (0) to red and blue channels\n</code></pre>"},{"location":"Frontend/shader/06/README-ch/#_2","title":"\u6df7\u5408\u989c\u8272","text":"<p>\u73b0\u5728\u4f60\u4e86\u89e3\u5230\u5982\u4f55\u5b9a\u4e49\u989c\u8272\uff0c\u662f\u65f6\u5019\u5c06\u5148\u524d\u6240\u5b66\u7684\u6574\u5408\u4e00\u4e0b\u4e86\uff01\u5728GLSL\u4e2d\uff0c\u6709\u4e2a\u5341\u5206\u6709\u7528\u7684\u51fd\u6570\uff1a<code>mix()</code>\uff0c\u8fd9\u4e2a\u51fd\u6570\u8ba9\u4f60\u4ee5\u767e\u5206\u6bd4\u6df7\u5408\u4e24\u4e2a\u503c\u3002\u731c\u4e0b\u767e\u5206\u6bd4\u7684\u53d6\u503c\u8303\u56f4\uff1f\u6ca1\u9519\uff0c0\u52301\uff01\u5b8c\u7f8e\uff01\u5b66\u4e86\u8fd9\u4e48\u4e45\u7684\u57fa\u672c\u529f\uff0c\u662f\u65f6\u5019\u6765\u7528\u4e00\u7528\u4e86\uff01</p> <p></p> <p>\u770b\u4e0b\u4e0b\u5217\u4ee3\u7801\u4e2d\u7684\u7b2c18\u884c\uff0c\u8fd9\u91cc\u5c55\u793a\u4e86\u6211\u4eec\u5982\u679c\u662f\u7528\u968f\u65f6\u95f4\u53d8\u5316\u7684sin\u7edd\u5bf9\u503c\u6765\u6df7\u5408 <code>colorA</code> \u548c <code>colorB</code>\u3002</p> <p>\u8bd5\u7740\u6765 show \u4e00\u4e0b\u4f60\u6240\u5b66\u5230\u7684\uff1a</p> <ul> <li>\u7ed9\u989c\u8272\u8d4b\u4e88\u4e00\u4e2a\u6709\u8da3\u7684\u8fc7\u6e21\u3002\u60f3\u60f3\u67d0\u79cd\u7279\u5b9a\u7684\u611f\u60c5\u3002\u54ea\u79cd\u989c\u8272\u66f4\u5177\u4ee3\u8868\u6027\uff1f\u4ed6\u5982\u4f55\u4ea7\u751f\uff1f\u53c8\u5982\u4f55\u892a\u53bb\uff1f\u518d\u60f3\u60f3\u53e6\u5916\u7684\u4e00\u79cd\u611f\u60c5\u4ee5\u53ca\u5bf9\u5e94\u7684\u989c\u8272\u3002\u7136\u540e\u6539\u53d8\u4e0a\u8bc9\u4ee3\u7801\u4e2d\u7684\u4ee3\u8868\u8fd9\u79cd\u60c5\u611f\u7684\u5f00\u59cb\u989c\u8272\u548c\u7ed3\u675f\u989c\u8272\u3002Robert Penner \u5f00\u53d1\u4e86\u4e00\u4e9b\u5217\u6d41\u884c\u7684\u8ba1\u7b97\u673a\u52a8\u753b\u5851\u5f62\u51fd\u6570\uff0c\u88ab\u79f0\u4e3a\u7f13\u52a8\u51fd\u6570\u3002\u4f60\u53ef\u4ee5\u7814\u7a76\u8fd9\u4e9b\u4f8b\u5b50\u5e76\u5f97\u5230\u542f\u53d1\uff0c\u4f46\u6700\u597d\u4f60\u8fd8\u662f\u81ea\u5df1\u5199\u4e00\u4e2a\u81ea\u5df1\u7684\u7f13\u52a8\u51fd\u6570\u3002</li> </ul>"},{"location":"Frontend/shader/06/README-ch/#_3","title":"\u73a9\u73a9\u6e10\u53d8","text":"<p><code>mix()</code> \u51fd\u6570\u6709\u66f4\u591a\u7684\u7528\u5904\u3002\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u4e24\u4e2a\u4e92\u76f8\u5339\u914d\u7684\u53d8\u91cf\u7c7b\u578b\u800c\u4e0d\u4ec5\u4ec5\u662f\u5355\u72ec\u7684 <code>float</code> \u53d8\u91cf\uff0c\u5728\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7528\u7684\u662f <code>vec3</code>\u3002\u8fd9\u6837\u6211\u4eec\u4fbf\u83b7\u5f97\u4e86\u6df7\u5408\u989c\u8272\u5355\u72ec\u901a\u9053 <code>.r</code>\uff0c<code>.g</code> \u548c <code>.b</code>\u7684\u80fd\u529b\u3002</p> <p></p> <p>\u8bd5\u8bd5\u4e0b\u9762\u7684\u4f8b\u5b50\u3002\u6b63\u5982\u524d\u9762\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u7528\u4e00\u6761\u7ebf\u6765\u53ef\u89c6\u5316\u6839\u636e\u5355\u4f4d\u5316x\u5750\u6807\u7684\u8fc7\u6e21\u3002\u73b0\u5728\u6240\u6709\u901a\u9053\u90fd\u6309\u7167\u540c\u6837\u7684\u7ebf\u6027\u53d8\u6362\u8fc7\u6e21\u3002</p> <p>\u73b0\u5728\u8bd5\u8bd5\u53d6\u6d8825\u884c\u7684\u6ce8\u91ca\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7136\u540e\u518d\u8bd5\u8bd5\u53d6\u6d8826\u884c\u548c27\u884c\u3002\u8bb0\u4f4f\u76f4\u7ebf\u4ee3\u8868\u4e86<code>colorA</code> \u548c <code>colorB</code>\u6bcf\u4e2a\u901a\u9053\u7684\u6df7\u5408\u6bd4\u4f8b\u3002</p> <p>\u4f60\u53ef\u80fd\u8ba4\u51fa\u4e86\u6211\u4eec\u7528\u572825\u884c\u523027\u884c\u7684\u9020\u578b\u51fd\u6570\u3002\u8bd5\u7740\u6539\u5199\u4ed6\u4eec\uff01\u662f\u65f6\u5019\u628a\u524d\u51e0\u5f20\u7684\u5185\u5bb9\u7ed3\u5408\u8d77\u6765\u63a2\u7d22\u4e00\u4e9b\u65b0\u7684\u6e10\u53d8\u3002\u8bd5\u8bd5\u4e0b\u5217\u6311\u6218\uff1a</p> <p></p> <ul> <li> <p>\u521b\u4f5c\u4e00\u4e2a\u6e10\u53d8\u6765\u4ee3\u8868 William Turner\u7684\u843d\u65e5\u3002</p> </li> <li> <p>\u7528 <code>u_time</code> \u505a\u4e2a\u4e00\u65e5\u51fa\u548c\u65e5\u843d\u7684\u52a8\u753b\u3002</p> </li> <li> <p>\u80fd\u7528\u6211\u4eec\u6240\u5b66\u7684\u505a\u4e00\u9053\u5f69\u8679\u5417\uff1f</p> </li> <li> <p>\u7528 <code>step\uff08\uff09</code> \u51fd\u6570\u5728\u505a\u4e00\u4e2a\u4e94\u5f69\u7684\u65d7\u5b50\u3002</p> </li> </ul>"},{"location":"Frontend/shader/06/README-ch/#hsb","title":"HSB","text":"<p>\u6211\u4eec\u4e0d\u80fd\u8131\u79bb\u8272\u5f69\u7a7a\u95f4\u6765\u8c08\u8bba\u989c\u8272\u3002\u6b63\u5982\u4f60\u6240\u77e5\uff0c\u9664\u4e86rgb\u503c\uff0c\u6709\u5176\u4ed6\u4e0d\u540c\u7684\u65b9\u6cd5\u53bb\u63cf\u8ff0\u5b9a\u4e49\u989c\u8272\u3002</p> <p>HSB \u4ee3\u8868\u8272\u76f8\uff0c\u9971\u548c\u5ea6\u548c\u4eae\u5ea6\uff08\u6216\u79f0\u4e3a\u503c\uff09\u3002\u8fd9\u66f4\u7b26\u5408\u76f4\u89c9\u4e5f\u66f4\u6709\u5229\u4e8e\u7ec4\u7ec7\u989c\u8272\u3002\u7a0d\u5fae\u82b1\u4e9b\u65f6\u95f4\u9605\u8bfb\u4e0b\u9762\u7684 <code>rgb2hsv()</code> \u548c <code>hsv2rgb()</code> \u51fd\u6570\u3002</p> <p>\u5c06x\u5750\u6807\uff08\u4f4d\u7f6e\uff09\u6620\u5c04\u5230Hue\u503c\u5e76\u5c06y\u5750\u6807\u6620\u5c04\u5230\u660e\u5ea6\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e94\u5f69\u7684\u53ef\u89c1\u5149\u5149\u8c31\u3002\u8fd9\u6837\u7684\u8272\u5f69\u7a7a\u95f4\u5206\u5e03\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u65b9\u4fbf\uff0c\u6bd4\u8d77RGB\uff0c\u7528HSB\u6765\u62fe\u53d6\u989c\u8272\u66f4\u76f4\u89c2\u3002</p>"},{"location":"Frontend/shader/06/README-ch/#hsb_1","title":"\u6781\u5750\u6807\u4e0b\u7684HSB","text":"<p>HSB\u539f\u672c\u662f\u5728\u6781\u5750\u6807\u4e0b\u4ea7\u751f\u7684\uff08\u4ee5\u534a\u5f84\u548c\u89d2\u5ea6\u5b9a\u4e49\uff09\u800c\u5e76\u975e\u5728\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\uff08\u57fa\u4e8exy\u5b9a\u4e49\uff09\u4e0b\u3002\u5c06HSB\u6620\u5c04\u5230\u6781\u5750\u6807\u6211\u4eec\u9700\u8981\u53d6\u5f97\u89d2\u5ea6\u548c\u5230\u50cf\u7d20\u5c4f\u4e2d\u70b9\u7684\u8ddd\u79bb\u3002\u7531\u6b64\u6211\u4eec\u8fd0\u7528 <code>length()</code> \u51fd\u6570\u548c <code>atan(y,x)</code> \u51fd\u6570\uff08\u5728GLSL\u4e2d\u901a\u5e38\u7528atan\uff08y,x\uff09\uff09\u3002</p> <p>\u5f53\u7528\u5230\u77e2\u91cf\u548c\u4e09\u89d2\u5b66\u51fd\u6570\u65f6\uff0c<code>vec2</code>, <code>vec3</code> \u548c <code>vec4</code>\u88ab\u5f53\u505a\u5411\u91cf\u5bf9\u5f85\uff0c\u5373\u4f7f\u6709\u65f6\u5019\u4ed6\u4eec\u4ee3\u8868\u989c\u8272\u3002\u6211\u4eec\u5f00\u59cb\u628a\u989c\u8272\u548c\u5411\u91cf\u540c\u7b49\u7684\u5bf9\u5f85\uff0c\u4e8b\u5b9e\u4e0a\u4f60\u4f1a\u6162\u6162\u53d1\u73b0\u8fd9\u79cd\u7406\u5ff5\u7684\u7075\u6d3b\u6027\u6709\u7740\u76f8\u5f53\u5f3a\u5927\u7684\u7528\u9014\u3002</p> <p>\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u60f3\u4e86\u89e3\uff0c\u9664length\uff08\uff09\u4ee5\u5916\u7684\u8bf8\u591a\u51e0\u4f55\u51fd\u6570\uff0c\u4f8b\u5982\uff1a<code>distance()</code>, <code>dot()</code>, <code>cross</code>, <code>normalize()</code>, <code>faceforward()</code>, <code>reflect()</code> \u548c <code>refract()</code>\u3002 GLSL\u4e5f\u6709\u4e0e\u5411\u91cf\u76f8\u5173\u7684\u51fd\u6570\uff1a<code>lessThan()</code>, <code>lessThanEqual()</code>, <code>greaterThan()</code>, <code>greaterThanEqual()</code>, <code>equal()</code> and <code>notEqual()</code>\u3002</p> <p>\u4e00\u65e6\u6211\u4eec\u5f97\u5230\u89d2\u5ea6\u548c\u957f\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u5355\u4f4d\u5316\u8fd9\u4e9b\u503c\uff1a0.0\u52301.0\u3002\u572827\u884c\uff0c<code>atan(y,x)</code> \u4f1a\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e-PI\u5230PI\u7684\u5f27\u5ea6\u503c\uff08-3.14 to 3.14\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c06\u8fd9\u4e2a\u8fd4\u56de\u503c\u9664\u4ee5 <code>TWO_PI</code>\uff08\u5728code\u9876\u90e8\u5b9a\u4e49\u4e86\uff09\u6765\u5f97\u5230\u4e00\u4e2a-0.5\u52300.5\u7684\u503c\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u7528\u7b80\u5355\u7684\u52a0\u6cd5\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fd4\u56de\u503c\u6700\u7ec8\u6620\u5c04\u52300.0\u52301.0\u3002\u534a\u5f84\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c0.5\uff08\u56e0\u4e3a\u6211\u4eec\u8ba1\u7b97\u7684\u662f\u5230\u89c6\u53e3\u4e2d\u5fc3\u7684\u8ddd\u79bb\uff0c\u800c\u89c6\u53e3\u4e2d\u5fc3\u7684\u8303\u56f4\u5df2\u7ecf\u88ab\u6620\u5c04\u52300.0\u52301.0\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u503c\u4e58\u4ee5\u4e8c\u6765\u5f97\u5230\u4e00\u4e2a0\u52301.0\u7684\u6620\u5c04\u3002</p> <p>\u6b63\u5982\u4f60\u6240\u89c1\uff0c\u8fd9\u91cc\u6211\u4eec\u7684\u6e38\u620f\u90fd\u662f\u5173\u4e8e\u53d8\u6362\u548c\u6620\u5c04\u5230\u4e00\u4e2a0\u52301\u8fd9\u6837\u6211\u4eec\u4e50\u4e8e\u5904\u7406\u7684\u503c\u3002</p> <p>\u6765\u6311\u6218\u4e0b\u4e0b\u9762\u7684\u7ec3\u4e60\u5427\uff1a</p> <ul> <li> <p>\u628a\u6781\u5750\u6807\u6620\u5c04\u7684\u4f8b\u5b50\u6539\u6210\u9009\u62e9\u8272\u8f6e\uff0c\u5c31\u50cf\u201c\u6b63\u5fd9\u201d\u7684\u9f20\u6807\u56fe\u6807\u3002</p> </li> <li> <p>\u628a\u9020\u578b\u51fd\u6570\u6574\u5408\u8fdb\u6765\uff0c\u6765\u8ba9HSB\u548cRGB\u7684\u8f6c\u6362\u4e2d\u5f3a\u8c03\u67d0\u4e9b\u7279\u5b9a\u503c\u5e76\u4e14\u5f31\u5316\u5176\u4ed6\u7684\u3002</p> </li> </ul> <p></p> <ul> <li>\u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\u7528\u6765\u62fe\u8272\u7684\u8272\u8f6e\uff08\u89c1\u4e0b\u56fe\uff09\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u7528\u4e00\u79cd\u6839\u636eRYB\u8272\u5f69\u7a7a\u95f4\u7684\u8272\u8c31\u3002\u4f8b\u5982\uff0c\u7ea2\u8272\u7684\u5bf9\u9762\u5e94\u8be5\u662f\u7eff\u8272\uff0c\u4f46\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u91cc\u662f\u9752\u8272\u3002\u4f60\u80fd\u627e\u5230\u4e00\u79cd\u4fee\u590d\u7684\u65b9\u5f0f\u6765\u8ba9\u5b83\u770b\u8d77\u6765\u548c\u4e0b\u56fe\u4e00\u6837\u4e48\uff1f[\u63d0\u793a\uff1a\u8fd9\u662f\u7528\u5851\u5f62\u51fd\u6570\u7684\u597d\u673a\u4f1a\uff01]</li> </ul> <p></p>"},{"location":"Frontend/shader/06/README-ch/#_4","title":"\u6ce8\u610f\u51fd\u6570\u548c\u53d8\u91cf","text":"<p>\u5728\u8fdb\u5165\u4e0b\u4e00\u7ae0\u4e4b\u524d\u8ba9\u6211\u4eec\u505c\u4e0b\u811a\u6b65\u56de\u987e\u4e0b\u3002\u590d\u4e60\u4e0b\u4e4b\u524d\u4f8b\u5b50\u7684\u51fd\u6570\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u53d8\u91cf\u7c7b\u578b\u4e4b\u524d\u6709\u4e2a\u9650\u5b9a\u7b26 <code>in</code>\uff0c\u5728\u8fd9\u4e2a qualifier (\u9650\u5b9a\u7b26)\u4f8b\u5b50\u4e2d\u5b83\u7279\u6307\u8fd9\u4e2a\u53d8\u91cf\u662f\u53ea\u8bfb\u7684\u3002\u5728\u4e4b\u540e\u7684\u4f8b\u5b50\u4e2d\u6211\u4eec\u4f1a\u770b\u5230\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a <code>out</code> \u6216\u8005 <code>inout</code>\u53d8\u91cf\u3002\u6700\u540e\u8fd9\u4e2a <code>inout</code>\uff0c\u518d\u6982\u5ff5\u4e0a\u7c7b\u4f3c\u4e8e\u53c2\u7167\u8f93\u5165\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6709\u53ef\u80fd\u4fee\u6539\u4e00\u4e2a\u4f20\u5165\u7684\u53d8\u91cf\u3002</p> <pre><code>int newFunction(in vec4 aVec4,   // read-only\n                out vec3 aVec3,    // write-only\n                inout int aInt);   // read-write\n</code></pre> <p>\u6216\u8bb8\u4f60\u8fd8\u4e0d\u76f8\u4fe1\u6211\u4eec\u53ef\u4ee5\u7528\u6240\u6709\u8fd9\u4e9b\u5143\u7d20\u6765\u753b\u4e00\u4e9b\u70ab\u9177\u7684\u4e1c\u897f\u3002\u4e0b\u4e00\u7ae0\u6211\u4eec\u4f1a\u5b66\u4e60\u5982\u4f55\u7ed3\u5408\u6240\u6709\u8fd9\u4e9b\u6280\u5de7\u901a\u8fc7\u878d\u5408 (blending) \u7a7a\u95f4\u6765\u521b\u9020\u51e0\u4f55\u5f62\u72b6\u3002\u6ca1\u9519\u3002\u3002\u3002\u878d\u5408(blending) \u7a7a\u95f4\u3002</p>"},{"location":"Frontend/shader/06/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>Familiarize-se com o modo de se expressar em cores nos shaders. Os exemplos cobrem a maneira de misturar cores e anim\u00e1-las lindamente ao longo do tempo, bem como a convers\u00e3o entre dois modelos diferentes (RGB e HSB). Em GLSL, as cores s\u00e3o simplesmente como vetores, o que quer dizer que voc\u00ea pode facilmente aplicar os conceitos e t\u00e9cnicas que aprender aqui para outros.</p>"},{"location":"Frontend/shader/06/SUMMARY/","title":"SUMMARY","text":"<p>Familiarize yourself with how to express colors in shaders. The examples cover how to mix colors and beautifully animate them over time as well as conversion between two different models(RGB and HSB). In GLSL, colors are simply just vectors, which means you can easily apply the concepts and techniques you learn here to other</p>"},{"location":"Frontend/shader/06/TITLE-pt/","title":"TITLE pt","text":""},{"location":"Frontend/shader/06/TITLE-pt/#cores","title":"Cores","text":""},{"location":"Frontend/shader/06/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/06/TITLE/#colors","title":"Colors","text":""},{"location":"Frontend/shader/06/notes/","title":"Notes","text":"<p>Add some references and ideas from this IQ article: http://iquilezles.org/www/articles/palettes/palettes.htm</p> <p>### nicolas  * struct exist in GLSL : this is valid  <code>precision mediump float;     struct my_struct {       vec4 color;     };     uniform my_struct u_colors[2];     void main(void) {         gl_FragColor = u_colors[0].color;     }</code> source</p> <p>[NICO] note: I had previously associated the name accessor to 'the way one can access the properties of an object'.</p> <p>we can use those accessors independently ; the following code creates a clone newColor of the color vector by using a different accessor for each property.</p> <pre><code>vec4 color = vec4( 1.,0.,0.5,1. );\nvec4 newColor = vec4( color[0], color.g, color.z, color.q );\n</code></pre> <p>It is possible to combine the properties by concatenating different accessors: if we need to use the <code>.r</code>, <code>.g</code> and <code>.b</code> values of a 4 dimensions vector but don't need the <code>.a</code> (alpha) value, we can write:</p> <pre><code>vec4 color = vec4( 1.,0.,0.5,1. );\nvec4 newColor = vec4( color.rgb, 1.0 );\n</code></pre> <p>Which is the same as cloning each property <code>.r</code>, <code>.g</code> and <code>.b</code> from <code>color</code> individually and dropping the last (<code>.a</code>).</p> <p>In this case, <code>color.rgb</code> is interpreted as a vector of type <code>vec3</code> that contains the values <code>.r</code>, <code>.g</code> and <code>.b</code> of the original <code>vec4</code> vector color. The same goes for:</p> <pre><code>vec4 color = vec4( 1.,0.,0.5,1. );\nvec3 newColor = vec3( color.xy, 1.0 );\n</code></pre> <p>We use the values <code>.x</code> and <code>.y</code> from color to build a vector newColors of type <code>vec3</code> which <code>.r</code> and <code>.g</code> values will be the same as the color vector and <code>.b</code> value will be <code>1.0</code>.</p> <p>Last but not least, the order in which you concatenate the accessors matters.</p> <p>If you want to build a vector from another vector but want to reverse the order of the properties, here's how you can write it:</p> <pre><code>vec3 color = vec3( 1.0, 0.0, 0.5 );\nvec3 newColor = color.bgr;\n</code></pre> <p>the newColor vector will copy color's properties but instead of copying them in the \"regular\" order: <code>.r</code>, <code>.g</code> and <code>.b</code>, it will copy them in the order defined by the concatenation: <code>.b</code>, <code>.g</code> and <code>.r</code>.</p> <pre><code>color.r =&gt; 1.0\ncolor.g =&gt; 0.0\ncolor.b =&gt; 0.5\nand\nnewColor.r =&gt; 0.5\nnewColor.g =&gt; 0.0\nnewColor.b =&gt; 1.0\n</code></pre> <p>On a side note, you can reuse the same accessor mutiple times and in whatever order in a concatenated accessor:</p> <pre><code>color.rrr =&gt; vec3( 1.0 )\ncolor.rrg =&gt; vec3( 1.0, 1.0, 0.0)\ncolor.bgg =&gt; vec3( 0.5, 0.0, 0.0)\netc.\n</code></pre> <p>This results in the fact that, if the following is true:</p> <pre><code>color.rgba = color.xyzw = color.stpq\n</code></pre> <p>these statements are not necessarily true:</p> <pre><code>color.rgba != color.argb != color.rbga != color.abgr etc.\ncolor.xyzw != color.wxyz != color.xzyw != color.wzyx etc.\ncolor.stpq != color.qstp != color.sptq != color.qpts etc.\n</code></pre> <p>This is a powerful feature ; it allows to store the data in compact forms and manipulate them in very flexible ways. Let's see a use case of the compactness: say you want to describe a rectangle, you can do so by using 2 <code>vec2</code> describing respectively the top left corner and the bottom right corner or you can instead, use a single <code>vec4</code> which <code>.xy</code> accessor will return a <code>vec2</code> describing the top left corner, and which <code>.zw</code> accessor will return a <code>vec2</code> describing the bottom right corner.</p> <p>[/NICO]</p> <p>These different ways of pointing to the variables inside a vector are just nomenclatures designed to help you write clear code. This flexibility embedded in shading language is a door for you to start thinking interchangably about color and space coordinates.</p> <p>[NICO]</p> <p>rephrased this: Another great feature of vector types in GLSL is that the properties can be combined in any order you want, which makes it easy to cast and mix values. This ability is called swizzle.</p> <p>to: Concatenation or swizzle gets really interesting when we need to cast and mix values. The following example show you how to swizzle properties between vectors.</p> <p>[/NICO]</p>"},{"location":"Frontend/shader/06/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/06/tmp/#colors","title":"Colors","text":"<p>We haven't much of a chance to talk about GLSL vector types. Before going further it's important to learn more about these variables and the subject of colors is a great way to find out more about them.</p> <p>If you are familiar with object oriented programming paradigms you've probably noticed that we have been accessing the data inside the vectors like any regular C-like <code>struct</code>.</p> <pre><code>vec3 red = vec3(1.0,0.0,0.0);\nred.x = 1.0;\nred.y = 0.0;\nred.z = 0.0;\n</code></pre> <p>Defining color using an x, y and z notation can be confusing and misleading, right? That's why there are other ways to access this same information, but with different names. The values of <code>.x</code>, <code>.y</code> and <code>.z</code> can also be called <code>.r</code>, <code>.g</code> and <code>.b</code>, and <code>.s</code>, <code>.t</code> and <code>.p</code>. (<code>.s</code>, <code>.t</code> and <code>.p</code> are usually used for spatial coordinates of a texture, which we'll see in a later chapter.) You can also access the data in a vector by using the index position, <code>[0]</code>, <code>[1]</code> and <code>[2]</code>.</p> <p>The following lines show all the ways to access the same data:</p> <pre><code>vec4 vector;\nvector[0] = vector.r = vector.x = vector.s;\nvector[1] = vector.g = vector.y = vector.t;\nvector[2] = vector.b = vector.z = vector.p;\nvector[3] = vector.a = vector.w = vector.q;\n</code></pre> <p>These different ways of pointing to the variables inside a vector are just nomenclatures designed to help you write clear code. This flexibility embedded in shading language is a door for you to start thinking interchangeably about color and space coordinates.</p> <p>Another great feature of vector types in GLSL is that the properties can be combined in any order you want, which makes it easy to cast and mix values. This ability is called swizzle.</p> <pre><code>vec3 yellow, magenta, green;\n\n// Making Yellow\nyellow.rg = vec2(1.0);  // Assigning 1. to red and green channels\nyellow[2] = 0.0;        // Assigning 0. to blue channel\n\n// Making Magenta\nmagenta = yellow.rbg;   // Assign the channels with green and blue swapped\n\n// Making Green\ngreen.rgb = yellow.bgb; // Assign the blue channel of Yellow (0) to red and blue channels\n</code></pre>"},{"location":"Frontend/shader/06/tmp/#mixing-color","title":"Mixing color","text":"<p>Now that you know how colors are defined, it's time to integrate this with our previous knowledge. In GLSL there is a very useful function, <code>mix()</code>, that lets you mix two values in percentages. Can you guess what the percentage range is? Yes, values between 0.0 and 1.0! Which is perfect for you, after those long hours practicing your karate moves with the fence - it is time to use them!</p> <p></p> <p>Check the following code at line 18 and see how we are using the absolute values of a sin wave over time to mix <code>colorA</code> and <code>colorB</code>.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(1.000,0.833,0.224);\n\nvoid main() {\n    vec3 color = vec3(0.0);\n\n    float pct = abs(sin(u_time));\n\n    // Mix uses pct (a value from 0-1) to\n    // mix the two colors\n    color = mix(colorA, colorB, pct);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Show off your skills by:</p> <ul> <li>Make an expressive transition between colors. Think of a particular emotion. What color seems most representative of it? How does it appear? How does it fade away? Think of another emotion and the matching color for it. Change the beginning and ending color of the above code to match those emotions. Then animate the transition using shaping functions. Robert Penner developed a series of popular shaping functions for computer animation known as easing functions, you can use this example as research and inspiration but the best result will come from making your own transitions.</li> </ul>"},{"location":"Frontend/shader/06/tmp/#playing-with-gradients","title":"Playing with gradients","text":"<p>The <code>mix()</code> function has more to offer. Instead of a single <code>float</code>, we can pass a variable type that matches the two first arguments, in our case a <code>vec3</code>. By doing that we gain control over the mixing percentages of each individual color channel, <code>r</code>, <code>g</code> and <code>b</code>.</p> <p></p> <p>Take a look at the following example. Like the examples in the previous chapter, we are hooking the transition to the normalized x coordinate and visualizing it with a line. Right now all the channels go along the same line.</p> <p>Now, uncomment line number 25 and watch what happens. Then try uncommenting lines 26 and 27. Remember that the lines visualize the amount of <code>colorA</code> and <code>colorB</code> to mix per channel.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(1.000,0.833,0.224);\n\nfloat plot (vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.y) -\n          smoothstep( pct, pct+0.01, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec3 pct = vec3(st.x);\n\n    // pct.r = smoothstep(0.0,1.0, st.x);\n    // pct.g = sin(st.x*PI);\n    // pct.b = pow(st.x,0.5);\n\n    color = mix(colorA, colorB, pct);\n\n    // Plot transition lines for each channel\n    color = mix(color,vec3(1.0,0.0,0.0),plot(st,pct.r));\n    color = mix(color,vec3(0.0,1.0,0.0),plot(st,pct.g));\n    color = mix(color,vec3(0.0,0.0,1.0),plot(st,pct.b));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>You probably recognize the three shaping functions we are using on lines 25 to 27. Play with them! It's time for you to explore and show off your skills from the previous chapter and make interesting gradients. Try the following exercises:</p> <p></p> <ul> <li> <p>Compose a gradient that resembles a William Turner sunset</p> </li> <li> <p>Animate a transition between a sunrise and sunset using <code>u_time</code>.</p> </li> <li> <p>Can you make a rainbow using what we have learned so far?</p> </li> <li> <p>Use the <code>step()</code> function to create a colorful flag.</p> </li> </ul>"},{"location":"Frontend/shader/06/tmp/#hsb","title":"HSB","text":"<p>We can't talk about color without speaking about color space. As you probably know there are different ways to organize color besides by red, green and blue channels.</p> <p>HSB stands for Hue, Saturation and Brightness (or Value) and is a more intuitive and useful organization of colors. Take a moment to read the <code>rgb2hsv()</code> and <code>hsv2rgb()</code> functions in the following code.</p> <p>By mapping the position on the x axis to the Hue and the position on the y axis to the Brightness, we obtain a nice spectrum of visible colors. This spatial distribution of color can be very handy; it's more intuitive to pick a color with HSB than with RGB.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from I\u00f1igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    // We map x (0.0 - 1.0) to the hue (0.0 - 1.0)\n    // And the y (0.0 - 1.0) to the brightness\n    color = hsb2rgb(vec3(st.x,1.0,st.y));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p>"},{"location":"Frontend/shader/06/tmp/#hsb-in-polar-coordinates","title":"HSB in polar coordinates","text":"<p>HSB was originally designed to be represented in polar coordinates (based on the angle and radius) instead of cartesian coordinates (based on x and y). To map our HSB function to polar coordinates we need to obtain the angle and distance from the center of the billboard to the pixel coordinate. For that we will use the <code>length()</code> function and <code>atan(y,x)</code> (which is the GLSL version of the commonly used <code>atan2(y,x)</code>).</p> <p>When using vector and trigonometric functions, <code>vec2</code>, <code>vec3</code> and <code>vec4</code> are treated as vectors even when they represent colors. We will start treating colors and vectors similarly, in fact you will come to find this conceptual flexibility very empowering.</p> <p>Note: If you were wondering, there are more geometric functions besides <code>length</code> like: <code>distance()</code>, <code>dot()</code>, <code>cross</code>, <code>normalize()</code>, <code>faceforward()</code>, <code>reflect()</code> and <code>refract()</code>. Also GLSL has special vector relational functions such as: <code>lessThan()</code>, <code>lessThanEqual()</code>, <code>greaterThan()</code>, <code>greaterThanEqual()</code>, <code>equal()</code> and <code>notEqual()</code>.</p> <p>Once we obtain the angle and length we need to \u201cnormalize\u201d their values to the range between 0.0 to 1.0. On line 27, <code>atan(y,x)</code> will return an angle in radians between -PI and PI (-3.14 to 3.14), so we need to divide this number by <code>TWO_PI</code> (defined at the top of the code) to get values between -0.5 to 0.5, which by simple addition we change to the desired range of 0.0 to 1.0. The radius will return a maximum of 0.5 (because we are calculating the distance from the center of the viewport) so we need to double this range (by multiplying by two) to get a maximum of 1.0.</p> <p>As you can see, our game here is all about transforming and mapping ranges to the 0.0 to 1.0 that we like.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n//  Function from I\u00f1igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    // Use polar coordinates instead of cartesian\n    vec2 toCenter = vec2(0.5)-st;\n    float angle = atan(toCenter.y,toCenter.x);\n    float radius = length(toCenter)*2.0;\n\n    // Map the angle (-PI to PI) to the Hue (from 0 to 1)\n    // and the Saturation to the radius\n    color = hsb2rgb(vec3((angle/TWO_PI)+0.5,radius,1.0));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Try the following exercises:</p> <ul> <li> <p>Modify the polar example to get a spinning color wheel, just like the waiting mouse icon.</p> </li> <li> <p>Use a shaping function together with the conversion function from HSB to RGB to expand a particular hue value and shrink the rest.</p> </li> </ul> <p></p> <ul> <li>If you look closely at the color wheel used on color pickers (see the image below), they use a different spectrum according to RYB color space. For example, the opposite color of red should be green, but in our example it is cyan. Can you find a way to fix that in order to look exactly like the following image? [Hint: this is a great moment to use shaping functions.]</li> </ul> <p></p> <ul> <li>Read Josef Albers' book Interaction of Color and use the following shaders examples as practice.</li> </ul>"},{"location":"Frontend/shader/06/tmp/#note-about-functions-and-arguments","title":"Note about functions and arguments","text":"<p>Before jumping to the next chapter let\u2019s stop and rewind. Go back and take look at the functions in previous examples. You will notice <code>in</code> before the type of the arguments. This is a qualifier and in this case it specifies that the variable is read only. In future examples we will see that it is also possible to define arguments as <code>out</code> or <code>inout</code>. This last one, <code>inout</code>, is conceptually similar to passing an argument by reference which will give us the possibility to modify a passed variable.</p> <pre><code>int newFunction(in vec4 aVec4,      // read-only\n                out vec3 aVec3,     // write-only\n                inout int aInt);    // read-write\n</code></pre> <p>You may not believe it but now we have all the elements to make cool drawings. In the next chapter we will learn how to combine all our tricks to make geometric forms by blending the space. Yep... blending the space.</p>"},{"location":"Frontend/shader/06/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's color shader functions  are set of reusable functions to manipulate colors in GLSL. It includes functions to convert between color spaces, to blend colors, to create gradients, and to apply color transformations. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/07/","title":"Index","text":""},{"location":"Frontend/shader/07/#shapes","title":"Shapes","text":"<p>Finally! We have been building skills for this moment! You have learned most of the GLSL foundations, types and functions. You have practiced your shaping equations over and over. Now is the time to put it all together. You are up for this challenge! In this chapter you'll learn how to draw simple shapes in a parallel procedural way.</p>"},{"location":"Frontend/shader/07/#rectangle","title":"Rectangle","text":"<p>Imagine we have grid paper like we used in math classes and our homework is to draw a square. The paper size is 10x10 and the square is supposed to be 8x8. What will you do?</p> <p></p> <p>You'd paint everything except the first and last rows and the first and last column, right?</p> <p>How does this relate to shaders? Each little square of our grid paper is a thread (a pixel). Each little square knows its position, like the coordinates of a chess board. In previous chapters we mapped x and y to the red and green color channels, and we learned how to use the narrow two dimensional territory between 0.0 and 1.0. How can we use this to draw a centered square in the middle of our billboard?</p> <p>Let's start by sketching pseudocode that uses <code>if</code> statements over the spatial field. The principles to do this are remarkably similar to how we think of the grid paper scenario.</p> <pre><code>if ( (X GREATER THAN 1) AND (Y GREATER THAN 1) )\n    paint white\nelse\n    paint black\n</code></pre> <p>Now that we have a better idea of how this will work, let\u2019s replace the <code>if</code> statement with <code>step()</code>, and instead of using 10x10 let\u2019s use normalized values between 0.0 and 1.0:</p> <pre><code>uniform vec2 u_resolution;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Each result will return 1.0 (white) or 0.0 (black).\n    float left = step(0.1,st.x);   // Similar to ( X greater than 0.1 )\n    float bottom = step(0.1,st.y); // Similar to ( Y greater than 0.1 )\n\n    // The multiplication of left*bottom will be similar to the logical AND.\n    color = vec3( left * bottom );\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>The <code>step()</code> function will turn every pixel below 0.1 to black (<code>vec3(0.0)</code>) and the rest to white (<code>vec3(1.0)</code>) . The multiplication between <code>left</code> and <code>bottom</code> works as a logical <code>AND</code> operation, where both must be 1.0 to return 1.0 . This draws two black lines, one on the bottom and the other on the left side of the canvas.</p> <p></p> <p>In the previous code we repeat the structure for each axis (left and bottom). We can save some lines of code by passing two values directly to <code>step()</code> instead of one. That looks like this:</p> <pre><code>vec2 borders = step(vec2(0.1),st);\nfloat pct = borders.x * borders.y;\n</code></pre> <p>So far, we\u2019ve only drawn two borders (bottom-left) of our rectangle. Let's do the other two (top-right). Check out the following code:</p> <p>Uncomment lines 21-22 and see how we invert the <code>st</code> coordinates and repeat the same <code>step()</code> function. That way the <code>vec2(0.0,0.0)</code> will be in the top right corner. This is the digital equivalent of flipping the page and repeating the previous procedure.</p> <p></p> <p>Take note that in lines 18 and 22 all of the sides are being multiplied together. This is equivalent to writing:</p> <pre><code>vec2 bl = step(vec2(0.1),st);       // bottom-left\nvec2 tr = step(vec2(0.1),1.0-st);   // top-right\ncolor = vec3(bl.x * bl.y * tr.x * tr.y);\n</code></pre> <p>Interesting right? This technique is all about using <code>step()</code> and multiplication for logical operations and flipping the coordinates.</p> <p>Before going forward, try the following exercises:</p> <ul> <li> <p>Change the size and proportions of the rectangle.</p> </li> <li> <p>Experiment with the same code but using <code>smoothstep()</code> instead of <code>step()</code>. Note that by changing values, you can go from blurred edges to elegant smooth borders.</p> </li> <li> <p>Do another implementation that uses <code>floor()</code>.</p> </li> <li> <p>Choose the implementation you like the most and make a function of it that you can reuse in the future. Make your function flexible and efficient.</p> </li> <li> <p>Make another function that just draws the outline of a rectangle.</p> </li> <li> <p>How do you think you can move and place different rectangles in the same billboard? If you figure out how, show off your skills by making a composition of rectangles and colors that resembles a Piet Mondrian painting.</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/07/#circles","title":"Circles","text":"<p>It's easy to draw squares on grid paper and rectangles on Cartesian coordinates, but circles require another approach, especially since we need a \"per-pixel\" algorithm. One solution is to re-map the spatial coordinates so that we can use a <code>step()</code> function to draw a circle.</p> <p>How? Let's start by going back to math class and the grid paper, where we opened a compass to the radius of a circle, pressed one of the compass points at the center of the circle and then traced the edge of the circle with a simple spin.</p> <p></p> <p>Translating this to a shader where each square on the grid paper is a pixel implies asking each pixel (or thread) if it is inside the area of the circle. We do this by computing the distance from the pixel to the center of the circle.</p> <p></p> <p>There are several ways to calculate that distance. The easiest one uses the <code>distance()</code> function, which internally computes the <code>length()</code> of the difference between two points (in our case the pixel coordinate and the center of the canvas). The <code>length()</code> function is nothing but a shortcut of the hypotenuse equation that uses square root (<code>sqrt()</code>) internally.</p> <p></p> <p>You can use <code>distance()</code>, <code>length()</code> or <code>sqrt()</code> to calculate the distance to the center of the billboard. The following code contains these three functions and the non-surprising fact that each one returns exactly same result.</p> <ul> <li>Comment and uncomment lines to try the different ways to get the same result.</li> </ul> <p>In the previous example we map the distance to the center of the billboard to the color brightness of the pixel. The closer a pixel is to the center, the lower (darker) value it has. Notice that the values don't get too high because from the center ( <code>vec2(0.5, 0.5)</code> ) the maximum distance barely goes over 0.5. Contemplate this map and think:</p> <ul> <li> <p>What you can infer from it?</p> </li> <li> <p>How we can use this to draw a circle?</p> </li> <li> <p>Modify the above code in order to contain the entire circular gradient inside the canvas.</p> </li> </ul>"},{"location":"Frontend/shader/07/#distance-field","title":"Distance field","text":"<p>We can also think of the above example as an altitude map, where darker implies taller. The gradient shows us something similar to the pattern made by a cone. Imagine yourself on the top of that cone. The horizontal distance to the edge of the cone is 0.5. This will be constant in all directions. By choosing where to \u201ccut\u201d the cone you will get a bigger or smaller circular surface.</p> <p></p> <p>Basically we are using a re-interpretation of the space (based on the distance to the center) to make shapes. This technique is known as a \u201cdistance field\u201d and is used in different ways from font outlines to 3D graphics.</p> <p>Try the following exercises:</p> <ul> <li> <p>Use <code>step()</code> to turn everything above 0.5 to white and everything below to 0.0.</p> </li> <li> <p>Inverse the colors of the background and foreground.</p> </li> <li> <p>Using <code>smoothstep()</code>, experiment with different values to get nice smooth borders on your circle.</p> </li> <li> <p>Once you are happy with an implementation, make a function of it that you can reuse in the future.</p> </li> <li> <p>Add color to the circle.</p> </li> <li> <p>Can you animate your circle to grow and shrink, simulating a beating heart? (You can get some inspiration from the animation in the previous chapter.)</p> </li> <li> <p>What about moving this circle? Can you move it and place different circles in a single billboard?</p> </li> <li> <p>What happens if you combine distances fields together using different functions and operations?</p> </li> </ul> <pre><code>pct = distance(st,vec2(0.4)) + distance(st,vec2(0.6));\npct = distance(st,vec2(0.4)) * distance(st,vec2(0.6));\npct = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\npct = max(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\npct = pow(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n</code></pre> <ul> <li>Make three compositions using this technique. If they are animated, even better!</li> </ul>"},{"location":"Frontend/shader/07/#for-your-tool-box","title":"For your tool box","text":"<p>In terms of computational power the <code>sqrt()</code> function - and all the functions that depend on it - can be expensive. Here is another way to create a circular distance field by using <code>dot()</code> product.</p>"},{"location":"Frontend/shader/07/#useful-properties-of-a-distance-field","title":"Useful properties of a Distance Field","text":"<p>Distance fields can be used to draw almost everything. Obviously the more complex a shape is, the more complicated its equation will be, but once you have the formula to make distance fields of a particular shape it is very easy to combine and/or apply effects to it, like smooth edges and multiple outlines. Because of this, distance fields are popular in font rendering, like Mapbox GL Labels, Matt DesLauriers Material Design Fonts and as is described in Chapter 7 of iPhone 3D Programming, O\u2019Reilly.</p> <p>Take a look at the following code.</p> <p>We start by moving the coordinate system to the center and shrinking it in half in order to remap the position values between -1 and 1. Also on line 24 we are visualizing the distance field values using a <code>fract()</code> function making it easy to see the pattern they create. The distance field pattern repeats over and over like rings in a Zen garden.</p> <p>Let\u2019s take a look at the distance field formula on line 19. There we are calculating the distance to the position on <code>(.3,.3)</code> or <code>vec3(.3)</code> in all four quadrants (that\u2019s what <code>abs()</code> is doing there).</p> <p>If you uncomment line 20, you will note that we are combining the distances to these four points using the <code>min()</code> to zero. The result produces an interesting new pattern.</p> <p>Now try uncommenting line 21; we are doing the same but using the <code>max()</code> function. The result is a rectangle with rounded corners. Note how the rings of the distance field get smoother the further away they get from the center.</p> <p>Finish uncommenting lines 27 to 29 one by one to understand the different uses of a distance field pattern.</p>"},{"location":"Frontend/shader/07/#polar-shapes","title":"Polar shapes","text":"<p>In the chapter about color we map the Cartesian coordinates to polar coordinates by calculating the radius and angles of each pixel with the following formula:</p> <pre><code>vec2 pos = vec2(0.5)-st;\nfloat r = length(pos)*2.0;\nfloat a = atan(pos.y,pos.x);\n</code></pre> <p>We use part of this formula at the beginning of the chapter to draw a circle. We calculated the distance to the center using <code>length()</code>. Now that we know about distance fields we can learn another way of drawing shapes using polar coordinates.</p> <p>This technique is a little restrictive but very simple. It consists of changing the radius of a circle depending on the angle to achieve different shapes. How does the modulation work? Yes, using shaping functions!</p> <p>Below you will find the same functions in the Cartesian graph and in a polar coordinates shader example (between lines 21 and 25). Uncomment the functions one-by-one, paying attention the relationship between one coordinate system and the other.</p> <p>Try to:</p> <ul> <li>Animate these shapes.</li> <li>Combine different shaping functions to cut holes in the shape to make flowers, snowflakes and gears.</li> <li>Use the <code>plot()</code> function we were using in the Shaping Functions Chapter to draw just the contour.</li> </ul>"},{"location":"Frontend/shader/07/#combining-powers","title":"Combining powers","text":"<p>Now that we've learned how to modulate the radius of a circle according to the angle using the <code>atan()</code> to draw different shapes, we can learn how use <code>atan()</code> with distance fields and apply all the tricks and effects possible with distance fields.</p> <p>The trick will use the number of edges of a polygon to construct the distance field using polar coordinates. Check out the following code from Andrew Baldwin.</p> <ul> <li> <p>Using this example, make a function that inputs the position and number of corners of a desired shape and returns a distance field value.</p> </li> <li> <p>Mix distance fields together using <code>min()</code> and <code>max()</code>.</p> </li> <li> <p>Choose a geometric logo to replicate using distance fields.</p> </li> </ul> <p>Congratulations! You have made it through the rough part! Take a break and let these concepts settle - drawing simple shapes in Processing is easy but not here. In shader-land drawing shapes is twisted, and it can be exhausting to adapt to this new paradigm of coding.</p>"},{"location":"Frontend/shader/07/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li> <p>LYGIA's draw functions  are set of reusable functions to draw 2D shapes and patterns. You can also explore LYGIA's SDF functions folder to combine more complex shapes through distance fields.  It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</p> </li> <li> <p>Down at the end of this chapter you will find a link to PixelSpirit Deck this deck of cards will help you learn new SDF functions, compose them into your designs and use on your shaders. The deck has a progressive learning curve, so taking one card a day and working on it will push and challenge your skills for months. </p> </li> </ul> <p>Now that you know how to draw shapes I'm sure new ideas will pop into your mind. In the following chapter you will learn how to move, rotate and scale shapes. This will allow you to make compositions!</p>"},{"location":"Frontend/shader/07/NOTES/","title":"NOTES","text":"<ul> <li>[Distance Transforms of Sampled Functions] (http://cs.brown.edu/~pff/papers/dt-final.pdf)</li> </ul>"},{"location":"Frontend/shader/07/NOTES/#nicolas","title":"nicolas","text":"<ul> <li> <p>after the pseudocode, explain why not using 'if' instead of step( threshold, value  ) as this is (fucking) counter-intuitive :)</p> </li> <li> <p>L 61 'That way the <code>vec2(0.0,0.0)</code>'  should rather be : 'That way the <code>vec2</code> tl' to disambiguate it from br which is also a vec2</p> </li> <li>L 113 the longest distance between a pixel and the center in a normalised space is: SQRT( 2 ) * 0.5 = ~0.7071..., not 0.5 (also present ion chapter 6)</li> <li>L 123 'a bigger or smaller circular surface' a circular surface is called a 'disc' :)</li> <li>L 175 a word about Quadrants and its relation to the bi-unit square maybe? or just explaining why we use a bi-unit square instead of the regular 0-1 normalized space...</li> <li>L 217 'how use' missing 'to'</li> </ul>"},{"location":"Frontend/shader/07/README-ch/","title":"7","text":""},{"location":"Frontend/shader/07/README-ch/#_1","title":"\u5f62\u72b6","text":"<p>\u7ec8\u4e8e\uff01\u6211\u4eec\u4e00\u76f4\u5b66\u4e60\u7684\u6280\u80fd\u5c31\u7b49\u7740\u8fd9\u4e00\u523b\uff01\u4f60\u5df2\u7ecf\u5b66\u4e60\u8fc7GLSL\u7684\u5927\u90e8\u5206\u57fa\u7840\uff0c\u7c7b\u578b\u548c\u51fd\u6570\u3002\u4f60\u4e00\u904d\u53c8\u4e00\u904d\u7684\u7ec3\u4e60\u4f60\u7684\u9020\u578b\u65b9\u7a0b\u3002\u662f\u65f6\u5019\u628a\u4ed6\u4eec\u6574\u5408\u8d77\u6765\u4e86\u3002\u4f60\u5c31\u662f\u4e3a\u4e86\u8fd9\u4e2a\u6311\u6218\u800c\u6765\u7684\uff01\u5728\u8fd9\u4e00\u7ae0\u91cc\uff0c\u4f60\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ee5\u4e00\u79cd\u5e76\u884c\u5904\u7406\u65b9\u5f0f\u6765\u753b\u7b80\u5355\u7684\u56fe\u5f62\u3002</p>"},{"location":"Frontend/shader/07/README-ch/#_2","title":"\u957f\u65b9\u5f62","text":"<p>\u60f3\u8c61\u6211\u4eec\u6709\u5f20\u6570\u5b66\u8bfe\u4e0a\u4f7f\u7528\u7684\u65b9\u683c\u7eb8\uff0c\u800c\u6211\u4eec\u7684\u4f5c\u4e1a\u662f\u753b\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002\u7eb8\u7684\u5927\u5c0f\u662f10 x 10\u800c\u6b63\u65b9\u5f62\u5e94\u8be5\u662f8 x 8\u3002\u4f60\u4f1a\u600e\u4e48\u505a\uff1f</p> <p></p> <p>\u4f60\u662f\u4e0d\u662f\u4f1a\u6d82\u6ee1\u9664\u4e86\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u548c\u6700\u540e\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u7684\u6240\u6709\u683c\u70b9\uff1f</p> <p>\u8fd9\u548c\u7740\u8272\u5668\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u65b9\u683c\u7eb8\u4e0a\u7684\u6bcf\u4e2a\u5c0f\u65b9\u5f62\u683c\u70b9\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\uff08\u4e00\u4e2a\u50cf\u7d20\uff09\u3002\u6bcf\u4e2a\u683c\u70b9\u6709\u5b83\u7684\u4f4d\u7f6e\uff0c\u5c31\u60f3\u68cb\u76d8\u4e0a\u7684\u5750\u6807\u4e00\u6837\u3002\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u6211\u4eec\u5c06x\u548cy\u6620\u5c04\u5230rgb\u901a\u9053\uff0c\u5e76\u4e14\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u5c06\u4e8c\u7ef4\u8fb9\u754c\u9650\u5236\u57280\u548c1\u4e4b\u95f4\u3002\u6211\u4eec\u5982\u4f55\u7528\u8fd9\u4e9b\u6765\u753b\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u4f4d\u4e8e\u5c4f\u5e55\u4e2d\u5fc3\u7684\u6b63\u65b9\u5f62\uff1f</p> <p>\u6211\u4eec\u4ece\u7a7a\u95f4\u89d2\u5ea6\u6765\u5224\u522b\u7684 if \u8bed\u53e5\u4f2a\u4ee3\u7801\u5f00\u59cb\u3002\u8fd9\u4e2a\u539f\u7406\u548c\u6211\u4eec\u601d\u8003\u65b9\u683c\u7eb8\u7684\u7b56\u7565\u5f02\u66f2\u540c\u5de5\u3002</p> <pre><code>    if ( (X GREATER THAN 1) AND (Y GREATER THAN 1) )\n        paint white\n    else\n        paint black\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u6709\u4e2a\u66f4\u597d\u7684\u4e3b\u610f\u8ba9\u8fd9\u4e2a\u60f3\u6cd5\u5b9e\u73b0\uff0c\u6765\u8bd5\u8bd5\u628aif\u8bed\u53e5\u6362\u6210step\uff08\uff09\uff0c\u5e76\u75280\u52301\u4ee3\u66ff10 x 10\u7684\u8303\u56f4\u3002</p> <pre><code>uniform vec2 u_resolution;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Each result will return 1.0 (white) or 0.0 (black).\n    float left = step(0.1,st.x);   // Similar to ( X greater than 0.1 )\n    float bottom = step(0.1,st.y); // Similar to ( Y greater than 0.1 )\n\n    // The multiplication of left*bottom will be similar to the logical AND.\n    color = vec3( left * bottom );\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>step\uff08\uff09\u51fd\u6570\u4f1a\u8ba9\u6bcf\u4e00\u4e2a\u5c0f\u4e8e0.1\u7684\u50cf\u7d20\u53d8\u6210\u9ed1\u8272\uff08vec3\uff080.0\uff09\uff09\u5e76\u5c06\u5176\u4f59\u7684\u53d8\u6210\u767d\u8272\uff08vec3\uff081.0\uff09\uff09\u3002<code>left</code> \u4e58 <code>bottom</code> \u6548\u679c\u76f8\u5f53\u4e8e\u903b\u8f91 AND \u2014\u2014 \u5f53 x y \u90fd\u4e3a 1.0 \u65f6\u4e58\u79ef\u624d\u80fd\u662f 1.0\u3002\u8fd9\u6837\u505a\u7684\u6548\u679c\u5c31\u662f\u753b\u4e86\u4e24\u6761\u9ed1\u7ebf\uff0c\u4e00\u4e2a\u5728\u753b\u5e03\u7684\u5e95\u8fb9\u53e6\u4e00\u4e2a\u5728\u5de6\u8fb9\u3002</p> <p></p> <p>\u5728\u524d\u4e00\u4f8b\u4ee3\u7801\u4e2d\u6211\u4eec\u91cd\u590d\u6bcf\u4e2a\u50cf\u7d20\u7684\u7ed3\u6784\uff08\u5de6\u8fb9\u548c\u5e95\u8fb9\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u6765\u7684\u4e00\u4e2a\u503c\u6362\u6210\u4e24\u4e2a\u503c\u76f4\u63a5\u7ed9step\uff08\uff09\u6765\u7cbe\u51cf\u4ee3\u7801\u3002\u5c31\u50cf\u8fd9\u6837\uff1a</p> <pre><code>    vec2 borders = step(vec2(0.1),st);\n    float pct = borders.x * borders.y;\n</code></pre> <p>\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u753b\u4e86\u957f\u65b9\u5f62\u7684\u4e24\u6761\u8fb9\uff08\u5de6\u8fb9\u548c\u5e95\u9762\uff09\u3002\u770b\u4e0b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // bottom-left\n    vec2 bl = step(vec2(0.1),st);\n    float pct = bl.x * bl.y;\n\n    // top-right\n    // vec2 tr = step(vec2(0.1),1.0-st);\n    // pct *= tr.x * tr.y;\n\n    color = vec3(pct);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u53d6\u6d88 21~22 \u884c\u7684\u6ce8\u91ca\u6765\u770b\u770b\u5982\u4f55\u8f6c\u7f6e\u5750\u6807\u7684\u540c\u65f6\u91cd\u590d\u4f7f\u7528 <code>step()</code> \u51fd\u6570\u3002\u8fd9\u6837\u4e8c\u7ef4\u5411\u91cf vec2(0.0,0.0) \u4f1a\u88ab\u53d8\u6362\u5230\u53f3\u4e0a\u89d2\u3002\u8fd9\u5c31\u662f\u8f6c\u7f6e\u9875\u9762\u548c\u91cd\u590d\u8fc7\u7a0b\u7684\u6570\u5b57\u7b49\u4ef7\u3002</p> <p></p> <p>\u6ce8\u610f\u5728 18 \u884c\u548c 22 \u884c\uff0c\u6240\u6709\u7684\u8fb9\uff08\u5bbd\uff09\u90fd\u88ab\u653e\u5927\u4e86\u3002\u7b49\u4ef7\u4e8e\u8fd9\u6837\u5199\uff1a</p> <pre><code>    vec2 bl = step(vec2(0.1),st);       // bottom-left\n    vec2 tr = step(vec2(0.1),1.0-st);   // top-right\n    color = vec3(bl.x * bl.y * tr.x * tr.y);\n</code></pre> <p>\u662f\u4e0d\u662f\u5f88\u6709\u8da3\uff1f\u8fd9\u79cd\u90fd\u662f\u5173\u4e8e\u8fd0\u7528 step() \u51fd\u6570\u3001\u903b\u8f91\u8fd0\u7b97\u548c\u8f6c\u7f6e\u5750\u6807\u7684\u7ed3\u5408\u3002</p> <p>\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a\u73af\u8282\u4e4b\u524d\uff0c\u6311\u6218\u4e0b\u4e0b\u9762\u7684\u7ec3\u4e60\uff1a</p> <ul> <li> <p>\u6539\u53d8\u957f\u65b9\u5f62\u7684\u6bd4\u4f8b\u548c\u5927\u5c0f\u3002</p> </li> <li> <p>\u7528 smoothstep() \u51fd\u6570\u4ee3\u66ff step() \u51fd\u6570\uff0c\u8bd5\u8bd5\u5728\u76f8\u540c\u7684\u4ee3\u7801\u4e0b\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u6ce8\u610f\u901a\u8fc7\u6539\u53d8\u53d6\u503c\uff0c\u4f60\u53ef\u4ee5\u4e0d\u4ec5\u53ef\u4ee5\u5f97\u5230\u6a21\u7cca\u8fb9\u754c\u4e5f\u53ef\u4ee5\u7531\u6f02\u4eae\u7684\u987a\u6ed1\u8fb9\u754c\u3002</p> </li> <li> <p>\u5e94\u7528 floor() \u505a\u4e2a\u53e6\u5916\u7684\u6848\u4f8b\u3002</p> </li> <li> <p>\u6311\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u505a\u6210\u51fd\u6570\uff0c\u8fd9\u6837\u672a\u6765\u4f60\u53ef\u4ee5\u8c03\u7528\u5b83\u3002\u5e76\u4e14\u8ba9\u5b83\u7075\u6d3b\u9ad8\u6548\u3002</p> </li> <li> <p>\u5199\u4e00\u4e2a\u53ea\u753b\u957f\u65b9\u5f62\u56db\u8fb9\u7684\u51fd\u6570\u3002</p> </li> <li> <p>\u60f3\u4e00\u4e0b\u5982\u4f55\u5728\u4e00\u4e2a\u753b\u677f\u4e0a\u79fb\u52a8\u5e76\u653e\u7f6e\u4e0d\u540c\u7684\u957f\u65b9\u5f62\uff1f\u5982\u679c\u4f60\u505a\u51fa\u6765\u4e86\uff0c\u8bd5\u7740\u50cfPiet Mondrian\u4e00\u6837\u521b\u4f5c\u4ee5\u957f\u65b9\u5f62\u548c\u8272\u5f69\u7684\u56fe\u753b\u3002</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/07/README-ch/#_3","title":"\u5706","text":"<p>\u5728\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u4e0b\uff0c\u7528\u65b9\u683c\u7eb8\u6765\u753b\u6b63\u65b9\u5f62\u548c\u957f\u65b9\u5f62\u662f\u5f88\u5bb9\u6613\u7684\u3002\u4f46\u662f\u753b\u5706\u5c31\u9700\u8981\u53e6\u4e00\u79cd\u65b9\u5f0f\u4e86\uff0c\u5c24\u5176\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5bf9\u201c\u6bcf\u4e2a\u50cf\u7d20\u201d\u7684\u7b97\u6cd5\u3002\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u7528<code>step()</code>\u51fd\u6570\u5c06\u91cd\u65b0\u6620\u5c04\u7684\u7a7a\u95f4\u5750\u6807\u6765\u753b\u5706\u3002</p> <p>\u5982\u4f55\u5b9e\u73b0\uff1f\u8ba9\u6211\u4eec\u91cd\u65b0\u56de\u987e\u4e00\u4e0b\u6570\u5b66\u8bfe\u4e0a\u7684\u65b9\u683c\u7eb8\uff1a\u6211\u4eec\u628a\u5706\u89c4\u5c55\u5f00\u5230\u534a\u5f84\u7684\u957f\u5ea6\uff0c\u628a\u4e00\u4e2a\u9488\u811a\u6233\u5728\u5706\u5706\u5fc3\u4e0a\uff0c\u65cb\u8f6c\u7740\u628a\u5706\u7684\u8fb9\u754c\u7559\u4e0b\u6765\u3002</p> <p></p> <p>\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u7ffb\u8bd1\u7ed9 shader \u610f\u5473\u7740\u7eb8\u4e0a\u7684\u6bcf\u4e2a\u65b9\u5f62\u683c\u70b9\u90fd\u4f1a\u9690\u542b\u7740\u95ee\u6bcf\u4e2a\u50cf\u7d20\uff08\u7ebf\u7a0b\uff09\u662f\u5426\u5728\u5706\u7684\u533a\u57df\u4ee5\u5185\u3002\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u50cf\u7d20\u5230\u4e2d\u5fc3\u7684\u8ddd\u79bb\u6765\u5b9e\u73b0\uff08\u8fd9\u4e2a\u5224\u65ad\uff09\u3002</p> <p></p> <p>There are several ways to calculate that distance. The easiest one uses the <code>distance()</code> function, which internally computes the <code>length()</code> of the difference between two points (in our case the pixel coordinate and the center of the canvas). The <code>length()</code> function is nothing but a shortcut of the hypotenuse equation that uses square root (<code>sqrt()</code>) internally.</p> <p>\u6709\u51e0\u79cd\u65b9\u6cd5\u6765\u8ba1\u7b97\u8ddd\u79bb\u3002\u6700\u7b80\u5355\u7684\u662f\u7528<code>distance()</code>\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5176\u5b9e\u5185\u90e8\u8c03\u7528 <code>length()</code>\u51fd\u6570\uff0c\u8ba1\u7b97\u4e0d\u540c\u4e24\u70b9\u7684\u8ddd\u79bb\uff08\u5728\u6b64\u4f8b\u4e2d\u662f\u50cf\u7d20\u5750\u6807\u548c\u753b\u5e03\u4e2d\u5fc3\u7684\u8ddd\u79bb\uff09\u3002length\uff08\uff09\u51fd\u6570\u5185\u90e8\u53ea\u4e0d\u8fc7\u662f\u7528\u5e73\u65b9\u6839(<code>sqrt()</code>)\u8ba1\u7b97\u659c\u8fb9\u7684\u65b9\u7a0b\u3002</p> <p></p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528<code>distance()</code>, <code>length()</code> \u6216 <code>sqrt()</code>\u5230\u8ba1\u7b97\u5c4f\u5e55\u7684\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5305\u542b\u7740\u4e09\u4e2a\u51fd\u6570\uff0c\u6beb\u65e0\u60ac\u5ff5\u7684\u4ed6\u4eec\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\u3002</p> <ul> <li>\u6ce8\u91ca\u548c\u53d6\u6d88\u67d0\u884c\u7684\u6ce8\u91ca\u6765\u8bd5\u8bd5\u770b\u7528\u4e0d\u540c\u65b9\u5f0f\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002</li> </ul> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    float pct = 0.0;\n\n    // a. The DISTANCE from the pixel to the center\n    pct = distance(st,vec2(0.5));\n\n    // b. The LENGTH of the vector\n    //    from the pixel to the center\n    // vec2 toCenter = vec2(0.5)-st;\n    // pct = length(toCenter);\n\n    // c. The SQUARE ROOT of the vector\n    //    from the pixel to the center\n    // vec2 tC = vec2(0.5)-st;\n    // pct = sqrt(tC.x*tC.x+tC.y*tC.y);\n\n    vec3 color = vec3(pct);\n\n    gl_FragColor = vec4( color, 1.0 );\n}\n</code></pre> <p>\u4e0a\u56de\u6211\u4eec\u628a\u5230\u4e2d\u5fc3\u7684\u8ddd\u79bb\u6620\u5c04\u4e3a\u989c\u8272\u4eae\u5ea6\u3002\u79bb\u4e2d\u5fc3\u8d8a\u8fd1\u7684\u8d8a\u6697\u3002\u6ce8\u610f\u5230\u6620\u5c04\u503c\u4e0d\u5b9c\u8fc7\u9ad8\uff0c\u56e0\u4e3a\u4ece\u4e2d\u5fc3\uff08vec2(0.5, 0.5)\uff09\u5230\u6700\u8fdc\u8ddd\u79bb\u624d\u521a\u521a\u8d85\u8fc70.5\u4e00\u70b9\u3002\u4ed4\u7ec6\u8003\u5bdf\u8fd9\u4e2a\u6620\u5c04\uff1a</p> <ul> <li> <p>\u4f60\u80fd\u4ece\u4e2d\u63a8\u65ad\u51fa\u4ec0\u4e48\uff1f</p> </li> <li> <p>\u6211\u4eec\u600e\u4e48\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u753b\u5706\uff1f</p> </li> <li> <p>\u8bd5\u8bd5\u6709\u6ca1\u6709\u5176\u4ed6\u65b9\u6cd5\u6765\u5b9e\u73b0\u8fd9\u6837\u753b\u5e03\u5185\u5706\u5f62\u6e10\u53d8\u7684\u6548\u679c\u3002</p> </li> </ul>"},{"location":"Frontend/shader/07/README-ch/#_4","title":"\u8ddd\u79bb\u573a","text":"<p>\u6211\u4eec\u53ef\u4e5f\u53ef\u4ee5\u4ece\u53e6\u5916\u7684\u89d2\u5ea6\u601d\u8003\u4e0a\u9762\u7684\u4f8b\u5b50\uff1a\u628a\u5b83\u5f53\u505a\u6d77\u62d4\u5730\u56fe\uff08\u7b49\u9ad8\u7ebf\u56fe\uff09\u2014\u2014\u8d8a\u9ed1\u7684\u5730\u65b9\u610f\u5473\u7740\u6d77\u62d4\u8d8a\u9ad8\u3002\u60f3\u8c61\u4e0b\uff0c\u4f60\u5c31\u5728\u5706\u9525\u7684\u9876\u7aef\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684\u6e10\u53d8\u5c31\u548c\u5706\u9525\u7684\u7b49\u9ad8\u7ebf\u56fe\u6709\u4e9b\u76f8\u4f3c\u3002\u5230\u5706\u9525\u7684\u6c34\u5e73\u8ddd\u79bb\u662f\u4e00\u4e2a\u5e38\u65700.5\u3002\u8fd9\u4e2a\u8ddd\u79bb\u503c\u5728\u6bcf\u4e2a\u65b9\u5411\u4e0a\u90fd\u662f\u76f8\u7b49\u7684\u3002\u901a\u8fc7\u9009\u62e9\u4ece\u90a3\u91cc\u622a\u53d6\u8fd9\u4e2a\u5706\u9525\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u6216\u5927\u6216\u5c0f\u7684\u5706\u7eb9\u9762\u3002</p> <p></p> <p>\u5176\u5b9e\u6211\u4eec\u662f\u901a\u8fc7\u201c\u7a7a\u95f4\u8ddd\u79bb\u201d\u6765\u91cd\u65b0\u89e3\u91ca\u4ec0\u4e48\u662f\u56fe\u5f62\u3002\u8fd9\u79cd\u6280\u5de7\u88ab\u79f0\u4e4b\u4e3a\u201c\u8ddd\u79bb\u573a\u201d\uff0c\u4ece\u5b57\u4f53\u8f6e\u5ed3\u52303D\u56fe\u5f62\u88ab\u5e7f\u6cdb\u5e94\u7528\u3002</p> <p>\u6765\u5c0f\u8bd5\u4e0b\u725b\u5200\uff1a</p> <ul> <li> <p>\u7528<code>step()</code>\u51fd\u6570\u628a\u6240\u6709\u5927\u4e8e0.5\u7684\u50cf\u7d20\u70b9\u53d8\u6210\u767d\u8272\uff0c\u5e76\u628a\u5c0f\u4e8e\u7684\u53d8\u6210\u9ed1\u8272\uff080.0\uff09\u3002</p> </li> <li> <p>\u53cd\u8f6c\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\u3002</p> </li> <li> <p>\u4f7f\u7528<code>smoothstep()</code>\u51fd\u6570\uff0c\u901a\u8fc7\u4fee\u6539\u4e0d\u540c\u7684\u503c\u6765\u8bd5\u7740\u505a\u51fa\u4e00\u4e2a\u8fb9\u754c\u987a\u6ed1\u7684\u5706\u3002</p> </li> <li> <p>\u4e00\u65e6\u9047\u5230\u4ee4\u4f60\u6ee1\u610f\u7684\u5e94\u7528\uff0c\u628a\u4ed6\u5199\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u6837\u5c06\u6765\u5c31\u53ef\u4ee5\u8c03\u7528\u4e86\u3002</p> </li> <li> <p>\u7ed9\u8fd9\u4e2a\u5706\u6765\u4e9b\u7f24\u7eb7\u7684\u989c\u8272\u5427\uff01</p> </li> <li> <p>\u518d\u52a0\u70b9\u52a8\u753b\uff1f\u4e00\u95ea\u4e00\u95ea\u4eae\u6676\u6676\uff1f\u6216\u8005\u662f\u7830\u7830\u8df3\u52a8\u7684\u5fc3\u810f\uff1f\uff08\u6216\u8bb8\u4f60\u53ef\u4ee5\u4ece\u4e0a\u4e00\u7ae0\u6c72\u53d6\u4e00\u4e9b\u7075\u611f\uff09</p> </li> <li> <p>\u8ba9\u5b83\u52a8\u8d77\u6765\uff1f\u80fd\u4e0d\u80fd\u79fb\u52a8\u5b83\u5e76\u4e14\u5728\u540c\u4e00\u4e2a\u5c4f\u5e55\u4e0a\u653e\u7f6e\u591a\u4e2a\u5706\uff1f</p> </li> <li> <p>\u5982\u679c\u4f60\u7ed3\u5408\u51fd\u6570\u6765\u6df7\u5408\u4e0d\u540c\u7684\u8ddd\u79bb\u573a\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f</p> </li> </ul> <pre><code>pct = distance(st,vec2(0.4)) + distance(st,vec2(0.6));\npct = distance(st,vec2(0.4)) * distance(st,vec2(0.6));\npct = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\npct = max(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\npct = pow(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n</code></pre> <ul> <li>\u7528\u8fd9\u79cd\u6280\u5de7\u5236\u4f5c\u4e09\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u5b83\u4eec\u662f\u8fd0\u52a8\u7684\uff0c\u90a3\u5c31\u518d\u597d\u4e0d\u8fc7\u5566\uff01</li> </ul>"},{"location":"Frontend/shader/07/README-ch/#_5","title":"\u6dfb\u52a0\u81ea\u5df1\u7684\u5de5\u5177\u7bb1","text":"<p>\u5c31\u8ba1\u7b97\u6548\u7387\u800c\u8a00\uff0c<code>sqrt()</code>\u51fd\u6570\uff0c\u4ee5\u53ca\u6240\u6709\u4f9d\u8d56\u5b83\u7684\u8fd0\u7b97\uff0c\u90fd\u8017\u65f6\u8017\u529b\u3002<code>dot()</code>\u70b9\u4e58\u662f\u53e6\u5916\u4e00\u79cd\u7528\u6765\u9ad8\u6548\u8ba1\u7b97\u5706\u5f62\u8ddd\u79bb\u573a\u7684\u65b9\u5f0f\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    vec3 color = vec3(circle(st,0.9));\n\n    gl_FragColor = vec4( color, 1.0 );\n}\n</code></pre>"},{"location":"Frontend/shader/07/README-ch/#_6","title":"\u8ddd\u79bb\u573a\u7684\u7279\u70b9","text":"<p>\u8ddd\u79bb\u573a\u51e0\u4e4e\u53ef\u4ee5\u7528\u6765\u753b\u4efb\u4f55\u4e1c\u897f\u3002\u663e\u7136\uff0c\u56fe\u5f62\u8d8a\u590d\u6742\uff0c\u65b9\u7a0b\u4e5f\u8d8a\u590d\u6742\u3002\u4f46\u662f\u4e00\u65e6\u4f60\u627e\u5230\u67d0\u4e2a\u7279\u5b9a\u56fe\u5f62\u7684\u516c\u5f0f\uff0c\u5c31\u5f88\u5bb9\u6613\u6dfb\u52a0\u56fe\u5f62\u6216\u5e94\u7528\u50cf\u8fc7\u6e21\u8fb9\u754c\u7684\u6548\u679c\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u8ddd\u79bb\u573a\u7ecf\u5e38\u7528\u4e8e\u5b57\u4f53\u6e32\u67d3\uff0c\u4f8b\u5982Mapbox GL Labels, Matt DesLauriers Material Design Fonts \u548c as is described in Chapter 7 of iPhone 3D Programming, O\u2019Reilly.</p> <p>\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st.x *= u_resolution.x/u_resolution.y;\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n  // Make the distance field\n  d = length( abs(st)-.3 );\n  // d = length( min(abs(st)-.3,0.) );\n  // d = length( max(abs(st)-.3,0.) );\n\n  // Visualize the distance field\n  gl_FragColor = vec4(vec3(fract(d*10.0)),1.0);\n\n  // Drawing with the distance field\n  // gl_FragColor = vec4(vec3( step(.3,d) ),1.0);\n  // gl_FragColor = vec4(vec3( step(.3,d) * step(d,.4)),1.0);\n  // gl_FragColor = vec4(vec3( smoothstep(.3,.4,d)* smoothstep(.6,.5,d)) ,1.0);\n}\n</code></pre> <p>\u6211\u4eec\u4e00\u5f00\u59cb\u628a\u5750\u6807\u7cfb\u79fb\u5230\u4e2d\u5fc3\u5e76\u628a\u5b83\u6620\u5c04\u5230-1\u52301\u4e4b\u95f4\u3002\u5728 24\u884c \u8fd9\u513f\uff0c\u6211\u4eec\u7528\u4e00\u4e2a<code>fract()</code> \u51fd\u6570\u6765\u5448\u73b0\u8fd9\u4e2a\u8ddd\u79bb\u573a\u4ea7\u751f\u7684\u56fe\u6848\u3002\u8fd9\u4e2a\u8ddd\u79bb\u573a\u4e0d\u65ad\u91cd\u590d\uff0c\u5c31\u50cf\u5728\u7985\u82b1\u56ed\u770b\u5230\u7684\u73af\u4e00\u6837\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e0b 19\u884c \u7684\u8ddd\u79bb\u573a\u65b9\u7a0b\u3002\u8fd9\u91cc\u6211\u4eec\u5728\u8ba1\u7b97\u70b9  <code>(.3,.3)</code> \u6216 <code>vec3(.3)</code>\u5230\u6240\u6709\u56db\u8c61\u9650\u7684\u8ddd\u79bb\uff08\u8fd9\u5c31\u662f <code>abs()</code> \u5728\u8d77\u4f5c\u7528\uff09\u3002</p> <p>\u5982\u679c\u4f60\u53d6\u6d88\u7b2c 20\u884c \u7684\u6ce8\u91ca\uff0c\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u628a\u5230\u56db\u4e2a\u70b9\u7684\u8ddd\u79bb\u7528<code>min()</code> \u51fd\u6570\u5408\u5e76\u52300\uff0c\u5e76\u4ea7\u751f\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u56fe\u6848\u3002</p> <p>\u73b0\u5728\u518d\u8bd5\u7740\u53d6\u6d88\u7b2c 21\u884c \u7684\u6ce8\u91ca\uff0c\u6211\u4eec\u505a\u7684\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u7528\u7684\u662f <code>max()</code> \u51fd\u6570\u3002\u8fd9\u6b21\u7684\u8bb0\u8fc7\u662f\u5706\u89d2\u77e9\u5f62\u3002\u6ce8\u610f\u8ddd\u79bb\u573a\u7684\u73af\u5f62\u662f\u5982\u4f55\u79bb\u4e2d\u5fc3\u8d8a\u8fdc\u8d8a\u5149\u6ed1\u7684\u3002</p> <p>\u6700\u540e\u4ece27 \u884c\u5230 29 \u884c\u4e00\u884c\u884c\u5730\u53d6\u6d88\u6ce8\u91ca\uff0c\u601d\u8003\u8ddd\u79bb\u573a\u7684\u4e0d\u540c\u7528\u9014\u3002</p>"},{"location":"Frontend/shader/07/README-ch/#_7","title":"\u6781\u5750\u6807\u4e0b\u7684\u56fe\u5f62","text":"<p>\u5728\u5173\u4e8e\u989c\u8272\u7684\u7ae0\u8282\u6211\u4eec\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u7a0b\u628a\u6bcf\u4e2a\u50cf\u7d20\u7684 \u534a\u5f84 \u548c \u89d2\u5ea6 \u7b1b\u5361\u5c14\u5750\u6807\u6620\u5c04\u5230\u6781\u5750\u6807\u3002</p> <pre><code>    vec2 pos = vec2(0.5)-st;\n    float r = length(pos)*2.0;\n    float a = atan(pos.y,pos.x);\n</code></pre> <p>\u6211\u4eec\u7528\u4e86\u90e8\u5206\u65b9\u7a0b\u5728\u8fd9\u7ae0\u7684\u5f00\u5934\u6765\u753b\u5706\uff0c\u5373\u7528 <code>length()</code> \u8ba1\u7b97\u5230\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7528\u6781\u5750\u6807\u6765\u753b\u5706\u3002</p> <p>\u6781\u5750\u6807\u8fd9\u79cd\u65b9\u5f0f\u867d\u7136\u6709\u6240\u9650\u5236\u4f46\u5374\u5341\u5206\u7b80\u5355\u3002</p> <p>\u4e0b\u9762\u4f60\u4f1a\u770b\u5230\u5728\u540c\u6837\u5728\u7b1b\u5361\u5c14\u5750\u6807\u4e0b\u56fe\u5f62\u5728\u6781\u5750\u6807\u4e0b\u7684\u7740\u8272\u5668\u6848\u4f8b\uff08\u5728 lines 21 \u548c 25\u4e4b\u95f4\uff09\u3002\u5bf9\u8fd9\u4e9b\u51fd\u6570\u4e00\u4e2a\u4e2a\u53d6\u6d88\u6ce8\u91ca\uff0c\u770b\u770b\u4e24\u5750\u6807\u7cfb\u4e4b\u95f4\u7684\u8054\u7cfb\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec2 pos = vec2(0.5)-st;\n\n    float r = length(pos)*2.0;\n    float a = atan(pos.y,pos.x);\n\n    float f = cos(a*3.);\n    // f = abs(cos(a*3.));\n    // f = abs(cos(a*2.5))*.5+.3;\n    // f = abs(cos(a*12.)*sin(a*3.))*.8+.1;\n    // f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;\n\n    color = vec3( 1.-smoothstep(f,f+0.02,r) );\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p>\u8bd5\u7740\uff1a</p> <ul> <li>\u8ba9\u8fd9\u4e9b\u56fe\u5f62\u52a8\u8d77\u6765\u3002</li> <li>\u7ed3\u5408\u4e0d\u540c\u7684\u9020\u578b\u51fd\u6570\u6765 \u96d5\u523b \u56fe\u5f62\uff0c\u5236\u4f5c\u8bf8\u5982\u82b1\uff0c\u96ea\u82b1\u548c\u9f7f\u8f6e\u3002</li> <li>\u7528\u6211\u4eec\u5728 \u9020\u578b\u51fd\u6570 \u7ae0\u8282\u7684 <code>plot()</code> \u51fd\u6570\u753b\u7b49\u9ad8\u7ebf\u3002</li> </ul>"},{"location":"Frontend/shader/07/README-ch/#_8","title":"\u6574\u5408\u7684\u9b45\u529b","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u77e5\u9053\u5982\u4f55\u7528<code>atan()</code>\u51fd\u6570\u6765\u6839\u636e\u89d2\u5ea6\u8c03\u6574\u534a\u5f84\u4ee5\u83b7\u5f97\u4e0d\u540c\u7684\u56fe\u5f62\uff0c\u4ee5\u53ca\u5982\u4f55\u7528<code>atan()</code>\u7ed3\u5408\u6240\u4ee5\u548c\u8ddd\u79bb\u573a\u6709\u5173\u7684\u6280\u5de7\u5f97\u5230\u53ef\u80fd\u7684\u6548\u679c\u3002</p> <p>\u770b\u4e0b\u4e0b\u9762\u6765\u81eaAndrew Baldwin\u7684\u4f8b\u5b50\u3002\u8fd9\u91cc\u7684\u6280\u5de7\u662f\u7528\u6781\u5750\u6807\u7684\u65b9\u5f0f\u901a\u8fc7\u5b9a\u4e49\u591a\u8fb9\u5f62\u7684\u8fb9\u6570\u6765\u6784\u5efa\u4e00\u4e2a\u8ddd\u79bb\u573a\u3002</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st.x *= u_resolution.x/u_resolution.y;\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n  // Number of sides of your shape\n  int N = 3;\n\n  // Angle from the current pixel\n  float a = atan(st.x,st.y)+PI;\n\n  // Angular spacing between vertices of shape\n  float r = TWO_PI/float(N);\n\n  // Shaping function that modulate the distance\n  d = cos(floor(.5+a/r)*r-a)*length(st);\n\n  color = vec3(1.0-smoothstep(.4,.41,d));\n  // color = vec3(d);\n\n  gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <ul> <li> <p>\u7528\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6539\u9020\u4e00\u4e2a\u8f93\u5165\u4f4d\u7f6e\uff0c\u6307\u5b9a\u56fe\u5f62\uff08\u5f62\u72b6\uff09\u7684\u9876\u70b9\u6570\u6765\u8fd4\u56de\u4e00\u4e2a\u8ddd\u79bb\u573a\uff08\u7684\u503c\uff09\u3002</p> </li> <li> <p>\u7ed3\u5408\u4f7f\u7528 <code>min()</code> \u548c <code>max()</code> \u51fd\u6570\u6df7\u5408\u8ddd\u79bb\u573a\u3002</p> </li> <li> <p>\u7528\u8ddd\u79bb\u573a\u753b\u4e2a\u81ea\u5df1\u611f\u5174\u8da3\u7684logo\u3002</p> </li> </ul> <p>\u606d\u559c\uff01\u4f60\u5b8c\u6210\u4e86\u6700\u8270\u96be\u7684\u90e8\u5206\uff01\u4f11\u606f\u4e0b\u8ba9\u8fd9\u4e9b\u6982\u5ff5\u6c89\u6dc0\u4e00\u4e0b\u5427 \u2014\u2014 \u7528Processing \u6765\u753b\u7b80\u5355\u7684\u5f62\u72b6\u5f88\u5bb9\u6613\uff0c\u4f46\u5374\u4e0d\u5230\u706b\u5019\u3002\u5728 shader \u7684\u4e16\u754c\u91cc\uff0c\u753b\u5f62\u72b6\u662f\u5f88\u7ea0\u7ed3\uff0c\u800c\u4e14\u9002\u5e94\u8fd9\u79cd\u65b0\u7684\u7f16\u7a0b\u8303\u5f0f\u4f1a\u6709\u4e9b\u7d2f\u4eba\u3002</p> <p>\u5728\u672c\u7ae0\u7684\u6700\u540e\uff0c\u60a8\u5c06\u627e\u5230[PixelSpirit Deck]\uff08https://patriciogonzalezvivo.github.io/PixelSpiritDeck/\uff09\u7684\u94fe\u63a5\uff0c\u8fd9\u7ec4\u5361\u7247\u5c06\u5e2e\u52a9\u60a8\u5b66\u4e60\u65b0\u7684SDF\u529f\u80fd\uff0c\u5c06\u5176\u7ec4\u5408\u5230\u60a8\u7684\u8bbe\u8ba1\u548c\u4f7f\u7528\u4e2d \u5728\u60a8\u7684\u7740\u8272\u5668\u4e0a\u3002 \u5361\u7247\u7ec4\u5177\u6709\u9884\u5148\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u56e0\u6b64\uff0c\u6bcf\u5929\u62ff\u4e00\u5f20\u5361\u7247\u5e76\u8fdb\u884c\u7ec3\u4e60\u5c06\u63a8\u52a8\u5e76\u6311\u6218\u60a8\u51e0\u4e2a\u6708\u7684\u6280\u80fd\u3002</p> <p>\u65e2\u7136\u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5982\u4f55\u753b\u5f62\u72b6\uff0c\u6211\u5341\u5206\u80af\u5b9a\u4f60\u8111\u888b\u91cc\u5df2\u7ecf\u5145\u6ee1\u4e86\u65b0\u7684\u70b9\u5b50\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u91cc\u4f60\u4f1a\u5b66\u4e60\u5230\u600e\u4e48\u79fb\u52a8\uff0c\u65cb\u8f6c\u4ee5\u53ca\u7f29\u653e\u56fe\u5f62\u3002\u8fd9\u5c06\u4f7f\u4f60\u7684\u521b\u4f5c\u5982\u864e\u6dfb\u7ffc\uff01</p>"},{"location":"Frontend/shader/07/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>Vamos dar uma olhada em como desenhar formar simples de forma procedural paralela. Em poucas palavras, tudo o que voc\u00ea precisa \u00e9 determinar se cada pixel pertence \u00e0 forma que quer desenhar ou n\u00e3o, e aplicar cores diferentes dependendo do caso. Voc\u00ea pode usar o sistema de coordenadas, como um papel quadriculado, para desenhar ret\u00e2ngulos e quadrados. Vamos olhar um conceito mais avan\u00e7ado chamado campo de dist\u00e2ncia para desenhar formar mais complexas.</p>"},{"location":"Frontend/shader/07/SUMMARY/","title":"SUMMARY","text":"<p>Let's look at how to draw simple shapes in a parallel procedural way. In a nutshell, all you need to do is to determine if each pixel belongs to the shape you want to draw or not, and apply different colors accordingly. You can use coordinate system like a grid paper to draw rectangles and squares. We'll look at more advanced concept called distance field to draw more complex shapes.</p>"},{"location":"Frontend/shader/07/TITLE-pt/","title":"TITLE pt","text":""},{"location":"Frontend/shader/07/TITLE-pt/#formas","title":"Formas","text":""},{"location":"Frontend/shader/07/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/07/TITLE/#shapes","title":"Shapes","text":""},{"location":"Frontend/shader/07/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/07/tmp/#shapes","title":"Shapes","text":"<p>Finally! We have been building skills for this moment! You have learned most of the GLSL foundations, types and functions. You have practiced your shaping equations over and over. Now is the time to put it all together. You are up for this challenge! In this chapter you'll learn how to draw simple shapes in a parallel procedural way.</p>"},{"location":"Frontend/shader/07/tmp/#rectangle","title":"Rectangle","text":"<p>Imagine we have grid paper like we used in math classes and our homework is to draw a square. The paper size is 10x10 and the square is supposed to be 8x8. What will you do?</p> <p></p> <p>You'd paint everything except the first and last rows and the first and last column, right?</p> <p>How does this relate to shaders? Each little square of our grid paper is a thread (a pixel). Each little square knows its position, like the coordinates of a chess board. In previous chapters we mapped x and y to the red and green color channels, and we learned how to use the narrow two dimensional territory between 0.0 and 1.0. How can we use this to draw a centered square in the middle of our billboard?</p> <p>Let's start by sketching pseudocode that uses <code>if</code> statements over the spatial field. The principles to do this are remarkably similar to how we think of the grid paper scenario.</p> <pre><code>if ( (X GREATER THAN 1) AND (Y GREATER THAN 1) )\n    paint white\nelse\n    paint black\n</code></pre> <p>Now that we have a better idea of how this will work, let\u2019s replace the <code>if</code> statement with <code>step()</code>, and instead of using 10x10 let\u2019s use normalized values between 0.0 and 1.0:</p> <pre><code>uniform vec2 u_resolution;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Each result will return 1.0 (white) or 0.0 (black).\n    float left = step(0.1,st.x);   // Similar to ( X greater than 0.1 )\n    float bottom = step(0.1,st.y); // Similar to ( Y greater than 0.1 )\n\n    // The multiplication of left*bottom will be similar to the logical AND.\n    color = vec3( left * bottom );\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>The <code>step()</code> function will turn every pixel below 0.1 to black (<code>vec3(0.0)</code>) and the rest to white (<code>vec3(1.0)</code>) . The multiplication between <code>left</code> and <code>bottom</code> works as a logical <code>AND</code> operation, where both must be 1.0 to return 1.0 . This draws two black lines, one on the bottom and the other on the left side of the canvas.</p> <p></p> <p>In the previous code we repeat the structure for each axis (left and bottom). We can save some lines of code by passing two values directly to <code>step()</code> instead of one. That looks like this:</p> <pre><code>vec2 borders = step(vec2(0.1),st);\nfloat pct = borders.x * borders.y;\n</code></pre> <p>So far, we\u2019ve only drawn two borders (bottom-left) of our rectangle. Let's do the other two (top-right). Check out the following code:</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // bottom-left\n    vec2 bl = step(vec2(0.1),st);\n    float pct = bl.x * bl.y;\n\n    // top-right\n    // vec2 tr = step(vec2(0.1),1.0-st);\n    // pct *= tr.x * tr.y;\n\n    color = vec3(pct);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Uncomment lines 21-22 and see how we invert the <code>st</code> coordinates and repeat the same <code>step()</code> function. That way the <code>vec2(0.0,0.0)</code> will be in the top right corner. This is the digital equivalent of flipping the page and repeating the previous procedure.</p> <p></p> <p>Take note that in lines 18 and 22 all of the sides are being multiplied together. This is equivalent to writing:</p> <pre><code>vec2 bl = step(vec2(0.1),st);       // bottom-left\nvec2 tr = step(vec2(0.1),1.0-st);   // top-right\ncolor = vec3(bl.x * bl.y * tr.x * tr.y);\n</code></pre> <p>Interesting right? This technique is all about using <code>step()</code> and multiplication for logical operations and flipping the coordinates.</p> <p>Before going forward, try the following exercises:</p> <ul> <li> <p>Change the size and proportions of the rectangle.</p> </li> <li> <p>Experiment with the same code but using <code>smoothstep()</code> instead of <code>step()</code>. Note that by changing values, you can go from blurred edges to elegant smooth borders.</p> </li> <li> <p>Do another implementation that uses <code>floor()</code>.</p> </li> <li> <p>Choose the implementation you like the most and make a function of it that you can reuse in the future. Make your function flexible and efficient.</p> </li> <li> <p>Make another function that just draws the outline of a rectangle.</p> </li> <li> <p>How do you think you can move and place different rectangles in the same billboard? If you figure out how, show off your skills by making a composition of rectangles and colors that resembles a Piet Mondrian painting.</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/07/tmp/#circles","title":"Circles","text":"<p>It's easy to draw squares on grid paper and rectangles on Cartesian coordinates, but circles require another approach, especially since we need a \"per-pixel\" algorithm. One solution is to re-map the spatial coordinates so that we can use a <code>step()</code> function to draw a circle.</p> <p>How? Let's start by going back to math class and the grid paper, where we opened a compass to the radius of a circle, pressed one of the compass points at the center of the circle and then traced the edge of the circle with a simple spin.</p> <p></p> <p>Translating this to a shader where each square on the grid paper is a pixel implies asking each pixel (or thread) if it is inside the area of the circle. We do this by computing the distance from the pixel to the center of the circle.</p> <p></p> <p>There are several ways to calculate that distance. The easiest one uses the <code>distance()</code> function, which internally computes the <code>length()</code> of the difference between two points (in our case the pixel coordinate and the center of the canvas). The <code>length()</code> function is nothing but a shortcut of the hypotenuse equation that uses square root (<code>sqrt()</code>) internally.</p> <p></p> <p>You can use <code>distance()</code>, <code>length()</code> or <code>sqrt()</code> to calculate the distance to the center of the billboard. The following code contains these three functions and the non-surprising fact that each one returns exactly same result.</p> <ul> <li>Comment and uncomment lines to try the different ways to get the same result.</li> </ul> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    float pct = 0.0;\n\n    // a. The DISTANCE from the pixel to the center\n    pct = distance(st,vec2(0.5));\n\n    // b. The LENGTH of the vector\n    //    from the pixel to the center\n    // vec2 toCenter = vec2(0.5)-st;\n    // pct = length(toCenter);\n\n    // c. The SQUARE ROOT of the vector\n    //    from the pixel to the center\n    // vec2 tC = vec2(0.5)-st;\n    // pct = sqrt(tC.x*tC.x+tC.y*tC.y);\n\n    vec3 color = vec3(pct);\n\n    gl_FragColor = vec4( color, 1.0 );\n}\n</code></pre> <p></p> <p>In the previous example we map the distance to the center of the billboard to the color brightness of the pixel. The closer a pixel is to the center, the lower (darker) value it has. Notice that the values don't get too high because from the center ( <code>vec2(0.5, 0.5)</code> ) the maximum distance barely goes over 0.5. Contemplate this map and think:</p> <ul> <li> <p>What you can infer from it?</p> </li> <li> <p>How we can use this to draw a circle?</p> </li> <li> <p>Modify the above code in order to contain the entire circular gradient inside the canvas.</p> </li> </ul>"},{"location":"Frontend/shader/07/tmp/#distance-field","title":"Distance field","text":"<p>We can also think of the above example as an altitude map, where darker implies taller. The gradient shows us something similar to the pattern made by a cone. Imagine yourself on the top of that cone. The horizontal distance to the edge of the cone is 0.5. This will be constant in all directions. By choosing where to \u201ccut\u201d the cone you will get a bigger or smaller circular surface.</p> <p></p> <p>Basically we are using a re-interpretation of the space (based on the distance to the center) to make shapes. This technique is known as a \u201cdistance field\u201d and is used in different ways from font outlines to 3D graphics.</p> <p>Try the following exercises:</p> <ul> <li> <p>Use <code>step()</code> to turn everything above 0.5 to white and everything below to 0.0.</p> </li> <li> <p>Inverse the colors of the background and foreground.</p> </li> <li> <p>Using <code>smoothstep()</code>, experiment with different values to get nice smooth borders on your circle.</p> </li> <li> <p>Once you are happy with an implementation, make a function of it that you can reuse in the future.</p> </li> <li> <p>Add color to the circle.</p> </li> <li> <p>Can you animate your circle to grow and shrink, simulating a beating heart? (You can get some inspiration from the animation in the previous chapter.)</p> </li> <li> <p>What about moving this circle? Can you move it and place different circles in a single billboard?</p> </li> <li> <p>What happens if you combine distances fields together using different functions and operations?</p> </li> </ul> <pre><code>pct = distance(st,vec2(0.4)) + distance(st,vec2(0.6));\npct = distance(st,vec2(0.4)) * distance(st,vec2(0.6));\npct = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\npct = max(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\npct = pow(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n</code></pre> <ul> <li>Make three compositions using this technique. If they are animated, even better!</li> </ul>"},{"location":"Frontend/shader/07/tmp/#for-your-tool-box","title":"For your tool box","text":"<p>In terms of computational power the <code>sqrt()</code> function - and all the functions that depend on it - can be expensive. Here is another way to create a circular distance field by using <code>dot()</code> product.</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    vec3 color = vec3(circle(st,0.9));\n\n    gl_FragColor = vec4( color, 1.0 );\n}\n</code></pre> <p></p>"},{"location":"Frontend/shader/07/tmp/#useful-properties-of-a-distance-field","title":"Useful properties of a Distance Field","text":"<p>Distance fields can be used to draw almost everything. Obviously the more complex a shape is, the more complicated its equation will be, but once you have the formula to make distance fields of a particular shape it is very easy to combine and/or apply effects to it, like smooth edges and multiple outlines. Because of this, distance fields are popular in font rendering, like Mapbox GL Labels, Matt DesLauriers Material Design Fonts and as is described in Chapter 7 of iPhone 3D Programming, O\u2019Reilly.</p> <p>Take a look at the following code.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st.x *= u_resolution.x/u_resolution.y;\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n  // Make the distance field\n  d = length( abs(st)-.3 );\n  // d = length( min(abs(st)-.3,0.) );\n  // d = length( max(abs(st)-.3,0.) );\n\n  // Visualize the distance field\n  gl_FragColor = vec4(vec3(fract(d*10.0)),1.0);\n\n  // Drawing with the distance field\n  // gl_FragColor = vec4(vec3( step(.3,d) ),1.0);\n  // gl_FragColor = vec4(vec3( step(.3,d) * step(d,.4)),1.0);\n  // gl_FragColor = vec4(vec3( smoothstep(.3,.4,d)* smoothstep(.6,.5,d)) ,1.0);\n}\n</code></pre> <p></p> <p>We start by moving the coordinate system to the center and shrinking it in half in order to remap the position values between -1 and 1. Also on line 24 we are visualizing the distance field values using a <code>fract()</code> function making it easy to see the pattern they create. The distance field pattern repeats over and over like rings in a Zen garden.</p> <p>Let\u2019s take a look at the distance field formula on line 19. There we are calculating the distance to the position on <code>(.3,.3)</code> or <code>vec3(.3)</code> in all four quadrants (that\u2019s what <code>abs()</code> is doing there).</p> <p>If you uncomment line 20, you will note that we are combining the distances to these four points using the <code>min()</code> to zero. The result produces an interesting new pattern.</p> <p>Now try uncommenting line 21; we are doing the same but using the <code>max()</code> function. The result is a rectangle with rounded corners. Note how the rings of the distance field get smoother the further away they get from the center.</p> <p>Finish uncommenting lines 27 to 29 one by one to understand the different uses of a distance field pattern.</p>"},{"location":"Frontend/shader/07/tmp/#polar-shapes","title":"Polar shapes","text":"<p>In the chapter about color we map the Cartesian coordinates to polar coordinates by calculating the radius and angles of each pixel with the following formula:</p> <pre><code>vec2 pos = vec2(0.5)-st;\nfloat r = length(pos)*2.0;\nfloat a = atan(pos.y,pos.x);\n</code></pre> <p>We use part of this formula at the beginning of the chapter to draw a circle. We calculated the distance to the center using <code>length()</code>. Now that we know about distance fields we can learn another way of drawing shapes using polar coordinates.</p> <p>This technique is a little restrictive but very simple. It consists of changing the radius of a circle depending on the angle to achieve different shapes. How does the modulation work? Yes, using shaping functions!</p> <p>Below you will find the same functions in the Cartesian graph and in a polar coordinates shader example (between lines 21 and 25). Uncomment the functions one-by-one, paying attention the relationship between one coordinate system and the other.</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec2 pos = vec2(0.5)-st;\n\n    float r = length(pos)*2.0;\n    float a = atan(pos.y,pos.x);\n\n    float f = cos(a*3.);\n    // f = abs(cos(a*3.));\n    // f = abs(cos(a*2.5))*.5+.3;\n    // f = abs(cos(a*12.)*sin(a*3.))*.8+.1;\n    // f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;\n\n    color = vec3( 1.-smoothstep(f,f+0.02,r) );\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p></p> <p>Try to:</p> <ul> <li>Animate these shapes.</li> <li>Combine different shaping functions to cut holes in the shape to make flowers, snowflakes and gears.</li> <li>Use the <code>plot()</code> function we were using in the Shaping Functions Chapter to draw just the contour.</li> </ul>"},{"location":"Frontend/shader/07/tmp/#combining-powers","title":"Combining powers","text":"<p>Now that we've learned how to modulate the radius of a circle according to the angle using the <code>atan()</code> to draw different shapes, we can learn how use <code>atan()</code> with distance fields and apply all the tricks and effects possible with distance fields.</p> <p>The trick will use the number of edges of a polygon to construct the distance field using polar coordinates. Check out the following code from Andrew Baldwin.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st.x *= u_resolution.x/u_resolution.y;\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n  // Number of sides of your shape\n  int N = 3;\n\n  // Angle from the current pixel\n  float a = atan(st.x,st.y)+PI;\n\n  // Angular spacing between vertices of shape\n  float r = TWO_PI/float(N);\n\n  // Shaping function that modulate the distance\n  d = cos(floor(.5+a/r)*r-a)*length(st);\n\n  color = vec3(1.0-smoothstep(.4,.41,d));\n  // color = vec3(d);\n\n  gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <ul> <li> <p>Using this example, make a function that inputs the position and number of corners of a desired shape and returns a distance field value.</p> </li> <li> <p>Mix distance fields together using <code>min()</code> and <code>max()</code>.</p> </li> <li> <p>Choose a geometric logo to replicate using distance fields.</p> </li> </ul> <p>Congratulations! You have made it through the rough part! Take a break and let these concepts settle - drawing simple shapes in Processing is easy but not here. In shader-land drawing shapes is twisted, and it can be exhausting to adapt to this new paradigm of coding.</p>"},{"location":"Frontend/shader/07/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li> <p>LYGIA's draw functions  are set of reusable functions to draw 2D shapes and patterns. You can also explore LYGIA's SDF functions folder to combine more complex shapes through distance fields.  It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</p> </li> <li> <p>Down at the end of this chapter you will find a link to PixelSpirit Deck this deck of cards will help you learn new SDF functions, compose them into your designs and use on your shaders. The deck has a progressive learning curve, so taking one card a day and working on it will push and challenge your skills for months. </p> </li> </ul> <p>Now that you know how to draw shapes I'm sure new ideas will pop into your mind. In the following chapter you will learn how to move, rotate and scale shapes. This will allow you to make compositions!</p>"},{"location":"Frontend/shader/08/","title":"Index","text":""},{"location":"Frontend/shader/08/#2d-matrices","title":"2D Matrices","text":""},{"location":"Frontend/shader/08/#translate","title":"Translate","text":"<p>In the previous chapter we learned how to make some shapes - the trick to moving those shapes is to move the coordinate system itself. We can achieve that by simply adding a vector to the <code>st</code> variable that contains the location of each fragment. This causes the whole space coordinate system to move.</p> <p></p> <p>This is easier to see than to explain, so to see for yourself:</p> <ul> <li>Uncomment line 35 of the code below to see how the space itself moves around.</li> </ul> <p>Now try the following exercise:</p> <ul> <li>Using <code>u_time</code> together with the shaping functions move the small cross around in an interesting way. Search for a specific quality of motion you are interested in and try to make the cross move in the same way. Recording something from the \"real world\" first might be useful - it could be the coming and going of waves, a pendulum movement, a bouncing ball, a car accelerating, a bicycle stopping.</li> </ul>"},{"location":"Frontend/shader/08/#rotations","title":"Rotations","text":"<p>To rotate objects we also need to move the entire space system. For that we are going to use a matrix. A matrix is an organized set of numbers in columns and rows. Vectors are multiplied by matrices following a precise set of rules in order to modify the values of the vector in a particular way.</p> <p></p> <p>GLSL has native support for two, three and four dimensional matrices: <code>mat2</code> (2x2), <code>mat3</code> (3x3) and <code>mat4</code> (4x4). GLSL also supports matrix multiplication  (<code>*</code>) and a matrix specific function (<code>matrixCompMult()</code>).</p> <p>Based on how matrices behave it's possible to construct matrices to produce specific behaviors. For example we can use a matrix to translate a vector:</p> <p></p> <p>More interestingly, we can use a matrix to rotate the coordinate system:</p> <p></p> <p>Take a look at the following code for a function that constructs a 2D rotation matrix. This function follows the above formula for two dimensional vectors to rotate the coordinates around the <code>vec2(0.0)</code> point.</p> <pre><code>mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n</code></pre> <p>According to the way we've been drawing shapes, this is not exactly what we want. Our cross shape is drawn in the center of the canvas which corresponds to the position <code>vec2(0.5)</code>. So, before we rotate the space we need to move shape from the <code>center</code> to the <code>vec2(0.0)</code> coordinate, rotate the space, then finally move it back to the original place.</p> <p></p> <p>That looks like the following code:</p> <p>Try the following exercises:</p> <ul> <li> <p>Uncomment line 45 of above code and pay attention to what happens.</p> </li> <li> <p>Comment the translations before and after the rotation, on lines 37 and 39, and observe the consequences.</p> </li> <li> <p>Use rotations to improve the animation you simulated in the translation exercise.</p> </li> </ul>"},{"location":"Frontend/shader/08/#scale","title":"Scale","text":"<p>We've seen how matrices are used to translate and rotate objects in space. (Or more precisely to transform the coordinate system to rotate and move the objects.) If you've used 3D modeling software or the push and pop matrix functions in Processing, you will know that matrices can also be used to scale the size of an object.</p> <p></p> <p>Following the previous formula, we can figure out how to make a 2D scaling matrix:</p> <pre><code>mat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n</code></pre> <p>Try the following exercises to understand more deeply how this works.</p> <ul> <li> <p>Uncomment line 42 of above code to see the space coordinate being scaled.</p> </li> <li> <p>See what happens when you comment the translations before and after the scaling on lines 37 and 39.</p> </li> <li> <p>Try combining a rotation matrix together with a scale matrix. Be aware that the order matters. Multiply by the matrix first and then multiply the vectors.</p> </li> <li> <p>Now that you know how to draw different shapes, and move, rotate and scale them, it's time to make a nice composition. Design and construct a fake UI or HUD (heads up display). Use the following ShaderToy example by Ndel for inspiration and reference.</p> </li> </ul>"},{"location":"Frontend/shader/08/#other-uses-for-matrices-yuv-color","title":"Other uses for matrices: YUV color","text":"<p>YUV is a color space used for analog encoding of photos and videos that takes into account the range of human perception to reduce the bandwidth of chrominance components.</p> <p>The following code is an interesting opportunity to use matrix operations in GLSL to transform colors from one mode to another.</p> <p>As you can see we are treating colors as vectors by multiplying them with matrices. In that way we \u201cmove\u201d the values around.</p> <p>In this chapter we've learned how to use matrix transformations to move, rotate and scale vectors. These transformations will be essential for making compositions out of the shapes we learned about in the previous chapter. In the next chapter we'll apply all we've learned to make beautiful procedural patterns. You will find that coding repetition and variation can be an exciting practice.</p>"},{"location":"Frontend/shader/08/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's space functions  are set of reusable functions to manipulate space in GLSL. It's a great resource to learn how to use matrices to manipulate space. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks. </li> </ul>"},{"location":"Frontend/shader/08/README-ch/","title":"8","text":""},{"location":"Frontend/shader/08/README-ch/#2d-matrices","title":"2D Matrices \u4e8c\u7ef4\u77e9\u9635","text":""},{"location":"Frontend/shader/08/README-ch/#_1","title":"\u5e73\u79fb","text":"<p>\u4e4b\u524d\u7684\u7ae0\u8282\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u5236\u4f5c\u4e00\u4e9b\u56fe\u5f62 - \u800c\u5982\u4f55\u79fb\u52a8\u5b83\u4eec\u7684\u6280\u5de7\u5219\u662f\u501f\u52a9\u79fb\u52a8\u5b83\u4eec\u81ea\u8eab\u7684\u53c2\u8003\u5750\u6807\u7cfb\u3002\u6211\u4eec\u53ea\u9700\u8981\u7ed9 <code>st</code> \u53d8\u91cf\u52a0\u4e0a\u4e00\u4e2a\u5305\u542b\u6bcf\u4e2a\u7247\u6bb5\u7684\u4f4d\u7f6e\u7684\u5411\u91cf\u3002\u8fd9\u6837\u5c31\u79fb\u52a8\u4e86\u6574\u4e2a\u5750\u6807\u7cfb\u3002</p> <p></p> <p>\u8fd8\u662f\u753b\u7740\u6bd4\u8f83\u66f4\u5bb9\u6613\u89e3\u91ca\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff1a</p> <ul> <li>\u53d6\u6d88\u4e0b\u9762\u4ee3\u7801\u4e2d\u7b2c35\u884c\u7684\u6ce8\u91ca\uff0c\u770b\u4e0b\u5750\u6807\u7a7a\u95f4\u662f\u5982\u4f55\u5e73\u79fb\u7684\u3002</li> </ul> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // To move the cross we move the space\n    vec2 translate = vec2(cos(u_time),sin(u_time));\n    st += translate*0.35;\n\n    // Show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Add the shape on the foreground\n    color += vec3(cross(st,0.25));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u73b0\u5728\u5c1d\u8bd5\u4e0b\u4e0b\u9762\u7684\u7ec3\u4e60\uff1a</p> <ul> <li>\u7ed3\u5408 <code>u_time</code> \u548c\u9020\u578b\u51fd\u6570\u6765\u79fb\u52a8\u5341\u5b57\uff0c\u5e76\u8bd5\u7740\u8ba9\u5b83\u6709\u8da3\u4e00\u70b9\u3002\u627e\u4e00\u4e2a\u4f60\u89c9\u5f97\u4f60\u611f\u5174\u8da3\u7684\u67d0\u79cd\u8fd0\u52a8\u5f62\u5f0f\uff0c\u8ba9\u8fd9\u4e2a\u5341\u5b57\u4e5f\u8fd9\u6837\u8fd0\u52a8\u3002\u8bb0\u5f55\u201c\u771f\u5b9e\u4e16\u754c\u201d\u7684\u4e00\u4e9b\u73b0\u8c61\u6216\u8bb8\u5bf9\u4f60\u6709\u6240\u542f\u53d1 \u2014 \u53ef\u4ee5\u662f\u6ce2\u7684\u8fd0\u52a8\uff0c\u6446\u52a8\uff0c\u5f39\u7403\uff0c\u6c7d\u8f66\u7684\u52a0\u901f\u8fd0\u52a8\uff0c\u4e00\u8f86\u81ea\u884c\u8f66\u7684\u5239\u8f66\u3002</li> </ul>"},{"location":"Frontend/shader/08/README-ch/#_2","title":"\u65cb\u8f6c","text":"<p>\u8981\u79fb\u52a8\u7269\u4f53\uff0c\u6211\u4eec\u540c\u6837\u9700\u8981\u79fb\u52a8\u6574\u4e2a\u7a7a\u95f4\uff08\u5750\u6807\uff09\u7cfb\u7edf\u3002\u4e3a\u6b64\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u77e9\u9635\u3002\u77e9\u9635\u662f\u4e00\u4e2a\u901a\u8fc7\u884c\u548c\u5217\u5b9a\u4e49\u7684\u4e00\u7ec4\u6570\u3002\u7528\u77e9\u9635\u4e58\u4ee5\u4e00\u4e2a\u5411\u91cf\u662f\u7528\u4e00\u7ec4\u7cbe\u786e\u7684\u89c4\u5219\u5b9a\u4e49\u7684\uff0c\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4ee5\u4e00\u7ec4\u7279\u5b9a\u7684\u65b9\u5f0f\u6765\u6539\u53d8\u5411\u91cf\u7684\u503c\u3002</p> <p></p> <p>GLSL\u672c\u8eab\u652f\u63012\u7ef4\uff0c3\u7ef4\u548c4\u7ef4\u65b9\u9635\uff08m*m\u77e9\u9635\uff09\uff1a<code>mat2</code> (2x2), <code>mat3</code> (3x3) \u548c <code>mat4</code> (4x4)\u3002GLSL\u540c\u6837\u652f\u6301\u77e9\u9635\u76f8\u4e58 (<code>*</code>)\u548c\u7279\u6b8a\u77e9\u9635\u51fd\u6570(<code>matrixCompMult()</code>)\u3002</p> <p>\u57fa\u4e8e\u77e9\u9635\u7684\u7279\u6027\uff0c\u6211\u4eec\u4fbf\u6709\u53ef\u80fd\u6784\u9020\u4e00\u4e2a\u77e9\u9635\u6765\u4ea7\u751f\u7279\u5b9a\u7684\u4f5c\u7528\u3002\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u77e9\u9635\u6765\u5e73\u79fb\u4e00\u4e2a\u5411\u91cf\uff1a</p> <p></p> <p>\u66f4\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u77e9\u9635\u6765\u65cb\u8f6c\u5750\u6807\u7cfb\u7edf\uff1a</p> <p></p> <p>\u770b\u4e0b\u4e0b\u9762\u6784\u62102\u7ef4\u65cb\u8f6c\u7684\u77e9\u9635\u7684\u4ee3\u7801\u3002\u8fd9\u4e2a\u51fd\u6570\u6839\u636e\u4e0a\u9762\u7684\u516c\u5f0f\uff0c\u5c06\u4e8c\u7ef4\u5411\u91cf\u7ed5 <code>vec2(0.0)</code> \u70b9\u65cb\u8f6c\u3002</p> <pre><code>mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n</code></pre> <p>\u6839\u636e\u4ee5\u5f80\u6211\u4eec\u753b\u5f62\u72b6\u7684\u65b9\u5f0f\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u6211\u4eec\u7684\u5341\u5b57\u662f\u753b\u5728\u753b\u5e03\u4e2d\u5fc3\u7684\uff0c\u5bf9\u5e94\u4e8e\u70b9 <code>vec2(0.5)</code> \u3002\u6240\u4ee5\uff0c\u518d\u65cb\u8f6c\u5750\u6807\u7a7a\u95f4\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u628a\u56fe\u5f62\u79fb\u5230\u4e2d\u5fc3\u70b9\uff0c\u5750\u6807 <code>vec2(0.0)</code> \uff0c\u518d\u65cb\u8f6c\u5750\u6807\u7a7a\u95f4\uff0c\u6700\u540e\u5728\u79fb\u52a8\u56de\u539f\u70b9\u3002</p> <p></p> <p>\u5c31\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // move space from the center to the vec2(0.0)\n    st -= vec2(0.5);\n    // rotate the space\n    st = rotate2d( sin(u_time)*PI ) * st;\n    // move it back to the original place\n    st += vec2(0.5);\n\n    // Show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Add the shape on the foreground\n    color += vec3(cross(st,0.4));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u8bd5\u8bd5\u4e0b\u9762\u7684\u7ec3\u4e60\uff1a</p> <ul> <li> <p>\u53d6\u6d88\u7b2c45\u884c\u7684\u4ee3\u7801\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</p> </li> <li> <p>\u572837\u884c\u548c39\u884c\uff0c\u5c06\u65cb\u8f6c\u4e4b\u524d\u7684\u5e73\u79fb\u6ce8\u91ca\u6389\uff0c\u89c2\u5bdf\u7ed3\u679c\u3002</p> </li> <li> <p>\u7528\u65cb\u8f6c\u6539\u8fdb\u5728\u5e73\u79fb\u7ec3\u4e60\u4e2d\u6a21\u62df\u7684\u52a8\u753b\u3002</p> </li> </ul>"},{"location":"Frontend/shader/08/README-ch/#_3","title":"\u7f29\u653e","text":"<p>\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u7528\u77e9\u9635\u5e73\u79fb\u548c\u65cb\u8f6c\u7269\u4f53\u3002\uff08\u6216\u8005\u66f4\u51c6\u786e\u7684\u8bf4\uff0c\u5982\u4f55\u901a\u8fc7\u53d8\u6362\u5750\u6807\u7cfb\u7edf\u6765\u65cb\u8f6c\u548c\u79fb\u52a8\u7269\u4f53\u3002\uff09\u5982\u679c\u4f60\u7528\u8fc73D\u5efa\u6a21\u8f6f\u4ef6\u6216\u8005 Processing\u4e2d\u7684 pushmatrix \u548c popmatrix \u51fd\u6570\uff0c\u4f60\u4f1a\u77e5\u9053\u77e9\u9635\u4e5f\u53ef\u4ee5\u88ab\u7528\u6765\u7f29\u653e\u7269\u4f53\u7684\u5927\u5c0f\u3002</p> <p></p> <p>\u6839\u636e\u4e0a\u9762\u7684\u516c\u5f0f\uff0c\u6211\u4eec\u77e5\u9053\u5982\u4f55\u6784\u9020\u4e00\u4e2a2D\u7f29\u653e\u77e9\u9635\uff1a</p> <pre><code>mat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n</code></pre> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    st -= vec2(0.5);\n    st = scale( vec2(sin(u_time)+1.0) ) * st;\n    st += vec2(0.5);\n\n    // Show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Add the shape on the foreground\n    color += vec3(cross(st,0.2));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u8bd5\u8bd5\u4e0b\u9762\u7684\u7ec3\u4e60\uff0c\u5c1d\u8bd5\u6df1\u5165\u7406\u89e3\u77e9\u9635\u7684\u5de5\u4f5c\u673a\u5236\uff1a</p> <ul> <li> <p>\u53d6\u6d88\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684\u7b2c42\u884c\u6765\u89c2\u5bdf\u7a7a\u95f4\u5750\u6807\u662f\u5982\u4f55\u88ab\u7f29\u653e\u7684\u3002</p> </li> <li> <p>\u770b\u770b\u6ce8\u91ca\u638937\u548c39\u884c\uff0c\u53d8\u6362\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u7f29\u653e\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</p> </li> <li> <p>\u8bd5\u7740\u7ed3\u5408\u65cb\u8f6c\u77e9\u9635\u548c\u7f29\u653e\u77e9\u9635\u3002\u6ce8\u610f\u4ed6\u4eec\u7684\u5148\u540e\u987a\u5e8f\u3002\u5148\u4e58\u4ee5\u4e00\u4e2a\u77e9\u9635\uff0c\u518d\u4e58\u4ee5\u5411\u91cf\u3002</p> </li> <li> <p>\u73b0\u5728\u4f60\u77e5\u9053\u5982\u4f55\u753b\u4e0d\u540c\u7684\u56fe\u5f62\uff0c\u77e5\u9053\u5982\u4f55\u79fb\u52a8\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u5b83\u4eec\uff0c\u662f\u65f6\u5019\u7528\u8fd9\u4e9b\u6765\u521b\u4f5c\u4e86\u3002\u8bbe\u8ba1\u4e00\u4e2afake UI or HUD (heads up display)\u3002\u53c2\u8003Ndel\u5728ShaderToy\u4e0a\u7684\u4f8b\u5b50\u3002</p> </li> </ul>"},{"location":"Frontend/shader/08/README-ch/#other-uses-for-matrices-yuv-color-yuv","title":"Other uses for matrices: YUV color \u77e9\u9635\u7684\u5176\u4ed6\u5e94\u7528\uff1aYUV \u989c\u8272","text":"<p>YUV \u662f\u4e2a\u7528\u6765\u6a21\u62df\u7167\u7247\u548c\u89c6\u9891\u7684\u7f16\u7801\u7684\u8272\u5f69\u7a7a\u95f4\u3002\u8fd9\u4e2a\u8272\u5f69\u7a7a\u95f4\u8003\u8651\u4eba\u7c7b\u7684\u611f\u77e5\uff0c\u51cf\u5c11\u8272\u5ea6\u7684\u5e26\u5bbd\u3002</p> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u73b0\u4e00\u79cd\u5229\u7528GLSL\u4e2d\u7684\u77e9\u9635\u64cd\u4f5c\u6765\u5207\u6362\u989c\u8272\u6a21\u5f0f\u7684\u6709\u8da3\u53ef\u80fd\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n// YUV to RGB matrix\nmat3 yuv2rgb = mat3(1.0, 0.0, 1.13983,\n                    1.0, -0.39465, -0.58060,\n                    1.0, 2.03211, 0.0);\n\n// RGB to YUV matrix\nmat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n                    -0.09991, -0.33609, 0.43600,\n                    0.615, -0.5586, -0.05639);\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    // UV values goes from -1 to 1\n    // So we need to remap st (0.0 to 1.0)\n    st -= 0.5;  // becomes -0.5 to 0.5\n    st *= 2.0;  // becomes -1.0 to 1.0\n\n    // we pass st as the y &amp; z values of\n    // a three dimensional vector to be\n    // properly multiply by a 3x3 matrix\n    color = yuv2rgb * vec3(0.5, st.x, st.y);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u6b63\u5982\u4f60\u6240\u89c1\uff0c\u6211\u4eec\u7528\u5bf9\u5411\u91cf\u4e58\u4ee5\u77e9\u9635\u7684\u65b9\u5f0f\u5bf9\u5f85\u8272\u5f69\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u201c\u79fb\u52a8\u201d\u8fd9\u4e9b\u503c\u3002</p> <p>\u8fd9\u7ae0\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fd0\u7528\u77e9\u9635\u53d8\u6362\u6765\u79fb\u52a8\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u5411\u91cf\u3002\u9664\u4e86\u4e4b\u524d\u7ae0\u8282\u5b66\u7684\u56fe\u5f62\uff0c\u8fd9\u4e9b\u53d8\u6362\u662f\u521b\u4f5c\u7684\u57fa\u7840\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u6211\u4eec\u4f1a\u5e94\u7528\u6211\u4eec\u6240\u5b66\u7684\u5236\u4f5c\u6f02\u4eae\u7684\u7a0b\u5e8f\u7eb9\u7406\u3002\u4f60\u4f1a\u53d1\u73b0\u7f16\u7a0b\u7684\u91cd\u590d\u6027\u548c\u591a\u6837\u6027\u662f\u79cd\u4ee4\u4eba\u5174\u594b\u7684\u5b9e\u8df5\u3002</p>"},{"location":"Frontend/shader/08/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>Matriz \u00e9 uma ferramenta poderosa para manipular vetores. Ser experiente com matrizes lhe permite a, livremente, transladar, escalar e rotacionar formas. Uma vez que a t\u00e9cnica pode ser aplicada igualmente para qualquer coisa expressada por vetores, vamos dar uma olhada em usos muito mais avan\u00e7ados depois, neste livro. Matrizes podem \u00e1recer complexas \u00e0 primeira vista, mas voc\u00ea vai ach\u00e1-las bem \u00fateis depois que pegar o conceito. Vamos praticar aqui e aprender o b\u00e1sico com alguns exemplos simples.</p>"},{"location":"Frontend/shader/08/SUMMARY/","title":"SUMMARY","text":"<p>Matrix is a very powerful tool for manipulating vectors. By mastering how to use matrices, you can freely translate, scale and rotate shapes. Since the technique can be equally applied to anything expressed by vectors, we will look at many more advanced use of matrices later in this book. Matrices may look complex at a first glance, but you'll find it very handy and useful as you get used to the concept. Let's practice here and learn basics with simple examples.</p>"},{"location":"Frontend/shader/08/TITLE-pt/","title":"TITLE pt","text":""},{"location":"Frontend/shader/08/TITLE-pt/#matrizes-2d","title":"Matrizes 2D","text":""},{"location":"Frontend/shader/08/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/08/TITLE/#2d-matrices","title":"2D Matrices","text":""},{"location":"Frontend/shader/08/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/08/tmp/#2d-matrices","title":"2D Matrices","text":""},{"location":"Frontend/shader/08/tmp/#translate","title":"Translate","text":"<p>In the previous chapter we learned how to make some shapes - the trick to moving those shapes is to move the coordinate system itself. We can achieve that by simply adding a vector to the <code>st</code> variable that contains the location of each fragment. This causes the whole space coordinate system to move.</p> <p></p> <p>This is easier to see than to explain, so to see for yourself:</p> <ul> <li>Uncomment line 35 of the code below to see how the space itself moves around.</li> </ul> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // To move the cross we move the space\n    vec2 translate = vec2(cos(u_time),sin(u_time));\n    st += translate*0.35;\n\n    // Show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Add the shape on the foreground\n    color += vec3(cross(st,0.25));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Now try the following exercise:</p> <ul> <li>Using <code>u_time</code> together with the shaping functions move the small cross around in an interesting way. Search for a specific quality of motion you are interested in and try to make the cross move in the same way. Recording something from the \"real world\" first might be useful - it could be the coming and going of waves, a pendulum movement, a bouncing ball, a car accelerating, a bicycle stopping.</li> </ul>"},{"location":"Frontend/shader/08/tmp/#rotations","title":"Rotations","text":"<p>To rotate objects we also need to move the entire space system. For that we are going to use a matrix. A matrix is an organized set of numbers in columns and rows. Vectors are multiplied by matrices following a precise set of rules in order to modify the values of the vector in a particular way.</p> <p></p> <p>GLSL has native support for two, three and four dimensional matrices: <code>mat2</code> (2x2), <code>mat3</code> (3x3) and <code>mat4</code> (4x4). GLSL also supports matrix multiplication  (<code>*</code>) and a matrix specific function (<code>matrixCompMult()</code>).</p> <p>Based on how matrices behave it's possible to construct matrices to produce specific behaviors. For example we can use a matrix to translate a vector:</p> <p></p> <p>More interestingly, we can use a matrix to rotate the coordinate system:</p> <p></p> <p>Take a look at the following code for a function that constructs a 2D rotation matrix. This function follows the above formula for two dimensional vectors to rotate the coordinates around the <code>vec2(0.0)</code> point.</p> <pre><code>mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n</code></pre> <p>According to the way we've been drawing shapes, this is not exactly what we want. Our cross shape is drawn in the center of the canvas which corresponds to the position <code>vec2(0.5)</code>. So, before we rotate the space we need to move shape from the <code>center</code> to the <code>vec2(0.0)</code> coordinate, rotate the space, then finally move it back to the original place.</p> <p></p> <p>That looks like the following code:</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // move space from the center to the vec2(0.0)\n    st -= vec2(0.5);\n    // rotate the space\n    st = rotate2d( sin(u_time)*PI ) * st;\n    // move it back to the original place\n    st += vec2(0.5);\n\n    // Show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Add the shape on the foreground\n    color += vec3(cross(st,0.4));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Try the following exercises:</p> <ul> <li> <p>Uncomment line 45 of above code and pay attention to what happens.</p> </li> <li> <p>Comment the translations before and after the rotation, on lines 37 and 39, and observe the consequences.</p> </li> <li> <p>Use rotations to improve the animation you simulated in the translation exercise.</p> </li> </ul>"},{"location":"Frontend/shader/08/tmp/#scale","title":"Scale","text":"<p>We've seen how matrices are used to translate and rotate objects in space. (Or more precisely to transform the coordinate system to rotate and move the objects.) If you've used 3D modeling software or the push and pop matrix functions in Processing, you will know that matrices can also be used to scale the size of an object.</p> <p></p> <p>Following the previous formula, we can figure out how to make a 2D scaling matrix:</p> <pre><code>mat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n</code></pre> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    st -= vec2(0.5);\n    st = scale( vec2(sin(u_time)+1.0) ) * st;\n    st += vec2(0.5);\n\n    // Show the coordinates of the space on the background\n    // color = vec3(st.x,st.y,0.0);\n\n    // Add the shape on the foreground\n    color += vec3(cross(st,0.2));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Try the following exercises to understand more deeply how this works.</p> <ul> <li> <p>Uncomment line 42 of above code to see the space coordinate being scaled.</p> </li> <li> <p>See what happens when you comment the translations before and after the scaling on lines 37 and 39.</p> </li> <li> <p>Try combining a rotation matrix together with a scale matrix. Be aware that the order matters. Multiply by the matrix first and then multiply the vectors.</p> </li> <li> <p>Now that you know how to draw different shapes, and move, rotate and scale them, it's time to make a nice composition. Design and construct a fake UI or HUD (heads up display). Use the following ShaderToy example by Ndel for inspiration and reference.</p> </li> </ul>"},{"location":"Frontend/shader/08/tmp/#other-uses-for-matrices-yuv-color","title":"Other uses for matrices: YUV color","text":"<p>YUV is a color space used for analog encoding of photos and videos that takes into account the range of human perception to reduce the bandwidth of chrominance components.</p> <p>The following code is an interesting opportunity to use matrix operations in GLSL to transform colors from one mode to another.</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n// YUV to RGB matrix\nmat3 yuv2rgb = mat3(1.0, 0.0, 1.13983,\n                    1.0, -0.39465, -0.58060,\n                    1.0, 2.03211, 0.0);\n\n// RGB to YUV matrix\nmat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n                    -0.09991, -0.33609, 0.43600,\n                    0.615, -0.5586, -0.05639);\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    // UV values goes from -1 to 1\n    // So we need to remap st (0.0 to 1.0)\n    st -= 0.5;  // becomes -0.5 to 0.5\n    st *= 2.0;  // becomes -1.0 to 1.0\n\n    // we pass st as the y &amp; z values of\n    // a three dimensional vector to be\n    // properly multiply by a 3x3 matrix\n    color = yuv2rgb * vec3(0.5, st.x, st.y);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>As you can see we are treating colors as vectors by multiplying them with matrices. In that way we \u201cmove\u201d the values around.</p> <p>In this chapter we've learned how to use matrix transformations to move, rotate and scale vectors. These transformations will be essential for making compositions out of the shapes we learned about in the previous chapter. In the next chapter we'll apply all we've learned to make beautiful procedural patterns. You will find that coding repetition and variation can be an exciting practice.</p>"},{"location":"Frontend/shader/08/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's space functions  are set of reusable functions to manipulate space in GLSL. It's a great resource to learn how to use matrices to manipulate space. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks. </li> </ul>"},{"location":"Frontend/shader/09/","title":"Index","text":""},{"location":"Frontend/shader/09/#patterns","title":"Patterns","text":"<p>Since shader programs are executed by pixel-by-pixel no matter how much you repeat a shape the number of calculations stays constant. This means that fragment shaders are particulary suitable for tile patterns.</p> <p> </p> <p>In this chapter we are going to apply what we've learned so far and repeat it along a canvas. Like in previous chapters, our strategy will be based on multiplying the space coordinates (between 0.0 and 1.0), so that the shapes we draw between the values 0.0 and 1.0 will be repeated to make a grid.</p> <p>\"The grid provides a framework within which human intuition and invention can operate and that it can subvert. Within the chaos of nature patterns provide a constrast and promise of order. From early patterns on pottery to geometric mosaics in Roman baths, people have long used grids to enhance their lives with decoration.\" 10 PRINT, Mit Press, (2013)</p> <p>First let's remember the <code>fract()</code> function. It returns the fractional part of a number, making <code>fract()</code> in essence the modulo of one (<code>mod(x,1.0)</code>). In other words, <code>fract()</code> returns the number after the floating point. Our normalized coordinate system variable (<code>st</code>) already goes from 0.0 to 1.0 so it doesn't make sense to do something like:</p> <pre><code>void main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n    st = fract(st);\n    color = vec3(st,0.0);\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>But if we scale the normalized coordinate system up - let's say by three - we will get three sequences of linear interpolations between 0-1: the first one between 0-1, the second one for the floating points between 1-2 and the third one for the floating points between 2-3.</p> <p>Now it's time to draw something in each subspace, by uncommenting line 27. (Because we are multiplying equally in x and y the aspect ratio of the space doesn't change and shapes will be as expected.)</p> <p>Try some of the following exercises to get a deeper understanding:</p> <ul> <li> <p>Multiply the space by different numbers. Try with floating point values and also with different values for x and y.</p> </li> <li> <p>Make a reusable function of this tiling trick.</p> </li> <li> <p>Divide the space into 3 rows and 3 columns. Find a way to know in which column and row the thread is and use that to change the shape that is displaying. Try to compose a tic-tac-toe match.</p> </li> </ul>"},{"location":"Frontend/shader/09/#apply-matrices-inside-patterns","title":"Apply matrices inside patterns","text":"<p>Since each subdivision or cell is a smaller version of the normalized coordinate system we have already been using, we can apply a matrix transformation to it in order to translate, rotate or scale the space inside.</p> <ul> <li> <p>Think of interesting ways of animating this pattern. Consider animating color, shapes and motion. Make three different animations.</p> </li> <li> <p>Recreate more complicated patterns by composing different shapes.</p> </li> </ul> <p></p> <ul> <li>Combine different layers of patterns to compose your own Scottish Tartan Patterns.</li> </ul> <p> </p>"},{"location":"Frontend/shader/09/#offset-patterns","title":"Offset patterns","text":"<p>So let's say we want to imitate a brick wall. Looking at the wall, you can see a half brick offset on x in every other row. How we can do that?</p> <p></p> <p>As a first step we need to know if the row of our thread is an even or odd number, because we can use that to determine if we need to offset the x in that row. For that we are going to use <code>mod()</code> of <code>2.0</code> and then see if the result is under <code>1.0</code> or not. Take a look at the following formula and uncomment the two last lines.</p> <p>As you can see we can use a ternary operator to check if the <code>mod()</code> of <code>2.0</code> is under <code>1.0</code> (second line) or similarly we can use a <code>step()</code> function which does the same operation, but faster. Why? Although is hard to know how each graphic card optimizes and compiles the code, it is safe to assume that built-in functions are faster than non-built-in ones. Everytime you can use a built-in function, use it!</p> <p>So now that we have our odd number formula we can apply an offset to the odd rows to give a brick effect to our tiles. Line 14 of the following code is where we are using the function to \"detect\" odd rows and give them a half-unit offset on <code>x</code>. Note that for even rows, the result of our function is <code>0.0</code>, and multiplying <code>0.0</code> by the offset of <code>0.5</code> gives an offset of <code>0.0</code>. But on odd rows we multiply the result of our function, <code>1.0</code>, by the offset of <code>0.5</code>, which moves the <code>x</code> axis of the coordinate system by <code>0.5</code>.</p> <p>Now try uncommenting line 32 - this stretches the aspect ratio of the coordinate system to mimic the aspect of a \"modern brick\". By uncommenting line 40 you can see how the coordinate system looks mapped to red and green.</p> <ul> <li> <p>Try animating this by moving the offset according to time.</p> </li> <li> <p>Make another animation where even rows move to the left and odd rows move to the right.</p> </li> <li> <p>Can you repeat this effect but with columns?</p> </li> <li> <p>Try combining an offset on <code>x</code> and <code>y</code> axis to get something like this:</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/09/#truchet-tiles","title":"Truchet Tiles","text":"<p>Now that we've learned how to tell if our cell is in an even or odd row or column, it's possible to reuse a single design element depending on its position. Consider the case of the Truchet Tiles where a single design element can be presented in four different ways:</p> <p></p> <p>By changing the pattern across tiles, it's possible to construct an infinite set of complex designs.</p> <p></p> <p>Pay close attention to the function <code>rotateTilePattern()</code>, which subdivides the space into four cells and assigns an angle of rotation to each one.</p> <ul> <li> <p>Comment, uncomment and duplicate lines 69 to 72 to compose new designs.</p> </li> <li> <p>Change the black and white triangle for another element like: half circles, rotated squares or lines.</p> </li> <li> <p>Code other patterns where the elements are rotated according to their position.</p> </li> <li> <p>Make a pattern that changes other properties according to the position of the elements.</p> </li> <li> <p>Think of something else that is not necessarily a pattern where you can apply the principles from this section. (Ex: I Ching hexagrams)</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/09/#making-your-own-rules","title":"Making your own rules","text":"<p>Making procedural patterns is a mental exercise in finding minimal reusable elements. This practice is old; we as a species have been using grids and patterns to decorate textiles, floors and borders of objects for a long time: from meanders patterns in ancient Greece, to Chinese lattice design, the pleasure of repetition and variation catches our imagination. Take some time to look at decorative patterns and see how artists and designers have a long history of navigating the fine edge between the predictability of order and the surprise of variation and chaos. From Arabic geometrical patterns, to gorgeous African fabric designs, there is an entire universe of patterns to learn from.</p> <p></p> <p>With this chapter we end the section on Algorithmic Drawing. In the following chapters we will learn how to bring some entropy to our shaders and produce generative designs.</p>"},{"location":"Frontend/shader/09/README-ch/","title":"9","text":""},{"location":"Frontend/shader/09/README-ch/#patterns","title":"Patterns \u56fe\u6848","text":"<p>\u56e0\u4e3a\u7740\u8272\u5668\u6309\u4e00\u4e2a\u4e2a\u50cf\u7d20\u6267\u884c\uff0c\u90a3\u4e48\u65e0\u8bba\u4f60\u91cd\u590d\u4e00\u4e2a\u56fe\u5f62\u591a\u5c11\u6b21\uff0c\u8ba1\u7b97\u7684\u6570\u91cf\u4ecd\u7136\u662f\u4e2a\u5e38\u6570\u3002</p> <p> </p> <p>\u672c\u7ae0\u4e2d\u6211\u4eec\u5c06\u7efc\u5408\u6211\u4eec\u76ee\u524d\u6240\u5b66\u7684\u5e76\u5e94\u7528\u5728\u753b\u5e03\u4e0a\u3002\u548c\u524d\u51e0\u7ae0\u4e00\u6837\uff0c\u6211\u4eec\u7684\u7b56\u7565\u4f9d\u7136\u57fa\u4e8e\u4e58\u4ee5\u7a7a\u95f4\u5750\u6807\uff080\u52301\u4e4b\u95f4\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u753b\u7684\u57280\u52301\u4e4b\u95f4\u7684\u56fe\u5f62\u5c31\u4f1a\u91cd\u590d\u5730\u5f62\u6210\u7f51\u683c\u3002</p> <p>\"\u7f51\u683c\u63d0\u4f9b\u4e00\u79cd\u57fa\u4e8e\u4eba\u7684\u76f4\u89c9\u53d1\u660e\u4e8b\u7269\u7684\u6846\u67b6\uff0c\u5e76\u4e14\u53ef\u4ee5\u98a0\u8986\u3002\u81ea\u7136\u7684\u6df7\u6c8c\u808c\u7406\u63d0\u4f9b\u4e00\u79cd\u5bf9\u6bd4\u548c\u79e9\u5e8f\u7684\u8ff9\u8c61\u3002\u4ece\u65e9\u671f\u7f57\u9a6c\u6d74\u573a\u91cc\u7684\u9676\u74f7\u56fe\u6848\u5230\u51e0\u4f55\u9576\u5d4c\uff0c\u4eba\u4eec\u90a3\u65f6\u5019\u5c31\u4e60\u60ef\u7528\u7f51\u683c\u6765\u70b9\u7f00\u4ed6\u4eec\u7684\u751f\u6d3b\u3002\"10 PRINT, Mit Press, (2013)</p> <p>\u9996\u5148\u8ba9\u6211\u4eec\u8bb0\u4f4f <code>fract()</code> \u51fd\u6570\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a\u6570\u7684\u5206\u6570\u90e8\u5206\uff0c\u672c\u8d28\u4e0a\u662f\u96641\u7684\u4f59\u6570\uff08<code>mod(x,1.0)</code>\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c <code>fract()</code> \u8fd4\u56de\u5c0f\u6570\u70b9\u540e\u7684\u6570\u3002 \u6211\u4eec\u5355\u4f4d\u5316\u7684\u5750\u6807\u7cfb\u53d8\u91cf (<code>st</code>) \u5df2\u7ecf\u662f 0.0 \u5230 1.0 \u4e4b\u95f4\u7684\u4e86\u3002\u6240\u4ee5\u50cf\u4e0b\u9762\u8fd9\u4e48\u505a\u5e76\u6ca1\u6709\u5fc5\u8981\uff1a</p> <pre><code>void main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n    st = fract(st);\n    color = vec3(st,0.0);\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u4f46\u5982\u679c\u6211\u4eec\u653e\u5927\u5355\u4f4d\u5316\u5750\u6807\u7cfb \u2014 \u6bd4\u5982\u8bf43\u500d \u2014 \u6211\u4eec\u4f1a\u5f97\u5230\u4e09\u7ec4 0 \u5230 1 \u7684\u7ebf\u6027\u63d2\u503c\u7684\u6570\u5217\uff1a\u7b2c\u4e00\u7ec4\u5728 0-1 \u4e4b\u95f4\uff0c\u7b2c\u4e8c\u7ec4\u6d6e\u70b9\u6570\u5728 1-2 \u4e4b\u95f4\u4ee5\u53ca\u7b2c\u4e09\u7ec4\u5728 2-3 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u3002</p> <pre><code>// Author @patriciogv - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    st *= 3.0;      // Scale up the space by 3\n    st = fract(st); // Wrap around 1.0\n\n    // Now we have 9 spaces that go from 0-1\n\n    color = vec3(st,0.0);\n    //color = vec3(circle(st,0.5));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u73b0\u5728\u662f\u65f6\u5019\u5728\u5b50\u7a7a\u95f4\uff08\u7f51\u683c\u5355\u5143\u7684\u7a7a\u95f4\uff09\u91cc\u753b\u70b9\u4ec0\u4e48\u4e86\u3002\u53d6\u6d8827\u884c\u7684\u6ce8\u91ca\u3002\uff08\u56e0\u4e3a\u6211\u4eec\u7b49\u6bd4\u4f8b\u653e\u5927\u4e86x\u548cy\u5750\u6807\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6539\u53d8\u5750\u6807\u7684\u6bd4\u4f8b\uff0c\u56fe\u5f62\u4f1a\u548c\u9884\u671f\u7684\u4e00\u6837\u3002\uff09</p> <p>\u8bd5\u8bd5\u4e0b\u9762\u7684\u7ec3\u4e60\u6765\u6df1\u5165\u7406\u89e3\uff1a</p> <ul> <li> <p>\u628a\u7a7a\u95f4\u4e58\u4ee5\u4e0d\u540c\u7684\u6570\u3002\u8bd5\u8bd5\u7528\u6d6e\u70b9\u6570\uff0c\u8fd8\u6709\u5206\u522b\u7ed9x\u548cy\u4e0d\u540c\u7684\u7cfb\u6570\u3002</p> </li> <li> <p>\u628a\u8fd9\u4e2a\u5e73\u94fa\u6280\u5de7\u505a\u6210\u4e00\u4e2a\u53ef\u4ee5\u53cd\u590d\u4f7f\u7528\u7684\u51fd\u6570\u3002</p> </li> <li> <p>\u628a\u753b\u5e03\u5206\u6210 3 \u884c 3 \u5217\u3002 \u6307\u51fa\u5982\u4f55\u5b9a\u4e49\u884c\u548c\u5217\u7684\u7ebf\u7a0b\u7684\uff0c\u5e76\u7528\u8fd9\u79cd\u65b9\u5f0f\u6539\u53d8\u663e\u793a\u7740\u7684\u56fe\u5f62\u3002\u8bd5\u7740\u505a\u4e00\u4e2a\u4e95\u5b57\u68cb\u3002</p> </li> </ul>"},{"location":"Frontend/shader/09/README-ch/#_1","title":"\u5728\u56fe\u6848\u5185\u90e8\u5e94\u7528\u77e9\u9635","text":"<p>\u9274\u4e8e\u6bcf\u4e2a\u7ec6\u5206\u6216\u8005\u8bf4\u5355\u5143\u90fd\u662f\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u5355\u4f4d\u5316\u5750\u6807\u7cfb\u7684\u5c0f\u5355\u5143\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5185\u90e8\u7a7a\u95f4\u65bd\u4ee5\u77e9\u9635\u53d8\u6362\u6765\u5e73\u79fb\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u3002</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Copyright (c) Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/\n// I am the sole copyright owner of this Work.\n//\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvoid main(void){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Divide the space in 4\n    st = tile(st,4.);\n\n    // Use a matrix to rotate the space 45 degrees\n    st = rotate2D(st,PI*0.25);\n\n    // Draw a square\n    color = vec3(box(st,vec2(0.7),0.01));\n    // color = vec3(st,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <ul> <li> <p>\u60f3\u60f3\u600e\u4e48\u8ba9\u8fd9\u4e9b\u56fe\u6848\u6709\u8da3\u7684\u52a8\u8d77\u6765\u3002\u8003\u8651\u989c\u8272\uff0c\u5f62\u72b6\uff0c\u8fd0\u52a8\u7684\u53d8\u6362\u3002\u505a\u4e09\u79cd\u52a8\u753b\u3002</p> </li> <li> <p>\u901a\u8fc7\u7ec4\u5408\u4e0d\u540c\u7684\u5f62\u72b6\u91cd\u65b0\u521b\u9020\u66f4\u590d\u6742\u7684\u56fe\u6848\u3002</p> </li> </ul> <p></p> <ul> <li>\u7ed3\u5408\u591a\u5c42\u56fe\u6848\u6765\u5236\u4f5c\u4f60\u81ea\u5df1\u7684 Scottish Tartan Patterns.</li> </ul> <p> </p>"},{"location":"Frontend/shader/09/README-ch/#_2","title":"\u504f\u79fb\u56fe\u6848","text":"<p>So let's say we want to imitate a brick wall. Looking at the wall, you can see a half brick offset on x in every other row. How we can do that?</p> <p>\u5047\u5982\u6211\u4eec\u60f3\u8981\u6a21\u4eff\u7816\u5899\u3002\u770b\uff0c\u4e0b\u9762\u7684\u5899\uff0c\u4f60\u662f\u4e0d\u662f\u770b\u5230\u4e00\u534a\u7684\u7816\u5728x\u65b9\u5411\u4e0a\u504f\u79fb\u4e86\u4e00\u534a\u7816\u7684\u957f\u5ea6\uff0c\u6ca1\u9694\u4e00\u884c\u504f\u79fb\u4e00\u6b21\u3002\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\uff1f</p> <p></p> <p>\u7b2c\u4e00\u6b65\u6211\u4eec\u9700\u8981\u77e5\u9053\u67d0\u884c\u7684\u7ebf\u7a0b\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u4ee5\u4e3a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5947\u5076\u6765\u51b3\u5b9a\u662f\u5426\u8981\u5728x\u65b9\u5411\u4e0a\u504f\u79fb\u90a3\u4e00\u884c\u3002</p> <p>_\u6211\u4eec\u9700\u8981\u4e24\u6bb5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898_</p> <p>\u8981\u5224\u65ad\u6211\u4eec\u7684\u7ebf\u7a0b\u662f\u4e00\u4e2a\u5947\u6570\u884c\u6216\u8005\u5076\u6570\u884c\uff0c\u6211\u4eec\u8981\u7528 <code>2.0</code> \u7684 <code>mod()</code> \u3002 \u7136\u540e\u6839\u636e\u7ed3\u679c\u662f\u5426\u5927\u4e8e <code>1.0</code> \u6765\u5224\u65ad\u3002\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u53d6\u6d88\u6700\u540e\u4e24\u884c\u7684\u6ce8\u91ca\u3002</p> <p>\u6b63\u5982\u4f60\u6240\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a \u4e09\u5143\u7b97\u7b26\u53f7 \uff08\u7b2c\u4e8c\u884c\uff09\u6765\u68c0\u67e5 <code>2.0</code> \u7684<code>mod()</code>\uff08\u4f59\u6570\uff09\u5c0f\u4e8e <code>1.0</code> \u6216\u8005\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u7528 <code>step()</code>  \u51fd\u6570\u505a\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\uff08\u5176\u5b9e\uff09\u66f4\u5feb\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a\u867d\u7136\u8981\u77e5\u9053\u6bcf\u4e2a\u663e\u5361\u5982\u4f55\u4f18\u5316\u548c\u7f16\u8bd1\u4ee3\u7801\u5e76\u4e0d\u5bb9\u6613\uff0c\u4f46\u662f\u53ef\u4ee5\u5b89\u5168\u5730\u5047\u8bbe\u5185\u7f6e\u51fd\u6570\u603b\u6bd4\u975e\u5185\u7f6e\u7684\u51fd\u6570\u5feb\u3002\u4efb\u4f55\u65f6\u5019\u4f60\u90fd\u4ee5\u8c03\u7528\u5185\u7f6e\u51fd\u6570\uff0c\u5e72\u561b\u4e0d\u7528\u5462\uff01</p> <p>\u73b0\u5728\u6211\u4eec\u6709\u8fd9\u4e9b\u627e\u51fa\u5947\u6570\u7684\u65b9\u7a0b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed9\u5947\u6570\u884c\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u628a \u7816\u5757 \u505a\u51fa\u62fc\u7816\u7684\u6548\u679c\u3002\u4e0b\u9762\u4ee3\u7801\u7684\u7b2c14\u884c\u4fbf\u662f\u6211\u4eec\u7528\u6765\u201c\u4fa6\u6d4b\u201d\u5947\u6570\u884c\uff0c\u5e76\u4e88\u4e4b\u534a\u4e2a\u5355\u4f4d\u5728x\u4e0a\u7684\u504f\u79fb\u7684\u3002\u6ce8\u610f\u5230\u5bf9\u5076\u6570\u884c\uff0c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f <code>0.0</code>\uff0c <code>0.0</code> \u4e58\u4ee5 <code>0.5</code> \u5f97\u5230\u4e00\u4e2a <code>0.0</code> \u7684\u504f\u79fb\u3002 \u4f46\u662f\u5947\u6570\u884c\u6211\u4eec\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c <code>1.0</code>\uff0c \u4e58\u4ee5\u504f\u79fb\u91cf <code>0.5</code>\uff0c\u8fd9\u6837\u4fbf\u5411\u5750\u6807\u7cfb\u7684 <code>x</code> \u8f74\u504f\u79fb\u4e86 <code>0.5</code>\u3002  </p> <p>\u73b0\u5728\u8bd5\u7740\u53d6\u6d8832\u884c\u7684\u6ce8\u91ca \u2014 \u62c9\u4f38\u957f\u5bbd\u6bd4\u6765\u6a21\u4eff\u201c\u73b0\u4ee3\u7816\u5757\u201d\u7684\u957f\u5bbd\u6bd4\u3002\u901a\u8fc7\u53d6\u6d88\u7b2c40\u884c\u7684\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u6ce8\u610f\u5230\u5750\u6807\u7cfb\u7edf\u662f\u5982\u4f55\u770b\u8d77\u6765\u6620\u5c04\u5230\u7ea2\u7eff\u8272\u7684\u3002</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec2 brickTile(vec2 _st, float _zoom){\n    _st *= _zoom;\n\n    // Here is where the offset is happening\n    _st.x += step(1., mod(_st.y,2.0)) * 0.5;\n\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st);\n    uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvoid main(void){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Modern metric brick of 215mm x 102.5mm x 65mm\n    // http://www.jaharrison.me.uk/Brickwork/Sizes.html\n    // st /= vec2(2.15,0.65)/1.5;\n\n    // Apply the brick tiling\n    st = brickTile(st,5.0);\n\n    color = vec3(box(st,vec2(0.9)));\n\n    // Uncomment to see the space coordinates\n    // color = vec3(st,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <ul> <li> <p>\u8bd5\u7740\u6839\u636e\u65f6\u95f4\u53d8\u5316\u5bf9\u504f\u79fb\u91cf\u505a\u52a8\u753b\u3002</p> </li> <li> <p>\u53e6\u505a\u4e00\u4e2a\u52a8\u753b\uff0c\u8ba9\u5076\u6570\u884c\u5411\u5de6\u79fb\uff0c\u5947\u6570\u884c\u5411\u53f3\u79fb\u52a8\u3002</p> </li> <li> <p>\u80fd\u4e0d\u80fd\u6839\u636e\u5217\u91cd\u590d\u8fd9\u6837\u7684\u6548\u679c\uff1f</p> </li> <li> <p>\u8bd5\u7740\u7ed3\u5408 <code>x</code> \u548c <code>y</code> \u8f74\u7684\u504f\u79fb\u6765\u5f97\u5230\u4e0b\u9762\u8fd9\u6837\u7684\u6548\u679c\uff1a</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/09/README-ch/#truchet","title":"Truchet \u74f7\u7816","text":"<p>\u76ee\u524d\u6211\u4eec\u5b66\u4e86\u5982\u4f55\u533a\u5206\u5947\u6570\u884c/\u5217\u6216\u5076\u6570\u884c/\u5217\uff0c\uff08\u7c7b\u4f3c\u7684\uff09\uff0c\uff08\u6211\u4eec\u4e5f\uff09\u53ef\u80fd\u518d\u7528\uff08\u8fd9\u4e2a\u6280\u5de7\uff09\u6839\u636e\u4f4d\u7f6e\u6765\u8bbe\u8ba1\u5143\u7d20\u3002 \u8003\u8651\u5230 Truchet Tiles \u7684\u4f8b\u5b50\uff0c\u5373\u4e00\u4e2a\u5355\u4e00\u8bbe\u8ba1\u5143\u7d20\u53ef\u4ee5\u4ee5\u56db\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u5448\u73b0\uff1a</p> <p></p> <p>\u901a\u8fc7\u6539\u53d8\u5bf9\u89d2\u74f7\u7816\u7684\u56fe\u6848\uff0c\u4fbf\u53ef\u80fd\u7ec4\u6210\u65e0\u9650\u79cd\u590d\u6742\u8bbe\u8ba1\u7684\u53ef\u80fd\u3002</p> <p></p> <p>\u4ed4\u7ec6\u89c2\u5bdf <code>rotateTilePattern()</code> \u51fd\u6570, \u5b83\u628a\u5750\u6807\u7a7a\u95f4\u7ec6\u5206\u6210\u56db\u4e2a\u5355\u5143\u5e76\u8d4b\u4e88\u6bcf\u4e00\u4e2a\u65cb\u8f6c\u503c\u3002</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265358979323846\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        _st = rotate2D(_st,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI);\n    }\n\n    return _st;\n}\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    st = tile(st,3.0);\n    st = rotateTilePattern(st);\n\n    // Make more interesting combinations\n    // st = tile(st,2.0);\n    // st = rotate2D(st,-PI*u_time*0.25);\n    // st = rotateTilePattern(st*2.);\n    // st = rotate2D(st,PI*u_time*0.25);\n\n    // step(st.x,st.y) just makes a b&amp;w triangles\n    // but you can use whatever design you want.\n    gl_FragColor = vec4(vec3(step(st.x,st.y)),1.0);\n}\n</code></pre> <ul> <li> <p>\u6ce8\u91ca\uff0c\u53d6\u6d88\u6ce8\u91ca\uff0c\u4ee5\u53ca\u590d\u5236\u7b2c69\u523072\u884c\u6765\u521b\u4f5c\u65b0\u7684\u8bbe\u8ba1\u3002</p> </li> <li> <p>\u628a\u9ed1\u767d\u4e09\u89d2\u53d8\u6210\u5176\u4ed6\u5143\u7d20\uff0c\u4f8b\u5982\uff1a\u534a\u5706\uff0c\u65cb\u8f6c\u7684\u65b9\u5f62\u6216\u76f4\u7ebf\u3002</p> </li> <li> <p>\u7f16\u5199\u6839\u636e\u5143\u7d20\u81ea\u8eab\u4f4d\u7f6e\u65cb\u8f6c\u7684\u56fe\u5f62\u4ee3\u7801\u3002</p> </li> <li> <p>\u521b\u4f5c\u4e00\u4e2a\u6839\u636e\u5176\u4f4d\u7f6e\u6539\u53d8\u5176\u4ed6\u5c5e\u6027\u7684\u56fe\u6848\u3002</p> </li> <li> <p>\u60f3\u60f3\u5176\u4ed6\u80fd\u7528\u8fd9\u7ae0\u539f\u7406\u7684\u6848\u4f8b\uff0c\u4e0d\u4e00\u5b9a\u662f\u56fe\u6848. (\u4f8b: \u6613\u7ecf\u5366)</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/09/README-ch/#_3","title":"\u5236\u5b9a\u81ea\u5df1\u7684\u89c4\u5219","text":"<p>\u5236\u4f5c\u7a0b\u5e8f\u56fe\u6848\u662f\u79cd\u5bfb\u627e\u6700\u5c0f\u53ef\u91cd\u590d\u5143\u7d20\u7684\u53e4\u8001\u7ec3\u4e60\uff08\u7075\u4fee\uff09\u3002\u6211\u4eec\u4f5c\u4e3a\u957f\u65f6\u95f4\u4f7f\u7528\u7f51\u683c\u548c\u56fe\u6848\u6765\u88c5\u9970\u7ec7\u7269\u3001\u5730\u9762\u548c\u7269\u54c1\u7684\u9576\u8fb9\u7269\u79cd\uff1a\u4ece\u53e4\u5e0c\u814a\u7684\u5f2f\u66f2\u56fe\u6848\uff0c\u5230\u4e2d\u56fd\u7684\u7a97\u6805\u8bbe\u8ba1\uff0c\u91cd\u590d\u548c\u53d8\u5316\u7684\u6109\u60a6\u5438\u5f15\u6211\u4eec\u7684\u60f3\u8c61\u3002\u82b1\u4e9b\u65f6\u95f4\u6d4f\u89c8 decorative patterns \u5e76\u770b\u770b\u5728\u6f2b\u957f\u7684\u5386\u53f2\u91cc\uff0c\u827a\u672f\u5bb6\u548c\u8bbe\u8ba1\u5e08\u662f\u5982\u4f55\u5bfb\u627e\u5728\u79e9\u5e8f\u7684\u9884\u6d4b\u6027\u548c\uff08\u7531\uff09\u6df7\u6c8c\u548c\u884d\u53d8\uff08\u4ea7\u751f\uff09\u7684\u60ca\u5947\u4e4b\u95f4\u7684\u8fb9\u754c\u7684\u3002\u4ece\u963f\u62c9\u4f2f\u51e0\u4f55\u56fe\u6848\uff0c\u5230\u6591\u6593\u7684\u975e\u6d32\u7f16\u5236\u827a\u672f\uff0c\u8fd9\u91cc\u6709\u4e00\u6574\u4e2a\u56fe\u6848\u7684\u5b87\u5b99\u8981\u5b66\u4e60\u3002</p> <p></p> <p>\u8fd9\u7ae0\u6211\u4eec\u5c31\u7ed3\u675f\u7b97\u6cd5\u7ed8\u56fe\u90e8\u5206\u4e86\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\uff0c\u6211\u4eec\u4f1a\u5b66\u4e60\u5982\u4f55\u628a\u71b5\uff08\u5176\u5b9e\u5c31\u662f\u6df7\u4e71\u548c\u968f\u673a\u7684\u610f\u601d\uff09\u52a0\u5165\u5230\u6211\u4eec\u7684\u7740\u8272\u5668\u4e2d\u6765\u4ea7\u751f\u751f\u6210\u8bbe\u8ba1\u3002</p>"},{"location":"Frontend/shader/09/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>Padr\u00f5es repetitivos s\u00e3o um tema perfeito para desenho computacional. Diferente do modo convencional de desenhar, shaders te deixam desenhar tudo em paralelo de uma vez. Em vez de repetir o mesmo procedimento v\u00e1rias vezes, voc\u00ea vai empacotar e repetir o \"espa\u00e7o\". Parece sci-fi? Vamos descobrir o que isso quer dizer de verdade.</p>"},{"location":"Frontend/shader/09/SUMMARY/","title":"SUMMARY","text":"<p>Repetitive patterns are perfect theme for computational sketching. Different from conventional way of drawing, shaders lets you draw everything parallelly at once. Instead of repeating the same procedure many times, you will wrap and repeat the \"space\". Sounds like Sci-Fi? Let's find out what it really means.</p>"},{"location":"Frontend/shader/09/TITLE-pt/","title":"TITLE pt","text":""},{"location":"Frontend/shader/09/TITLE-pt/#patterns-padroes","title":"Patterns (padr\u00f5es)","text":""},{"location":"Frontend/shader/09/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/09/TITLE/#patterns","title":"Patterns","text":""},{"location":"Frontend/shader/09/notes/","title":"Notes","text":""},{"location":"Frontend/shader/09/notes/#nicolas","title":"nicolas","text":"<ul> <li>after line 23, i've added the following:</li> </ul> <p>Once multiplied by 3, instead of ranging from 0 \u00e0 1 on the X and Y axes, <code>st</code> will range from 0 to 3 on X and Y axes. If we use <code>st * 3.0</code> as such, its value will become greater than 1 and we won't be able to use it like we did so far ; it will not be normalised between 0 and 1 anymore. If we only use the fractional part, we will fall back to a normalised space as the values returned by <code>fract()</code> is alwys comprised between 0 and 1. Here's an example of the respective values of <code>st</code>, <code>st * 3</code> and <code>fract( st * 3 )</code>.</p> <pre><code>first block\nst = 0.00 | st * 3 = 0.00 | fract( st * 3 ) = 0.00\nst = 0.10 | st * 3 = 0.30 | fract( st * 3 ) = 0.30\nst = 0.20 | st * 3 = 0.60 | fract( st * 3 ) = 0.60\nst = 0.30 | st * 3 = 0.90 | fract( st * 3 ) = 0.90\nsecond block\nst = 0.40 | st * 3 = 1.20 | fract( st * 3 ) = 0.20\nst = 0.50 | st * 3 = 1.50 | fract( st * 3 ) = 0.50\nst = 0.60 | st * 3 = 1.80 | fract( st * 3 ) = 0.80\nthird block\nst = 0.70 | st * 3 = 2.10 | fract( st * 3 ) = 0.10\nst = 0.80 | st * 3 = 2.40 | fract( st * 3 ) = 0.40\nst = 0.90 | st * 3 = 2.70 | fract( st * 3 ) = 0.70\nst = 1.00 | st * 3 = 3.00 | fract( st * 3 ) = 1.00\n</code></pre> <p>We can clearly see that on the first block, the value of <code>st * 3</code> is the same as the value of <code>fract( st * 3 )</code> but after the second block, <code>st * 3</code> is greater than 1 and <code>fract( st * 3 )</code> remains comprised between 0 and 1.</p> <ul> <li>after line 70 I've added</li> </ul> <p>In fact, a ternary operator is an <code>if</code> in disguise, the program is forced to branch and to evaluate both branches of the <code>if / else</code> which slows the execution down. In this case, we could write:</p> <pre><code>y = floor( mod( x, 2.0 ) );\n</code></pre> <p>which will also return 0 if the modulo's result is lower than 1 and 1 if the modulo's result is comprised between 1 &amp; 2. The main difference being that it needs to load only one value in memory instead of 2 for a <code>step()</code> evaluation. We could even get rid of the <code>floor</code> by <code>casting</code> (transtyping) the modulo's result to <code>int</code> like so:</p> <pre><code>y = float( int( mod( x, 2.0 ) ) );\n</code></pre> <p>When casting a <code>float</code> to <code>int</code>, we drop the number after the floating point which is the same as calling the <code>floor</code> function, (beware to re-cast the result to <code>float</code>).</p>"},{"location":"Frontend/shader/09/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/09/tmp/#patterns","title":"Patterns","text":"<p>Since shader programs are executed by pixel-by-pixel no matter how much you repeat a shape the number of calculations stays constant. This means that fragment shaders are particulary suitable for tile patterns.</p> <p> </p> <p>In this chapter we are going to apply what we've learned so far and repeat it along a canvas. Like in previous chapters, our strategy will be based on multiplying the space coordinates (between 0.0 and 1.0), so that the shapes we draw between the values 0.0 and 1.0 will be repeated to make a grid.</p> <p>\"The grid provides a framework within which human intuition and invention can operate and that it can subvert. Within the chaos of nature patterns provide a constrast and promise of order. From early patterns on pottery to geometric mosaics in Roman baths, people have long used grids to enhance their lives with decoration.\" 10 PRINT, Mit Press, (2013)</p> <p>First let's remember the <code>fract()</code> function. It returns the fractional part of a number, making <code>fract()</code> in essence the modulo of one (<code>mod(x,1.0)</code>). In other words, <code>fract()</code> returns the number after the floating point. Our normalized coordinate system variable (<code>st</code>) already goes from 0.0 to 1.0 so it doesn't make sense to do something like:</p> <pre><code>void main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n    st = fract(st);\n    color = vec3(st,0.0);\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>But if we scale the normalized coordinate system up - let's say by three - we will get three sequences of linear interpolations between 0-1: the first one between 0-1, the second one for the floating points between 1-2 and the third one for the floating points between 2-3.</p> <pre><code>// Author @patriciogv - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    st *= 3.0;      // Scale up the space by 3\n    st = fract(st); // Wrap around 1.0\n\n    // Now we have 9 spaces that go from 0-1\n\n    color = vec3(st,0.0);\n    //color = vec3(circle(st,0.5));\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Now it's time to draw something in each subspace, by uncommenting line 27. (Because we are multiplying equally in x and y the aspect ratio of the space doesn't change and shapes will be as expected.)</p> <p>Try some of the following exercises to get a deeper understanding:</p> <ul> <li> <p>Multiply the space by different numbers. Try with floating point values and also with different values for x and y.</p> </li> <li> <p>Make a reusable function of this tiling trick.</p> </li> <li> <p>Divide the space into 3 rows and 3 columns. Find a way to know in which column and row the thread is and use that to change the shape that is displaying. Try to compose a tic-tac-toe match.</p> </li> </ul>"},{"location":"Frontend/shader/09/tmp/#apply-matrices-inside-patterns","title":"Apply matrices inside patterns","text":"<p>Since each subdivision or cell is a smaller version of the normalized coordinate system we have already been using, we can apply a matrix transformation to it in order to translate, rotate or scale the space inside.</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Copyright (c) Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/\n// I am the sole copyright owner of this Work.\n//\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvoid main(void){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Divide the space in 4\n    st = tile(st,4.);\n\n    // Use a matrix to rotate the space 45 degrees\n    st = rotate2D(st,PI*0.25);\n\n    // Draw a square\n    color = vec3(box(st,vec2(0.7),0.01));\n    // color = vec3(st,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <ul> <li> <p>Think of interesting ways of animating this pattern. Consider animating color, shapes and motion. Make three different animations.</p> </li> <li> <p>Recreate more complicated patterns by composing different shapes.</p> </li> </ul> <p></p> <ul> <li>Combine different layers of patterns to compose your own Scottish Tartan Patterns.</li> </ul> <p> </p>"},{"location":"Frontend/shader/09/tmp/#offset-patterns","title":"Offset patterns","text":"<p>So let's say we want to imitate a brick wall. Looking at the wall, you can see a half brick offset on x in every other row. How we can do that?</p> <p></p> <p>As a first step we need to know if the row of our thread is an even or odd number, because we can use that to determine if we need to offset the x in that row. For that we are going to use <code>mod()</code> of <code>2.0</code> and then see if the result is under <code>1.0</code> or not. Take a look at the following formula and uncomment the two last lines.</p> <p>As you can see we can use a ternary operator to check if the <code>mod()</code> of <code>2.0</code> is under <code>1.0</code> (second line) or similarly we can use a <code>step()</code> function which does the same operation, but faster. Why? Although is hard to know how each graphic card optimizes and compiles the code, it is safe to assume that built-in functions are faster than non-built-in ones. Everytime you can use a built-in function, use it!</p> <p>So now that we have our odd number formula we can apply an offset to the odd rows to give a brick effect to our tiles. Line 14 of the following code is where we are using the function to \"detect\" odd rows and give them a half-unit offset on <code>x</code>. Note that for even rows, the result of our function is <code>0.0</code>, and multiplying <code>0.0</code> by the offset of <code>0.5</code> gives an offset of <code>0.0</code>. But on odd rows we multiply the result of our function, <code>1.0</code>, by the offset of <code>0.5</code>, which moves the <code>x</code> axis of the coordinate system by <code>0.5</code>.</p> <p>Now try uncommenting line 32 - this stretches the aspect ratio of the coordinate system to mimic the aspect of a \"modern brick\". By uncommenting line 40 you can see how the coordinate system looks mapped to red and green.</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec2 brickTile(vec2 _st, float _zoom){\n    _st *= _zoom;\n\n    // Here is where the offset is happening\n    _st.x += step(1., mod(_st.y,2.0)) * 0.5;\n\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st);\n    uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvoid main(void){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Modern metric brick of 215mm x 102.5mm x 65mm\n    // http://www.jaharrison.me.uk/Brickwork/Sizes.html\n    // st /= vec2(2.15,0.65)/1.5;\n\n    // Apply the brick tiling\n    st = brickTile(st,5.0);\n\n    color = vec3(box(st,vec2(0.9)));\n\n    // Uncomment to see the space coordinates\n    // color = vec3(st,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <ul> <li> <p>Try animating this by moving the offset according to time.</p> </li> <li> <p>Make another animation where even rows move to the left and odd rows move to the right.</p> </li> <li> <p>Can you repeat this effect but with columns?</p> </li> <li> <p>Try combining an offset on <code>x</code> and <code>y</code> axis to get something like this:</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/09/tmp/#truchet-tiles","title":"Truchet Tiles","text":"<p>Now that we've learned how to tell if our cell is in an even or odd row or column, it's possible to reuse a single design element depending on its position. Consider the case of the Truchet Tiles where a single design element can be presented in four different ways:</p> <p></p> <p>By changing the pattern across tiles, it's possible to construct an infinite set of complex designs.</p> <p></p> <p>Pay close attention to the function <code>rotateTilePattern()</code>, which subdivides the space into four cells and assigns an angle of rotation to each one.</p> <pre><code>// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265358979323846\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        _st = rotate2D(_st,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI);\n    }\n\n    return _st;\n}\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    st = tile(st,3.0);\n    st = rotateTilePattern(st);\n\n    // Make more interesting combinations\n    // st = tile(st,2.0);\n    // st = rotate2D(st,-PI*u_time*0.25);\n    // st = rotateTilePattern(st*2.);\n    // st = rotate2D(st,PI*u_time*0.25);\n\n    // step(st.x,st.y) just makes a b&amp;w triangles\n    // but you can use whatever design you want.\n    gl_FragColor = vec4(vec3(step(st.x,st.y)),1.0);\n}\n</code></pre> <p></p> <ul> <li> <p>Comment, uncomment and duplicate lines 69 to 72 to compose new designs.</p> </li> <li> <p>Change the black and white triangle for another element like: half circles, rotated squares or lines.</p> </li> <li> <p>Code other patterns where the elements are rotated according to their position.</p> </li> <li> <p>Make a pattern that changes other properties according to the position of the elements.</p> </li> <li> <p>Think of something else that is not necessarily a pattern where you can apply the principles from this section. (Ex: I Ching hexagrams)</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/09/tmp/#making-your-own-rules","title":"Making your own rules","text":"<p>Making procedural patterns is a mental exercise in finding minimal reusable elements. This practice is old; we as a species have been using grids and patterns to decorate textiles, floors and borders of objects for a long time: from meanders patterns in ancient Greece, to Chinese lattice design, the pleasure of repetition and variation catches our imagination. Take some time to look at decorative patterns and see how artists and designers have a long history of navigating the fine edge between the predictability of order and the surprise of variation and chaos. From Arabic geometrical patterns, to gorgeous African fabric designs, there is an entire universe of patterns to learn from.</p> <p></p> <p>With this chapter we end the section on Algorithmic Drawing. In the following chapters we will learn how to bring some entropy to our shaders and produce generative designs.</p>"},{"location":"Frontend/shader/10/","title":"Generative designs","text":"<p>It is not a surprise that after so much repetition and order the author is forced to bring some chaos.</p>"},{"location":"Frontend/shader/10/#random","title":"Random","text":"<p>Randomness is a maximal expression of entropy. How can we generate randomness inside the seemingly predictable and rigid code environment?</p> <p>Let's start by analyzing the following function:</p> <p>Above we are extracting the fractional content of a sine wave. The <code>sin()</code> values that fluctuate between <code>-1.0</code> and <code>1.0</code> have been chopped behind the floating point, returning all positive values between <code>0.0</code> and <code>1.0</code>. We can use this effect to get some pseudo-random values by \"breaking\" this sine wave into smaller pieces. How? By multiplying the resultant of <code>sin(x)</code> by larger numbers. Go ahead and click on the function above and start adding some zeros.</p> <p>By the time you get to <code>100000.0</code> ( and the equation looks like this: <code>y = fract(sin(x)*100000.0)</code> ) you aren't able to distinguish the sine wave any more. The granularity of the fractional part has corrupted the flow of the sine wave into pseudo-random chaos.</p>"},{"location":"Frontend/shader/10/#controlling-chaos","title":"Controlling chaos","text":"<p>Using random can be hard; it is both too chaotic and sometimes not random enough. Take a look at the following graph. To make it, we are using a <code>rand()</code> function which is implemented exactly like we describe above.</p> <p>Taking a closer look, you can see the <code>sin()</code> wave crest at <code>-1.5707</code> and <code>1.5707</code>. I bet you now understand why - it's where the maximum and minimum of the sine wave happens.</p> <p>If look closely at the random distribution, you will note that the there is some concentration around the middle compared to the edges.</p> <p>A while ago Pixelero published an interesting article about random distribution. I've added some of the functions he uses in the previous graph for you to play with and see how the distribution can be changed. Uncomment the functions and see what happens.</p> <p>If you read Pixelero's article, it is important to keep in mind that our <code>rand()</code> function is a deterministic random, also known as pseudo-random. Which means for example <code>rand(1.)</code> is always going to return the same value. Pixelero makes reference to the ActionScript function <code>Math.random()</code> which is non-deterministic; every call will return a different value.</p>"},{"location":"Frontend/shader/10/#2d-random","title":"2D Random","text":"<p>Now that we have a better understanding of randomness, it's time to apply it in two dimensions, to both the <code>x</code> and <code>y</code> axis. For that we need a way to transform a two dimensional vector into a one dimensional floating point value. There are different ways to do this, but the <code>dot()</code> function is particulary helpful in this case. It returns a single float value between <code>0.0</code> and <code>1.0</code> depending on the alignment of two vectors.</p> <p>Take a look at lines 13 to 15 and notice how we are comparing the <code>vec2 st</code> with another two dimensional vector ( <code>vec2(12.9898,78.233)</code>).</p> <ul> <li> <p>Try changing the values on lines 14 and 15. See how the random pattern changes and think about what we can learn from this.</p> </li> <li> <p>Hook this random function to the mouse interaction (<code>u_mouse</code>) and time (<code>u_time</code>) to understand better how it works.</p> </li> </ul>"},{"location":"Frontend/shader/10/#using-the-chaos","title":"Using the chaos","text":"<p>Random in two dimensions looks a lot like TV noise, right? It's a hard raw material to use to compose images. Let's learn how to make use of it.</p> <p>Our first step is to apply a grid to it; using the <code>floor()</code> function we will generate an integer table of cells. Take a look at the following code, especially lines 22 and 23.</p> <p>After scaling the space by 10 (on line 21), we separate the integers of the coordinates from the fractional part. We are familiar with this last operation because we have been using it to subdivide a space into smaller cells that go from <code>0.0</code> to <code>1.0</code>. By obtaining the integer of the coordinate we isolate a common value for a region of pixels, which will look like a single cell. Then we can use that common integer to obtain a random value for that area. Because our random function is deterministic, the random value returned will be constant for all the pixels in that cell.</p> <p>Uncomment line 29 to see that we preserve the floating part of the coordinate, so we can still use that as a coordinate system to draw things inside each cell.</p> <p>Combining these two values - the integer part and the fractional part of the coordinate - will allow you to mix variation and order.</p> <p>Take a look at this GLSL port of the famous <code>10 PRINT CHR$(205.5+RND(1)); : GOTO 10</code> maze generator.</p> <p>Here I'm using the random values of the cells to draw a line in one direction or the other using the <code>truchetPattern()</code> function from the previous chapter (lines 41 to 47).</p> <p>You can get another interesting pattern by uncommenting the block of lines between 50 to 53, or animate the pattern by uncommenting lines 35 and 36.</p>"},{"location":"Frontend/shader/10/#master-random","title":"Master Random","text":"<p>Ryoji Ikeda, Japanese electronic composer and visual artist, has mastered the use of random; it is hard not to be touched and mesmerized by his work. His use of randomness in audio and visual mediums is forged in such a way that it is not annoying chaos but a mirror of the complexity of our technological culture.</p> <p>Take a look at Ikeda's work and try the following exercises:</p> <ul> <li>Make rows of moving cells (in opposite directions) with random values. Only display the cells with brighter values. Make the velocity of the rows fluctuate over time.</li> </ul> <p></p> <ul> <li>Similarly make several rows but each one with a different speed and direction. Hook the position of the mouse to the threshold of which cells to show.</li> </ul> <p></p> <ul> <li>Create other interesting effects.</li> </ul> <p></p> <p>Using random aesthetically can be problematic, especially if you want to make natural-looking simulations. Random is simply too chaotic and very few things look <code>random()</code> in real life. If you look at a rain pattern or a stock chart, which are both quite random, they are nothing like the random pattern we made at the begining of this chapter. The reason? Well, random values have no correlation between them what so ever, but most natural patterns have some memory of the previous state.</p> <p>In the next chapter we will learn about noise, the smooth and natural looking way of creating computational chaos.</p>"},{"location":"Frontend/shader/10/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/10/README-ch/","title":"\u751f\u6210\u8bbe\u8ba1","text":"<p>\u5728\u7ecf\u5386\u4e86\u4f17\u591a\u7684\u91cd\u590d\u4e0e\u79e9\u5e8f\u4e4b\u540e\uff0c\u7b14\u8005\u81ea\u7136\u800c\u7136\u5730\u5f00\u59cb\u7740\u624b\u521b\u9020\u4e00\u4e9b\u6df7\u6c8c\u3002</p>"},{"location":"Frontend/shader/10/README-ch/#_2","title":"\u968f\u673a","text":"<p>\u968f\u673a\u6027\u662f\u71b5\u7684\u6700\u5927\u8868\u73b0\u3002\u6211\u4eec\u5982\u4f55\u5728\u770b\u4f3c\u53ef\u9884\u6d4b\u800c\u4e14\u4e25\u82db\u7684\u4ee3\u7801\u73af\u5883\u4e2d\u751f\u6210\u968f\u673a\u6027\u5462\uff1f</p> <p>\u8ba9\u6211\u4eec\u4ece\u5206\u6790\u4e0b\u9762\u7684\u51fd\u6570\u7740\u624b:</p> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u63d0\u53d6\u4e86sin\u51fd\u6570\u5176\u6ce2\u5f62\u7684\u5206\u6570\u90e8\u5206\u3002\u503c\u57df\u4e3a<code>-1.0</code> \u5230 <code>1.0</code> \u4e4b\u95f4\u7684<code>sin()</code> \u51fd\u6570\u88ab\u53d6\u4e86\u5c0f\u6570\u70b9\u540e\u7684\u90e8\u5206(\u8fd9\u91cc\u5b9e\u9645\u662f\u6307\u6a211))\uff0c\u8fd4\u56de<code>0.0</code> \u5230 <code>1.0</code> \u95f4\u7684\u6b63\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u79cd\u6548\u679c\u901a\u8fc7\u628a\u6b63\u5f26\u51fd\u6570\u6253\u6563\u6210\u5c0f\u7247\u6bb5\u6765\u5f97\u5230\u4e00\u4e9b\u4f2a\u968f\u673a\u6570\u3002\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u901a\u8fc7\u5728<code>sin(x)</code>\u7684\u503c\u4e0a\u4e58\u4ee5\u5927\u4e9b\u7684\u6570\u3002\u70b9\u51fb\u4e0a\u9762\u7684\u51fd\u6570\uff0c\u57281\u540e\u9762\u52a0\u4e9b0\u3002</p> <p>\u5f53\u4f60\u52a0\u5230 <code>100000.0</code> \uff08\u65b9\u7a0b\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a<code>y = fract(sin(x)*100000.0)</code> \uff09\uff0c\u4f60\u518d\u4e5f\u533a\u5206\u4e0d\u51fasin\u6ce2\u4e86\u3002\u5c0f\u6570\u90e8\u5206\u7684\u7c92\u5ea6\u5c06sine\u7684\u5faa\u73af\u53d8\u6210\u4e86\u4f2a\u968f\u673a\u7684\u6df7\u6c8c\u3002</p>"},{"location":"Frontend/shader/10/README-ch/#_3","title":"\u63a7\u5236\u6df7\u6c8c","text":"<p>\u4f7f\u7528\u968f\u673a\u4f1a\u5f88\u96be\uff1b\u5b83\u4e0d\u662f\u592a\u6df7\u6c8c\u96be\u6d4b\u5c31\u662f\u6709\u65f6\u53c8\u4e0d\u591f\u6df7\u4e71\u3002\u770b\u770b\u4e0b\u9762\u7684\u56fe\u4f8b\u3002\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c\uff0c\u6211\u4eec\u50cf\u4e4b\u524d\u63cf\u8ff0\u7684\u90a3\u6837\u5e94\u7528\u7528 <code>rand()</code> \u51fd\u6570\u3002</p> <p>\u7ec6\u770b\uff0c\u4f60\u53ef\u4ee5\u770b\u5230 <code>sin()</code> \u5728 <code>-1.5707</code> \u548c <code>1.5707</code> \u4e0a\u6709\u8f83\u5927\u6ce2\u52a8\u3002\u6211\u6253\u8d4c\u4f60\u73b0\u5728\u4e00\u5b9a\u7406\u89e3\u8fd9\u662f\u4e3a\u4ec0\u4e48\u2014\u2014\u90a3\u5c31\u662fsin\u53d6\u5f97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5730\u65b9\u3002</p> <p>\u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\u968f\u673a\u5206\u5e03\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u76f8\u6bd4\u8fb9\u7f18\uff0c\u4e2d\u90e8\u66f4\u96c6\u4e2d\u3002</p> <p>\u4e0d\u4e45\u524d Pixelero \u53d1\u8868\u4e86\u4e00\u7bc7\u5173\u4e8e\u968f\u673a\u5206\u5e03\u7684\u6709\u610f\u601d\u7684\u6587\u7ae0\u3002 \u6211\u6dfb\u52a0\u4e86\u4e9b\u524d\u51e0\u5f20\u56fe\u6240\u6709\u7684\u51fd\u6570\u6765\u4f9b\u4f60\u8bd5\u9a8c\uff0c\u770b\u770b\u5982\u4f55\u6539\u53d8\u5206\u5e03\u3002\u53d6\u6d88\u51fd\u6570\u7684\u6ce8\u91ca\uff0c\u770b\u770b\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\u3002</p> <p>\u5982\u679c\u4f60\u8bfb\u4e0b Pixelero \u7684\u6587\u7ae0\uff0c\u4e00\u5b9a\u8c28\u8bb0\u6211\u4eec\u7528\u7684 <code>rand()</code> \u662f\u786e\u5b9a\u6027\u968f\u673a\uff0c\u4e5f\u88ab\u79f0\u4f5c\u662f\u4f2a\u968f\u673a\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c \u5c31 <code>rand(1.)</code> \u4e3a\u4f8b\uff0c\u603b\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002Pixelero \u7528 ActionSript \u51fd\u6570\u505a\u4e86\u4e9b\u53c2\u8003\uff0c<code>Math.random()</code>\uff0c\u4e00\u4e2a\u975e\u786e\u5b9a\u6027\u968f\u673a\uff1b\u6bcf\u6b21\u8c03\u7528\u90fd\u8fd4\u56de\u4e0d\u540c\u7684\u503c\u3002</p>"},{"location":"Frontend/shader/10/README-ch/#2d","title":"2D \u968f\u673a","text":"<p>\u73b0\u5728\u6211\u4eec\u5bf9\u968f\u673a\u6709\u4e86\u6df1\u5165\u7684\u7406\u89e3\uff0c\u662f\u65f6\u5019\u5c06\u5b83\u5e94\u7528\u5230\u4e8c\u7ef4\uff0c<code>x</code> \u8f74\u548c <code>y</code> \u8f74\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u4e8c\u7ef4\u5411\u91cf\u8f6c\u5316\u4e3a\u4e00\u7ef4\u6d6e\u70b9\u6570\u3002\u8fd9\u91cc\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u4f46 <code>dot()</code> \u51fd\u6570\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c24\u5176\u6709\u7528\u3002\u5b83\u6839\u636e\u4e24\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u8fd4\u56de\u4e00\u4e2a <code>0.0</code> \u5230 <code>1.0</code> \u4e4b\u95f4\u7684\u503c\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    float rnd = random( st );\n\n    gl_FragColor = vec4(vec3(rnd),1.0);\n}\n</code></pre> <p>\u770b\u4e0b\u7b2c13\u884c\u548c15\u884c\uff0c\u6ce8\u610f\u6211\u4eec\u5982\u4f55\u5c06 <code>vec2 st</code> \u548c\u53e6\u4e00\u4e2a\u4e8c\u7ef4\u5411\u91cf \uff08 <code>vec2(12.9898,78.233)</code>\uff09\u3002</p> <ul> <li> <p>\u8bd5\u7740\u6539\u53d814\u548c15\u884c\u7684\u503c\u3002\u770b\u770b\u968f\u673a\u56fe\u6848\u7684\u53d8\u5316\uff0c\u60f3\u60f3\u4ece\u4e2d\u6211\u4eec\u80fd\u5b66\u5230\u4ec0\u4e48\u3002</p> </li> <li> <p>\u597d\u597d\u7528\u9f20\u6807\uff08<code>u_mouse</code>\uff09\u548c\u65f6\u95f4\uff08<code>u_time</code>\uff09\u8c03\u620f\u8fd9\u4e2a\u968f\u673a\u51fd\u6570\uff0c\u66f4\u597d\u7684\u7406\u89e3\u5b83\u5982\u4f55\u5de5\u4f5c\u3002</p> </li> </ul>"},{"location":"Frontend/shader/10/README-ch/#_4","title":"\u4f7f\u7528\u6df7\u6c8c","text":"<p>\u4e8c\u7ef4\u7684\u968f\u673a\u770b\u8d77\u6765\u662f\u4e0d\u662f\u50cf\u7535\u89c6\u7684\u566a\u70b9\uff1f\u5bf9\u7ec4\u6210\u56fe\u50cf\u6765\u8bf4\uff0c\u968f\u673a\u662f\u4e2a\u96be\u7528\u7684\u539f\u59cb\u7d20\u6750\u3002\u8ba9\u6211\u4eec\u6765\u5b66\u7740\u5982\u4f55\u6765\u5229\u7528\u5b83\u3002</p> <p>\u6211\u4eec\u7684\u7b2c\u4e00\u6b65\u662f\u5728\u7f51\u683c\u4e0a\u7684\u5e94\u7528\uff1b\u7528 <code>floor()</code> \u51fd\u6570\uff0c\u6211\u4eec\u5c06\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5355\u5143\u6574\u6570\u5217\u8868\u3002\u770b\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5c24\u5176\u662f22\u884c\u548c23\u884c\u3002</p> <pre><code>// Author @patriciogv - 2015\n// Title: Mosaic\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    st *= 10.0; // Scale the coordinate system by 10\n    vec2 ipos = floor(st);  // get the integer coords\n    vec2 fpos = fract(st);  // get the fractional coords\n\n    // Assign a random value based on the integer coord\n    vec3 color = vec3(random( ipos ));\n\n    // Uncomment to see the subdivided grid\n    // color = vec3(fpos,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u5728\u7f29\u653e\u7a7a\u95f410\u500d\u540e\uff08\u572821\u884c\uff09\uff0c\u6211\u4eec\u5c06\u5750\u6807\u7cfb\u7edf\u7684\u6574\u6570\u548c\u5c0f\u6570\u90e8\u5206\u5206\u79bb\u3002\u6211\u4eec\u5bf9\u6700\u540e\u4e00\u6b65\u64cd\u4f5c\u4e0d\u964c\u751f\uff0c\u56e0\u4e3a\u6211\u4eec\u66fe\u7ecf\u7528\u8fd9\u79cd\u65b9\u6cd5\u6765\u5c06\u7a7a\u95f4\u7ec6\u5206\u6210 <code>0.0</code> \u5230 <code>1.0</code> \u7684\u5c0f\u5355\u5143\u3002\u6211\u4eec\u6839\u636e\u5f97\u5230\u5750\u6807\u7684\u6574\u6570\u90e8\u5206\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u503c\u6765\u9694\u79bb\u4e00\u4e2a\u533a\u57df\u7684\u50cf\u7d20\uff0c\u8ba9\u5b83\u770b\u8d77\u6765\u50cf\u4e2a\u5355\u72ec\u7684\u5355\u5143\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u901a\u7528\u503c\u6765\u4e3a\u8fd9\u4e2a\u533a\u57df\u5f97\u5230\u4e00\u4e2a\u968f\u673a\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u968f\u673a\u51fd\u6570\u662f\u4f2a\u968f\u673a\uff0c\u5728\u90a3\u4e2a\u5355\u5143\u5185\u7684\u6240\u6709\u50cf\u7d20\u8fd4\u56de\u7684\u968f\u673a\u503c\u90fd\u662f\u4e00\u4e2a\u5e38\u91cf\u3002</p> <p>\u53d6\u6d88\u7b2c29\u884c\u4fdd\u7559\u6211\u4eec\u5750\u6807\u7684\u5c0f\u6570\u90e8\u5206\uff0c\u8fd9\u6837\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\uff0c\u6765\u5728\u5355\u5143\u5185\u90e8\u753b\u56fe\u5f62\u3002</p> <p>\u7ed3\u5408\u8fd9\u4e24\u4e2a\u91cf \u2014 \u5750\u6807\u7684\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206 \u2014 \u5c06\u4f7f\u4f60\u53ef\u4ee5\u7ed3\u5408\u53d8\u5316\u548c\u79e9\u5e8f\u3002</p> <p>\u770b\u4e0b\u8fd9\u4e2a\u8457\u540d\u7684 <code>10 PRINT CHR$(205.5+RND(1)); : GOTO 10</code>\u8ff7\u5bab\u751f\u6210\u5668\u7684GLSL\u4ee3\u7801\u5757\u3002</p> <pre><code>// Author @patriciogv - 2015\n// Title: Truchet - 10 print\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265358979323846\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 truchetPattern(in vec2 _st, in float _index){\n    _index = fract(((_index-0.5)*2.0));\n    if (_index &gt; 0.75) {\n        _st = vec2(1.0) - _st;\n    } else if (_index &gt; 0.5) {\n        _st = vec2(1.0-_st.x,_st.y);\n    } else if (_index &gt; 0.25) {\n        _st = 1.0-vec2(1.0-_st.x,_st.y);\n    }\n    return _st;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st *= 10.0;\n    // st = (st-vec2(5.0))*(abs(sin(u_time*0.2))*5.);\n    // st.x += u_time*3.0;\n\n    vec2 ipos = floor(st);  // integer\n    vec2 fpos = fract(st);  // fraction\n\n    vec2 tile = truchetPattern(fpos, random( ipos ));\n\n    float color = 0.0;\n\n    // Maze\n    color = smoothstep(tile.x-0.3,tile.x,tile.y)-\n            smoothstep(tile.x,tile.x+0.3,tile.y);\n\n    // Circles\n    // color = (step(length(tile),0.6) -\n    //          step(length(tile),0.4) ) +\n    //         (step(length(tile-vec2(1.)),0.6) -\n    //          step(length(tile-vec2(1.)),0.4) );\n\n    // Truchet (2 triangles)\n    // color = step(tile.x,tile.y);\n\n    gl_FragColor = vec4(vec3(color),1.0);\n}\n</code></pre> <p>\u8fd9\u91cc\u6211\u7528\u524d\u4e00\u7ae0\u7684 <code>truchetPattern()</code> \u51fd\u6570\u6839\u636e\u5355\u5143\u4ea7\u751f\u7684\u968f\u673a\u503c\u6765\u968f\u673a\u753b\u4e00\u4e2a\u65b9\u5411\u7684\u5bf9\u89d2\u7ebf\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u53d6\u6d8850\u523053\u884c\u7684\u4ee3\u7801\u5757\u7684\u6ce8\u91ca\u5f97\u5230\u5176\u4ed6\u6709\u8da3\u7684\u56fe\u6848\uff0c\u6216\u8005\u901a\u8fc7\u53d6\u6d8835\u548c36\u884c\u6765\u5f97\u5230\u56fe\u6848\u7684\u52a8\u753b\u3002</p>"},{"location":"Frontend/shader/10/README-ch/#_5","title":"\u638c\u63e1\u968f\u673a","text":"<p>Ryoji Ikeda\uff0c\u65e5\u672c\u7535\u5b50\u4f5c\u66f2\u5bb6\u3001\u89c6\u89c9\u827a\u672f\u5bb6\uff0c\u662f\u8fd0\u7528\u968f\u673a\u7684\u5927\u5e08\uff1b\u4ed6\u7684\u4f5c\u54c1\u662f\u5982\u6b64\u7684\u5bcc\u6709\u611f\u67d3\u529b\u800c\u96be\u5fd8\u3002\u4ed6\u5728\u97f3\u4e50\u548c\u89c6\u89c9\u5a92\u4ecb\u4e2d\u968f\u673a\u7684\u8fd0\u7528\uff0c\u4e0d\u518d\u662f\u6df7\u4e71\u65e0\u5e8f\uff0c\u53cd\u800c\u4ee5\u5047\u4e71\u771f\u5730\u6298\u5c04\u51fa\u6211\u4eec\u6280\u672f\u6587\u5316\u7684\u590d\u6742\u6027\u3002</p> <p>\u770b\u770b Ikeda \u7684\u4f5c\u54c1\u5e76\u8bd5\u8bd5\u770b\u4e0b\u9762\u7684\u7ec3\u4e60\uff1a</p> <ul> <li>\u505a\u6309\u884c\u968f\u673a\u79fb\u52a8\u7684\u5355\u5143\uff08\u4ee5\u76f8\u53cd\u65b9\u5411\uff09\u3002\u53ea\u663e\u793a\u4eae\u4e00\u4e9b\u7684\u5355\u5143\u3002\u8ba9\u5404\u884c\u7684\u901f\u5ea6\u968f\u65f6\u95f4\u53d8\u5316\u3002</li> </ul> <p></p> <ul> <li>\u540c\u6837\u5730\uff0c\u8ba9\u67d0\u51e0\u884c\u4ee5\u4e0d\u540c\u7684\u901f\u5ea6\u548c\u65b9\u5411\u3002\u7528\u9f20\u6807\u4f4d\u7f6e\u5173\u8054\u663e\u793a\u5355\u5143\u7684\u9600\u503c\u3002</li> </ul> <p></p> <ul> <li>\u521b\u9020\u5176\u4ed6\u6709\u8da3\u7684\u6548\u679c\u3002</li> </ul> <p></p> <p>\u5b8c\u7f8e\u5730\u638c\u63e1\u968f\u673a\u4e4b\u7f8e\u662f\u56f0\u96be\u7684\uff0c\u5c24\u5176\u662f\u4f60\u60f3\u8981\u8ba9\u4f5c\u54c1\u770b\u8d77\u6765\u5f88\u81ea\u7136\u3002\u968f\u673a\u4ec5\u4ec5\u662f\u8fc7\u4e8e\u6df7\u4e71\u4e86\uff0c\u771f\u5b9e\u751f\u6d3b\u4e2d\u5f88\u5c11\u6709\u4e1c\u897f\u770b\u4e0a\u53bb\u5982\u6b64 <code>random()</code>\u3002\u5982\u679c\u89c2\u5bdf\uff08\u73bb\u7483\u5e8a\u4e0a\uff09\u96e8\u6ef4\u7684\u808c\u7406\u6216\u662f\u80a1\u7968\u7684\u66f2\u7ebf\u2014\u2014\u8fd9\u4e24\u4e2a\u90fd\u633a\u968f\u673a\u7684\u2014\u2014\u4f46\u4ed6\u4eec\u548c\u672c\u7ae0\u5f00\u59cb\u7684\u968f\u673a\u56fe\u6848\u770b\u8d77\u6765\u4e0d\u662f\u540c\u4e00\u5bf9\u7239\u5988\u751f\u7684\u3002\u539f\u56e0\uff1f\u55ef\uff0c\u968f\u673a\u503c\u4e4b\u95f4\u6ca1\u6709\u4ec0\u4e48\u76f8\u5173\u6027\uff0c\u800c\u5927\u591a\u6570\u81ea\u7136\u56fe\u6848\uff08\u808c\u7406\uff09\u90fd\u5bf9\u524d\u4e00\u4e2a\u72b6\u6001\u6709\u6240\u8bb0\u5fc6\uff08\u57fa\u4e8e\u524d\u4e00\u4e2a\u72b6\u6001\uff09\u3002</p> <p>\u4e0b\u4e00\u7ae0\u6211\u4eec\u5c06\u5b66\u4e60\u566a\u58f0\uff0c\u4e00\u79cd\u5149\u6ed1 \u548c \u81ea\u7136\u7684 \u521b\u4f5c\u8ba1\u7b97\u673a\u6df7\u6c8c\u7684\u65b9\u5f0f\u3002</p>"},{"location":"Frontend/shader/10/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>A vida \u00e9 chata, se tudo \u00e9 previs\u00edvel. Embora nada seja realmente aleat\u00f3rio em computadores, podemos criar pseudo-aleatoriedade que pare\u00e7a totalmente imprevis\u00edvel usando truques simples para criar padr\u00f5es e comportamentos mais interessantes.</p>"},{"location":"Frontend/shader/10/SUMMARY/","title":"SUMMARY","text":"<p>Life is boring if everything was predictable. Though nothing is truly random in computers, we can create pseudo-randomness that looks totally unpredictable using simple tricks to create more interesting patterns and behaviors.</p>"},{"location":"Frontend/shader/10/TITLE-pt/","title":"Designs Generativos","text":""},{"location":"Frontend/shader/10/TITLE/","title":"Generative designs","text":""},{"location":"Frontend/shader/10/notes/","title":"Notes","text":""},{"location":"Frontend/shader/10/notes/#nicolas","title":"Nicolas","text":"<ul> <li>L38 It returns a single float value between <code>0.0</code> and <code>1.0</code> depending on the alignment of two vectors.</li> </ul> <p>in fact it is the Cosine of the angle formed by 2 vectors multiplied by the length of each vectors : cos( a ) * length( v0 ) * length( v1 )  if we use normalised vectors, the cos() is multiplied by 1 * 1 and returns a number between -1 and 1.</p> <p>also, if the result is positive, both vectors point in the same direction, if zero, they're perpendicualer, if negative, they point in opposite directions.</p> <ul> <li>L62 famouse typo en</li> </ul>"},{"location":"Frontend/shader/10/tmp/","title":"Generative designs","text":"<p>It is not a surprise that after so much repetition and order the author is forced to bring some chaos.</p>"},{"location":"Frontend/shader/10/tmp/#random","title":"Random","text":"<p>Randomness is a maximal expression of entropy. How can we generate randomness inside the seemingly predictable and rigid code environment?</p> <p>Let's start by analyzing the following function:</p> <p>Above we are extracting the fractional content of a sine wave. The <code>sin()</code> values that fluctuate between <code>-1.0</code> and <code>1.0</code> have been chopped behind the floating point, returning all positive values between <code>0.0</code> and <code>1.0</code>. We can use this effect to get some pseudo-random values by \"breaking\" this sine wave into smaller pieces. How? By multiplying the resultant of <code>sin(x)</code> by larger numbers. Go ahead and click on the function above and start adding some zeros.</p> <p>By the time you get to <code>100000.0</code> ( and the equation looks like this: <code>y = fract(sin(x)*100000.0)</code> ) you aren't able to distinguish the sine wave any more. The granularity of the fractional part has corrupted the flow of the sine wave into pseudo-random chaos.</p>"},{"location":"Frontend/shader/10/tmp/#controlling-chaos","title":"Controlling chaos","text":"<p>Using random can be hard; it is both too chaotic and sometimes not random enough. Take a look at the following graph. To make it, we are using a <code>rand()</code> function which is implemented exactly like we describe above.</p> <p>Taking a closer look, you can see the <code>sin()</code> wave crest at <code>-1.5707</code> and <code>1.5707</code>. I bet you now understand why - it's where the maximum and minimum of the sine wave happens.</p> <p>If look closely at the random distribution, you will note that the there is some concentration around the middle compared to the edges.</p> <p>A while ago Pixelero published an interesting article about random distribution. I've added some of the functions he uses in the previous graph for you to play with and see how the distribution can be changed. Uncomment the functions and see what happens.</p> <p>If you read Pixelero's article, it is important to keep in mind that our <code>rand()</code> function is a deterministic random, also known as pseudo-random. Which means for example <code>rand(1.)</code> is always going to return the same value. Pixelero makes reference to the ActionScript function <code>Math.random()</code> which is non-deterministic; every call will return a different value.</p>"},{"location":"Frontend/shader/10/tmp/#2d-random","title":"2D Random","text":"<p>Now that we have a better understanding of randomness, it's time to apply it in two dimensions, to both the <code>x</code> and <code>y</code> axis. For that we need a way to transform a two dimensional vector into a one dimensional floating point value. There are different ways to do this, but the <code>dot()</code> function is particulary helpful in this case. It returns a single float value between <code>0.0</code> and <code>1.0</code> depending on the alignment of two vectors.</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    float rnd = random( st );\n\n    gl_FragColor = vec4(vec3(rnd),1.0);\n}\n</code></pre> <p></p> <p>Take a look at lines 13 to 15 and notice how we are comparing the <code>vec2 st</code> with another two dimensional vector ( <code>vec2(12.9898,78.233)</code>).</p> <ul> <li> <p>Try changing the values on lines 14 and 15. See how the random pattern changes and think about what we can learn from this.</p> </li> <li> <p>Hook this random function to the mouse interaction (<code>u_mouse</code>) and time (<code>u_time</code>) to understand better how it works.</p> </li> </ul>"},{"location":"Frontend/shader/10/tmp/#using-the-chaos","title":"Using the chaos","text":"<p>Random in two dimensions looks a lot like TV noise, right? It's a hard raw material to use to compose images. Let's learn how to make use of it.</p> <p>Our first step is to apply a grid to it; using the <code>floor()</code> function we will generate an integer table of cells. Take a look at the following code, especially lines 22 and 23.</p> <pre><code>// Author @patriciogv - 2015\n// Title: Mosaic\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    st *= 10.0; // Scale the coordinate system by 10\n    vec2 ipos = floor(st);  // get the integer coords\n    vec2 fpos = fract(st);  // get the fractional coords\n\n    // Assign a random value based on the integer coord\n    vec3 color = vec3(random( ipos ));\n\n    // Uncomment to see the subdivided grid\n    // color = vec3(fpos,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>After scaling the space by 10 (on line 21), we separate the integers of the coordinates from the fractional part. We are familiar with this last operation because we have been using it to subdivide a space into smaller cells that go from <code>0.0</code> to <code>1.0</code>. By obtaining the integer of the coordinate we isolate a common value for a region of pixels, which will look like a single cell. Then we can use that common integer to obtain a random value for that area. Because our random function is deterministic, the random value returned will be constant for all the pixels in that cell.</p> <p>Uncomment line 29 to see that we preserve the floating part of the coordinate, so we can still use that as a coordinate system to draw things inside each cell.</p> <p>Combining these two values - the integer part and the fractional part of the coordinate - will allow you to mix variation and order.</p> <p>Take a look at this GLSL port of the famous <code>10 PRINT CHR$(205.5+RND(1)); : GOTO 10</code> maze generator.</p> <pre><code>// Author @patriciogv - 2015\n// Title: Truchet - 10 print\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265358979323846\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 truchetPattern(in vec2 _st, in float _index){\n    _index = fract(((_index-0.5)*2.0));\n    if (_index &gt; 0.75) {\n        _st = vec2(1.0) - _st;\n    } else if (_index &gt; 0.5) {\n        _st = vec2(1.0-_st.x,_st.y);\n    } else if (_index &gt; 0.25) {\n        _st = 1.0-vec2(1.0-_st.x,_st.y);\n    }\n    return _st;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st *= 10.0;\n    // st = (st-vec2(5.0))*(abs(sin(u_time*0.2))*5.);\n    // st.x += u_time*3.0;\n\n    vec2 ipos = floor(st);  // integer\n    vec2 fpos = fract(st);  // fraction\n\n    vec2 tile = truchetPattern(fpos, random( ipos ));\n\n    float color = 0.0;\n\n    // Maze\n    color = smoothstep(tile.x-0.3,tile.x,tile.y)-\n            smoothstep(tile.x,tile.x+0.3,tile.y);\n\n    // Circles\n    // color = (step(length(tile),0.6) -\n    //          step(length(tile),0.4) ) +\n    //         (step(length(tile-vec2(1.)),0.6) -\n    //          step(length(tile-vec2(1.)),0.4) );\n\n    // Truchet (2 triangles)\n    // color = step(tile.x,tile.y);\n\n    gl_FragColor = vec4(vec3(color),1.0);\n}\n</code></pre> <p></p> <p>Here I'm using the random values of the cells to draw a line in one direction or the other using the <code>truchetPattern()</code> function from the previous chapter (lines 41 to 47).</p> <p>You can get another interesting pattern by uncommenting the block of lines between 50 to 53, or animate the pattern by uncommenting lines 35 and 36.</p>"},{"location":"Frontend/shader/10/tmp/#master-random","title":"Master Random","text":"<p>Ryoji Ikeda, Japanese electronic composer and visual artist, has mastered the use of random; it is hard not to be touched and mesmerized by his work. His use of randomness in audio and visual mediums is forged in such a way that it is not annoying chaos but a mirror of the complexity of our technological culture.</p> <p>Take a look at Ikeda's work and try the following exercises:</p> <ul> <li>Make rows of moving cells (in opposite directions) with random values. Only display the cells with brighter values. Make the velocity of the rows fluctuate over time.</li> </ul> <p></p> <ul> <li>Similarly make several rows but each one with a different speed and direction. Hook the position of the mouse to the threshold of which cells to show.</li> </ul> <p></p> <ul> <li>Create other interesting effects.</li> </ul> <p></p> <p>Using random aesthetically can be problematic, especially if you want to make natural-looking simulations. Random is simply too chaotic and very few things look <code>random()</code> in real life. If you look at a rain pattern or a stock chart, which are both quite random, they are nothing like the random pattern we made at the begining of this chapter. The reason? Well, random values have no correlation between them what so ever, but most natural patterns have some memory of the previous state.</p> <p>In the next chapter we will learn about noise, the smooth and natural looking way of creating computational chaos.</p>"},{"location":"Frontend/shader/10/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/11/","title":"Index","text":""},{"location":"Frontend/shader/11/#noise","title":"Noise","text":"<p>It's time for a break! We've been playing with random functions that look like TV white noise, our head is still spinning thinking about shaders, and our eyes are tired. Time to go out for a walk!</p> <p>We feel the air on our skin, the sun in our face. The world is such a vivid and rich place. Colors, textures, sounds. While we walk we can't avoid noticing the surface of the roads, rocks, trees and clouds.</p> <p> </p> <p>The unpredictability of these textures could be called \"random,\" but they don't look like the random we were playing with before. The \u201creal world\u201d is such a rich and complex place! How can we approximate this variety computationally?</p> <p>This was the question Ken Perlin was trying to solve in the early 1980s when he was commissioned to generate more realistic textures for the movie \"Tron.\" In response to that, he came up with an elegant Oscar winning noise algorithm. (No biggie.)</p> <p></p> <p>The following is not the classic Perlin noise algorithm, but it is a good starting point to understand how to generate noise.</p> <p>In these lines we are doing something similar to what we did in the previous chapter. We are subdividing a continuous floating number (<code>x</code>) into its integer (<code>i</code>) and fractional (<code>f</code>) components. We use <code>floor()</code> to obtain <code>i</code> and <code>fract()</code> to obtain <code>f</code>. Then we apply <code>rand()</code> to the integer part of <code>x</code>, which gives a unique random value for each integer.</p> <p>After that you see two commented lines. The first one interpolates each random value linearly.</p> <pre><code>y = mix(rand(i), rand(i + 1.0), f);\n</code></pre> <p>Go ahead and uncomment this line to see how this looks. We use the <code>fract()</code> value store in <code>f</code> to <code>mix()</code> the two random values.</p> <p>At this point in the book, we've learned that we can do better than a linear interpolation, right? Now try uncommenting the following line, which uses a <code>smoothstep()</code> interpolation instead of a linear one.</p> <pre><code>y = mix(rand(i), rand(i + 1.0), smoothstep(0.,1.,f));\n</code></pre> <p>After uncommenting it, notice how the transition between the peaks gets smooth. In some noise implementations you will find that programmers prefer to code their own cubic curves (like the following formula) instead of using the <code>smoothstep()</code>.</p> <pre><code>float u = f * f * (3.0 - 2.0 * f ); // custom cubic curve\ny = mix(rand(i), rand(i + 1.0), u); // using it in the interpolation\n</code></pre> <p>This smooth randomness is a game changer for graphical engineers or artists - it provides the ability to generate images and geometries with an organic feeling. Perlin's Noise Algorithm has been implemented over and over in different languages and dimensions to make mesmerizing pieces for all sorts of creative uses.</p> <p></p> <p>Now it's your turn:</p> <ul> <li> <p>Make your own <code>float noise(float x)</code> function.</p> </li> <li> <p>Use your noise function to animate a shape by moving it, rotating it or scaling it.</p> </li> <li> <p>Make an animated composition of several shapes 'dancing' together using noise.</p> </li> <li> <p>Construct \"organic-looking\" shapes using the noise function.</p> </li> <li> <p>Once you have your \"creature,\" try to develop it further into a character by assigning it a particular movement.</p> </li> </ul>"},{"location":"Frontend/shader/11/#2d-noise","title":"2D Noise","text":"<p>Now that we know how to do noise in 1D, it's time to move on to 2D. In 2D, instead of interpolating between two points of a line (<code>rand(x)</code> and <code>rand(x)+1.0</code>), we are going to interpolate between the four corners of the square area of a plane (<code>rand(st)</code>, <code>rand(st)+vec2(1.,0.)</code>, <code>rand(st)+vec2(0.,1.)</code> and <code>rand(st)+vec2(1.,1.)</code>).</p> <p></p> <p>Similarly, if we want to obtain 3D noise we need to interpolate between the eight corners of a cube. This technique is all about interpolating random values, which is why it's called value noise.</p> <p></p> <p>Like the 1D example, this interpolation is not linear but cubic, which smoothly interpolates any points inside our square grid.</p> <p></p> <p>Take a look at the following noise function.</p> <p>We start by scaling the space by 5 (line 45) in order to see the interpolation between the squares of the grid. Then inside the noise function we subdivide the space into cells. We store the integer position of the cell along with the fractional positions inside the cell. We use the integer position to calculate the four corners' coordinates and obtain a random value for each one (lines 23-26). Finally, in line 35 we interpolate between the 4 random values of the corners using the fractional positions we stored before.</p> <p>Now it's your turn. Try the following exercises:</p> <ul> <li> <p>Change the multiplier of line 45. Try to animate it.</p> </li> <li> <p>At what level of zoom does the noise start looking like random again?</p> </li> <li> <p>At what zoom level is the noise is imperceptible?</p> </li> <li> <p>Try to hook up this noise function to the mouse coordinates.</p> </li> <li> <p>What if we treat the gradient of the noise as a distance field? Make something interesting with it.</p> </li> <li> <p>Now that you've achieved some control over order and chaos, it's time to use that knowledge. Make a composition of rectangles, colors and noise that resembles some of the complexity of a Mark Rothko painting.</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/11/#using-noise-in-generative-designs","title":"Using Noise in Generative Designs","text":"<p>Noise algorithms were originally designed to give a natural je ne sais quoi to digital textures. The 1D and 2D implementations we've seen so far were interpolations between random values, which is why they're called Value Noise, but there are more ways to obtain noise...</p> <p> </p> <p>As you discovered in the previous exercises, value noise tends to look \"blocky.\" To diminish this blocky effect, in 1985 Ken Perlin developed another implementation of the algorithm called Gradient Noise. Ken figured out how to interpolate random gradients instead of values. These gradients were the result of a 2D random function that returns directions (represented by a <code>vec2</code>) instead of single values (<code>float</code>). Click on the following image to see the code and how it works.</p> <p> </p> <p>Take a minute to look at these two examples by Inigo Quilez and pay attention to the differences between value noise and gradient noise.</p> <p>Like a painter who understands how the pigments of their paints work, the more we know about noise implementations the better we will be able to use them. For example, if we use a two dimensional noise implementation to rotate the space where straight lines are rendered, we can produce the following swirly effect that looks like wood. Again you can click on the image to see what the code looks like.</p> <p> </p> <pre><code>    pos = rotate2d( noise(pos) ) * pos; // rotate the space\n    pattern = lines(pos,.5); // draw lines\n</code></pre> <p>Another way to get interesting patterns from noise is to treat it like a distance field and apply some of the tricks described in the Shapes chapter.</p> <p> </p> <pre><code>    color += smoothstep(.15,.2,noise(st*10.)); // Black splatter\n    color -= smoothstep(.35,.4,noise(st*10.)); // Holes on splatter\n</code></pre> <p>A third way of using the noise function is to modulate a shape. This also requires some of the techniques we learned in the chapter about shapes.</p> <p></p> <p>For you to practice:</p> <ul> <li>What other generative pattern can you make? What about granite? marble? magma? water? Find three pictures of textures you are interested in and implement them algorithmically using noise.</li> <li>Use noise to modulate a shape.</li> <li>What about using noise for motion? Go back to the Matrix chapter. Use the translation example that moves the \"+\" around, and apply some random and noise movements to it.</li> <li>Make a generative Jackson Pollock.</li> </ul> <p></p>"},{"location":"Frontend/shader/11/#improved-noise","title":"Improved Noise","text":"<p>An improvement by Perlin to his original non-simplex noise Simplex Noise, is the replacement of the cubic Hermite curve ( f(x) = 3x^2-2x^3 , which is identical to the <code>smoothstep()</code> function) with a quintic interpolation curve ( f(x) = 6x^5-15x^4+10x^3 ). This makes both ends of the curve more \"flat\" so each border gracefully stitches with the next one. In other words, you get a more continuous transition between the cells. You can see this by uncommenting the second formula in the following graph example (or see the two equations side by side here).</p> <p>Note how the ends of the curve change. You can read more about this in Ken's own words.</p>"},{"location":"Frontend/shader/11/#simplex-noise","title":"Simplex Noise","text":"<p>For Ken Perlin the success of his algorithm wasn't enough. He thought it could perform better. At Siggraph 2001 he presented the \"simplex noise\" in which he achieved the following improvements over the previous algorithm:</p> <ul> <li>An algorithm with lower computational complexity and fewer multiplications.</li> <li>A noise that scales to higher dimensions with less computational cost.</li> <li>A noise without directional artifacts.</li> <li>A noise with well-defined and continuous gradients that can be computed quite cheaply.</li> <li>An algorithm that is easy to implement in hardware.</li> </ul> <p>I know what you are thinking... \"Who is this man?\" Yes, his work is fantastic! But seriously, how did he improve the algorithm? Well, we saw how for two dimensions he was interpolating 4 points (corners of a square); so we can correctly guess that for three (see an implementation here) and four dimensions we need to interpolate 8 and 16 points. Right? In other words for N dimensions you need to smoothly interpolate 2 to the N points (2^N). But Ken smartly noticed that although the obvious choice for a space-filling shape is a square, the simplest shape in 2D is the equilateral triangle. So he started by replacing the squared grid (we just learned how to use) for a simplex grid of equilateral triangles.</p> <p></p> <p>The simplex shape for N dimensions is a shape with N + 1 corners. In other words one fewer corner to compute in 2D, 4 fewer corners in 3D and 11 fewer corners in 4D! That's a huge improvement!</p> <p>In two dimensions the interpolation happens similarly to regular noise, by interpolating the values of the corners of a section. But in this case, by using a simplex grid, we only need to interpolate the sum of 3 corners.</p> <p></p> <p>How is the simplex grid made? In another brilliant and elegant move, the simplex grid can be obtained by subdividing the cells of a regular 4 cornered grid into two isosceles triangles and then skewing it until each triangle is equilateral.</p> <p></p> <p>Then, as Stefan Gustavson describes in this paper: \"...by looking at the integer parts of the transformed coordinates (x,y) for the point we want to evaluate, we can quickly determine which cell of two simplices that contains the point. By also comparing the magnitudes of x and y, we can determine whether the point is in the upper or the lower simplex, and traverse the correct three corner points.\"</p> <p>In the following code you can uncomment line 44 to see how the grid is skewed, and then uncomment line 47 to see how a simplex grid can be constructed. Note how on line 22 we are subdividing the skewed square into two equilateral triangles just by detecting if <code>x &gt; y</code> (\"lower\" triangle) or <code>y &gt; x</code> (\"upper\" triangle).</p> <p>All these improvements result in an algorithmic masterpiece known as Simplex Noise. The following is a GLSL implementation of this algorithm made by Ian McEwan and Stefan Gustavson (and presented in this paper) which is overcomplicated for educational purposes, but you will be happy to click on it and see that it is less cryptic than you might expect, and the code is short and fast.</p> <p> </p> <p>Well... enough technicalities, it's time for you to use this resource in your own expressive way:</p> <ul> <li> <p>Contemplate how each noise implementation looks. Imagine them as a raw material, like a marble rock for a sculptor. What can you say about the \"feeling\" that each one has? Squinch your eyes to trigger your imagination, like when you want to find shapes in a cloud. What do you see? What are you reminded of? What do you imagine each noise implementation could be made into? Following your guts and try to make it happen in code.</p> </li> <li> <p>Make a shader that projects the illusion of flow. Like a lava lamp, ink drops, water, etc.</p> </li> </ul> <p></p> <ul> <li>Use Simplex Noise to add some texture to a work you've already made.</li> </ul> <p></p> <p>In this chapter we have introduced some control over the chaos. It was not an easy job! Becoming a noise-bender-master takes time and effort.</p> <p>In the following chapters we will see some well known techniques to perfect your skills and get more out of your noise to design quality generative content with shaders. Until then enjoy some time outside contemplating nature and its intricate patterns. Your ability to observe needs equal (or probably more) dedication than your making skills. Go outside and enjoy the rest of the day!</p> <p>\"Talk to the tree, make friends with it.\" Bob Ross </p>"},{"location":"Frontend/shader/11/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/11/README-ch/","title":"11","text":""},{"location":"Frontend/shader/11/README-ch/#noise","title":"Noise \u566a\u58f0","text":"<p>\u7a0d\u4e8b\u4f11\u606f\uff0c\u6211\u4eec\u6765\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\u3002\u6211\u4eec\u5df2\u7ecf\u73a9\u8fc7\u4e86\u770b\u8d77\u6765\u50cf\u7535\u89c6\u767d\u566a\u97f3\u7684 random \u51fd\u6570\uff0c\u5c3d\u7ba1\u8111\u5b50\u91cc\u8fd8\u5728\u55e1\u55e1\u5730\u8f6c\u7740 shader\uff0c\u4f46\u662f\u5df2\u7ecf\u773c\u82b1\u7f2d\u4e71\u4e86\u3002\u662f\u65f6\u5019\u51fa\u53bb\u8d70\u8d70\u4e86\u3002</p> <p>\u6211\u4eec\u611f\u77e5\u5f97\u5230\u6d6e\u52a8\u5728\u76ae\u80a4\u4e0a\u7684\u7a7a\u6c14\uff0c\u6652\u5728\u8138\u4e0a\u7684\u9633\u5149\u3002\u4e16\u754c\u5982\u6b64\u751f\u52a8\u800c\u4e30\u5bcc\u3002\u989c\u8272\uff0c\u8d28\u5730\uff0c\u58f0\u97f3\u3002\u5f53\u6211\u4eec\u8d70\u5728\u8def\u4e0a\uff0c\u4e0d\u514d\u4f1a\u6ce8\u610f\u5230\u8def\u9762\u3001\u77f3\u5934\u3001\u6811\u6728\u548c\u4e91\u6735\u7684\u8868\u9762\u7684\u6837\u5b50\u3002</p> <p> </p> <p>\u8fd9\u4e9b\u7eb9\u7406\u7684\u4e0d\u53ef\u9884\u6d4b\u6027\u53ef\u4ee5\u53eb\u505a\u201crandom\"(\u968f\u673a\uff09\uff0c\u4f46\u662f\u5b83\u4eec\u770b\u8d77\u6765\u4e0d\u50cf\u662f\u6211\u4eec\u4e4b\u524d\u73a9\u7684 random\u3002\u300c\u771f\u5b9e\u4e16\u754c\u300d\u662f\u5982\u6b64\u7684\u4e30\u5bcc\u800c\u590d\u6742\uff01\u6211\u4eec\u5982\u4f55\u624d\u80fd\u624d\u80fd\u7528\u8ba1\u7b97\u673a\u6a21\u62df\u8fd9\u4e9b\u591a\u6837\u7684\u7eb9\u7406\u5462\uff1f</p> <p>\u8fd9\u5c31\u662f Ken Perlin \u60f3\u8981\u89e3\u7b54\u7684\u95ee\u9898\u3002\u572820\u4e16\u7eaa80\u5e74\u4ee3\u65e9\u671f\uff0c\u4ed6\u88ab\u59d4\u4efb\u4e3a\u7535\u5f71 \u201cTron\u201d\uff08\u7535\u5b50\u4e16\u754c\u4e89\u9738\u6218\uff09\u5236\u4f5c\u73b0\u5b9e\u4e2d\u7684\u7eb9\u7406\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ed6\u60f3\u51fa\u4e86\u4e00\u4e2a\u4f18\u96c5\u7684\u7b97\u6cd5\uff0c\u4e14\u83b7\u5f97\u4e86\u5965\u65af\u5361\u5956\uff08\u540d\u526f\u5176\u5b9e\uff09\u3002</p> <p></p> <p>\u4e0b\u9762\u8fd9\u4e2a\u5e76\u4e0d\u662f\u7ecf\u5178\u7684 Perlin noise \u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u7406\u89e3\u5982\u4f55\u751f\u6210 noise \u7684\u597d\u7684\u51fa\u53d1\u70b9\u3002</p> <p>\u8fd9\u548c\u4e4b\u524d\u7ae0\u8282\u6211\u4eec\u505a\u7684\u4e8b\u60c5\u5f88\u50cf\u3002\u6211\u4eec\u628a\u5355\u7cbe\u5ea6\u6d6e\u70b9 <code>x</code> \u5206\u5272\u6210\u5b83\u7684\u6574\u6570\u90e8\u5206 <code>i</code> \u548c\u5c0f\u6570\u90e8\u5206 <code>f</code> \u3002\u6211\u4eec\u7528 <code>floor()</code> \u83b7\u53d6 <code>i</code>\uff0c\u7528 <code>fract()</code> \u83b7\u53d6 <code>f</code>\u3002\u7136\u540e\u6211\u4eec <code>rand()</code> x \u7684\u6574\u6570\u90e8\u5206\uff0c\u5373\u6839\u636e\u8fd9\u4e2a\u6574\u6570\u751f\u6210\u4e00\u4e2a\u968f\u673a\u503c\u3002</p> <p>\u5728\u8fd9\u4e4b\u540e\u6709\u4e24\u4e2a\u88ab\u6ce8\u91ca\u6389\u7684\u8bed\u53e5\u3002\u7b2c\u4e00\u53e5\u7684\u4f5c\u7528\u662f\u7ebf\u6027\u63d2\u503c\u3002</p> <pre><code>y = mix(rand(i), rand(i + 1.0), f);\n</code></pre> <p>\u8bd5\u8bd5\u53d6\u6d88\u8fd9\u53e5\u7684\u6ce8\u91ca\uff0c\u770b\u4e00\u4e0b\u4f1a\u53d8\u6210\u4ec0\u4e48\u6837\u5b50\u3002\u6ce8\u610f\u6211\u4eec\u50a8\u5b58\u5728 <code>f</code> \u4e2d\u7684 <code>fract()</code> \u503c<code>mix()</code>\u4e86\u4e24\u4e2a\u968f\u673a\u503c\u3002</p> <p>\u5230\u672c\u4e66\u7684\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u53ef\u4ee5\u6bd4\u6bd4\u7ebf\u6027\u63d2\u503c\u505a\u5f97\u66f4\u597d\uff0c\u4e0d\u662f\u5417\uff1f\u73b0\u5728\u8bd5\u8bd5\u53d6\u6d88\u7b2c\u4e8c\u53e5\u7684\u6ce8\u91ca\u3002\u7b2c\u4e8c\u53e5\u7528 <code>smoothstep()</code>\u8fdb\u884c\u63d2\u503c\u3002</p> <pre><code>y = mix(rand(i), rand(i + 1.0), smoothstep(0.,1.,f));\n</code></pre> <p>\u5728\u53d6\u6d88\u6ce8\u91ca\u540e\uff0c\u6ce8\u610f\u9876\u70b9\u7684\u53d8\u5316\u5982\u4f55\u53d8\u5f97\u987a\u6ed1\u4e86\u8d77\u6765\u3002\u5728\u4e00\u4e9b noise \u7684\u5e94\u7528\u4e2d\u4f60\u4f1a\u53d1\u73b0\u7a0b\u5e8f\u5458\u559c\u6b22\u7528\u4ed6\u4eec\u81ea\u5df1\u7684\u4e09\u6b21\u591a\u9879\u5f0f\u51fd\u6570\uff08\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff09\uff0c\u800c\u4e0d\u662f\u7528 <code>smoothstep()</code>\u3002</p> <pre><code>float u = f * f * (3.0 - 2.0 * f ); // custom cubic curve\ny = mix(rand(i), rand(i + 1.0), u); // using it in the interpolation\n</code></pre> <p>\u8fd9\u79cd smooth randomness\uff08\u5e73\u6ed1\u540e\u7684\u968f\u673a\u503c\uff09\u662f\u4e00\u4e2a\u56fe\u5f62\u5de5\u7a0b\u5e08\u6216\u8005\u8bf4\u827a\u672f\u5bb6\u7684\u5236\u80dc\u6cd5\u5b9d\u2014\u2014\u5b83\u80fd\u751f\u6210\u975e\u5e38\u6709\u673a\u7684\u56fe\u50cf\u6216\u51e0\u4f55\u5f62\u6001\u3002Perlin \u7684 noise \u7b97\u6cd5\u88ab\u65e0\u6570\u6b21\u7528\u5230\u5404\u79cd\u8bed\u8a00\u548c\u5404\u79cd\u7ef4\u5ea6\u7684\u8bbe\u8ba1\u4e2d\uff0c\u5236\u4f5c\u51fa\u65e0\u6570\u8ff7\u4eba\u7684\u4f5c\u54c1\u3002</p> <p></p> <p>\u73b0\u5728\u8f6e\u5230\u4f60\u4e86\uff1a</p> <ul> <li> <p>\u5199\u4f60\u81ea\u5df1\u7684 <code>float noise(float x)</code> \u51fd\u6570\u3002</p> </li> <li> <p>\u7528\u4f60\u7684 noise \u51fd\u6570\u4e3a\u56fe\u5f62\u5236\u4f5c\u52a8\u6548\uff0c\u53ef\u4ee5\u79fb\u52a8\uff0c\u65cb\u8f6c\u6216\u6539\u53d8\u5927\u5c0f\u3002</p> </li> <li> <p>\u7528 noise \u8ba9\u4e00\u7fa4\u56fe\u5f62\u4e00\u8d77\u201c\u8df3\u821e\u201d\u3002</p> </li> <li> <p>\u7528 noise \u5236\u505a\u6709\u673a\u7684\u5f62\u6001\u3002</p> </li> <li> <p>\u521b\u4f5c\u4e00\u4e2a\u201c\u751f\u7269\u201d\uff0c\u7ed9\u5b83\u6dfb\u52a0\u66f4\u591a\u72ec\u7279\u7684\u52a8\u4f5c\uff0c\u4f7f\u5176\u6210\u4e3a\u72ec\u7279\u7684\u89d2\u8272\u3002</p> </li> </ul>"},{"location":"Frontend/shader/11/README-ch/#2d-noise","title":"2D Noise","text":"<p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u5982\u4f55\u5728\u4e00\u7ef4\u4f7f\u7528 noise\uff0c\u662f\u65f6\u5019\u8fdb\u5165\u4e8c\u7ef4\u4e16\u754c\u4e86\u3002\u5728 2D \u4e2d\uff0c\u9664\u4e86\u5728\u4e00\u6761\u7ebf\u7684\u4e24\u70b9\uff08<code>fract(x)</code> \u548c <code>fract(x)+1.0</code>\uff09\u4e2d\u63d2\u503c\uff0c\u6211\u4eec\u5c06\u5728\u4e00\u4e2a\u5e73\u9762\u4e0a\u7684\u65b9\u5f62\u7684\u56db\u89d2\uff08<code>fract(st)</code>\uff0c <code>fract(st)+vec2(1.,0.)</code>\uff0c <code>fract(st)+vec2(0.,1.)</code> \u548c <code>fract(st)+vec2(1.,1.)</code>\uff09\u4e2d\u63d2\u503c\u3002</p> <p></p> <p>\u540c\u6837\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u4e09\u7ef4\u4e2d\u4f7f\u7528 noise\uff0c\u5c31\u9700\u8981\u5728\u4e00\u4e2a\u7acb\u65b9\u4f53\u76848\u4e2a\u89d2\u4e2d\u63d2\u503c\u3002\u8fd9\u4e2a\u6280\u672f\u7684\u91cd\u70b9\u5728\u4e8e\u63d2\u5165\u968f\u673a\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53eb\u5b83 value noise\u3002</p> <p></p> <p>\u5c31\u50cf\u4e00\u7ef4\u7684\u90a3\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u63d2\u503c\u4e0d\u662f\u7ebf\u6027\u7684\uff0c\u800c\u662f\u4e09\u6b21\u65b9\u7684\uff0c\u5b83\u4f1a\u5e73\u6ed1\u5730\u5728\u65b9\u5f62\u7f51\u683c\u4e2d\u63d2\u5165\u70b9\u3002</p> <p></p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u7a0b\u3002</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos = vec2(st*5.0);\n\n    // Use the noise function\n    float n = noise(pos);\n\n    gl_FragColor = vec4(vec3(n), 1.0);\n}\n</code></pre> <p>\u6211\u4eec\u5148\u628a\u7a7a\u95f4\u5927\u5c0f\u53d8\u6210\u4e94\u500d\uff08\u7b2c 45 \u884c\uff09\u4ee5\u4fbf\u770b\u6e05\u6805\u683c\u95f4\u7684\u63d2\u503c\u3002\u7136\u540e\u5728 noise \u51fd\u6570\u4e2d\u6211\u4eec\u628a\u7a7a\u95f4\u5206\u6210\u66f4\u5c0f\u7684\u5355\u5143\u3002\u6211\u4eec\u628a\u5b83\u7684\u6574\u6570\u90e8\u5206\u548c\u975e\u6574\u6570\u90e8\u5206\u90fd\u50a8\u5b58\u5728\u8fd9\u4e2a\u5355\u5143\u91cc\u3002\u6211\u4eec\u8ba1\u7b97\u6574\u6570\u4f4d\u7f6e\u7684\u9876\u70b9\u7684\u5750\u6807\uff0c\u5e76\u7ed9\u6bcf\u4e2a\u9876\u70b9\u751f\u6210\u4e00\u4e2a\u968f\u673a\u503c\uff08\u7b2c 23 - 26 \u884c\uff09\u3002\u6700\u540e\uff0c\u5728\u7b2c 35 \u884c\u7528\u6211\u4eec\u4e4b\u524d\u50a8\u5b58\u7684\u5c0f\u6570\u4f4d\u7f6e\u7684\u503c\uff0c\u5728\u56db\u4e2a\u9876\u70b9\u7684\u968f\u673a\u503c\u4e4b\u95f4\u63d2\u503c\u3002</p> <p>\u73b0\u5728\u53c8\u5230\u4f60\u4e86\u3002\u8bd5\u8bd5\u4e0b\u9762\u7684\u7ec3\u4e60\uff1a</p> <ul> <li> <p>\u6539\u53d8\u7b2c 45 \u884c\u7684\u4e58\u6570\u3002\u6dfb\u52a0\u52a8\u6001\u8bd5\u8bd5\u3002</p> </li> <li> <p>\u7f29\u653e\u5230\u4ec0\u4e48\u7a0b\u5ea6\u4f1a\u8ba9 noise \u518d\u5ea6\u53d8\u5f97\u50cf random\uff1f</p> </li> <li> <p>\u7f29\u653e\u5230\u4ec0\u4e48\u7a0b\u5ea6\u5c31\u770b\u4e0d\u51fa\u6765 noise \u4e86\uff1f</p> </li> <li> <p>\u8bd5\u8bd5\u770b\u628a noise \u51fd\u6570\u548c\u9f20\u6807\u4f4d\u7f6e\u8fde\u8d77\u6765\u3002</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u628a noise \u7684\u659c\u7387\u5904\u7406\u6210\u8ddd\u79bb\u573a\uff08distance field\uff09\u4f1a\u600e\u4e48\u6837\uff1f\u7528\u5b83\u6765\u505a\u70b9\u6709\u8da3\u7684\u4e8b\u60c5\u3002</p> </li> <li> <p>\u73b0\u5728\u4f60\u5df2\u7ecf\u53ef\u4ee5\u5728\u6df7\u6c8c\u548c\u6709\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4e00\u4e9b\u64cd\u63a7\u4e86\uff0c\u662f\u65f6\u5019\u628a\u8fd9\u4e9b\u77e5\u8bc6\u7528\u8d77\u6765\u4e86\u3002\u7528\u957f\u65b9\u5f62\uff0c\u8272\u5f69\uff0c\u548c noise \u505a\u4e00\u5e45 Mark Rothko \u7684\u590d\u6742\u7684\u753b\u4f5c\u5427\u3002</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/11/README-ch/#noise_1","title":"\u751f\u6210\u5f0f\u8bbe\u8ba1\u4e2d\u7684 noise \u5e94\u7528","text":"<p>Noise \u7b97\u6cd5\u7684\u8bbe\u8ba1\u521d\u8877\u662f\u5c06\u96be\u4ee5\u8a00\u8bf4\u7684\u81ea\u7136\u8d28\u611f\u8f6c\u5316\u6210\u6570\u5b57\u56fe\u50cf\u3002\u5728\u76ee\u524d\u6211\u4eec\u770b\u5230\u7684\u4e00\u7ef4\u548c\u4e8c\u7ef4\u7684\u5b9e\u8df5\u4e2d\uff0c\u90fd\u662f\u5728random values\uff08\u968f\u673a\u503c\uff09\u4e4b\u95f4\u63d2\u503c\uff0c\u6240\u4ee5\u5b83\u4eec\u624d\u88ab\u53eb\u505a Value Noise\uff0c\u4f46\u662f\u8fd8\u6709\u5f88\u591a\u5f88\u591a\u83b7\u53d6 noise \u7684\u65b9\u6cd5\u2026\u2026</p> <p> </p> <p>\u5982\u4f60\u6240\u89c1\uff0cvalue noise \u770b\u8d77\u6765\u975e\u5e38\u201c\u5757\u72b6\u201d\u3002\u4e3a\u4e86\u6d88\u9664\u8fd9\u79cd\u5757\u72b6\u7684\u6548\u679c\uff0c\u5728 1985 \u5e74 Ken Perlin \u5f00\u53d1\u4e86\u53e6\u4e00\u79cd noise \u7b97\u6cd5 Gradient Noise\u3002Ken \u89e3\u51b3\u4e86\u5982\u4f55\u63d2\u5165\u968f\u673a\u7684 gradients\uff08\u68af\u5ea6\u3001\u6e10\u53d8\uff09\u800c\u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u503c\u3002\u8fd9\u4e9b\u68af\u5ea6\u503c\u6765\u81ea\u4e8e\u4e00\u4e2a\u4e8c\u7ef4\u7684\u968f\u673a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b9\u5411\uff08<code>vec2</code> \u683c\u5f0f\u7684\u5411\u91cf\uff09\uff0c\u800c\u4e0d\u4ec5\u662f\u4e00\u4e2a\u503c\uff08<code>float</code>\u683c\u5f0f\uff09\u3002\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u7247\u67e5\u770b\u4ee3\u7801\uff0c\u770b\u8fd9\u4e2a\u51fd\u6570\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\u3002</p> <p> </p> <p>\u82b1\u4e00\u5206\u949f\u6765\u770b\u770b Inigo Quilez \u505a\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u6ce8\u610f value noise \u548c gradient noise\u7684\u533a\u522b\u3002</p> <p>\u5c31\u50cf\u4e00\u4e2a\u753b\u5bb6\u975e\u5e38\u4e86\u89e3\u753b\u4e0a\u7684\u989c\u6599\u662f\u5982\u4f55\u6655\u67d3\u7684\uff0c\u6211\u4eec\u8d8a\u4e86\u89e3 noise \u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff0c\u8d8a\u80fd\u66f4\u597d\u5730\u4f7f\u7528 noise\u3002\u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u8981\u7528\u4e00\u4e2a\u4e8c\u7ef4\u7684 noise \u6765\u65cb\u8f6c\u7a7a\u95f4\u4e2d\u7684\u76f4\u7ebf\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5236\u4f5c\u4e0b\u56fe\u7684\u65cb\u6da1\u72b6\u6548\u679c\uff0c\u770b\u8d77\u6765\u5c31\u50cf\u6728\u5934\u8868\u76ae\u4e00\u6837\u3002\u540c\u6837\u5730\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u56fe\u7247\u67e5\u770b\u4ee3\u7801\u3002</p> <p> </p> <pre><code>    pos = rotate2d( noise(pos) ) * pos; // \u65cb\u8f6c\u7a7a\u95f4\n    pattern = lines(pos,.5); // \u753b\u76f4\u7ebf\n</code></pre> <p>\u53e6\u4e00\u79cd\u7528 noise \u5236\u4f5c\u6709\u8da3\u7684\u56fe\u6848\u7684\u65b9\u5f0f\u662f\u7528 distance field\uff08\u8ddd\u79bb\u573a\uff09\u5904\u7406\u5b83\uff0c\u7528\u7528 \u7b2c\u4e03\u7ae0\u63d0\u5230\u7684\u62db\u6570\u3002</p> <p> </p> <pre><code>    color += smoothstep(.15,.2,noise(st*10.)); // \u9ed1\u8272\u7684\u6cfc\u6e85\u70b9\n    color -= smoothstep(.35,.4,noise(st*10.)); // \u6cfc\u6e85\u70b9\u4e0a\u7684\u6d1e\n</code></pre> <p>\u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u7528 noise \u51fd\u6570\u6765\u53d8\u6362\u4e00\u4e2a\u5f62\u72b6\u3002\u8fd9\u4e2a\u4e5f\u9700\u8981\u6211\u4eec\u5728\u7b2c\u4e03\u7ae0\u5b66\u5230\u7684\u6280\u672f\u3002</p> <p></p> <p>\u7ed9\u4f60\u7684\u7ec3\u4e60\uff1a</p> <ul> <li> <p>\u4f60\u8fd8\u80fd\u505a\u51fa\u4ec0\u4e48\u5176\u4ed6\u56fe\u6848\u5462\uff1f\u82b1\u5c97\u5ca9\uff1f\u5927\u7406\u77f3\uff1f\u5ca9\u6d46\uff1f\u6c34\uff1f\u627e\u4e09\u79cd\u4f60\u611f\u5174\u8da3\u7684\u6750\u8d28\uff0c\u7528 noise \u52a0\u4e00\u4e9b\u7b97\u6cd5\u628a\u5b83\u4eec\u505a\u51fa\u6765\u3002</p> </li> <li> <p>\u7528 noise \u7ed9\u4e00\u4e2a\u5f62\u72b6\u53d8\u5f62\u3002</p> </li> <li> <p>\u628a noise \u52a0\u5230\u52a8\u4f5c\u4e2d\u4f1a\u5982\u4f55\uff1f\u56de\u987e\u7b2c\u516b\u7ae0\u3002\u7528\u79fb\u52a8 \u201c+\u201d \u56db\u5904\u8dd1\u7684\u90a3\u4e2a\u4f8b\u5b50\uff0c\u52a0\u4e00\u4e9b random \u548c noise \u8fdb\u53bb\u3002</p> </li> <li> <p>\u7528\u4ee3\u7801\u751f\u6210\u6ce2\u6d1b\u514b\uff08Jackson Pollock\uff09\u7684\u753b\u3002</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/11/README-ch/#simplex-noise","title":"Simplex Noise","text":"<p>\u5bf9\u4e8e Ken Perlin \u6765\u8bf4\u4ed6\u7684\u7b97\u6cd5\u6240\u53d6\u5f97\u7684\u6210\u529f\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\u3002\u4ed6\u89c9\u5f97\u53ef\u4ee5\u66f4\u597d\u3002\u5728 2001 \u5e74\u7684 Siggraph\uff08\u8bd1\u8005\u6ce8\uff1aSiggraph\u662f\u7531\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a\u300c\u8ba1\u7b97\u673a\u56fe\u5f62\u4e13\u4e1a\u7ec4\u300d\u7ec4\u7ec7\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u9876\u7ea7\u5e74\u5ea6\u4f1a\u8bae\uff09\u4e0a\uff0c\u4ed6\u5c55\u793a\u4e86 \u201csimplex noise\u201d\uff0csimplex noise \u6bd4\u4e4b\u524d\u7684\u7b97\u6cd5\u6709\u5982\u4e0b\u4f18\u5316\uff1a</p> <ul> <li>\u5b83\u6709\u7740\u66f4\u4f4e\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u548c\u66f4\u5c11\u4e58\u6cd5\u8ba1\u7b97\u3002</li> <li>\u5b83\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u8ba1\u7b97\u91cf\u8fbe\u5230\u66f4\u9ad8\u7684\u7ef4\u5ea6\u3002</li> <li>\u5236\u9020\u51fa\u7684 noise \u6ca1\u6709\u660e\u663e\u7684\u4eba\u5de5\u75d5\u8ff9\u3002</li> <li>\u6709\u7740\u5b9a\u4e49\u5f97\u5f88\u7cbe\u5de7\u7684\u8fde\u7eed\u7684 gradients\uff08\u68af\u5ea6\uff09\uff0c\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u8ba1\u7b97\u6210\u672c\u3002</li> <li>\u7279\u522b\u6613\u4e8e\u786c\u4ef6\u5b9e\u73b0\u3002</li> </ul> <p>\u6211\u77e5\u9053\u4f60\u4e00\u5b9a\u5728\u60f3\uff1a\u201c\u8fd9\u4eba\u662f\u8c01\uff1f\u201d\u662f\u7684\uff0c\u4ed6\u7684\u5de5\u4f5c\u975e\u5e38\u6770\u51fa\uff01\u4f46\u662f\u8bf4\u771f\u7684\uff0c\u4ed6\u662f\u5982\u4f55\u4f18\u5316\u7b97\u6cd5\u7684\u5462\uff1f\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5728\u4e8c\u7ef4\u4e2d\u4ed6\u662f\u5982\u4f55\u5728\u56db\u4e2a\u70b9\uff08\u6b63\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\uff09\u4e4b\u95f4\u63d2\u503c\u7684\uff1b\u6240\u4ee5\u6ca1\u9519\u4f60\u5df2\u7ecf\u731c\u5230\u4e86\uff0c\u5bf9\u4e8e\u4e09\u7ef4\uff08\u8fd9\u91cc\u6709\u4e2a\u793a\u4f8b\uff09\u548c\u56db\u7ef4\u6211\u4eec\u9700\u8981\u63d2\u5165 8 \u4e2a\u548c 16 \u4e2a\u70b9\u3002\u5bf9\u5427\uff1f\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e N \u7ef4\u4f60\u9700\u8981\u63d2\u5165 2 \u7684 n \u6b21\u65b9\u4e2a\u70b9\uff082^N\uff09\u3002\u4f46\u662f Ken \u5f88\u806a\u660e\u5730\u610f\u8bc6\u5230\u5c3d\u7ba1\u5f88\u663e\u7136\u586b\u5145\u5c4f\u5e55\u7684\u5f62\u72b6\u5e94\u8be5\u662f\u65b9\u5f62\uff0c\u5728\u4e8c\u7ef4\u4e2d\u6700\u7b80\u5355\u7684\u5f62\u72b6\u5374\u662f\u7b49\u8fb9\u4e09\u89d2\u5f62\u3002\u6240\u4ee5\u4ed6\u628a\u6b63\u65b9\u5f62\u7f51\u683c\uff08\u6211\u4eec\u624d\u521a\u5b66\u4e86\u600e\u4e48\u7528\uff09\u66ff\u6362\u6210\u4e86\u5355\u7eaf\u5f62\u7b49\u8fb9\u4e09\u89d2\u5f62\u7684\u7f51\u683c\u3002</p> <p></p> <p>\u8fd9\u65f6 N \u7ef4\u7684\u5f62\u72b6\u5c31\u53ea\u9700\u8981 N + 1 \u4e2a\u70b9\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u4e8c\u7ef4\u4e2d\u5c11\u4e86 1 \u4e2a\u70b9\uff0c\u4e09\u7ef4\u4e2d\u5c11\u4e86 4 \u4e2a\uff0c\u56db\u7ef4\u4e2d\u5219\u5c11\u4e86 11 \u4e2a\uff01\u5de8\u5927\u7684\u63d0\u5347\uff01</p> <p>\u5728\u4e8c\u7ef4\u4e2d\u63d2\u503c\u8fc7\u7a0b\u548c\u5e38\u89c4\u7684 noise \u5dee\u4e0d\u591a\uff0c\u901a\u8fc7\u5728\u4e00\u7ec4\u70b9\u4e4b\u95f4\u63d2\u503c\u3002\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6539\u7528\u5355\u7eaf\u5f62\u7f51\u683c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ed9\u603b\u5171 3 \u4e2a\u70b9\u63d2\u503c\u3002</p> <p></p> <p>\u8fd9\u4e2a\u5355\u7eaf\u5f62\u7f51\u683c\u662f\u5982\u4f55\u5236\u4f5c\u7684\uff1f\u8fd9\u662f\u53e6\u4e00\u4e2a\u806a\u660e\u7edd\u9876\u800c\u5341\u5206\u4f18\u96c5\u7684\u505a\u6cd5\u3002\u53ef\u4ee5\u5148\u628a\u5e38\u89c4\u7684\u56db\u89d2\u7f51\u683c\u5206\u6210\u4e24\u4e2a\u7b49\u8170\u4e09\u89d2\u5f62\uff0c\u7136\u540e\u518d\u628a\u4e09\u89d2\u5f62\u6b6a\u659c\u6210\u7b49\u8fb9\u4e09\u89d2\u5f62\u3002</p> <p></p> <p>\u7136\u540e\uff0c\u5c31\u50cf Stefan Gustavson \u5728\u8fd9\u7bc7\u6587\u732e\u4e2d\u8bf4\u7684\uff1a  \u201c\u2026\u2026\u901a\u8fc7\u89c2\u5bdf\u8f6c\u6362\u540e\u5750\u6807\u7684\u6574\u6570\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u901f\u5730\u5224\u65ad\u54ea\u4e2a\u5305\u542b\u7740\u4e24\u4e2a\u5355\u7eaf\u5f62\u7684\u5355\u5143\u542b\u6709\u6211\u4eec\u6240\u9700\u7684\u70b9\u3002\u5e76\u4e14\u901a\u8fc7\u6bd4\u8f83 x \u548c y \u7684\u5927\u5c0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5728\u4e0a\u4e09\u89d2\u8fd8\u662f\u4e0b\u4e09\u89d2\u4e2d\uff0c\u5e76\u4e14\u904d\u5386\u8fd9\u4e2a\u6b63\u786e\u7684\u4e09\u89d2\u5f62\u3002\u201d</p> <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u4f60\u53ef\u4ee5\u53d6\u6d88\u7b2c 44 \u884c\u7684\u6ce8\u91ca\uff0c\u770b\u4e00\u770b\u7f51\u683c\u662f\u5982\u4f55\u6b6a\u659c\u7684\uff0c\u7136\u540e\u53d6\u6d88\u7b2c 47 \u884c\u7684\u6ce8\u91ca\uff0c\u770b\u4e00\u770b\u5982\u4f55\u5efa\u9020\u5355\u7eaf\u5f62\u7f51\u683c\u3002\u6ce8\u610f\u7b2c 22 \u884c\u4e2d\u6211\u4eec\u4ec5\u4ec5\u901a\u8fc7\u5224\u65ad if <code>x &gt; y</code> (\u4e0b\u4e09\u89d2) \u8fd8\u662f <code>y &gt; x</code> (\u4e0a\u4e09\u89d2)\uff0c\u5c31\u628a\u6b6a\u659c\u8fc7\u7684\u6b63\u65b9\u5f62\u5207\u6210\u4e86\u4e24\u4e2a\u7b49\u8170\u4e09\u89d2\u5f62\u3002</p> <pre><code>// Author @patriciogv - 2015 - patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec2 skew (vec2 st) {\n    vec2 r = vec2(0.0);\n    r.x = 1.1547*st.x;\n    r.y = st.y+0.5*r.x;\n    return r;\n}\n\nvec3 simplexGrid (vec2 st) {\n    vec3 xyz = vec3(0.0);\n\n    vec2 p = fract(skew(st));\n    if (p.x &gt; p.y) {\n        xyz.xy = 1.0-vec2(p.x,p.y-p.x);\n        xyz.z = p.y;\n    } else {\n        xyz.yz = 1.0-vec2(p.x-p.y,p.y);\n        xyz.x = p.x;\n    }\n\n    return fract(xyz);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Scale the space to see the grid\n    st *= 10.;\n\n    // Show the 2D grid\n    color.rg = fract(st);\n\n    // Skew the 2D grid\n    // color.rg = fract(skew(st));\n\n    // Subdivide the grid into to equilateral triangles\n    // color = simplexGrid(st);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u53e6\u4e00\u4e2a Simplex Noise \u7684\u4f18\u5316\u662f\u628a\u4e09\u6b21 Hermite \u51fd\u6570\uff08Cubic Hermite Curve\uff1af(x) = 3x^2-2x^3\uff0c\u548c <code>smoothstep()</code> \u4e00\u6837\uff09\u66ff\u6362\u6210\u4e86\u56db\u6b21 Hermite \u51fd\u6570\uff08 f(x) = 6x^5-15x^4+10x^3 \uff09\u3002\u8fd9\u5c31\u4f7f\u5f97\u51fd\u6570\u66f2\u7ebf\u4e24\u7aef\u66f4\u201c\u5e73\u201d\uff0c\u6240\u4ee5\u6bcf\u4e2a\u683c\u7684\u8fb9\u7f18\u66f4\u52a0\u4f18\u96c5\u5730\u4e0e\u53e6\u4e00\u4e2a\u8854\u63a5\u3002\u4e5f\u5c31\u662f\u8bf4\u683c\u5b50\u7684\u8fc7\u6e21\u66f4\u52a0\u8fde\u7eed\u3002\u4f60\u53ef\u4ee5\u53d6\u6d88\u4e0b\u9762\u4f8b\u5b50\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u7684\u6ce8\u91ca\uff0c\u4eb2\u773c\u770b\u770b\u5176\u4e2d\u7684\u53d8\u5316\uff08\u6216\u8005\u770b\u8fd9\u4e2a\u4f8b\u5b50\uff09\u3002</p> <p>\u6ce8\u610f\u66f2\u7ebf\u7684\u672b\u7aef\u53d1\u751f\u4e86\u600e\u6837\u7684\u53d8\u5316\u3002\u4f60\u53ef\u4ee5\u9605\u8bfb Ken \u81ea\u5df1\u7684\u89e3\u91ca\u4e86\u89e3\u66f4\u591a\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u8fdb\u5c55\u6c47\u805a\u6210\u4e86\u7b97\u6cd5\u4e2d\u7684\u6770\u4f5c Simplex Noise\u3002\u4e0b\u9762\u662f\u8fd9\u4e2a\u7b97\u6cd5\u5728 GLSL \u4e2d\u7684\u5e94\u7528\uff0c\u4f5c\u8005\u662f Ian McEwan\uff0c\u4ee5\u8fd9\u7bc7\u8bba\u6587\u53d1\u8868\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u6559\u5b66\u800c\u8a00\u592a\u590d\u6742\u4e86\uff0c\u4f46\u4f60\u53ef\u4ee5\u70b9\u5f00\u770b\u770b\uff0c\u4e5f\u8bb8\u6ca1\u6709\u4f60\u60f3\u8c61\u5f97\u90a3\u4e48\u6666\u6da9\u96be\u61c2\u3002</p> <p> </p> <p>\u597d\u4e86\uff0c\u6280\u672f\u7ec6\u8282\u5c31\u8bf4\u5230\u8fd9\u91cc\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5229\u7528\u5b83\u597d\u597d\u81ea\u7531\u53d1\u6325\u4e00\u4e0b\uff1a</p> <ul> <li> <p>\u51dd\u795e\u601d\u8003\u6bcf\u4e2a noise \u7684\u5b9e\u4f8b\u7684\u6a21\u6837\u3002\u8bbe\u60f3\u5b83\u4eec\u662f\u4f60\u7684\u539f\u6750\u6599\uff0c\u5c31\u50cf\u96d5\u5851\u5bb6\u624b\u4e2d\u7684\u5927\u7406\u77f3\u3002\u4f60\u89c9\u5f97\u6bcf\u4e00\u4e2a\u5e26\u7ed9\u4f60\u600e\u6837\u4e0d\u540c\u7684\u201c\u611f\u89c9\u201c\uff1f\u772f\u8d77\u4f60\u7684\u773c\u775b\u91ca\u653e\u60f3\u8c61\u529b\uff0c\u5c31\u50cf\u4f60\u5728\u89c2\u5bdf\u4e91\u6735\u7684\u5f62\u72b6\u7684\u65f6\u5019\u90a3\u6837\u3002\u4f60\u770b\u5230\u4e86\u4ec0\u4e48\uff1f\u4f60\u60f3\u8d77\u4e86\u4ec0\u4e48\uff1f\u4f60\u89c9\u5f97\u6bcf\u4e2a noise \u751f\u6210\u7684\u56fe\u50cf\u53ef\u4ee5\u7528\u6765\u505a\u6210\u4ec0\u4e48\uff1f\u653e\u5f00\u80c6\u91cf\u53bb\u505a\u5427\uff0c\u7528\u4ee3\u7801\u5b9e\u73b0\u5b83\u3002</p> </li> <li> <p>\u505a\u4e00\u4e2a shader \u6765\u8868\u73b0\u6d41\u4f53\u7684\u8d28\u611f\u3002\u6bd4\u5982\u50cf\u7194\u5ca9\u706f\uff0c\u58a8\u6c34\u6ef4\uff0c\u6c34\uff0c\u7b49\u7b49\u3002</p> </li> </ul> <p></p> <ul> <li>\u7528 Simplex Noise \u7ed9\u4f60\u73b0\u5728\u7684\u4f5c\u54c1\u6dfb\u52a0\u66f4\u591a\u7684\u6750\u8d28\u6548\u679c\u3002</li> </ul> <p></p> <p>\u5728\u672c\u7ae0\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u64cd\u63a7\u6df7\u6c8c\u7684\u65b9\u6cd5\u3002\u8fd9\u5e76\u4e0d\u662f\u4e00\u4ef6\u7b80\u5355\u7684\u5de5\u4f5c\uff01\u6210\u4e3a noise \u8d85\u7ea7\u5927\u5e08\u9700\u8981\u65f6\u95f4\u548c\u52aa\u529b\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u7ae0\u8282\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e9b\u5f88\u6709\u540d\u7684\u6280\u672f\uff0c\u6765\u4fee\u847a\u4f60\u7684\u6280\u80fd\u6811\uff0c\u5e76\u4e14\u4ece noise \u4e2d\u5b66\u5230\u66f4\u591a\uff0c\u5e76\u5229\u7528 shader \u8bbe\u8ba1\u51fa\u66f4\u591a\u4f18\u8d28\u7684\u751f\u6210\u5f0f\u827a\u672f\u4f5c\u54c1\u3002\u5728\u90a3\u4e4b\u524d\uff0c\u53bb\u5916\u9762\u8d70\u8d70\uff0c\u4eab\u53d7\u6df1\u5165\u601d\u8003\u81ea\u7136\u548c\u9519\u7efc\u590d\u6742\u7684\u56fe\u6848\u7684\u65f6\u5149\u5427\u3002\u57f9\u517b\u6d1e\u5bdf\u529b\u4e5f\u8bb8\u9700\u8981\u548c\u52a8\u624b\u80fd\u529b\u76f8\u540c\uff08\u751a\u81f3\u66f4\u591a\uff09\u7684\u52aa\u529b\u3002\u51fa\u95e8\u8d70\u8d70\u4eab\u53d7\u4eca\u5929\u5269\u4f59\u7684\u65f6\u5149\u5427\uff01</p> <p> \u201c\u548c\u6811\u804a\u804a\u5929\u5427\uff0c\u548c\u5b83\u4ea4\u4e2a\u670b\u53cb\u3002\u201d Bob Ross </p>"},{"location":"Frontend/shader/11/SUMMARY-pt/","title":"SUMMARY pt","text":"<p>Como podemos criar texturas com apar\u00eancia mais natural como a superf\u00edcie de estradas, pedras, \u00e1rvores e nuvens? O ru\u00eddo \u00e9 a resposta. Desde que Ken Perlin inventou seu primeiro algoritmo de ru\u00eddo nos anos 80, a t\u00e9cnica vem sendo usada extensivamente na computa\u00e7\u00e3o gr\u00e1fica e simula\u00e7\u00f5es. Mesmo se voc\u00ea nunca ouviu falar desse nome, \u00e9 imposs\u00edvel que n\u00e3o tenha visto. Vamos dar uma olhada passo a passo em como a fun\u00e7\u00e3o \u00e9 constru\u00edda e funciona. Podemos tamb\u00e9m cobrir uma vers\u00e3o mais eficiente do algoritmo chamado ru\u00eddo simplex.</p>"},{"location":"Frontend/shader/11/SUMMARY/","title":"SUMMARY","text":"<p>How can we create more natural looking textures like surface of the roads, rocks, trees and clouds? Noise function is the answer. Since Ken Perlin invented his first noise algorithm in 80s, the technique has been extensively used throughout computer graphics and simulations. Even if you have never heard of the name, it's not possible you have never seen it. Let's look step by step at how the function is built and works. We also cover more efficient version of the algorithm called simplex noise.</p>"},{"location":"Frontend/shader/11/TITLE-pt/","title":"TITLE pt","text":""},{"location":"Frontend/shader/11/TITLE-pt/#ruido","title":"Ru\u00eddo","text":""},{"location":"Frontend/shader/11/TITLE/","title":"TITLE","text":""},{"location":"Frontend/shader/11/TITLE/#noise","title":"Noise","text":""},{"location":"Frontend/shader/11/notes/","title":"Notes","text":""},{"location":"Frontend/shader/11/notes/#nicolas","title":"nicolas","text":"<ul> <li>L78 replace <code>fract()</code> with <code>floor()</code> to match the prvious definition</li> </ul>"},{"location":"Frontend/shader/11/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/11/tmp/#noise","title":"Noise","text":"<p>It's time for a break! We've been playing with random functions that look like TV white noise, our head is still spinning thinking about shaders, and our eyes are tired. Time to go out for a walk!</p> <p>We feel the air on our skin, the sun in our face. The world is such a vivid and rich place. Colors, textures, sounds. While we walk we can't avoid noticing the surface of the roads, rocks, trees and clouds.</p> <p> </p> <p>The unpredictability of these textures could be called \"random,\" but they don't look like the random we were playing with before. The \u201creal world\u201d is such a rich and complex place! How can we approximate this variety computationally?</p> <p>This was the question Ken Perlin was trying to solve in the early 1980s when he was commissioned to generate more realistic textures for the movie \"Tron.\" In response to that, he came up with an elegant Oscar winning noise algorithm. (No biggie.)</p> <p></p> <p>The following is not the classic Perlin noise algorithm, but it is a good starting point to understand how to generate noise.</p> <p>In these lines we are doing something similar to what we did in the previous chapter. We are subdividing a continuous floating number (<code>x</code>) into its integer (<code>i</code>) and fractional (<code>f</code>) components. We use <code>floor()</code> to obtain <code>i</code> and <code>fract()</code> to obtain <code>f</code>. Then we apply <code>rand()</code> to the integer part of <code>x</code>, which gives a unique random value for each integer.</p> <p>After that you see two commented lines. The first one interpolates each random value linearly.</p> <pre><code>y = mix(rand(i), rand(i + 1.0), f);\n</code></pre> <p>Go ahead and uncomment this line to see how this looks. We use the <code>fract()</code> value store in <code>f</code> to <code>mix()</code> the two random values.</p> <p>At this point in the book, we've learned that we can do better than a linear interpolation, right? Now try uncommenting the following line, which uses a <code>smoothstep()</code> interpolation instead of a linear one.</p> <pre><code>y = mix(rand(i), rand(i + 1.0), smoothstep(0.,1.,f));\n</code></pre> <p>After uncommenting it, notice how the transition between the peaks gets smooth. In some noise implementations you will find that programmers prefer to code their own cubic curves (like the following formula) instead of using the <code>smoothstep()</code>.</p> <pre><code>float u = f * f * (3.0 - 2.0 * f ); // custom cubic curve\ny = mix(rand(i), rand(i + 1.0), u); // using it in the interpolation\n</code></pre> <p>This smooth randomness is a game changer for graphical engineers or artists - it provides the ability to generate images and geometries with an organic feeling. Perlin's Noise Algorithm has been implemented over and over in different languages and dimensions to make mesmerizing pieces for all sorts of creative uses.</p> <p></p> <p>Now it's your turn:</p> <ul> <li> <p>Make your own <code>float noise(float x)</code> function.</p> </li> <li> <p>Use your noise function to animate a shape by moving it, rotating it or scaling it.</p> </li> <li> <p>Make an animated composition of several shapes 'dancing' together using noise.</p> </li> <li> <p>Construct \"organic-looking\" shapes using the noise function.</p> </li> <li> <p>Once you have your \"creature,\" try to develop it further into a character by assigning it a particular movement.</p> </li> </ul>"},{"location":"Frontend/shader/11/tmp/#2d-noise","title":"2D Noise","text":"<p>Now that we know how to do noise in 1D, it's time to move on to 2D. In 2D, instead of interpolating between two points of a line (<code>rand(x)</code> and <code>rand(x)+1.0</code>), we are going to interpolate between the four corners of the square area of a plane (<code>rand(st)</code>, <code>rand(st)+vec2(1.,0.)</code>, <code>rand(st)+vec2(0.,1.)</code> and <code>rand(st)+vec2(1.,1.)</code>).</p> <p></p> <p>Similarly, if we want to obtain 3D noise we need to interpolate between the eight corners of a cube. This technique is all about interpolating random values, which is why it's called value noise.</p> <p></p> <p>Like the 1D example, this interpolation is not linear but cubic, which smoothly interpolates any points inside our square grid.</p> <p></p> <p>Take a look at the following noise function.</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos = vec2(st*5.0);\n\n    // Use the noise function\n    float n = noise(pos);\n\n    gl_FragColor = vec4(vec3(n), 1.0);\n}\n</code></pre> <p></p> <p>We start by scaling the space by 5 (line 45) in order to see the interpolation between the squares of the grid. Then inside the noise function we subdivide the space into cells. We store the integer position of the cell along with the fractional positions inside the cell. We use the integer position to calculate the four corners' coordinates and obtain a random value for each one (lines 23-26). Finally, in line 35 we interpolate between the 4 random values of the corners using the fractional positions we stored before.</p> <p>Now it's your turn. Try the following exercises:</p> <ul> <li> <p>Change the multiplier of line 45. Try to animate it.</p> </li> <li> <p>At what level of zoom does the noise start looking like random again?</p> </li> <li> <p>At what zoom level is the noise is imperceptible?</p> </li> <li> <p>Try to hook up this noise function to the mouse coordinates.</p> </li> <li> <p>What if we treat the gradient of the noise as a distance field? Make something interesting with it.</p> </li> <li> <p>Now that you've achieved some control over order and chaos, it's time to use that knowledge. Make a composition of rectangles, colors and noise that resembles some of the complexity of a Mark Rothko painting.</p> </li> </ul> <p></p>"},{"location":"Frontend/shader/11/tmp/#using-noise-in-generative-designs","title":"Using Noise in Generative Designs","text":"<p>Noise algorithms were originally designed to give a natural je ne sais quoi to digital textures. The 1D and 2D implementations we've seen so far were interpolations between random values, which is why they're called Value Noise, but there are more ways to obtain noise...</p> <p> </p> <p>As you discovered in the previous exercises, value noise tends to look \"blocky.\" To diminish this blocky effect, in 1985 Ken Perlin developed another implementation of the algorithm called Gradient Noise. Ken figured out how to interpolate random gradients instead of values. These gradients were the result of a 2D random function that returns directions (represented by a <code>vec2</code>) instead of single values (<code>float</code>). Click on the following image to see the code and how it works.</p> <p> </p> <p>Take a minute to look at these two examples by Inigo Quilez and pay attention to the differences between value noise and gradient noise.</p> <p>Like a painter who understands how the pigments of their paints work, the more we know about noise implementations the better we will be able to use them. For example, if we use a two dimensional noise implementation to rotate the space where straight lines are rendered, we can produce the following swirly effect that looks like wood. Again you can click on the image to see what the code looks like.</p> <p> </p> <pre><code>    pos = rotate2d( noise(pos) ) * pos; // rotate the space\n    pattern = lines(pos,.5); // draw lines\n</code></pre> <p>Another way to get interesting patterns from noise is to treat it like a distance field and apply some of the tricks described in the Shapes chapter.</p> <p> </p> <pre><code>    color += smoothstep(.15,.2,noise(st*10.)); // Black splatter\n    color -= smoothstep(.35,.4,noise(st*10.)); // Holes on splatter\n</code></pre> <p>A third way of using the noise function is to modulate a shape. This also requires some of the techniques we learned in the chapter about shapes.</p> <p></p> <p>For you to practice:</p> <ul> <li>What other generative pattern can you make? What about granite? marble? magma? water? Find three pictures of textures you are interested in and implement them algorithmically using noise.</li> <li>Use noise to modulate a shape.</li> <li>What about using noise for motion? Go back to the Matrix chapter. Use the translation example that moves the \"+\" around, and apply some random and noise movements to it.</li> <li>Make a generative Jackson Pollock.</li> </ul> <p></p>"},{"location":"Frontend/shader/11/tmp/#improved-noise","title":"Improved Noise","text":"<p>An improvement by Perlin to his original non-simplex noise Simplex Noise, is the replacement of the cubic Hermite curve ( f(x) = 3x^2-2x^3 , which is identical to the <code>smoothstep()</code> function) with a quintic interpolation curve ( f(x) = 6x^5-15x^4+10x^3 ). This makes both ends of the curve more \"flat\" so each border gracefully stitches with the next one. In other words, you get a more continuous transition between the cells. You can see this by uncommenting the second formula in the following graph example (or see the two equations side by side here).</p> <p>Note how the ends of the curve change. You can read more about this in Ken's own words.</p>"},{"location":"Frontend/shader/11/tmp/#simplex-noise","title":"Simplex Noise","text":"<p>For Ken Perlin the success of his algorithm wasn't enough. He thought it could perform better. At Siggraph 2001 he presented the \"simplex noise\" in which he achieved the following improvements over the previous algorithm:</p> <ul> <li>An algorithm with lower computational complexity and fewer multiplications.</li> <li>A noise that scales to higher dimensions with less computational cost.</li> <li>A noise without directional artifacts.</li> <li>A noise with well-defined and continuous gradients that can be computed quite cheaply.</li> <li>An algorithm that is easy to implement in hardware.</li> </ul> <p>I know what you are thinking... \"Who is this man?\" Yes, his work is fantastic! But seriously, how did he improve the algorithm? Well, we saw how for two dimensions he was interpolating 4 points (corners of a square); so we can correctly guess that for three (see an implementation here) and four dimensions we need to interpolate 8 and 16 points. Right? In other words for N dimensions you need to smoothly interpolate 2 to the N points (2^N). But Ken smartly noticed that although the obvious choice for a space-filling shape is a square, the simplest shape in 2D is the equilateral triangle. So he started by replacing the squared grid (we just learned how to use) for a simplex grid of equilateral triangles.</p> <p></p> <p>The simplex shape for N dimensions is a shape with N + 1 corners. In other words one fewer corner to compute in 2D, 4 fewer corners in 3D and 11 fewer corners in 4D! That's a huge improvement!</p> <p>In two dimensions the interpolation happens similarly to regular noise, by interpolating the values of the corners of a section. But in this case, by using a simplex grid, we only need to interpolate the sum of 3 corners.</p> <p></p> <p>How is the simplex grid made? In another brilliant and elegant move, the simplex grid can be obtained by subdividing the cells of a regular 4 cornered grid into two isosceles triangles and then skewing it until each triangle is equilateral.</p> <p></p> <p>Then, as Stefan Gustavson describes in this paper: \"...by looking at the integer parts of the transformed coordinates (x,y) for the point we want to evaluate, we can quickly determine which cell of two simplices that contains the point. By also comparing the magnitudes of x and y, we can determine whether the point is in the upper or the lower simplex, and traverse the correct three corner points.\"</p> <p>In the following code you can uncomment line 44 to see how the grid is skewed, and then uncomment line 47 to see how a simplex grid can be constructed. Note how on line 22 we are subdividing the skewed square into two equilateral triangles just by detecting if <code>x &gt; y</code> (\"lower\" triangle) or <code>y &gt; x</code> (\"upper\" triangle).</p> <pre><code>// Author @patriciogv - 2015 - patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec2 skew (vec2 st) {\n    vec2 r = vec2(0.0);\n    r.x = 1.1547*st.x;\n    r.y = st.y+0.5*r.x;\n    return r;\n}\n\nvec3 simplexGrid (vec2 st) {\n    vec3 xyz = vec3(0.0);\n\n    vec2 p = fract(skew(st));\n    if (p.x &gt; p.y) {\n        xyz.xy = 1.0-vec2(p.x,p.y-p.x);\n        xyz.z = p.y;\n    } else {\n        xyz.yz = 1.0-vec2(p.x-p.y,p.y);\n        xyz.x = p.x;\n    }\n\n    return fract(xyz);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Scale the space to see the grid\n    st *= 10.;\n\n    // Show the 2D grid\n    color.rg = fract(st);\n\n    // Skew the 2D grid\n    // color.rg = fract(skew(st));\n\n    // Subdivide the grid into to equilateral triangles\n    // color = simplexGrid(st);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>All these improvements result in an algorithmic masterpiece known as Simplex Noise. The following is a GLSL implementation of this algorithm made by Ian McEwan and Stefan Gustavson (and presented in this paper) which is overcomplicated for educational purposes, but you will be happy to click on it and see that it is less cryptic than you might expect, and the code is short and fast.</p> <p> </p> <p>Well... enough technicalities, it's time for you to use this resource in your own expressive way:</p> <ul> <li> <p>Contemplate how each noise implementation looks. Imagine them as a raw material, like a marble rock for a sculptor. What can you say about the \"feeling\" that each one has? Squinch your eyes to trigger your imagination, like when you want to find shapes in a cloud. What do you see? What are you reminded of? What do you imagine each noise implementation could be made into? Following your guts and try to make it happen in code.</p> </li> <li> <p>Make a shader that projects the illusion of flow. Like a lava lamp, ink drops, water, etc.</p> </li> </ul> <p></p> <ul> <li>Use Simplex Noise to add some texture to a work you've already made.</li> </ul> <p></p> <p>In this chapter we have introduced some control over the chaos. It was not an easy job! Becoming a noise-bender-master takes time and effort.</p> <p>In the following chapters we will see some well known techniques to perfect your skills and get more out of your noise to design quality generative content with shaders. Until then enjoy some time outside contemplating nature and its intricate patterns. Your ability to observe needs equal (or probably more) dedication than your making skills. Go outside and enjoy the rest of the day!</p> <p>\"Talk to the tree, make friends with it.\" Bob Ross </p>"},{"location":"Frontend/shader/11/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/12/","title":"Index","text":""},{"location":"Frontend/shader/12/#cellular-noise","title":"Cellular Noise","text":"<p>In 1996, sixteen years after Perlin's original Noise and five years before his Simplex Noise, Steven Worley wrote a paper called  \u201cA Cellular Texture Basis Function\u201d. In it, he describes a procedural texturing technique now extensively used by the graphics community.</p> <p>To understand the principles behind it we need to start thinking in terms of iterations. Probably you know what that means: yes, start using <code>for</code> loops. There is only one catch with <code>for</code> loops in GLSL: the number we are checking against must be a constant (<code>const</code>). So, no dynamic loops - the number of iterations must be fixed.</p> <p>Let's take a look at an example.</p>"},{"location":"Frontend/shader/12/#points-for-a-distance-field","title":"Points for a distance field","text":"<p>Cellular Noise is based on distance fields, the distance to the closest one of a set of feature points. Let's say we want to make a distance field of 4 points. What do we need to do? Well, for each pixel we want to calculate the distance to the closest point. That means that we need to iterate through all the points, compute their distances to the current pixel and store the value for the one that is closest.</p> <pre><code>    float min_dist = 100.; // A variable to store the closest distance to a point\n\n    min_dist = min(min_dist, distance(st, point_a));\n    min_dist = min(min_dist, distance(st, point_b));\n    min_dist = min(min_dist, distance(st, point_c));\n    min_dist = min(min_dist, distance(st, point_d));\n</code></pre> <p></p> <p>This is not very elegant, but it does the trick. Now let's re-implement it using an array and a <code>for</code> loop.</p> <pre><code>    float m_dist = 100.;  // minimum distance\n    for (int i = 0; i &lt; TOTAL_POINTS; i++) {\n        float dist = distance(st, points[i]);\n        m_dist = min(m_dist, dist);\n    }\n</code></pre> <p>Note how we use a <code>for</code> loop to iterate through an array of points and keep track of the minimum distance using a <code>min()</code> function. Here's a brief working implementation of this idea:</p> <p>In the above code, one of the points is assigned to the mouse position. Play with it so you can get an intuitive idea of how this code behaves. Then try this:</p> <ul> <li>How can you animate the rest of the points?</li> <li>After reading the chapter about shapes, imagine interesting ways to use this distance field!</li> <li>What if you want to add more points to this distance field? What if we want to dynamically add/subtract points?</li> </ul>"},{"location":"Frontend/shader/12/#tiling-and-iteration","title":"Tiling and iteration","text":"<p>You probably notice that <code>for</code> loops and arrays are not very good friends with GLSL. Like we said before, loops don't accept dynamic limits on their exit condition. Also, iterating through a lot of instances reduces the performance of your shader significantly. That means we can't use this direct approach for large amounts of points. We need to find another strategy, one that takes advantage of the parallel processing architecture of the GPU.</p> <p></p> <p>One way to approach this problem is to divide the space into tiles. Not every pixel needs to check the distance to every single point, right? Given the fact that each pixel runs in its own thread, we can subdivide the space into cells, each one with one unique point to watch. Also, to avoid aberrations at the edges between cells we need to check for the distances to the points on the neighboring cells. That's the main brillant idea of Steven Worley's paper. At the end, each pixel needs to check only nine positions: their own cell's point and the points in the 8 cells around it. We already subdivide the space into cells in the chapters about: patterns, random and noise, so hopefully you are familiar with this technique by now.</p> <pre><code>    // Scale\n    st *= 3.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n</code></pre> <p>So, what's the plan? We will use the tile coordinates (stored in the integer coordinate, <code>i_st</code>) to construct a random position of a point. The <code>random2f</code> function we will use receives a <code>vec2</code> and gives us a <code>vec2</code> with a random position. So, for each tile we will have one feature point in a random position within the tile.</p> <pre><code>    vec2 point = random2(i_st);\n</code></pre> <p>Each pixel inside that tile (stored in the float coordinate, <code>f_st</code>) will check their distance to that random point.</p> <pre><code>    vec2 diff = point - f_st;\n    float dist = length(diff);\n</code></pre> <p>The result will look like this:</p> <p></p> <p>We still need to check the distances to the points in the surrounding tiles, not just the one in the current tile. For that we need to iterate through the neighbor tiles. Not all tiles, just the ones immediately around the current one. That means from <code>-1</code> (left) to <code>1</code> (right) tile in <code>x</code> axis and <code>-1</code> (bottom) to <code>1</code> (top) in <code>y</code> axis. A 3x3 region of 9 tiles can be iterated through using a double <code>for</code> loop like this one:</p> <pre><code>for (int y= -1; y &lt;= 1; y++) {\n    for (int x= -1; x &lt;= 1; x++) {\n        // Neighbor place in the grid\n        vec2 neighbor = vec2(float(x),float(y));\n        ...\n    }\n}\n</code></pre> <p></p> <p>Now, we can compute the position of the points on each one of the neighbors in our double <code>for</code> loop by adding the neighbor tile offset to the current tile coordinate.</p> <pre><code>        ...\n        // Random position from current + neighbor place in the grid\n        vec2 point = random2(i_st + neighbor);\n        ...\n</code></pre> <p>The rest is all about calculating the distance to that point and storing the closest one in a variable called <code>m_dist</code> (for minimum distance).</p> <pre><code>        ...\n        vec2 diff = neighbor + point - f_st;\n\n        // Distance to the point\n        float dist = length(diff);\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n        ...\n</code></pre> <p>The above code is inspired by this article by Inigo's Quilez where he said:</p> <p>\"... it might be worth noting that there's a nice trick in this code above. Most implementations out there suffer from precision issues, because they generate their random points in \"domain\" space (like \"world\" or \"object\" space), which can be arbitrarily far from the origin. One can solve the issue moving all the code to higher precision data types, or by being a bit clever. My implementation does not generate the points in \"domain\" space, but in \"cell\" space: once the integer and fractional parts of the shading point are extracted and therefore the cell in which we are working identified, all we care about is what happens around this cell, meaning we can drop all the integer part of our coordinates away all together, saving many precision bits. In fact, in a regular voronoi implementation the integer parts of the point coordinates simply cancel out when the random per cell feature points are subtracted from the shading point. In the implementation above, we don't even let that cancelation happen, cause we are moving all the computations to \"cell\" space. This trick also allows one to handle the case where you want to voronoi-shade a whole planet - one could simply replace the input to be double precision, perform the floor() and fract() computations, and go floating point with the rest of the computations without paying the cost of changing the whole implementation to double precision. Of course, same trick applies to Perlin Noise patterns (but i've never seen it implemented nor documented anywhere).\"</p> <p>Recapping: we subdivide the space into tiles; each pixel will calculate the distance to the point in their own tile and the surrounding 8 tiles; store the closest distance. The result is a distance field that looks like the following example:</p> <p>Explore this further by:</p> <ul> <li>Scaling the space by different values.</li> <li>Can you think of other ways to animate the points?</li> <li>What if we want to compute an extra point with the mouse position?</li> <li>What other ways of constructing this distance field can you imagine, besides <code>m_dist = min(m_dist, dist);</code>?</li> <li>What interesting patterns can you make with this distance field?</li> </ul> <p>This algorithm can also be interpreted from the perspective of the points and not the pixels. In that case it can be described as: each point grows until it finds the growing area from another point. This mirrors some of the growth rules in nature. Living forms are shaped by this tension between an inner force to expand and grow, and limitations by outside forces. The classic algorithm that simulates this behavior is named after Georgy Voronoi.</p> <p></p>"},{"location":"Frontend/shader/12/#voronoi-algorithm","title":"Voronoi Algorithm","text":"<p>Constructing Voronoi diagrams from cellular noise is less hard than what it might seem. We just need to keep some extra information about the precise point which is closest to the pixel. For that we are going to use a <code>vec2</code> called <code>m_point</code>. By storing the vector direction to the center of the closest point, instead of just the distance, we will be \"keeping\" a \"unique\" identifier of that point.</p> <pre><code>    ...\n    if( dist &lt; m_dist ) {\n        m_dist = dist;\n        m_point = point;\n    }\n    ...\n</code></pre> <p>Note that in the following code that we are no longer using <code>min</code> to calculate the closest distance, but a regular <code>if</code> statement. Why? Because we actually want to do something more every time a new closer point appears, namely store its position (lines 32 to 37).</p> <p>Note how the color of the moving cell (bound to the mouse position) changes color according to its position. That's because the color is assigned using the value (position) of the closest point.</p> <p>Like we did before, now is the time to scale this up, switching to Steven Worley's paper's approach. Try implementing it yourself. You can use the help of the following example by clicking on it. Note that Steven Worley's original approach uses a variable number of feature points for each tile, more than one in most tiles. In his software implementation in C, this is used to speed up the loop by making early exits. GLSL loops don't allow variable number of iterations, so you probably want to stick to one feature point per tile.</p> <p></p> <p>Once you figure out this algorithm, think of interesting and creative uses for it.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Frontend/shader/12/#improving-voronoi","title":"Improving Voronoi","text":"<p>In 2011, Stefan Gustavson optimized Steven Worley's algorithm to GPU by only iterating through a 2x2 matrix instead of 3x3. This reduces the amount of work significantly, but it can create artifacts in the form of discontinuities at the edges between the tiles. Take a look to the following examples.</p> <p>Later in 2012 Inigo Quilez wrote an article on how to make precise Voronoi borders.</p> <p></p> <p>Inigo's experiments with Voronoi didn't stop there. In 2014 he wrote this nice article about what he calls voro-noise, a function that allows a gradual blend between regular noise and voronoi. In his words:</p> <p>\"Despite this similarity, the fact is that the way the grid is used in both patterns is different. Noise interpolates/averages random values (as in value noise) or gradients (as in gradient noise), while Voronoi computes the distance to the closest feature point. Now, smooth-bilinear interpolation and minimum evaluation are two very different operations, or... are they? Can they perhaps be combined in a more general metric? If that was so, then both Noise and Voronoi patterns could be seen as particular cases of a more general grid-based pattern generator?\"</p> <p></p> <p>Now it's time for you to look closely at things, be inspired by nature and find your own take on this technique!</p> <p></p>"},{"location":"Frontend/shader/12/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/12/README-ch/","title":"12","text":""},{"location":"Frontend/shader/12/README-ch/#cellular-noise","title":"\u7f51\u683c\u566a\u58f0\uff08Cellular Noise\uff09","text":"<p>1996 \u5e74\uff0c\u5728\u539f\u59cb\u7684 Perlin Noise \u53d1\u5e03\u516d\u5e74\u540e\uff0cPerlin \u7684 Simplex Noise \u53d1\u5e03\u4e94\u5e74\u524d\uff0cSteven Worley \u5199\u4e86\u4e00\u7bc7\u540d\u4e3a\u201cA Cellular Texture Basis Function\u201d\u7684\u8bba\u6587\u3002\u5728\u8fd9\u7bc7\u8bba\u6587\u91cc\uff0c\u4ed6\u63cf\u8ff0\u4e86\u4e00\u79cd\u73b0\u5728\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u7a0b\u5e8f\u5316\u7eb9\u7406\u6280\u672f\u3002</p> <p>\u8981\u7406\u89e3\u5b83\u80cc\u540e\u7684\u539f\u7406\uff0c\u6211\u4eec\u9700\u8981\u4ece\u8fed\u4ee3\u5f00\u59cb\u601d\u8003\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053\u8fed\u4ee3\u662f\u4ec0\u4e48\u610f\u601d\uff1a\u5bf9\uff0c\u5c31\u662f\u4f7f\u7528 <code>for</code> \u5faa\u73af\u3002GLSL \u7684 <code>for</code> \u5faa\u73af\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\uff1a\u6211\u4eec\u68c0\u67e5\u5faa\u73af\u662f\u5426\u7ee7\u7eed\u7684\u6b21\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u6570\uff08<code>const</code>\uff09. \u6240\u4ee5\uff0c\u6ca1\u6709\u52a8\u6001\u5faa\u73af\u2014\u2014\u8fed\u4ee3\u7684\u6b21\u6570\u5fc5\u987b\u662f\u56fa\u5b9a\u7684\u3002</p> <p>\u7f51\u683c\u566a\u58f0\u57fa\u4e8e\u8ddd\u79bb\u573a\uff0c\u8fd9\u91cc\u7684\u8ddd\u79bb\u662f\u6307\u5230\u4e00\u4e2a\u7279\u5f81\u70b9\u96c6\u6700\u8fd1\u7684\u70b9\u7684\u8ddd\u79bb\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u5199\u4e00\u4e2a 4 \u4e2a\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\u573a\uff0c\u6211\u4eec\u5e94\u8be5\u505a\u4ec0\u4e48\u5462\uff1f\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\uff0c\u8ba1\u7b97\u5b83\u5230\u6700\u8fd1\u7684\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u904d\u5386\u6240\u6709 4 \u4e2a\u7279\u5f81\u70b9\uff0c\u8ba1\u7b97\u4ed6\u4eec\u5230\u5f53\u524d\u50cf\u7d20\u70b9\u7684\u8ddd\u79bb\uff0c\u5e76\u628a\u6700\u8fd1\u7684\u90a3\u4e2a\u8ddd\u79bb\u5b58\u4e0b\u6765\u3002 </p> <pre><code>    float min_dist = 100.; // A variable to store the closest distance to a point\n\n    min_dist = min(min_dist, distance(st, point_a));\n    min_dist = min(min_dist, distance(st, point_b));\n    min_dist = min(min_dist, distance(st, point_c));\n    min_dist = min(min_dist, distance(st, point_d));\n</code></pre> <p></p> <p>\u8fd9\u79cd\u505a\u6cd5\u4e0d\u662f\u5f88\u4f18\u96c5\uff0c\u4f46\u81f3\u5c11\u884c\u5f97\u901a\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u7528\u6570\u7ec4\u548c <code>for</code> \u5faa\u73af\u91cd\u5199\u3002</p> <pre><code>    float m_dist = 100.;  // minimum distance\n    for (int i = 0; i &lt; TOTAL_POINTS; i++) {\n        float dist = distance(st, points[i]);\n        m_dist = min(m_dist, dist);\n    }\n</code></pre> <p>\u6ce8\u610f\u770b\u6211\u4eec\u7528\u4e00\u4e2a <code>for</code> \u5faa\u73af\u904d\u5386\u7279\u5f81\u70b9\u96c6\u7684\u6570\u7ec4\uff0c\u7528\u4e00\u4e2a <code>min()</code> \u51fd\u6570\u6765\u83b7\u5f97\u6700\u5c0f\u8ddd\u79bb\u3002\u4e0b\u9762\u662f\u4ee5\u4e0a\u60f3\u6cd5\u7684\u7b80\u8981\u7684\u5b9e\u73b0\uff1a</p> <pre><code>// Author: @patriciogv\n// Title: 4 cells DF\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec3 color = vec3(.0);\n\n    // Cell positions\n    vec2 point[5];\n    point[0] = vec2(0.83,0.75);\n    point[1] = vec2(0.60,0.07);\n    point[2] = vec2(0.28,0.64);\n    point[3] =  vec2(0.31,0.26);\n    point[4] = u_mouse/u_resolution;\n\n    float m_dist = 1.;  // minimum distance\n\n    // Iterate through the points positions\n    for (int i = 0; i &lt; 5; i++) {\n        float dist = distance(st, point[i]);\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n    }\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    // Show isolines\n    // color -= step(.7,abs(sin(50.0*m_dist)))*.3;\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5176\u4e2d\u4e00\u4e2a\u7279\u5f81\u70b9\u5206\u914d\u7ed9\u4e86\u9f20\u6807\u4f4d\u7f6e\u3002\u628a\u9f20\u6807\u653e\u4e0a\u53bb\u73a9\u4e00\u73a9\uff0c\u4f60\u53ef\u4ee5\u66f4\u76f4\u89c2\u5730\u4e86\u89e3\u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5982\u4f55\u8fd0\u884c\u7684\u3002\u7136\u540e\u8bd5\u8bd5\uff1a</p> <ul> <li>\u4f60\u53ef\u4ee5\u8ba9\u5176\u4f59\u7684\u51e0\u4e2a\u7279\u5f81\u70b9\u4e5f\u52a8\u8d77\u6765\u5417\uff1f</li> <li>\u5728\u8bfb\u5b8c\u5173\u4e8e\u5f62\u72b6\u7684\u7ae0\u8282\u540e\uff0c\u60f3\u8c61\u4e00\u4e9b\u5173\u4e8e\u8ddd\u79bb\u573a\u7684\u6709\u610f\u601d\u7684\u7528\u6cd5\u3002</li> <li>\u5982\u679c\u4f60\u8981\u5f80\u8ddd\u79bb\u573a\u91cc\u6dfb\u52a0\u66f4\u591a\u7684\u7279\u5f81\u70b9\u600e\u4e48\u529e\uff1f\u5982\u679c\u6211\u4eec\u60f3\u52a8\u6001\u5730\u6dfb\u52a0\u51cf\u5c11\u7279\u5f81\u70b9\u6570\u600e\u4e48\u529e\uff1f</li> </ul>"},{"location":"Frontend/shader/12/README-ch/#_1","title":"\u5e73\u94fa\u548c\u8fed\u4ee3","text":"<p>\u4f60\u53ef\u80fd\u6ce8\u610f\u5230 GLSL \u5bf9 <code>for</code> \u5faa\u73af\u548c \u6570\u7ec4 \u4f3c\u4e4e\u4e0d\u592a\u53cb\u597d\u3002\u5982\u524d\u6240\u8bf4\uff0c\u5faa\u73af\u4e0d\u63a5\u53d7\u52a8\u6001\u7684\u8fed\u4ee3\u6b21\u6570\u3002\u8fd8\u6709\uff0c\u904d\u5386\u5f88\u591a\u5b9e\u4f8b\u4f1a\u663e\u8457\u5730\u964d\u4f4e\u7740\u8272\u5668\u7684\u6027\u80fd\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u628a\u8fd9\u4e2a\u65b9\u6cd5\u7528\u5728\u5f88\u5927\u7684\u7279\u5f81\u70b9\u96c6\u4e0a\u3002\u6211\u4eec\u9700\u8981\u5bfb\u627e\u53e6\u4e00\u4e2a\u7b56\u7565\uff0c\u4e00\u4e2a\u80fd\u5229\u7528 GPU \u5e76\u884c\u67b6\u6784\u4f18\u52bf\u7684\u7b56\u7565\u3002</p> <p></p> <p>\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u65b9\u6cd5\u662f\u628a\u7a7a\u95f4\u5206\u5272\u6210\u7f51\u683c\u3002\u5e76\u4e0d\u9700\u8981\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u5230\u6bcf\u4e00\u4e2a\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\uff0c\u5bf9\u5427\uff1f\u5df2\u7ecf\u77e5\u9053\u6bcf\u4e2a\u50cf\u7d20\u70b9\u662f\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u7a7a\u95f4\u5206\u5272\u6210\u7f51\u683c\uff08cells\uff09\uff0c\u6bcf\u4e2a\u7f51\u683c\u5bf9\u5e94\u4e00\u4e2a\u7279\u5f81\u70b9\u3002\u53e6\u5916\uff0c\u4e3a\u907f\u514d\u7f51\u683c\u4ea4\u754c\u533a\u57df\u7684\u504f\u5dee\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u50cf\u7d20\u70b9\u5230\u76f8\u90bb\u7f51\u683c\u4e2d\u7684\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\u3002\u8fd9\u5c31\u662f Steven Worley \u7684\u8bba\u6587\u4e2d\u7684\u4e3b\u8981\u601d\u60f3\u3002\u6700\u540e\uff0c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u53ea\u9700\u8981\u8ba1\u7b97\u5230\u4e5d\u4e2a\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\uff1a\u4ed6\u6240\u5728\u7684\u7f51\u683c\u7684\u7279\u5f81\u70b9\u548c\u76f8\u90bb\u7684\u516b\u4e2a\u7f51\u683c\u7684\u7279\u5f81\u70b9\u3002\u6211\u4eec\u5df2\u7ecf\u5728\u56fe\u6848\uff0c\u968f\u673a\u548c\u566a\u58f0\u8fd9\u4e9b\u7ae0\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u628a\u7a7a\u95f4\u5206\u5272\u6210\u7f51\u683c\uff0c\u5e0c\u671b\u4f60\u5df2\u7ecf\u719f\u6089\u8fd9\u9879\u6280\u672f\u3002</p> <pre><code>    // Scale\n    st *= 3.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n</code></pre> <p>\u90a3\u4e48\uff0c\u8ba1\u5212\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5c06\u4f7f\u7528\u7f51\u683c\u5750\u6807\uff08\u5b58\u50a8\u5728\u6574\u6570\u5750\u6807 <code>i_st</code> \u4e2d\uff09\u6765\u6784\u9020\u7279\u5f81\u70b9\u7684\u968f\u673a\u4f4d\u7f6e\u3002<code>random2f</code> \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a <code>vec2</code> \u7c7b\u578b\u53c2\u6570\uff0c\u8fd4\u56de\u7ed9\u6211\u4eec\u4e00\u4e2a <code>vec2</code> \u7c7b\u578b\u7684\u968f\u673a\u4f4d\u7f6e\u3002\u6240\u4ee5\uff0c\u5728\u6bcf\u4e2a\u7f51\u683c\u5185\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7279\u5f81\u70b9\u5728\u968f\u673a\u4f4d\u7f6e\u4e0a\u3002</p> <pre><code>    vec2 point = random2(i_st);\n</code></pre> <p>\u7f51\u683c\u5185\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\uff08\u5b58\u50a8\u5728\u6d6e\u70b9\u5750\u6807 <code>f_st</code> \u4e2d\uff09\u90fd\u4f1a\u8ba1\u7b97\u5b83\u5230\u90a3\u4e2a\u968f\u673a\u70b9\u7684\u8ddd\u79bb\u3002</p> <pre><code>    vec2 diff = point - f_st;\n    float dist = length(diff);\n</code></pre> <p>\u7ed3\u679c\u770b\u8d77\u6765\u5c31\u50cf\u8fd9\u6837\uff1a</p> <p></p> <p>\u6211\u4eec\u8fd8\u9700\u8981\u8ba1\u7b97\u50cf\u7d20\u70b9\u5230\u76f8\u90bb\u7f51\u683c\u4e2d\u968f\u673a\u70b9\u7684\u8ddd\u79bb\uff0c\u800c\u4e0d\u53ea\u662f\u5f53\u524d\u7684\u7f51\u683c\u3002\u6211\u4eec\u9700\u8981 \u904d\u5386 \u6240\u6709\u76f8\u90bb\u7f51\u683c\u3002\u4e0d\u662f\u6240\u6709\u7f51\u683c\uff0c\u4ec5\u4ec5\u662f\u90a3\u4e9b\u548c\u5f53\u524d\u7f51\u683c\u76f8\u90bb\u7684\u7f51\u683c\u3002\u4ece\u7f51\u683c\u5750\u6807\u6765\u8bf4\uff0c\u5c31\u662f <code>x</code> \u5750\u6807\u4ece <code>-1</code> \uff08\u5de6\uff09\u5230 <code>1</code> \uff08\u53f3\uff09\uff0c <code>y</code> \u5750\u6807\u4ece <code>-1</code> \uff08\u4e0b\uff09\u5230 <code>1</code> \uff08\u4e0a\uff09\u3002\u4e00\u4e2a 9 \u4e2a\u7f51\u683c\u7684 3x3 \u533a\u57df\u53ef\u4ee5\u7528\u4e24\u4e2a <code>for</code> \u5faa\u73af\u904d\u5386\uff1a</p> <pre><code>for (int y= -1; y &lt;= 1; y++) {\n    for (int x= -1; x &lt;= 1; x++) {\n        // Neighbor place in the grid\n        vec2 neighbor = vec2(float(x),float(y));\n        ...\n    }\n}\n</code></pre> <p></p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u53cc <code>for</code> \u5faa\u73af\u4e2d\u8ba1\u7b97\u76f8\u90bb\u7f51\u683c\u4e2d\u968f\u673a\u70b9\u7684\u4f4d\u7f6e\uff0c\u53ea\u9700\u8981\u52a0\u4e0a\u76f8\u90bb\u7f51\u683c\u5bf9\u5f53\u524d\u7f51\u683c\u7684\u504f\u79fb\u91cf\u3002</p> <pre><code>        ...\n        // Random position from current + neighbor place in the grid\n        vec2 point = random2(i_st + neighbor);\n        ...\n</code></pre> <p>\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u662f\u8ba1\u7b97\u50cf\u7d20\u70b9\u5230\u90a3\u4e2a\u968f\u673a\u70b9\u7684\u8ddd\u79bb\uff0c\u5e76\u628a\u6700\u8fd1\u7684\u8ddd\u79bb\u5b58\u5230\u53d8\u91cf <code>m_dist</code>\uff08minimum distance\uff09\u91cc\u9762.</p> <pre><code>        ...\n        vec2 diff = neighbor + point - f_st;\n\n        // Distance to the point\n        float dist = length(diff);\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n        ...\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6e90\u81ea\u8fd9\u7bc7 Inigo's Quilez \u7684\u6587\u7ae0\uff0c\u4ed6\u5199\u9053\uff1a</p> <p>\u201c\u53ef\u80fd\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6709\u4e00\u4e2a\u5f88\u6f02\u4eae\u7684\u6280\u5de7\u3002\u591a\u6570\u5b9e\u73b0\u90fd\u5b58\u5728\u7cbe\u5ea6\u95ee\u9898\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u5728\u201c\u57df\u201d\u7a7a\u95f4\uff08\u5982\u201c\u4e16\u754c\u201d\u6216\u201c\u5bf9\u8c61\u201d\u7a7a\u95f4\uff09\u5185\u4ea7\u751f\u968f\u673a\u70b9\uff0c\u8fd9\u53ef\u80fd\u662f\u91cc\u539f\u70b9\u4efb\u610f\u8fdc\u7684\u3002\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u9ad8\u7cbe\u5ea6\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6216\u66f4\u806a\u660e\u4e9b\u3002\u6211\u7684\u5b9e\u73b0\u4e0d\u662f\u5728\u201c\u57df\u201d\u7a7a\u95f4\uff08\u5982\u201c\u4e16\u754c\u201d\u6216\u201c\u5bf9\u8c61\u201d\u7a7a\u95f4\uff09\u5185\u4ea7\u751f\u968f\u673a\u70b9\uff0c\u800c\u662f\u5728\u201c\u7f51\u683c\u201d\u7a7a\u95f4\u5185\uff1a\u4e00\u65e6\u63d0\u53d6\u4e86\u7740\u8272\u70b9\u7684\u6574\u6570\u548c\u5c0f\u6570\u90e8\u5206\uff0c\u6211\u4eec\u5f53\u524d\u7684\u7f51\u683c\u5c31\u786e\u5b9a\u4e86\uff0c\u6211\u4eec\u6240\u5173\u5fc3\u7684\u5c31\u662f\u8fd9\u4e2a\u7f51\u683c\u5468\u56f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u5750\u6807\u7684\u6574\u6570\u90e8\u5206\u653e\u5728\u4e00\u8d77\uff0c\u4ece\u800c\u8282\u7701\u4e86\u8bb8\u591a\u7cbe\u5ea6\u4f4d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e2a\u5e38\u89c4\u7684 voronoi \u5b9e\u73b0\u4e2d\uff0c\u4ece\u7740\u8272\u70b9\u51cf\u53bb\u968f\u673a\u7279\u5f81\u70b9\u65f6\uff0c\u70b9\u5750\u6807\u7684\u6574\u6570\u90e8\u5206\u7b80\u5355\u5730\u6d88\u9664\u6389\u4e86\u3002\u4e0a\u9762\u7684\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u4f1a\u8ba9\u8fd9\u79cd\u6d88\u9664\u53d1\u751f\uff0c\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u628a\u6240\u6709\u7684\u8ba1\u7b97\u79fb\u5230\u201c\u7f51\u683c\u201d\u7a7a\u95f4\u3002\u8fd9\u4e2a\u6280\u5de7\u53ef\u4ee5\u8ba9\u4f60\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff1a \u4f60\u60f3\u8981\u628a voronoi \u7528\u5728\u6574\u4e2a\u661f\u7403\u4e0a\u2014\u2014\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u8f93\u5165\u66ff\u6362\u4e3a\u53cc\u7cbe\u5ea6\uff0c\u6267\u884c floor() \u548c fract() \u8ba1\u7b97\uff0c\u5176\u4f59\u7684\u8ba1\u7b97\u4ecd\u4f7f\u7528\u6d6e\u70b9\u6570\uff0c\u7701\u53bb\u4e86\u5c06\u6574\u4e2a\u5b9e\u73b0\u6539\u6210\u53cc\u7cbe\u5ea6\u7684\u6210\u672c\u3002\u5f53\u7136\uff0c\u540c\u6837\u7684\u6280\u5de7\u4e5f\u9002\u7528\u4e8e Perlin Noise \u6a21\u5f0f\uff08\u4f46\u662f\u6211\u8fd8\u6ca1\u6709\u5728\u4efb\u4f55\u5730\u65b9\u770b\u5230\u8fc7\u5b83\u7684\u5b9e\u73b0\u6216\u8bb0\u5f55\uff09\u3002\u201d</p> <p>\u7b80\u8981\u91cd\u8ff0\u4e00\u904d\uff1a\u6211\u4eec\u628a\u7a7a\u95f4\u5206\u5272\u6210\u7f51\u683c\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5230\u5b83\u6240\u5728\u7f51\u683c\u4e2d\u7684\u90a3\u4e2a\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\uff0c\u548c\u5b83\u5230\u76f8\u90bb\u7684\u516b\u4e2a\u7f51\u683c\u4e2d\u7684\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u8ddd\u79bb\u573a\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// Author: @patriciogv\n// Title: CellularNoise\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n    vec3 color = vec3(.0);\n\n    // Scale\n    st *= 3.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimum distance\n\n    for (int y= -1; y &lt;= 1; y++) {\n        for (int x= -1; x &lt;= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_st + neighbor);\n\n            // Animate the point\n            point = 0.5 + 0.5*sin(u_time + 6.2831*point);\n\n            // Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    // Draw cell center\n    color += 1.-step(.02, m_dist);\n\n    // Draw grid\n    color.r += step(.98, f_st.x) + step(.98, f_st.y);\n\n    // Show isolines\n    // color -= step(.7,abs(sin(27.0*m_dist)))*.5;\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u8fdb\u4e00\u6b65\u63a2\u7d22:</p> <ul> <li>\u7f29\u653e\u7a7a\u95f4\u3002</li> <li>\u4f60\u6709\u5176\u5b83\u529e\u6cd5\u8ba9\u90a3\u4e9b\u7279\u5f81\u70b9\u52a8\u8d77\u6765\u5417\uff1f</li> <li>\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5165\u4e00\u4e2a\u9f20\u6807\u4f4d\u7f6e\u4f5c\u4e3a\u5176\u4e2d\u4e00\u4e2a\u7279\u5f81\u70b9\u600e\u4e48\u529e\uff1f</li> <li>\u6709\u6ca1\u6709\u5176\u5b83\u529e\u6cd5\u6784\u9020\u8fd9\u4e2a\u8ddd\u79bb\u573a\uff0c\u9664\u4e86 <code>m_dist = min(m_dist, dist);</code> \u4e4b\u5916\uff1f</li> <li>\u7528\u8fd9\u4e2a\u8ddd\u79bb\u573a\u4f60\u53ef\u4ee5\u521b\u9020\u51fa\u4ec0\u4e48\u6709\u610f\u601d\u7684\u56fe\u6848\uff1f</li> </ul> <p>\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u4ece\u7279\u5f81\u70b9\u800c\u975e\u50cf\u7d20\u70b9\u7684\u89d2\u5ea6\u7406\u89e3\u3002\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a\u6bcf\u4e2a\u7279\u5f81\u70b9\u5411\u5916\u6269\u5f20\u751f\u957f\uff0c\u76f4\u5230\u5b83\u78b0\u5230\u5176\u5b83\u6269\u5f20\u7684\u533a\u57df\u3002\u8fd9\u53cd\u6620\u4e86\u81ea\u7136\u754c\u7684\u751f\u957f\u89c4\u5219\u3002\u751f\u547d\u7684\u5f62\u6001\u662f\u7531\u5185\u90e8\u6269\u5f20\u3001\u751f\u957f\u7684\u529b\u91cf\u548c\u9650\u5236\u6027\u7684\u5916\u90e8\u529b\u91cf\u5171\u540c\u51b3\u5b9a\u7684\u3002\u6a21\u62df\u8fd9\u79cd\u884c\u4e3a\u7684\u7b97\u6cd5\u4ee5 Georgy Voronoi \u547d\u540d\u3002</p> <p></p>"},{"location":"Frontend/shader/12/README-ch/#voronoi","title":"Voronoi \u7b97\u6cd5","text":"<p>\u7528\u7f51\u683c\u566a\u58f0\u6784\u9020 Voronoi \u56fe\u8fdc\u6ca1\u6709\u770b\u4e0a\u53bb\u7684\u90a3\u4e48\u96be\u3002\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u4e9b\u5173\u4e8e\u6700\u8fd1\u7684\u7279\u5f81\u70b9\u7684\u989d\u5916\u4fe1\u606f\u3002\u6211\u4eec\u5c06\u8981\u7528\u5230\u4e00\u4e2a\u53eb <code>m_point</code> \u7684 <code>vec2</code> \u7c7b\u578b\u53d8\u91cf\u5b58\u50a8\u50cf\u7d20\u70b9\u5230\u6700\u8fd1\u7684\u7279\u5f81\u70b9\u7684\u5411\u91cf\uff0c\u800c\u4e0d\u53ea\u662f\u8ddd\u79bb\u3002</p> <pre><code>    ...\n    if( dist &lt; m_dist ) {\n        m_dist = dist;\n        m_point = point;\n    }\n    ...\n</code></pre> <p>\u6ce8\u610f\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4e0d\u518d\u4f7f\u7528 <code>min</code> \u6765\u8ba1\u7b97\u6700\u8fd1\u8ddd\u79bb\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u666e\u901a\u7684 <code>if</code> \u8bed\u53e5\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5f53\u4e00\u4e2a\u65b0\u7684\u66f4\u8fd1\u7684\u7279\u5f81\u70b9\u51fa\u73b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4fdd\u5b58\u5b83\u7684\u4f4d\u7f6e\uff0832 \u884c\u81f3 37\u884c\uff09\u3002</p> <pre><code>// Author: @patriciogv\n// Title: 4 cells voronoi\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec3 color = vec3(.0);\n\n    // Cell positions\n    vec2 point[5];\n    point[0] = vec2(0.83,0.75);\n    point[1] = vec2(0.60,0.07);\n    point[2] = vec2(0.28,0.64);\n    point[3] =  vec2(0.31,0.26);\n    point[4] = u_mouse/u_resolution;\n\n    float m_dist = 1.;  // minimum distance\n    vec2 m_point;        // minimum position\n\n    // Iterate through the points positions\n    for (int i = 0; i &lt; 5; i++) {\n        float dist = distance(st, point[i]);\n        if ( dist &lt; m_dist ) {\n            // Keep the closer distance\n            m_dist = dist;\n\n            // Kepp the position of the closer point\n            m_point = point[i];\n        }\n    }\n\n    // Add distance field to closest point center\n    color += m_dist*2.;\n\n    // tint acording the closest point position\n    color.rg = m_point;\n\n    // Show isolines\n    color -= abs(sin(80.0*m_dist))*0.07;\n\n    // Draw point center\n    color += 1.-step(.02, m_dist);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p>\u6ce8\u610f\u90a3\u4e2a\u79fb\u52a8\u7684\uff08\u9f20\u6807\u4f4d\u7f6e\u4e0b\u9762\u90a3\u4e2a\uff09\u7ec6\u80de\u7684\u989c\u8272\u662f\u5982\u4f55\u6839\u636e\u5b83\u7684\u4f4d\u7f6e\u800c\u6539\u53d8\u7684\u3002\u90a3\u662f\u56e0\u4e3a\u5b83\u7684\u989c\u8272\u7531\u6700\u8fd1\u7279\u5f81\u70b9\u51b3\u5b9a\u3002</p> <p>\u5c31\u50cf\u6211\u4eec\u4e4b\u524d\u6240\u505a\u7684\u90a3\u6837\uff0c\u73b0\u5728\u662f\u6269\u5927\u89c4\u6a21\u7684\u65f6\u5019\uff0c\u8f6c\u800c\u4f7f\u7528 Steven Worley \u7684\u8bba\u6587\u4e2d\u7684\u65b9\u6cd5\u3002\u8bd5\u7740\u81ea\u5df1\u5b9e\u73b0\u5b83\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u4e0b\u9762\u7684\u793a\u4f8b\u6765\u83b7\u53d6\u5e2e\u52a9\u3002\u6ce8\u610f Steven Worley \u7684\u539f\u59cb\u65b9\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u683c\u7684\u7279\u5f81\u70b9\u6570\u662f\u53ef\u53d8\u7684\uff0c\u5bf9\u5927\u591a\u6570\u7f51\u683c\u6765\u8bf4\u4e0d\u6b62\u4e00\u4e2a\u3002\u5728\u4ed6\u7684 C \u8bed\u8a00\u5b9e\u73b0\u4e2d\uff0c\u8fd9\u662f\u7528\u6765\u63d0\u65e9\u9000\u51fa\u6765\u52a0\u901f\u5faa\u73af\u3002GLSL \u5faa\u73af\u4e0d\u5141\u8bb8\u52a8\u6001\u7684\u8fed\u4ee3\u6b21\u6570\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u66f4\u5e0c\u671b\u4e00\u4e2a\u7f51\u683c\u5bf9\u5e94\u4e00\u4e2a\u7279\u5f81\u70b9\u3002</p> <p></p> <p>\u4e00\u65e6\u4f60\u5f04\u6e05\u695a\u4e86\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u60f3\u60f3\u5b83\u6709\u4ec0\u4e48\u6709\u8da3\u3001\u6709\u521b\u610f\u7684\u7528\u9014\u3002</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Frontend/shader/12/README-ch/#voronoi_1","title":"\u4f18\u5316 Voronoi","text":"<p>\u5728 2011 \u5e74, Stefan Gustavson \u4f18\u5316\u4e86 Steven Worley \u7684\u7b97\u6cd5\uff0c\u4ec5\u4ec5\u5bf9\u4e00\u4e2a 2x2 \u7684\u77e9\u9635\u4f5c\u904d\u5386\uff08\u800c\u4e0d\u662f 3x3 \u7684\u77e9\u9635\uff09\u3002\u8fd9\u663e\u8457\u5730\u51cf\u5c11\u4e86\u5de5\u4f5c\u91cf\uff0c\u4f46\u662f\u4f1a\u5728\u7f51\u683c\u8fb9\u7f18\u5236\u9020\u4eba\u5de5\u75d5\u8ff9\u3002\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002</p> <p>Later in 2012 Inigo Quilez wrote an article on how to make precise Voronoi borders.</p> <p></p> <p>Inigo \u5728 Voronoi \u4e0a\u7684\u5b9e\u9a8c\u5e76\u6ca1\u6709\u5c31\u6b64\u505c\u6b62\u30022014 \u5e74\uff0c\u4ed6\u5199\u4e86\u4e00\u7bc7\u975e\u5e38\u6f02\u4eae\u7684\u6587\u7ae0\uff0c\u63d0\u51fa\u4e00\u79cd\u4ed6\u79f0\u4f5c\u4e3a voro-noise \u7684\u566a\u58f0\uff0c\u53ef\u4ee5\u8ba9\u5e38\u89c4\u566a\u58f0\u548c voronoi \u9010\u6e10\u5730\u878d\u5408\u3002\u7528\u4ed6\u7684\u8bdd\u8bf4\uff1a</p> <p>\u201c\u5c3d\u7ba1\u6709\u8fd9\u6837\u7684\u76f8\u4f3c\u4e4b\u5904\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u4e24\u79cd\u6a21\u5f0f\u4e2d\u7f51\u683c\u7684\u4f7f\u7528\u65b9\u5f0f\u90fd\u662f\u4e0d\u540c\u7684\u3002\u566a\u58f0\u4f1a\u5185\u63d2\u6216\u5e73\u5747\u968f\u673a\u503c\uff08\u5982\u503c\u566a\u58f0\uff09\uff0c\u800c Voronoi \u662f\u8ba1\u7b97\u5230\u6700\u8fd1\u7279\u5f81\u70b9\u7684\u8ddd\u79bb\u3002\u5e73\u6ed1\u53cc\u7ebf\u6027\u63d2\u503c\u548c\u6700\u5c0f\u503c\u8bc4\u4f30\u662f\u4e24\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6216\u8005\u2026\u2026\u5b83\u4eec\u662f\u5426\u80fd\u7528\u66f4\u5e7f\u4e49\u7684\u65b9\u6cd5\u7ec4\u5408\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u566a\u58f0\u548c Voronoi \u6a21\u5f0f\u90fd\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u79cd\u66f4\u4e00\u822c\u7684\u4ee5\u7f51\u683c\u4e3a\u57fa\u7840\u7684\u6a21\u5f0f\u751f\u6210\u5668\uff1f\u201d</p> <p></p> <p>\u73b0\u5728\uff0c\u662f\u65f6\u5019\u4ed4\u7ec6\u89c2\u5bdf\u4e8b\u7269\uff0c\u53bb\u63a5\u53d7\u81ea\u7136\u7684\u542f\u53d1\uff0c\u5e76\u7528\u8fd9\u9879\u6280\u672f\u53d1\u73b0\u4f60\u81ea\u5df1\u7684\u98ce\u666f\uff01</p> <p></p>"},{"location":"Frontend/shader/12/TITLE/","title":"TITLE","text":"<p>Cellular Noise</p>"},{"location":"Frontend/shader/12/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/12/tmp/#cellular-noise","title":"Cellular Noise","text":"<p>In 1996, sixteen years after Perlin's original Noise and five years before his Simplex Noise, Steven Worley wrote a paper called  \u201cA Cellular Texture Basis Function\u201d. In it, he describes a procedural texturing technique now extensively used by the graphics community.</p> <p>To understand the principles behind it we need to start thinking in terms of iterations. Probably you know what that means: yes, start using <code>for</code> loops. There is only one catch with <code>for</code> loops in GLSL: the number we are checking against must be a constant (<code>const</code>). So, no dynamic loops - the number of iterations must be fixed.</p> <p>Let's take a look at an example.</p>"},{"location":"Frontend/shader/12/tmp/#points-for-a-distance-field","title":"Points for a distance field","text":"<p>Cellular Noise is based on distance fields, the distance to the closest one of a set of feature points. Let's say we want to make a distance field of 4 points. What do we need to do? Well, for each pixel we want to calculate the distance to the closest point. That means that we need to iterate through all the points, compute their distances to the current pixel and store the value for the one that is closest.</p> <pre><code>    float min_dist = 100.; // A variable to store the closest distance to a point\n\n    min_dist = min(min_dist, distance(st, point_a));\n    min_dist = min(min_dist, distance(st, point_b));\n    min_dist = min(min_dist, distance(st, point_c));\n    min_dist = min(min_dist, distance(st, point_d));\n</code></pre> <p></p> <p>This is not very elegant, but it does the trick. Now let's re-implement it using an array and a <code>for</code> loop.</p> <pre><code>    float m_dist = 100.;  // minimum distance\n    for (int i = 0; i &lt; TOTAL_POINTS; i++) {\n        float dist = distance(st, points[i]);\n        m_dist = min(m_dist, dist);\n    }\n</code></pre> <p>Note how we use a <code>for</code> loop to iterate through an array of points and keep track of the minimum distance using a <code>min()</code> function. Here's a brief working implementation of this idea:</p> <pre><code>// Author: @patriciogv\n// Title: 4 cells DF\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec3 color = vec3(.0);\n\n    // Cell positions\n    vec2 point[5];\n    point[0] = vec2(0.83,0.75);\n    point[1] = vec2(0.60,0.07);\n    point[2] = vec2(0.28,0.64);\n    point[3] =  vec2(0.31,0.26);\n    point[4] = u_mouse/u_resolution;\n\n    float m_dist = 1.;  // minimum distance\n\n    // Iterate through the points positions\n    for (int i = 0; i &lt; 5; i++) {\n        float dist = distance(st, point[i]);\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n    }\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    // Show isolines\n    // color -= step(.7,abs(sin(50.0*m_dist)))*.3;\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>In the above code, one of the points is assigned to the mouse position. Play with it so you can get an intuitive idea of how this code behaves. Then try this:</p> <ul> <li>How can you animate the rest of the points?</li> <li>After reading the chapter about shapes, imagine interesting ways to use this distance field!</li> <li>What if you want to add more points to this distance field? What if we want to dynamically add/subtract points?</li> </ul>"},{"location":"Frontend/shader/12/tmp/#tiling-and-iteration","title":"Tiling and iteration","text":"<p>You probably notice that <code>for</code> loops and arrays are not very good friends with GLSL. Like we said before, loops don't accept dynamic limits on their exit condition. Also, iterating through a lot of instances reduces the performance of your shader significantly. That means we can't use this direct approach for large amounts of points. We need to find another strategy, one that takes advantage of the parallel processing architecture of the GPU.</p> <p></p> <p>One way to approach this problem is to divide the space into tiles. Not every pixel needs to check the distance to every single point, right? Given the fact that each pixel runs in its own thread, we can subdivide the space into cells, each one with one unique point to watch. Also, to avoid aberrations at the edges between cells we need to check for the distances to the points on the neighboring cells. That's the main brillant idea of Steven Worley's paper. At the end, each pixel needs to check only nine positions: their own cell's point and the points in the 8 cells around it. We already subdivide the space into cells in the chapters about: patterns, random and noise, so hopefully you are familiar with this technique by now.</p> <pre><code>    // Scale\n    st *= 3.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n</code></pre> <p>So, what's the plan? We will use the tile coordinates (stored in the integer coordinate, <code>i_st</code>) to construct a random position of a point. The <code>random2f</code> function we will use receives a <code>vec2</code> and gives us a <code>vec2</code> with a random position. So, for each tile we will have one feature point in a random position within the tile.</p> <pre><code>    vec2 point = random2(i_st);\n</code></pre> <p>Each pixel inside that tile (stored in the float coordinate, <code>f_st</code>) will check their distance to that random point.</p> <pre><code>    vec2 diff = point - f_st;\n    float dist = length(diff);\n</code></pre> <p>The result will look like this:</p> <p></p> <p>We still need to check the distances to the points in the surrounding tiles, not just the one in the current tile. For that we need to iterate through the neighbor tiles. Not all tiles, just the ones immediately around the current one. That means from <code>-1</code> (left) to <code>1</code> (right) tile in <code>x</code> axis and <code>-1</code> (bottom) to <code>1</code> (top) in <code>y</code> axis. A 3x3 region of 9 tiles can be iterated through using a double <code>for</code> loop like this one:</p> <pre><code>for (int y= -1; y &lt;= 1; y++) {\n    for (int x= -1; x &lt;= 1; x++) {\n        // Neighbor place in the grid\n        vec2 neighbor = vec2(float(x),float(y));\n        ...\n    }\n}\n</code></pre> <p></p> <p>Now, we can compute the position of the points on each one of the neighbors in our double <code>for</code> loop by adding the neighbor tile offset to the current tile coordinate.</p> <pre><code>        ...\n        // Random position from current + neighbor place in the grid\n        vec2 point = random2(i_st + neighbor);\n        ...\n</code></pre> <p>The rest is all about calculating the distance to that point and storing the closest one in a variable called <code>m_dist</code> (for minimum distance).</p> <pre><code>        ...\n        vec2 diff = neighbor + point - f_st;\n\n        // Distance to the point\n        float dist = length(diff);\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n        ...\n</code></pre> <p>The above code is inspired by this article by Inigo's Quilez where he said:</p> <p>\"... it might be worth noting that there's a nice trick in this code above. Most implementations out there suffer from precision issues, because they generate their random points in \"domain\" space (like \"world\" or \"object\" space), which can be arbitrarily far from the origin. One can solve the issue moving all the code to higher precision data types, or by being a bit clever. My implementation does not generate the points in \"domain\" space, but in \"cell\" space: once the integer and fractional parts of the shading point are extracted and therefore the cell in which we are working identified, all we care about is what happens around this cell, meaning we can drop all the integer part of our coordinates away all together, saving many precision bits. In fact, in a regular voronoi implementation the integer parts of the point coordinates simply cancel out when the random per cell feature points are subtracted from the shading point. In the implementation above, we don't even let that cancelation happen, cause we are moving all the computations to \"cell\" space. This trick also allows one to handle the case where you want to voronoi-shade a whole planet - one could simply replace the input to be double precision, perform the floor() and fract() computations, and go floating point with the rest of the computations without paying the cost of changing the whole implementation to double precision. Of course, same trick applies to Perlin Noise patterns (but i've never seen it implemented nor documented anywhere).\"</p> <p>Recapping: we subdivide the space into tiles; each pixel will calculate the distance to the point in their own tile and the surrounding 8 tiles; store the closest distance. The result is a distance field that looks like the following example:</p> <pre><code>// Author: @patriciogv\n// Title: CellularNoise\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n    vec3 color = vec3(.0);\n\n    // Scale\n    st *= 3.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimum distance\n\n    for (int y= -1; y &lt;= 1; y++) {\n        for (int x= -1; x &lt;= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_st + neighbor);\n\n            // Animate the point\n            point = 0.5 + 0.5*sin(u_time + 6.2831*point);\n\n            // Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    // Draw cell center\n    color += 1.-step(.02, m_dist);\n\n    // Draw grid\n    color.r += step(.98, f_st.x) + step(.98, f_st.y);\n\n    // Show isolines\n    // color -= step(.7,abs(sin(27.0*m_dist)))*.5;\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Explore this further by:</p> <ul> <li>Scaling the space by different values.</li> <li>Can you think of other ways to animate the points?</li> <li>What if we want to compute an extra point with the mouse position?</li> <li>What other ways of constructing this distance field can you imagine, besides <code>m_dist = min(m_dist, dist);</code>?</li> <li>What interesting patterns can you make with this distance field?</li> </ul> <p>This algorithm can also be interpreted from the perspective of the points and not the pixels. In that case it can be described as: each point grows until it finds the growing area from another point. This mirrors some of the growth rules in nature. Living forms are shaped by this tension between an inner force to expand and grow, and limitations by outside forces. The classic algorithm that simulates this behavior is named after Georgy Voronoi.</p> <p></p>"},{"location":"Frontend/shader/12/tmp/#voronoi-algorithm","title":"Voronoi Algorithm","text":"<p>Constructing Voronoi diagrams from cellular noise is less hard than what it might seem. We just need to keep some extra information about the precise point which is closest to the pixel. For that we are going to use a <code>vec2</code> called <code>m_point</code>. By storing the vector direction to the center of the closest point, instead of just the distance, we will be \"keeping\" a \"unique\" identifier of that point.</p> <pre><code>    ...\n    if( dist &lt; m_dist ) {\n        m_dist = dist;\n        m_point = point;\n    }\n    ...\n</code></pre> <p>Note that in the following code that we are no longer using <code>min</code> to calculate the closest distance, but a regular <code>if</code> statement. Why? Because we actually want to do something more every time a new closer point appears, namely store its position (lines 32 to 37).</p> <pre><code>// Author: @patriciogv\n// Title: 4 cells voronoi\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec3 color = vec3(.0);\n\n    // Cell positions\n    vec2 point[5];\n    point[0] = vec2(0.83,0.75);\n    point[1] = vec2(0.60,0.07);\n    point[2] = vec2(0.28,0.64);\n    point[3] =  vec2(0.31,0.26);\n    point[4] = u_mouse/u_resolution;\n\n    float m_dist = 1.;  // minimum distance\n    vec2 m_point;        // minimum position\n\n    // Iterate through the points positions\n    for (int i = 0; i &lt; 5; i++) {\n        float dist = distance(st, point[i]);\n        if ( dist &lt; m_dist ) {\n            // Keep the closer distance\n            m_dist = dist;\n\n            // Kepp the position of the closer point\n            m_point = point[i];\n        }\n    }\n\n    // Add distance field to closest point center\n    color += m_dist*2.;\n\n    // tint acording the closest point position\n    color.rg = m_point;\n\n    // Show isolines\n    color -= abs(sin(80.0*m_dist))*0.07;\n\n    // Draw point center\n    color += 1.-step(.02, m_dist);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <p></p> <p>Note how the color of the moving cell (bound to the mouse position) changes color according to its position. That's because the color is assigned using the value (position) of the closest point.</p> <p>Like we did before, now is the time to scale this up, switching to Steven Worley's paper's approach. Try implementing it yourself. You can use the help of the following example by clicking on it. Note that Steven Worley's original approach uses a variable number of feature points for each tile, more than one in most tiles. In his software implementation in C, this is used to speed up the loop by making early exits. GLSL loops don't allow variable number of iterations, so you probably want to stick to one feature point per tile.</p> <p></p> <p>Once you figure out this algorithm, think of interesting and creative uses for it.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Frontend/shader/12/tmp/#improving-voronoi","title":"Improving Voronoi","text":"<p>In 2011, Stefan Gustavson optimized Steven Worley's algorithm to GPU by only iterating through a 2x2 matrix instead of 3x3. This reduces the amount of work significantly, but it can create artifacts in the form of discontinuities at the edges between the tiles. Take a look to the following examples.</p> <p>Later in 2012 Inigo Quilez wrote an article on how to make precise Voronoi borders.</p> <p></p> <p>Inigo's experiments with Voronoi didn't stop there. In 2014 he wrote this nice article about what he calls voro-noise, a function that allows a gradual blend between regular noise and voronoi. In his words:</p> <p>\"Despite this similarity, the fact is that the way the grid is used in both patterns is different. Noise interpolates/averages random values (as in value noise) or gradients (as in gradient noise), while Voronoi computes the distance to the closest feature point. Now, smooth-bilinear interpolation and minimum evaluation are two very different operations, or... are they? Can they perhaps be combined in a more general metric? If that was so, then both Noise and Voronoi patterns could be seen as particular cases of a more general grid-based pattern generator?\"</p> <p></p> <p>Now it's time for you to look closely at things, be inspired by nature and find your own take on this technique!</p> <p></p>"},{"location":"Frontend/shader/12/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/13/","title":"Index","text":""},{"location":"Frontend/shader/13/#fractal-brownian-motion","title":"Fractal Brownian Motion","text":"<p>Noise tends to mean different things to different people. Musicians will think of it in terms of disturbing sounds, communicators as interference and astrophysicists as cosmic microwave background radiation. These concepts bring us back to the physical reasons behind randomness in the world around us. However, let's start with something more fundamental, and more simple: waves and their properties. A wave is a fluctuation over time of some property. Audio waves are fluctuations in air pressure, electromagnetical waves are fluctuations in electrical and magnetic fields. Two important characteristics of a wave are its amplitude and frequency. The equation for a simple linear (one-dimensional) wave looks like this:</p> <ul> <li>Try changing the values of the frequency and amplitude to understand how they behave.</li> <li>Using shaping functions, try changing the amplitude over time.</li> <li>Using shaping functions, try changing the frequency over time.</li> </ul> <p>By doing the last two exercises you have managed to \"modulate\" a sine wave, and you just created AM (amplitude modulated) and FM (frequency modulated) waves. Congratulations!</p> <p>Another interesting property of waves is their ability to add up, which is formally called superposition. Comment/uncomment and tweak the following lines. Pay attention to how the overall appearance changes as we add waves of different amplitudes and frequencies together.</p> <ul> <li>Experiment by changing the frequency and amplitude for the additional waves.</li> <li>Is it possible to make two waves cancel each other out? What will that look like?</li> <li>Is it possible to add waves in such a way that they will amplify each other?</li> </ul> <p>In music, each note is associated with a specific frequency. The frequencies for these notes follow a pattern which we call a scale, where a doubling or halving of the frequency corresponds to a jump of one octave.</p> <p>Now, let's use Perlin noise instead of a sine wave! Perlin noise in its basic form has the same general look and feel as a sine wave. Its amplitude and frequency vary somewhat, but the amplitude remains reasonably consistent, and the frequency is restricted to a fairly narrow range around a center frequency. It's not as regular as a sine wave, though, and it's easier to create an appearance of randomness by summing up several scaled versions of noise. It is possible to make a sum of sine waves appear random as well, but it takes many different waves to hide their periodic, regular nature.</p> <p>By adding different iterations of noise (octaves), where we successively increment the frequencies in regular steps (lacunarity) and decrease the amplitude (gain) of the noise we can obtain a finer granularity in the noise and get more fine detail. This technique is called \"fractal Brownian Motion\" (fBM), or simply \"fractal noise\", and in its simplest form it can be created by the following code:</p> <ul> <li>Progressively change the number of octaves to iterate from 1 to 2, 4, 8 and 10. See what happens.</li> <li>When you have more than 4 octaves, try changing the lacunarity value.</li> <li>Also with &gt;4 octaves, change the gain value and see what happens.</li> </ul> <p>Note how with each additional octave, the curve seems to get more detail. Also note the self-similarity while more octaves are added. If you zoom in on the curve, a smaller part looks about the same as the whole thing, and each section looks more or less the same as any other section. This is an important property of mathematical fractals, and we are simulating that property in our loop. We are not creating a true fractal, because we stop the summation after a few iterations, but theoretically speaking, we would get a true mathematical fractal if we allowed the loop to continue forever and add an infinite number of noise components. In computer graphics, we always have a limit to the smallest details we can resolve, for example when objects become smaller than a pixel, so there is no need to make infinite sums to create the appearance of a fractal. A lot of terms may be needed sometimes, but never an infinite number.</p> <p>The following code is an example of how fBm could be implemented in two dimensions to create a fractal-looking pattern:</p> <ul> <li>Reduce the number of octaves by changing the value on line 37</li> <li>Modify the lacunarity of the fBm on line 47</li> <li>Explore by changing the gain on line 48</li> </ul> <p>This technique is commonly used to construct procedural landscapes. The self-similarity of the fBm is perfect for mountains, because the erosion processes that create mountains work in a manner that yields this kind of self-similarity across a large range of scales. If you are interested in this use, you should definitely read this great article by Inigo Quiles about advanced noise.</p> <p></p> <p>Using more or less the same technique, it's also possible to obtain other effects like what is known as turbulence. It's essentially an fBm, but constructed from the absolute value of a signed noise to create sharp valleys in the function.</p> <pre><code>for (int i = 0; i &lt; OCTAVES; i++) {\n    value += amplitude * abs(snoise(st));\n    st *= 2.;\n    amplitude *= .5;\n}\n</code></pre> <p></p> <p>Another member of this family of algorithms is the ridge, where the sharp valleys are turned upside down to create sharp ridges instead:</p> <pre><code>    n = abs(n);     // create creases\n    n = offset - n; // invert so creases are at top\n    n = n * n;      // sharpen creases\n</code></pre> <p></p> <p>Another variant which can create useful variations is to multiply the noise components together instead of adding them. It's also interesting to scale subsequent noise functions with something that depends on the previous terms in the loop. When we do things like that, we are moving away from the strict definition of a fractal and into the relatively unknown field of \"multifractals\". Multifractals are not as strictly defined mathematically, but that doesn't make them less useful for graphics. In fact, multifractal simulations are very common in modern commercial software for terrain generation. For further reading, you could read chapter 16 of the book \"Texturing and Modeling: a Procedural Approach\" (3rd edition), by Kenton Musgrave. Sadly, that book is out of print since a few years back, but you can still find it in libraries and on the second hand market. (There's a PDF version of the 1st edition available for purchase online, but don't buy that - it's a waste of money. It's from 1994, and it doesn't contain any of the terrain modeling stuff from the 3rd edition.)</p>"},{"location":"Frontend/shader/13/#domain-warping","title":"Domain Warping","text":"<p>Inigo Quiles wrote this other fascinating article about how it's possible to use fBm to warp a space of a fBm. Mind blowing, Right? It's like the dream inside the dream of Inception.</p> <p></p> <p>A less extreme example of this technique is the following code where the wrap is used to produce this clouds-like texture. Note how the self-similarity property is still present in the result.</p> <p>Warping the texture coordinates with noise in this manner can be very useful, a lot of fun, and fiendishly difficult to master. It's a powerful tool, but it takes quite a bit of experience to use it well. A useful tool for this is to displace the coordinates with the derivative (gradient) of the noise. A famous article by Ken Perlin and Fabrice Neyret called \"flow noise\" is based on this idea. Some modern implementations of Perlin noise include a variant that computes both the function and its analytical gradient. If the \"true\" gradient is not available for a procedural function, you can always compute finite differences to approximate it, although this is less accurate and involves more work.</p>"},{"location":"Frontend/shader/13/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/13/README-ch/","title":"13","text":""},{"location":"Frontend/shader/13/README-ch/#fractal-brownian-motion","title":"\u5206\u5f62\u5e03\u6717\u8fd0\u52a8\uff08Fractal Brownian Motion\uff09","text":"<p>\u566a\u58f0\u5bf9\u4e0d\u540c\u7684\u4eba\u6765\u8bf4\u6709\u4e0d\u540c\u7684\u610f\u4e49\u3002\u97f3\u4e50\u5bb6\u628a\u5b83\u5f53\u6210\u4e00\u79cd\u4ee4\u4eba\u4e0d\u5b89\u7684\u58f0\u54cd\uff0c\u901a\u4fe1\u5de5\u7a0b\u5e08\u628a\u5b83\u5f53\u4f5c\u5e72\u6270\u4fe1\u53f7\uff0c\u5929\u4f53\u7269\u7406\u5b66\u5bb6\u628a\u5b83\u770b\u4f5c\u5b87\u5b99\u5fae\u6ce2\u80cc\u666f\u8f90\u5c04\u3002\u8fd9\u4e9b\u6982\u5ff5\u5438\u5f15\u7740\u6211\u4eec\u53bb\u63a2\u7d22\u5904\u5904\u53ef\u89c1\u7684\u968f\u673a\u6027\u7684\u7269\u7406\u539f\u56e0\u3002\u4f46\u662f\uff0c\u8ba9\u6211\u4eec\u4ece\u66f4\u57fa\u7840\uff0c\u4e5f\u66f4\u7b80\u5355\u7684\u5f00\u59cb\uff1a\u6ce2\u548c\u6ce2\u7684\u5c5e\u6027\u3002\u6ce2\u5c31\u662f\u67d0\u4e9b\u5c5e\u6027\u968f\u7740\u65f6\u95f4\u6ce2\u52a8\u53d8\u5316\u3002\u58f0\u6ce2\u662f\u6c14\u538b\u7684\u6ce2\u52a8\uff0c\u7535\u78c1\u6ce2\u662f\u7535\u573a\u548c\u78c1\u573a\u7684\u6ce2\u52a8\u3002\u6ce2\u7684\u4e24\u4e2a\u91cd\u8981\u7279\u5f81\u662f\u632f\u5e45\uff08amplitude\uff09\u548c\u9891\u7387\uff08frequency\uff09\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u7ebf\u6027\u6ce2\uff08\u4e00\u7ef4\uff09\u7684\u65b9\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li>\u8bd5\u7740\u6539\u53d8\u9891\u7387\u548c\u632f\u5e45\u7684\u503c\uff0c\u7406\u89e3\u4ed6\u4eec\u5982\u4f55\u5f71\u54cd\u6ce2\u5f62\u3002</li> <li>\u4f7f\u7528\u9020\u578b\u51fd\u6570\uff0c\u8bd5\u7740\u968f\u65f6\u95f4\u6539\u53d8\u632f\u5e45\u3002</li> <li>\u4f7f\u7528\u9020\u578b\u51fd\u6570\uff0c\u8bd5\u7740\u968f\u65f6\u95f4\u6539\u53d8\u9891\u7387\u3002</li> </ul> <p>\u901a\u8fc7\u505a\u540e\u4e24\u4e2a\u7ec3\u4e60\uff0c\u4f60\u5df2\u7ecf\u77e5\u9053\u600e\u4e48\u201c\u8c03\u8282\u201d\u4e00\u4e2a\u6b63\u5f26\u6ce2\u3002\u606d\u559c\u4f60\uff0c\u4f60\u521a\u521a\u521b\u9020\u4e86\u4e00\u4e2a AM\uff08\u8c03\u5e45\uff09\u548c FM\uff08\u8c03\u9891\uff09\u6ce2\uff01</p> <p>\u6ce2\u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u7279\u6027\u662f\u53ef\u4ee5\u76f8\u52a0\uff0c\u8fd9\u4e00\u7279\u6027\u7684\u6b63\u5f0f\u8bf4\u6cd5\u53eb\u53e0\u52a0\u6027\u3002\u8c03\u4e00\u8c03\u4e0b\u9762\u51e0\u884c\u4ee3\u7801\uff0c\u6ce8\u610f\u6211\u4eec\u52a0\u4e0a\u90a3\u4e9b\u4e0d\u540c\u632f\u5e45\u548c\u9891\u7387\u7684\u6b63\u5f26\u6ce2\u7684\u65f6\u5019\uff0c\u603b\u7684\u6ce2\u5f62\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002</p> <ul> <li>\u8bd5\u8bd5\u6539\u53d8\u52a0\u4e0a\u53bb\u7684\u6ce2\u7684\u632f\u5e45\u548c\u9891\u7387\u3002</li> <li>\u6709\u6ca1\u6709\u53ef\u80fd\u4e24\u4e2a\u6ce2\u6b63\u597d\u76f8\u4e92\u62b5\u6d88\uff1f\u5982\u679c\u662f\u7684\u8bdd\uff0c\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\uff1f</li> <li>\u6709\u6ca1\u6709\u4e00\u79cd\u53e0\u52a0\u6ce2\u7684\u65b9\u6cd5\uff0c\u8ba9\u4ed6\u4eec\u4e92\u76f8\u653e\u5927\uff1f</li> </ul> <p>\u4ece\u97f3\u4e50\u7406\u8bba\u4e0a\u8bf4\uff0c\u6bcf\u4e2a\u97f3\u7b26\u90fd\u548c\u4e00\u4e2a\u7279\u5b9a\u7684\u9891\u7387\u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u97f3\u7b26\u548c\u9891\u7387\u7684\u5173\u7cfb\u9075\u4ece\u4e00\u5b9a\u7684\u6a21\u5f0f\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u97f3\u9636\uff0c\u4e00\u4e2a\u516b\u5ea6\uff08octave\uff09\u5bf9\u5e94\u7740\u9891\u7387\u4e0a\u7684\u52a0\u500d\u6216\u51cf\u534a\u3002</p> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u628a\u6b63\u5f26\u6ce2\u653e\u5728\u4e00\u8fb9\uff0c\u60f3\u60f3 Perlin \u566a\u58f0\uff01Perlin \u566a\u58f0\u7684\u57fa\u672c\u5f62\u5f0f\u770b\u8d77\u6765\u548c\u6b63\u5f26\u6ce2\u6709\u70b9\u76f8\u4f3c\u3002\u5b83\u7684\u632f\u5e45\u548c\u9891\u7387\u6709\u7740\u67d0\u79cd\u53d8\u5316\uff0c\u4f46\u632f\u5e45\u4fdd\u6301\u7740\u5408\u7406\u7684\u8fde\u7eed\u6027\uff0c\u800c\u4e14\u9891\u7387\u88ab\u9650\u5236\u5728\u4e00\u4e2a\u8ddd\u79bb\u4e2d\u5fc3\u9891\u7387\u5f88\u5c0f\u7684\u8303\u56f4\u5185\u3002\u5c3d\u7ba1\u5b83\u4e0d\u50cf\u6b63\u5f26\u6ce2\u90a3\u6837\u89c4\u5219\uff0c\u5e76\u4e14\u628a\u51e0\u4e2a\u4e0d\u540c\u7f29\u653e\u6bd4\u4f8b\u7684 Perlin \u566a\u58f0\u76f8\u52a0\u66f4\u5bb9\u6613\u5236\u9020\u51fa\u968f\u673a\u5f62\u6001\u3002\u628a\u4e00\u4e9b\u6b63\u5f26\u6ce2\u76f8\u52a0\u4e5f\u662f\u6709\u53ef\u80fd\u5236\u9020\u968f\u673a\u5f62\u6001\u7684\uff0c\u4f46\u90a3\u9700\u8981\u5f88\u591a\u4e0d\u540c\u7684\u6ce2\u53e0\u52a0\u624d\u80fd\u628a\u4ed6\u4eec\u7684\u5929\u751f\u7684\u5468\u671f\u6027\u548c\u89c4\u5219\u6027\u9690\u85cf\u8d77\u6765\u3002</p> <p>\u901a\u8fc7\u5728\u5faa\u73af\uff08\u5faa\u73af\u6b21\u6570\u4e3a octaves\uff0c\u4e00\u6b21\u5faa\u73af\u4e3a\u4e00\u4e2a\u516b\u5ea6\uff09\u4e2d\u53e0\u52a0\u566a\u58f0\uff0c\u5e76\u4ee5\u4e00\u5b9a\u7684\u500d\u6570\uff08lacunarity\uff0c\u95f4\u9699\u5ea6\uff09\u8fde\u7eed\u5347\u9ad8\u9891\u7387\uff0c\u540c\u65f6\u4ee5\u4e00\u5b9a\u7684\u6bd4\u4f8b\uff08gain\uff0c\u589e\u76ca\uff09\u964d\u4f4e \u566a\u58f0 \u7684\u632f\u5e45\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u4f1a\u6709\u66f4\u597d\u7684\u7ec6\u8282\u3002\u8fd9\u9879\u6280\u672f\u53eb\u201c\u5206\u5f62\u5e03\u6717\u8fd0\u52a8\uff08fractal Brownian Motion\uff09\u201d\uff08fBM\uff09\uff0c\u6216\u8005\u201c\u5206\u5f62\u566a\u58f0\uff08fractal noise\uff09\u201d\uff0c\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <ul> <li>\u4ece 1 \u5230 2\uff0c4\uff0c8\uff0c10 \u9010\u6e10\u6539\u53d8 octaves\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</li> <li>\u5f53 octaves \u5927\u4e8e 4 \u65f6\uff0c\u5c1d\u8bd5\u6539\u53d8 lacunarity \u7684\u503c\u3002</li> <li>\u5f53 octaves \u5927\u4e8e 4 \u65f6\uff0c\u6539\u53d8 gain \u7684\u503c\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</li> </ul> <p>\u6ce8\u610f\uff0c\u968f\u7740\u6211\u4eec\u4e00\u4e2a\u516b\u5ea6\u63a5\u4e00\u4e2a\u516b\u5ea6\u5730\u5f80\u4e0a\u53e0\u52a0\uff0c\u66f2\u7ebf\u770b\u8d77\u6765\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u7ec6\u8282\uff0c\u540c\u65f6\uff0c\u81ea\u76f8\u4f3c\u6027\u4e5f\u8d8a\u6765\u8d8a\u660e\u663e\u3002\u5982\u679c\u4f60\u653e\u5927\u770b\u770b\uff0c\u66f2\u7ebf\u7684\u5c40\u90e8\u548c\u6574\u4f53\u770b\u8d77\u6765\u5f88\u76f8\u4f3c\uff0c\u5e76\u4e14\uff0c\u4efb\u9009\u4e24\u6bb5\u4e0d\u540c\u7684\u90e8\u5206\u770b\u8d77\u6765\u4e5f\u591a\u5c11\u6709\u4e9b\u76f8\u4f3c\u3002\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u4e0a\u7684\u5206\u5f62\u7684\u91cd\u8981\u6027\u8d28\uff0c\u6211\u4eec\u5728\u4e0a\u9762\u7684\u5faa\u73af\u4e2d\u6a21\u62df\u4e86\u8fd9\u4e2a\u6027\u8d28\u3002\u6211\u4eec\u4e0d\u662f\u8981\u521b\u9020\u4e00\u4e2a\u771f\u7684\u5206\u5f62\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u51e0\u6b21\u5faa\u73af\u4e4b\u540e\u5c31\u4e0d\u518d\u5f80\u4e0a\u53e0\u52a0\u4e86\uff0c\u4f46\u7406\u8bba\u4e0a\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u4e00\u76f4\u7ee7\u7eed\u8fd9\u4e2a\u5faa\u73af\uff0c\u4e0d\u65ad\u5730\u5f80\u4e0a\u53e0\u52a0\u566a\u58f0\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b66\u610f\u4e49\u4e0a\u7684\u5206\u5f62\u3002\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u9886\u57df\uff0c\u6211\u4eec\u80fd\u5904\u7406\u7684\u7ec6\u8282\u603b\u662f\u6709\u6781\u9650\u7684\uff0c\u6bd4\u5982\u7269\u4f53\u6bd4\u4e00\u4e2a\u50cf\u7d20\u8fd8\u5c0f\u7684\u65f6\u5019\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e0d\u65ad\u5730\u5f80\u4e0a\u53e0\u52a0\u6765\u5236\u9020\u5206\u5f62\u7684\u5f62\u6001\u3002\u6709\u65f6\u5019\u6211\u4eec\u786e\u5b9e\u9700\u8981\u53e0\u52a0\u5f88\u591a\u6b21\uff0c\u4f46\u4e0d\u5fc5\u53e0\u52a0\u65e0\u9650\u6b21\u3002</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u5c31\u662f fBm \u7684\u4e8c\u7ef4\u5b9e\u73b0\uff0c\u751f\u6210\u4e86\u5206\u5f62\u56fe\u6848\uff1a</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i &lt; OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec3 color = vec3(0.0);\n    color += fbm(st*3.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre> <ul> <li>\u5728 37 \u884c\u51cf\u5c0f\u516b\u5ea6\uff08OCTAVES\uff09\u7684\u6570\u91cf</li> <li>\u5728 47 \u884c\u8c03\u8bd5 fBm \u7684\u95f4\u9699\u5ea6\uff08lacumarity\uff09</li> <li>\u5728 47 \u884c\u8c03\u8bd5 fBm \u7684\u589e\u76ca\uff08gain\uff09</li> </ul> <p>\u8fd9\u9879\u6280\u672f\u88ab\u5e7f\u6cdb\u5730\u5e94\u7528\u4e8e\u6784\u9020\u7a0b\u5e8f\u5316\u98ce\u666f\u3002fBm \u7684\u81ea\u76f8\u4f3c\u6027\u80fd\u591f\u5f88\u5b8c\u7f8e\u5730\u6a21\u62df\u5c71\u8109\uff0c\u56e0\u4e3a\u5c71\u8109\u5f62\u6210\u8fc7\u7a0b\u4e2d\u7684\u8150\u8680\u5f62\u6210\u4e86\u8fd9\u79cd\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u7684\u81ea\u76f8\u4f3c\u6027\u3002\u5982\u679c\u4f60\u5bf9\u6b64\u611f\u5174\u8da3\uff0c\u4f60\u4e00\u5b9a\u8981\u53bb\u770b\u770b Inigo Quiles \u8fd9\u7bc7\u5173\u4e8e\u9ad8\u7ea7\u566a\u58f0\u7684\u6587\u7ae0\u3002</p> <p></p> <p>\u4f7f\u7528\u76f8\u540c\u7684\u6280\u672f\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5176\u4ed6\u6548\u679c\uff0c\u6bd4\u5982\u6e4d\u6d41\uff08turbulence\uff09\u6548\u679c\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a fBm\uff0c\u4f46\u662f\u7531\u4e00\u4e2a\u6709\u7b26\u53f7\u566a\u58f0\u7684\u7edd\u5bf9\u503c\u6784\u6210\uff0c\u4ece\u800c\u5728\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u5c16\u9510\u7684\u5c71\u8c37\u3002</p> <pre><code>for (int i = 0; i &lt; OCTAVES; i++) {\n    value += amplitude * abs(snoise(st));\n    st *= 2.;\n    amplitude *= .5;\n}\n</code></pre> <p></p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u5bb6\u65cf\u4e2d\u7684\u53e6\u4e00\u4e2a\u6210\u5458\u662f\u5c71\u810a\uff08ridge\uff09\uff0c\u5c31\u662f\u628a\u51f9\u4e0b\u53bb\u7684\u5c71\u8c37\u7ffb\u4e0a\u6765\uff0c\u4ece\u800c\u5236\u9020\u5c71\u810a\uff1a</p> <pre><code>    n = abs(n);     // create creases\n    n = offset - n; // invert so creases are at top\n    n = n * n;      // sharpen creases\n</code></pre> <p></p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u7684\u53e6\u5916\u4e00\u4e2a\u53d8\u79cd\uff0c\u628a\u566a\u58f0\u5206\u91cf\u4e58\u8d77\u6765\uff08\u800c\u4e0d\u662f\u53e0\u52a0\uff09\uff0c\u53ef\u4ee5\u521b\u9020\u4e00\u4e9b\u5f88\u6709\u7528\u7684\u4e1c\u897f\u3002\u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5\u662f\uff0c\u6839\u636e\u524d\u4e00\u6b21\u5faa\u73af\u4e2d\u7684\u566a\u58f0\u6765\u7f29\u653e\u540e\u7eed\u7684\u566a\u58f0\u3002\u5f53\u6211\u4eec\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u8d70\u51fa\u4e25\u683c\u7684\u5206\u5f62\u5b9a\u4e49\u4e86\uff0c\u8d70\u5165\u4e86\u4e00\u4e2a\u53eb\u201c\u591a\u91cd\u5206\u5f62\u201d\u7684\u672a\u77e5\u9886\u57df\u3002\u591a\u91cd\u5206\u5f62\u867d\u4e0d\u662f\u6309\u6570\u5b66\u65b9\u5f0f\u4e25\u683c\u5b9a\u4e49\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u7684\u7528\u5904\u4f1a\u66f4\u5c11\u4e9b\u3002 \u5b9e\u9645\u4e0a\uff0c\u7528\u591a\u91cd\u5206\u5f62\u6a21\u62df\u751f\u6210\u5730\u5f62\u5728\u5546\u4e1a\u8f6f\u4ef6\u4e2d\u975e\u5e38\u5e38\u89c1\u3002\u8981\u4e86\u89e3\u66f4\u591a\uff0c\u4f60\u53ef\u4ee5\u53bb\u8bfb Kenton Musgrave \u7684\u201cTexturing and Modeling: a Procedural Approach\u201d\uff08\u7b2c\u4e09\u7248\uff09\u7684 16 \u7ae0\u3002\u5f88\u53ef\u60dc\uff0c\u8fd9\u672c\u4e66\u51e0\u5e74\u524d\u5df2\u7ecf\u7edd\u7248\uff0c\u4e0d\u8fc7\u4f60\u8fd8\u53ef\u4ee5\u4ece\u56fe\u4e66\u9986\u548c\u4e8c\u624b\u5e02\u573a\u627e\u5230\u3002\uff08\u7f51\u4e0a\u6709\u5356\u8fd9\u672c\u4e66\u7b2c\u4e00\u7248\u7684 PDF \u7248\uff0c\u4f46\u662f\u522b\u53bb\u4e70\u2014\u2014\u53ea\u662f\u6d6a\u8d39\u94b1\uff0c\u662f 1994 \u5e74\u7684\u7248\u672c\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e09\u7248\u5305\u542b\u7684\u5730\u5f62\u5efa\u6a21\u7684\u90e8\u5206\u3002\uff09</p>"},{"location":"Frontend/shader/13/README-ch/#domain-warping","title":"\u57df\u7fd8\u66f2\uff08Domain Warping\uff09","text":"<p>Inigo Quiles \u5199\u4e86\u53e6\u4e00\u7bc7\u6709\u8da3\u7684\u6587\u7ae0\uff0c\u5173\u4e8e\u5982\u4f55\u7528 fBm \u6765\u626d\u66f2 fBm \u7a7a\u95f4\u3002\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u662f\u5417\uff1f\u8fd9\u5c31\u50cf\u300a\u76d7\u68a6\u7a7a\u95f4\u300b\u91cc\u7684\u68a6\u4e2d\u68a6\u3002</p> <p></p> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u8fd9\u9879\u6280\u672f\u7684\u4e00\u4e2a\u4e0d\u90a3\u4e48\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u7528\u5b83\u751f\u6210\u7c7b\u4f3c\u4e91\u4e00\u6837\u7684\u7eb9\u7406\u3002\u6ce8\u610f\u81ea\u76f8\u4f3c\u6027\u5982\u4f55\u8868\u73b0\u5728\u7ed3\u679c\u4e2d\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i &lt; NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy*3.;\n    // st += st * abs(sin(u_time*0.1)*3.0);\n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*u_time);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*u_time );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*u_time);\n\n    float f = fbm(st+r);\n\n    color = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n\n    gl_FragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);\n}\n</code></pre> <p>\u7528\u8fd9\u79cd\u65b9\u6cd5\u7528\u566a\u58f0\u626d\u66f2\u7eb9\u7406\u5750\u6807\u975e\u5e38\u6709\u7528\uff0c\u975e\u5e38\u6709\u8da3\uff0c\u4e5f\u6781\u96be\u638c\u63e1\u3002\u8fd9\u662f\u4e2a\u5f88\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u4f46\u8981\u60f3\u7528\u597d\u5b83\u9700\u8981\u4e00\u4e9b\u7ecf\u9a8c\u3002\u4e00\u4e2a\u6709\u7528\u7684\u529e\u6cd5\u662f\uff0c\u7528\u566a\u58f0\u7684\u5bfc\u6570\uff08\u68af\u5ea6\uff09\u66ff\u6362\u5750\u6807\u3002Ken Perlin \u548c Fabrice Neyret \u7684\u4e00\u7bc7\u975e\u5e38\u8457\u540d\u7684\u201c\u6d41\u566a\u58f0\u201d\u5c31\u662f\u4ee5\u8fd9\u4e2a\u60f3\u6cd5\u4e3a\u57fa\u7840\u3002\u4e00\u4e9b\u73b0\u4ee3\u7684 Perlin \u566a\u58f0\u7684\u5b9e\u73b0\u4e0d\u4f46\u8ba1\u7b97\u566a\u58f0\uff0c\u8fd8\u8ba1\u7b97\u5b83\u7684\u89e3\u6790\u68af\u5ea6\u3002\u5982\u679c\u201c\u771f\u5b9e\u201d\u68af\u5ea6\u5bf9\u8fc7\u7a0b\u5316\u51fd\u6570\u6765\u8bf4\u4e0d\u4fbf\u8ba1\u7b97\uff0c\u4f60\u603b\u662f\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6570\u503c\u68af\u5ea6\u6765\u903c\u8fd1\u5b83\uff0c\u5c3d\u7ba1\u6ca1\u90a3\u4e48\u7cbe\u786e\u800c\u4e14\u8981\u82b1\u8d39\u66f4\u591a\u5de5\u592b\u3002</p>"},{"location":"Frontend/shader/13/notes/","title":"Notes","text":"<p>https://docs.google.com/spreadsheets/d/194IVZR_xLVsw5H0zJZ7CWuimOQA_n8KU2eeIZBDwIH0/edit#gid=0</p> <p>http://heman.readthedocs.org/en/latest/generate.html#archipelagos</p> <p>http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2012/10/Tatarchuk-Noise(GDC07-D3D_Day).pdf</p> <p>http://www.campi3d.com/External/MariExtensionPack/help/MARI%20Extension%20Pack.html?Understandingsomebasicnoiseterms.html http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/white-paper-procedural-terrain-generation-with-r2452</p> <p>http://www.iquilezles.org/www/articles/warp/warp.htm http://www.iquilezles.org/www/articles/morenoise/morenoise.htm</p> <p>https://github.com/NVIDIAGameWorks/OpenGLSamples/blob/master/samples/es3aep-kepler/TerrainTessellation/assets/shaders/noise.glsl</p>"},{"location":"Frontend/shader/13/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/13/tmp/#fractal-brownian-motion","title":"Fractal Brownian Motion","text":"<p>Noise tends to mean different things to different people. Musicians will think of it in terms of disturbing sounds, communicators as interference and astrophysicists as cosmic microwave background radiation. These concepts bring us back to the physical reasons behind randomness in the world around us. However, let's start with something more fundamental, and more simple: waves and their properties. A wave is a fluctuation over time of some property. Audio waves are fluctuations in air pressure, electromagnetical waves are fluctuations in electrical and magnetic fields. Two important characteristics of a wave are its amplitude and frequency. The equation for a simple linear (one-dimensional) wave looks like this:</p> <ul> <li>Try changing the values of the frequency and amplitude to understand how they behave.</li> <li>Using shaping functions, try changing the amplitude over time.</li> <li>Using shaping functions, try changing the frequency over time.</li> </ul> <p>By doing the last two exercises you have managed to \"modulate\" a sine wave, and you just created AM (amplitude modulated) and FM (frequency modulated) waves. Congratulations!</p> <p>Another interesting property of waves is their ability to add up, which is formally called superposition. Comment/uncomment and tweak the following lines. Pay attention to how the overall appearance changes as we add waves of different amplitudes and frequencies together.</p> <ul> <li>Experiment by changing the frequency and amplitude for the additional waves.</li> <li>Is it possible to make two waves cancel each other out? What will that look like?</li> <li>Is it possible to add waves in such a way that they will amplify each other?</li> </ul> <p>In music, each note is associated with a specific frequency. The frequencies for these notes follow a pattern which we call a scale, where a doubling or halving of the frequency corresponds to a jump of one octave.</p> <p>Now, let's use Perlin noise instead of a sine wave! Perlin noise in its basic form has the same general look and feel as a sine wave. Its amplitude and frequency vary somewhat, but the amplitude remains reasonably consistent, and the frequency is restricted to a fairly narrow range around a center frequency. It's not as regular as a sine wave, though, and it's easier to create an appearance of randomness by summing up several scaled versions of noise. It is possible to make a sum of sine waves appear random as well, but it takes many different waves to hide their periodic, regular nature.</p> <p>By adding different iterations of noise (octaves), where we successively increment the frequencies in regular steps (lacunarity) and decrease the amplitude (gain) of the noise we can obtain a finer granularity in the noise and get more fine detail. This technique is called \"fractal Brownian Motion\" (fBM), or simply \"fractal noise\", and in its simplest form it can be created by the following code:</p> <ul> <li>Progressively change the number of octaves to iterate from 1 to 2, 4, 8 and 10. See what happens.</li> <li>When you have more than 4 octaves, try changing the lacunarity value.</li> <li>Also with &gt;4 octaves, change the gain value and see what happens.</li> </ul> <p>Note how with each additional octave, the curve seems to get more detail. Also note the self-similarity while more octaves are added. If you zoom in on the curve, a smaller part looks about the same as the whole thing, and each section looks more or less the same as any other section. This is an important property of mathematical fractals, and we are simulating that property in our loop. We are not creating a true fractal, because we stop the summation after a few iterations, but theoretically speaking, we would get a true mathematical fractal if we allowed the loop to continue forever and add an infinite number of noise components. In computer graphics, we always have a limit to the smallest details we can resolve, for example when objects become smaller than a pixel, so there is no need to make infinite sums to create the appearance of a fractal. A lot of terms may be needed sometimes, but never an infinite number.</p> <p>The following code is an example of how fBm could be implemented in two dimensions to create a fractal-looking pattern:</p> <ul> <li>Reduce the number of octaves by changing the value on line 37</li> <li>Modify the lacunarity of the fBm on line 47</li> <li>Explore by changing the gain on line 48</li> </ul> <p>This technique is commonly used to construct procedural landscapes. The self-similarity of the fBm is perfect for mountains, because the erosion processes that create mountains work in a manner that yields this kind of self-similarity across a large range of scales. If you are interested in this use, you should definitely read this great article by Inigo Quiles about advanced noise.</p> <p></p> <p>Using more or less the same technique, it's also possible to obtain other effects like what is known as turbulence. It's essentially an fBm, but constructed from the absolute value of a signed noise to create sharp valleys in the function.</p> <pre><code>for (int i = 0; i &lt; OCTAVES; i++) {\n    value += amplitude * abs(snoise(st));\n    st *= 2.;\n    amplitude *= .5;\n}\n</code></pre> <p></p> <p>Another member of this family of algorithms is the ridge, where the sharp valleys are turned upside down to create sharp ridges instead:</p> <pre><code>    n = abs(n);     // create creases\n    n = offset - n; // invert so creases are at top\n    n = n * n;      // sharpen creases\n</code></pre> <p></p> <p>Another variant which can create useful variations is to multiply the noise components together instead of adding them. It's also interesting to scale subsequent noise functions with something that depends on the previous terms in the loop. When we do things like that, we are moving away from the strict definition of a fractal and into the relatively unknown field of \"multifractals\". Multifractals are not as strictly defined mathematically, but that doesn't make them less useful for graphics. In fact, multifractal simulations are very common in modern commercial software for terrain generation. For further reading, you could read chapter 16 of the book \"Texturing and Modeling: a Procedural Approach\" (3rd edition), by Kenton Musgrave. Sadly, that book is out of print since a few years back, but you can still find it in libraries and on the second hand market. (There's a PDF version of the 1st edition available for purchase online, but don't buy that - it's a waste of money. It's from 1994, and it doesn't contain any of the terrain modeling stuff from the 3rd edition.)</p>"},{"location":"Frontend/shader/13/tmp/#domain-warping","title":"Domain Warping","text":"<p>Inigo Quiles wrote this other fascinating article about how it's possible to use fBm to warp a space of a fBm. Mind blowing, Right? It's like the dream inside the dream of Inception.</p> <p></p> <p>A less extreme example of this technique is the following code where the wrap is used to produce this clouds-like texture. Note how the self-similarity property is still present in the result.</p> <p>Warping the texture coordinates with noise in this manner can be very useful, a lot of fun, and fiendishly difficult to master. It's a powerful tool, but it takes quite a bit of experience to use it well. A useful tool for this is to displace the coordinates with the derivative (gradient) of the noise. A famous article by Ken Perlin and Fabrice Neyret called \"flow noise\" is based on this idea. Some modern implementations of Perlin noise include a variant that computes both the function and its analytical gradient. If the \"true\" gradient is not available for a procedural function, you can always compute finite differences to approximate it, although this is less accurate and involves more work.</p>"},{"location":"Frontend/shader/13/tmp/#for-your-toolbox","title":"For your toolbox","text":"<ul> <li>LYGIA's generative functions  are a set of reusable functions to generate patterns in GLSL. It's a great resource to learn how to use randomness and noise to create generative art. It's very granular library, designed for reusability, performance and flexibility. And it can be easily be added to any projects and frameworks.</li> </ul>"},{"location":"Frontend/shader/14/","title":"Index","text":""},{"location":"Frontend/shader/14/#fractals","title":"Fractals","text":"<p>Coming soon ...</p> <p>In the meantime, you can check out some examples with fractals on the shadertoy.com platform:</p> <p>Basic Fractal Mandelbrot - distance Mandelbrot - smooth Mandelbrot: Power Transitioning IFS - brute force Julia - Distance 1 Julia - Distance 3 Julia - Traps 2 Fractal Wheel 2.0 Koch Snowflake again</p>"},{"location":"Frontend/shader/14/README-ch/","title":"14","text":""},{"location":"Frontend/shader/14/README-ch/#fractals","title":"Fractals","text":"<p>Coming soon ...</p> <p>In the meantime, you can check out some examples with fractals on the shadertoy.com platform:</p> <p>Basic Fractal Mandelbrot - distance Mandelbrot - smooth Mandelbrot: Power Transitioning IFS - brute force Julia - Distance 1 Julia - Distance 3 Julia - Traps 2 Fractal Wheel 2.0 Koch Snowflake again</p>"},{"location":"Frontend/shader/14/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/14/tmp/#fractals","title":"Fractals","text":"<p>Coming soon ...</p> <p>In the meantime, you can check out some examples with fractals on the shadertoy.com platform:</p> <p>Basic Fractal Mandelbrot - distance Mandelbrot - smooth Mandelbrot: Power Transitioning IFS - brute force Julia - Distance 1 Julia - Distance 3 Julia - Traps 2 Fractal Wheel 2.0 Koch Snowflake again</p>"},{"location":"Frontend/shader/15/","title":"Image processing","text":""},{"location":"Frontend/shader/15/#textures","title":"Textures","text":"<p>Graphic cards (GPUs) have special memory types for images. Usually on CPUs images are stored as arrays of bytes but GPUs store images as <code>sampler2D</code> which is more like a table (or matrix) of floating point vectors. More interestingly, the values of this table of vectors are continuous. That means that values between pixels are interpolated in a low level.</p> <p>In order to use this feature we first need to upload the image from the CPU to the GPU, to then pass the <code>id</code> of the texture to the right <code>uniform</code>. All that happens outside the shader.</p> <p>Once the texture is loaded and linked to a valid <code>uniform sampler2D</code> you can ask for specific color value at specific coordinates (formatted on a <code>vec2</code> variable) using the <code>texture2D()</code> function which will return a color formatted on a <code>vec4</code> variable.</p> <pre><code>vec4 texture2D(sampler2D texture, vec2 coordinates)\n</code></pre> <p>Check the following code where we load Hokusai's Wave (1830) as <code>uniform sampler2D u_tex0</code> and we call every pixel of it inside the billboard:</p> <p>If you pay attention you will note that the coordinates for the texture are normalized! What a surprise right? Textures coordinates are consistent with the rest of the things we had seen and their coordinates are between 0.0 and 1.0 which match perfectly with the normalized space coordinates we have been using.</p> <p>Now that you have seen how we correctly load a texture, it is time to experiment to discover what we can do with it, by trying:</p> <ul> <li>Scaling the previous texture by half.</li> <li>Rotating the previous texture 90 degrees.</li> <li>Hooking the mouse position to the coordinates to move it.</li> </ul> <p>Why you should be excited about textures? Well first of all forget about the sad 255 values for channel; once your image is transformed into a <code>uniform sampler2D</code> you have all the values between 0.0 and 1.0 (depending on what you set the <code>precision</code> to ). That's why shaders can make really beautiful post-processing effects.</p> <p>Second, the <code>vec2()</code> means you can get values even between pixels. As we said before the textures are a continuum. This means that if you set up your texture correctly you can ask for values all around the surface of your image and the values will smoothly vary from pixel to pixel with no jumps!</p> <p>Finally, you can set up your image to repeat in the edges, so if you give values over or lower of the normalized 0.0 and 1.0, the values will wrap around starting over.</p> <p>All these features make your images more like an infinite spandex fabric. You can stretch and shrink your texture without noticing the grid of bytes they are originally composed of or the ends of it. To experience this take a look at the following code where we distort a texture using the noise function we already made.</p>"},{"location":"Frontend/shader/15/#texture-resolution","title":"Texture resolution","text":"<p>Above examples play well with squared images, where both sides are equal and match our squared billboard. But for non-squared images things can be a little more tricky, and unfortunately centuries of pictorial art and photography found more pleasant to the eye non-squared proportions for images.</p> <p></p> <p>How we can solve this problem? Well we need to know the original proportions of the image to know how to stretch the texture correctly in order to have the original aspect ratio. For that the texture width and height are passed to the shader as an <code>uniform</code>, which in our example framework are passed as an <code>uniform vec2</code> with the same name of the texture followed with proposition <code>Resolution</code>. Once we have this information on the shader we can get the aspect ratio by dividing the <code>width</code> for the <code>height</code> of the texture resolution. Finally by multiplying this ratio to the coordinates on <code>y</code> we will shrink this axis to match the original proportions.</p> <p>Uncomment line 21 of the following code to see this in action.</p> <ul> <li>What we need to do to center this image?</li> </ul>"},{"location":"Frontend/shader/15/#digital-upholstery","title":"Digital upholstery","text":"<p>You may be thinking that this is unnecessarily complicated... and you are probably right. Also this way of working with images leaves enough room to different hacks and creative tricks. Try to imagine that you are an upholster and by stretching and folding a fabric over a structure you can create better and new patterns and techniques.</p> <p></p> <p>This level of craftsmanship links back to some of the first optical experiments ever made. For example on games sprite animations are very common, and is inevitably to see on it reminiscence to phenakistoscope, zoetrope and praxinoscope.</p> <p>This could seem simple but the possibilities of modifying textures coordinates are enormous. For example:</p> <p>Now is your turn:</p> <ul> <li>Can you make a kaleidoscope using what we have learned?</li> </ul> <ul> <li>Way before Oculus or google cardboard, stereoscopic photography was a big thing. Could you code a simple shader to re-use these beautiful images?</li> </ul> <p> </p> <ul> <li>What other optical toys can you re-create using textures?</li> </ul> <p>In the next chapters we will learn how to do some image processing using shaders. You will note that finally the complexity of shader makes sense, because it was in a big sense designed to do this type of process. We will start doing some image operations!</p>"},{"location":"Frontend/shader/15/NOTES/","title":"NOTES","text":"<p>No tile images https://www.shadertoy.com/view/4tsGzf https://www.shadertoy.com/view/lt2GDd</p>"},{"location":"Frontend/shader/15/README-ch/","title":"\u56fe\u50cf\u5904\u7406","text":""},{"location":"Frontend/shader/15/README-ch/#_2","title":"\u7eb9\u7406","text":"<p>\u663e\u5361\uff08GPU\uff09\u6709\u7279\u6b8a\u7684\u56fe\u50cf\u5b58\u50a8\u7c7b\u578b\u3002\u5728\u4e2d\u592e\u5904\u7406\u5668\uff08CPU\uff09\u4e0a\uff0c\u56fe\u50cf\u5f80\u5f80\u50a8\u5b58\u6210\u5b57\u8282\u6570\u7ec4\uff0c\u4f46\u5728GPU\u4e0a\u56fe\u50cf\u5374\u5f80\u5f80\u50a8\u5b58\u6210<code>sampler2D</code> \uff08\u4e8c\u7ef4\u91c7\u6837\u5668\uff09\u3002\u5b83\u4eec\u66f4\u50cf\u662f\u4e00\u4e2a\u7531\u6d6e\u70b9\u5411\u91cf\u7ec4\u6210\u7684\u8868\u683c\uff08\u6216\u77e9\u9635\uff09\u3002\u66f4\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u5f20\u8868\u683c\u4e2d\u5411\u91cf\u4eec\u7684\u503c\u662f\u8fde\u7eed\u7684\u3002\u8fd9\u610f\u5473\u7740\u90bb\u8fd1\u50cf\u7d20\u70b9\u7684\u503c\u4e4b\u95f4\u662f\u7528\u8f83\u4f4e\u7ea7\u522b\u7684\u63d2\u503c\u51fa\u6765\u7684\u3002</p> <p>\u4e3a\u4e86\u7528\u5230\u8fd9\u4e00\u7279\u6027\uff0c\u6211\u4eec\u9996\u5148\u8981\u628a\u56fe\u50cf\u4eceCPU\u4e0a\u4f20\u5230GPU\uff0c\u7136\u540e\u518d\u628a\u7eb9\u7406\u7684<code>id</code>\uff08\u5e8f\u5217\u53f7\uff09\u4f20\u7ed9\u5bf9\u5e94\u7684<code>uniform</code>\u3002\u8fd9\u4e00\u5207\u6d41\u7a0b\u53d1\u751f\u5728\u7740\u8272\u5668\u4e4b\u5916\u3002</p> <p>\u4e00\u65e6\u7eb9\u7406\uff08texture\uff09\u52a0\u8f7d\u597d\u4e86\u5e76\u4e14\u94fe\u63a5\u4e0a\u4e86\u4e00\u4e2a\u6709\u6548\u7684<code>uniform sampler2D</code>\uff0c\u4f60\u5c31\u53ef\u4ee5\u7528<code>texture2D()</code>\u51fd\u6570\u83b7\u53d6\u7279\u5b9a\u5750\u6807\uff08\u7528\u4e8c\u7ef4\u5411\u91cf<code>vec2</code>\u7c7b\u578b\u8868\u793a\uff09\u5bf9\u5e94\u7684\u989c\u8272\u503c\uff08\u7528\u56db\u7ef4\u5411\u91cf<code>vec4</code>\u7c7b\u578b\u8868\u793a\uff09\u3002</p> <pre><code>vec4 texture2D(sampler2D texture, vec2 coordinates)  \n</code></pre> <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06\u300a\u795e\u5948\u5ddd\u51b2\u6d6a\u91cc\u300b\uff081830\uff09\u4ee5<code>uniform sampler2D u_tex0</code>\u4e3a\u7c7b\u578b\u548c\u540d\u5b57\u52a0\u8f7d\u4e86\u8fdb\u6765\uff0c\u5e76\u4e14\u6211\u4eec\u5728\u663e\u793a\u5e73\u9762\uff08billboard\uff09\u4e2d\u8c03\u7528\u4e86\u5b83\u7684\u6bcf\u4e2a\u50cf\u7d20\uff1a</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec4 color = vec4(st.x,st.y,0.0,1.0);\n\n    color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <p>\u5982\u679c\u4f60\u6ce8\u610f\u89c2\u5bdf\uff0c\u4f60\u4f1a\u53d1\u73b0\u7eb9\u7406\u7684\u5750\u6807\u662f\u5f52\u4e00\u5316\u7684\uff01\u8fd9\u771f\u7684\u662f\u4e2a\u60ca\u559c\uff0c\u4e0d\u662f\u5417\uff1f\u7eb9\u7406\u5750\u6807\u548c\u6211\u4eec\u5df2\u7136\u719f\u8bc6\u7684\u4e1c\u897f\u662f\u4e00\u81f4\u7684\u3002\u5b83\u4eec\u7684\u5750\u6807\u603b\u662f\u57280.0\u548c1.0\u4e4b\u95f4\u3002\u8fd9\u610f\u5473\u7740\u5b83\u548c\u6211\u4eec\u4f7f\u7528\u7684\u5f52\u4e00\u5316\u7a7a\u95f4\u5750\u6807\u5b8c\u7f8e\u543b\u5408\u3002</p> <p>\u73b0\u5728\u65e2\u7136\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u6b63\u786e\u7684\u52a0\u8f7d\u7eb9\u7406\uff0c\u662f\u65f6\u5019\u6765\u8bd5\u9a8c\u6027\u5730\u63a2\u7d22\u6211\u4eec\u7a76\u7adf\u80fd\u7528\u8fd9\u4e00\u6280\u5de7\u505a\u4e9b\u4ec0\u4e48\u4e86\u3002\u5feb\u8bd5\u8bd5\u4e0b\u9762\u8fd9\u4e9b\uff1a</p> <ul> <li>\u628a\u7eb9\u7406\u7f29\u5c0f\u5230\u539f\u5148\u7684\u4e00\u534a\u3002</li> <li>\u628a\u539f\u5148\u7684\u7eb9\u7406\u65cb\u8f6c90\u5ea6\u3002</li> <li>\u5c06\u9f20\u6807\u4f4d\u7f6e\u8d4b\u503c\u7ed9\u7eb9\u7406\u5750\u6807\u6765\u79fb\u52a8\u7eb9\u7406\u3002</li> </ul> <p>\u4e3a\u4ec0\u4e48\u4f60\u8981\u4e3a\u7eb9\u7406\u75f4\u72c2\u5462\uff1f\u9996\u5148\u8bf7\u5fd8\u4e86\u901a\u9053\u90a3\u53ef\u60b2\u7684255\u503c\u5427\uff1b\u4e00\u65e6\u4f60\u7684\u56fe\u50cf\u88ab\u8f6c\u6362\u6210\u4e86\u4e00\u4e2a<code>uniform sampler2D</code>\uff0c\u6240\u6709\u7684\u503c\u90fd\u4f1a\u57280.0\u548c1.0\u7684\u533a\u95f4\u8303\u56f4\u5185\uff08\u5c0f\u6570\u7cbe\u5ea6\u53d6\u51b3\u4e8e\u4f60\u628a<code>precision</code>\u8bbe\u7f6e\u6210\u4e86\u591a\u5c11\uff09\u3002\u8fd9\u5c31\u662f\u7740\u8272\u5668\u80fd\u521b\u9020\u51fa\u7f8e\u8f6e\u7f8e\u5942\u7684\u540e\u5904\u7406\u6548\u679c\u7684\u539f\u56e0\u3002</p> <p>\u5176\u6b21\uff0c<code>vec2()</code>\u7c7b\u578b\u610f\u5473\u7740\u4f60\u751a\u81f3\u53ef\u4ee5\u83b7\u53d6\u5230\u50cf\u7d20\u4e4b\u95f4\u7684\u503c\u3002\u5982\u524d\u6240\u8ff0\uff0c\u7eb9\u7406\u662f\u8fde\u7eed\u4f53\uff08continuum\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6b63\u786e\u5730\u8bbe\u7f6e\u597d\u4e86\u4f60\u7684\u7eb9\u7406\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u7eb9\u7406\u56fe\u50cf\u4e0a\u7684\u4efb\u610f\u503c\uff0c\u800c\u8fd9\u4e9b\u503c\u5728\u50cf\u7d20\u70b9\u4e4b\u95f4\u662f\u5e73\u6ed1\u8fc7\u6e21\u7684\uff01</p> <p>\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u8ba9\u4f60\u7684\u56fe\u50cf\u5728\u8fb9\u7f18\u5904\u91cd\u590d\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u4f60\u83b7\u53d6\u5750\u6807\u8d85\u51fa0.0\u52301.0\u8fd9\u4e2a\u5f52\u4e00\u5316\u533a\u95f4\u7684\u503c\u65f6\uff0c\u8fd4\u56de\u503c\u4f1a\u4ece\u53e6\u4e00\u8fb9\u7684\u8fb9\u7f18\u5f00\u59cb\u5faa\u73af\u5f80\u590d\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\u4f1a\u8ba9\u4f60\u7684\u56fe\u50cf\u8d8a\u53d1\u50cf\u662f\u65e0\u9650\u5faa\u73af\u5f80\u590d\u7684\u5316\u7ea4\u9762\u6599\u3002\u4f60\u53ef\u4ee5\u62c9\u626f\u3001\u4f38\u7f29\u4f60\u7684\u7eb9\u7406\u800c\u65e0\u9700\u6ce8\u610f\u5b83\u4eec\u539f\u521d\u7684\u6570\u636e\u7a76\u7adf\u662f\u4ec0\u4e48\u6837\u7684\u3002\u8981\u4f53\u9a8c\u8fd9\u4e00\u70b9\uff0c\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u5427\uff0c\u5176\u4e2d\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u5148\u524d\u521b\u5efa\u7684\u566a\u58f0\u51fd\u6570\u6765\u626d\u66f2\u7eb9\u7406\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Based on Morgan\n// https://www.shadertoy.com/view/4dS3Wd\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    float scale = 2.0;\n    float offset = 0.5;\n\n    float angle = noise( st + u_time * 0.1 )*PI;\n    float radius = offset;\n\n    st *= scale;\n    st += radius * vec2(cos(angle),sin(angle));\n\n    vec4 color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre>"},{"location":"Frontend/shader/15/README-ch/#_3","title":"\u7eb9\u7406\u5206\u8fa8\u7387","text":"<p>\u4e0a\u8ff0\u7684\u79cd\u79cd\u793a\u4f8b\u4ec5\u5c55\u73b0\u4e86\u957f\u5bbd\u76f8\u7b49\u7684\u65b9\u5f62\u56fe\u50cf\u5339\u914d\u65b9\u5f62\u663e\u793a\u5e73\u9762\uff08billboard\uff09\u7684\u60c5\u5f62\u3002\u800c\u81f3\u4e8e\u975e\u6b63\u65b9\u5f62\u56fe\u50cf\uff0c\u4e8b\u60c5\u5c31\u6ca1\u90a3\u4e48\u7b80\u5355\u4e86\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u51e0\u4e2a\u4e16\u7eaa\u4ee5\u6765\u7684\u7ed8\u753b\u827a\u672f\u548c\u6444\u5f71\u827a\u672f\u53d1\u73b0\u975e\u6b63\u65b9\u5f62\u6bd4\u4f8b\u7684\u56fe\u50cf\u66f4\u4ee4\u4eba\u8d4f\u5fc3\u60a6\u76ee\u3002</p> <p></p> <p>\u6211\u4eec\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u9700\u8981\u77e5\u9053\u8fd9\u4e00\u56fe\u50cf\u7684\u539f\u59cb\u6bd4\u4f8b\uff0c\u624d\u597d\u5728\u653e\u5927\u6216\u7f29\u5c0f\u7eb9\u7406\u7684\u65f6\u5019\u6b63\u786e\u5730\u4fdd\u6301\u5b83\u539f\u59cb\u7684\u5bbd\u9ad8\u6bd4\u3002\u4e3a\u6b64\uff0c\u7eb9\u7406\u7684\u5bbd\u548c\u9ad8\u662f\u4ee5<code>uniform</code>\u7684\u5f62\u5f0f\u4f20\u9012\u8fdb\u7740\u8272\u5668\u7684\u2014\u2014\u5728\u6211\u4eec\u7684\u793a\u4f8b\u6846\u67b6\u91cc\u662f\u4ee5\u7eb9\u7406\u540d\u540e\u8ddf<code>Resolution</code>\u7684<code>uniform vec2</code>\u4f20\u9012\u8fdb\u6765\u7684\u3002\u4e00\u65e6\u7740\u8272\u5668\u91cc\u6709\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u7eb9\u7406\u5206\u8fa8\u7387\u7684<code>\u5bbd\u5ea6</code>\u9664\u4ee5<code>\u9ad8\u5ea6</code>\u6765\u83b7\u5f97\u7eb9\u7406\u7684\u5bbd\u9ad8\u6bd4\u3002\u6700\u540e\uff0c\u628a\u8fd9\u4e2a\u6bd4\u4f8b\u548c<code>y</code>\u5750\u6807\u76f8\u4e58\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4f38\u7f29\u8fd9\u6839\u8f74\u6765\u8ba9\u7eb9\u7406\u5339\u914d\u5176\u539f\u59cb\u6bd4\u4f8b\u3002</p> <p>\u53d6\u6d88 21 \u884c\u7684\u6ce8\u91ca\u6765\u5b9e\u64cd\u4e00\u4e0b\u5427\u3002</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec4 color = vec4(0.0);\n\n    // Fix the proportions by finding the aspect ratio\n    float aspect = u_tex0Resolution.x/u_tex0Resolution.y;\n    // st.y *= aspect;  // and then applying to it\n\n    color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <ul> <li>\u5982\u679c\u8981\u8fd9\u5f20\u56fe\u7247\u5c45\u4e2d\u663e\u793a\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f</li> </ul>"},{"location":"Frontend/shader/15/README-ch/#digital-upholstery","title":"\u6570\u5b57\u88c5\u6f62\uff08Digital upholstery\uff09","text":"<p>\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u6709\u4e9b\u4e0d\u5fc5\u8981\u5730\u7e41\u7410\u2026\u2026\u5443\uff0c\u53ef\u80fd\u4f60\u662f\u5bf9\u7684\u3002\u4f46\u8fd9\u79cd\u5bf9\u5f85\u56fe\u50cf\u7684\u65b9\u5f0f\u7ed9\u4e86\u201c\u5947\u6280\u6deb\u5de7\u201d\u8db3\u591f\u7684\u53d1\u6325\u7a7a\u95f4\u3002\u8bd5\u60f3\uff0c\u4f60\u662f\u4e00\u540d\u5ba4\u5185\u88c5\u6f62\u5e08\uff0c\u901a\u8fc7\u62c9\u4f38\u548c\u6298\u53e0\u7ec7\u7269\u7ed3\u6784\uff0c\u4f60\u53ef\u4ee5\u521b\u9020\u51fa\u66f4\u597d\u7684\u65b0\u56fe\u6848\u548c\u65b0\u6280\u5de7\u3002</p> <p></p> <p>\u8fd9\u79cd\u6c34\u5e73\u7684\u5de5\u827a\u53ef\u4ee5\u8ffd\u6eaf\u5230\u6700\u65e9\u7684\u4e00\u4e9b\u5149\u5b66\u5b9e\u9a8c\u3002\u4f8b\u5982\uff0c\u6e38\u620f\u91cc\u5f88\u5e38\u89c1\u7684\u7cbe\u7075\u52a8\u753b\uff08sprite animations\uff09\uff0c\u4f60\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u5728\u5b83\u8eab\u4e0a\u770b\u5230\u8d39\u7eb3\u5947\u955c\uff08phenakistoscope\uff09\u3001\u897f\u6d0b\u955c\uff08zoetrope\uff09\u548c\u6539\u826f\u7248\u897f\u6d0b\u955c\uff08praxinoscope\uff09\u7684\u5f71\u5b50\u3002</p> <p>\u8fd9\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u4fee\u6539\u7eb9\u7406\u5750\u6807\u53ef\u4ee5\u5e26\u6765\u5de8\u5927\u7684\u53ef\u80fd\u6027\u3002\u4f8b\u5982\uff1a</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nint col = 5;\nint row = 4;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec4 color = vec4(0.0);\n\n    // Resolution of one frame\n    vec2 fRes = u_tex0Resolution/vec2(float(col),float(row));\n\n    // Normalize value of the frame resolution\n    vec2 nRes = u_tex0Resolution/fRes;\n\n    // Scale the coordinates to a single frame\n    st = st/nRes;\n\n    // Calculate the offset in cols and rows\n    float timeX = u_time*15.;\n    float timeY = floor(timeX/float(col));\n    vec2 offset = vec2( floor(timeX)/nRes.x,\n                        1.0-(floor(timeY)/nRes.y) );\n    st = fract(st+offset);\n\n    color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <p>\u73b0\u5728\u8f6e\u5230\u4f60\u4e86:</p> <ul> <li> <p>\u4f60\u80fd\u6d3b\u5b66\u6d3b\u7528\uff0c\u505a\u51fa\u4e07\u82b1\u7b52\u6548\u679c\u5417\uff1f</p> </li> <li> <p>\u5728Oculus\u548c\u8c37\u6b4cCardboard\u4e4b\u524d\uff0c\u7acb\u4f53\u6444\u5f71\u662f\u4ef6\u5927\u4e8b\u3002\u4f60\u80fd\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7740\u8272\u5668\u6765\u91cd\u65b0\u4f7f\u7528\u8fd9\u4e9b\u7f8e\u4e3d\u7684\u56fe\u50cf\u5417?</p> </li> </ul> <p></p> <ul> <li>\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7eb9\u7406\u6765\u518d\u521b\u9020\u54ea\u4e9b\u5176\u4ed6\u7684\u5149\u5b66\u73a9\u5177\u5417?</li> </ul> <p>\u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u7740\u8272\u5668\u8fdb\u884c\u4e00\u4e9b\u56fe\u50cf\u5904\u7406\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u7740\u8272\u5668\u7684\u590d\u6742\u6027\u6700\u7ec8\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u5b83\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4e3a\u8fd9\u4e00\u8fc7\u7a0b\u800c\u751f\u7684\u3002\u6211\u4eec\u5c06\u5f00\u59cb\u505a\u4e00\u4e9b\u56fe\u50cf\u64cd\u4f5c!</p>"},{"location":"Frontend/shader/15/tmp/","title":"Image processing","text":""},{"location":"Frontend/shader/15/tmp/#textures","title":"Textures","text":"<p>Graphic cards (GPUs) have special memory types for images. Usually on CPUs images are stored as arrays of bytes but GPUs store images as <code>sampler2D</code> which is more like a table (or matrix) of floating point vectors. More interestingly, the values of this table of vectors are continuous. That means that values between pixels are interpolated in a low level.</p> <p>In order to use this feature we first need to upload the image from the CPU to the GPU, to then pass the <code>id</code> of the texture to the right <code>uniform</code>. All that happens outside the shader.</p> <p>Once the texture is loaded and linked to a valid <code>uniform sampler2D</code> you can ask for specific color value at specific coordinates (formatted on a <code>vec2</code> variable) using the <code>texture2D()</code> function which will return a color formatted on a <code>vec4</code> variable.</p> <pre><code>vec4 texture2D(sampler2D texture, vec2 coordinates)\n</code></pre> <p>Check the following code where we load Hokusai's Wave (1830) as <code>uniform sampler2D u_tex0</code> and we call every pixel of it inside the billboard:</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec4 color = vec4(st.x,st.y,0.0,1.0);\n\n    color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <p></p> <p>If you pay attention you will note that the coordinates for the texture are normalized! What a surprise right? Textures coordinates are consistent with the rest of the things we had seen and their coordinates are between 0.0 and 1.0 which match perfectly with the normalized space coordinates we have been using.</p> <p>Now that you have seen how we correctly load a texture, it is time to experiment to discover what we can do with it, by trying:</p> <ul> <li>Scaling the previous texture by half.</li> <li>Rotating the previous texture 90 degrees.</li> <li>Hooking the mouse position to the coordinates to move it.</li> </ul> <p>Why you should be excited about textures? Well first of all forget about the sad 255 values for channel; once your image is transformed into a <code>uniform sampler2D</code> you have all the values between 0.0 and 1.0 (depending on what you set the <code>precision</code> to ). That's why shaders can make really beautiful post-processing effects.</p> <p>Second, the <code>vec2()</code> means you can get values even between pixels. As we said before the textures are a continuum. This means that if you set up your texture correctly you can ask for values all around the surface of your image and the values will smoothly vary from pixel to pixel with no jumps!</p> <p>Finally, you can set up your image to repeat in the edges, so if you give values over or lower of the normalized 0.0 and 1.0, the values will wrap around starting over.</p> <p>All these features make your images more like an infinite spandex fabric. You can stretch and shrink your texture without noticing the grid of bytes they are originally composed of or the ends of it. To experience this take a look at the following code where we distort a texture using the noise function we already made.</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Based on Morgan\n// https://www.shadertoy.com/view/4dS3Wd\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    float scale = 2.0;\n    float offset = 0.5;\n\n    float angle = noise( st + u_time * 0.1 )*PI;\n    float radius = offset;\n\n    st *= scale;\n    st += radius * vec2(cos(angle),sin(angle));\n\n    vec4 color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <p></p>"},{"location":"Frontend/shader/15/tmp/#texture-resolution","title":"Texture resolution","text":"<p>Above examples play well with squared images, where both sides are equal and match our squared billboard. But for non-squared images things can be a little more tricky, and unfortunately centuries of pictorial art and photography found more pleasant to the eye non-squared proportions for images.</p> <p></p> <p>How we can solve this problem? Well we need to know the original proportions of the image to know how to stretch the texture correctly in order to have the original aspect ratio. For that the texture width and height are passed to the shader as an <code>uniform</code>, which in our example framework are passed as an <code>uniform vec2</code> with the same name of the texture followed with proposition <code>Resolution</code>. Once we have this information on the shader we can get the aspect ratio by dividing the <code>width</code> for the <code>height</code> of the texture resolution. Finally by multiplying this ratio to the coordinates on <code>y</code> we will shrink this axis to match the original proportions.</p> <p>Uncomment line 21 of the following code to see this in action.</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec4 color = vec4(0.0);\n\n    // Fix the proportions by finding the aspect ratio\n    float aspect = u_tex0Resolution.x/u_tex0Resolution.y;\n    // st.y *= aspect;  // and then applying to it\n\n    color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <p></p> <ul> <li>What we need to do to center this image?</li> </ul>"},{"location":"Frontend/shader/15/tmp/#digital-upholstery","title":"Digital upholstery","text":"<p>You may be thinking that this is unnecessarily complicated... and you are probably right. Also this way of working with images leaves enough room to different hacks and creative tricks. Try to imagine that you are an upholster and by stretching and folding a fabric over a structure you can create better and new patterns and techniques.</p> <p></p> <p>This level of craftsmanship links back to some of the first optical experiments ever made. For example on games sprite animations are very common, and is inevitably to see on it reminiscence to phenakistoscope, zoetrope and praxinoscope.</p> <p>This could seem simple but the possibilities of modifying textures coordinates are enormous. For example:</p> <pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform vec2 u_tex0Resolution;\n\nint col = 5;\nint row = 4;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main () {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec4 color = vec4(0.0);\n\n    // Resolution of one frame\n    vec2 fRes = u_tex0Resolution/vec2(float(col),float(row));\n\n    // Normalize value of the frame resolution\n    vec2 nRes = u_tex0Resolution/fRes;\n\n    // Scale the coordinates to a single frame\n    st = st/nRes;\n\n    // Calculate the offset in cols and rows\n    float timeX = u_time*15.;\n    float timeY = floor(timeX/float(col));\n    vec2 offset = vec2( floor(timeX)/nRes.x,\n                        1.0-(floor(timeY)/nRes.y) );\n    st = fract(st+offset);\n\n    color = texture2D(u_tex0,st);\n\n    gl_FragColor = color;\n}\n</code></pre> <p></p> <p>Now is your turn:</p> <ul> <li>Can you make a kaleidoscope using what we have learned?</li> </ul> <ul> <li>Way before Oculus or google cardboard, stereoscopic photography was a big thing. Could you code a simple shader to re-use these beautiful images?</li> </ul> <p> </p> <ul> <li>What other optical toys can you re-create using textures?</li> </ul> <p>In the next chapters we will learn how to do some image processing using shaders. You will note that finally the complexity of shader makes sense, because it was in a big sense designed to do this type of process. We will start doing some image operations!</p>"},{"location":"Frontend/shader/16/README-ch/","title":"16","text":""},{"location":"Frontend/shader/16/README-ch/#image-operations","title":"Image operations","text":"<p>Below you will see some examples with images where you can play around and uncomment some lines to see the corresponding results.</p>"},{"location":"Frontend/shader/16/README-ch/#invert","title":"Invert","text":"<pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\n\nuniform float u_time;\nuniform vec2 u_mouse;\nuniform vec2 u_resolution;\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = texture2D(u_tex0,st).rgb;\n\n    // color = 1.0-color;\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"Frontend/shader/16/README-ch/#add-subtract-multiply-and-others","title":"Add, Subtract, Multiply and others","text":"<pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform sampler2D u_tex1;\n\nuniform float u_time;\nuniform vec2 u_mouse;\nuniform vec2 u_resolution;\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.);\n    vec3 colorA = texture2D(u_tex0,st).rgb;\n    vec3 colorB = texture2D(u_tex1,st).rgb;\n\n    color = colorA+colorB;      // Add\n    // color = colorA-colorB;      // Diff\n    // color = abs(colorA-colorB); // Abs Diff\n    // color = colorA*colorB;      // Mult\n    // color = colorA/colorB;      // Div\n    // color = max(colorA,colorB); // Ligther\n    // color = min(colorA,colorB); // Darker\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"Frontend/shader/16/README-ch/#ps-blending-modes","title":"PS Blending modes","text":"<pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define BlendLinearDodgef               BlendAddf\n#define BlendLinearBurnf                BlendSubstractf\n#define BlendAddf(base, blend)          min(base + blend, 1.0)\n#define BlendSubstractf(base, blend)    max(base + blend - 1.0, 0.0)\n#define BlendLightenf(base, blend)      max(blend, base)\n#define BlendDarkenf(base, blend)       min(blend, base)\n#define BlendLinearLightf(base, blend)  (blend &lt; 0.5 ? BlendLinearBurnf(base, (2.0 * blend)) : BlendLinearDodgef(base, (2.0 * (blend - 0.5))))\n#define BlendScreenf(base, blend)       (1.0 - ((1.0 - base) * (1.0 - blend)))\n#define BlendOverlayf(base, blend)      (base &lt; 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))\n#define BlendSoftLightf(base, blend)    ((blend &lt; 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)))\n#define BlendColorDodgef(base, blend)   ((blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0))\n#define BlendColorBurnf(base, blend)    ((blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0))\n#define BlendVividLightf(base, blend)   ((blend &lt; 0.5) ? BlendColorBurnf(base, (2.0 * blend)) : BlendColorDodgef(base, (2.0 * (blend - 0.5))))\n#define BlendPinLightf(base, blend)     ((blend &lt; 0.5) ? BlendDarkenf(base, (2.0 * blend)) : BlendLightenf(base, (2.0 *(blend - 0.5))))\n#define BlendHardMixf(base, blend)      ((BlendVividLightf(base, blend) &lt; 0.5) ? 0.0 : 1.0)\n#define BlendReflectf(base, blend)      ((blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0))\n\n// Component wise blending\n#define Blend(base, blend, funcf)       vec3(funcf(base.r, blend.r), funcf(base.g, blend.g), funcf(base.b, blend.b))\n\n#define BlendNormal(base, blend)        (blend)\n#define BlendLighten                    BlendLightenf\n#define BlendDarken                     BlendDarkenf\n#define BlendMultiply(base, blend)      (base * blend)\n#define BlendAverage(base, blend)       ((base + blend) / 2.0)\n#define BlendAdd(base, blend)           min(base + blend, vec3(1.0))\n#define BlendSubstract(base, blend)     max(base + blend - vec3(1.0), vec3(0.0))\n#define BlendDifference(base, blend)    abs(base - blend)\n#define BlendNegation(base, blend)      (vec3(1.0) - abs(vec3(1.0) - base - blend))\n#define BlendExclusion(base, blend)     (base + blend - 2.0 * base * blend)\n#define BlendScreen(base, blend)        Blend(base, blend, BlendScreenf)\n#define BlendOverlay(base, blend)       Blend(base, blend, BlendOverlayf)\n#define BlendSoftLight(base, blend)     Blend(base, blend, BlendSoftLightf)\n#define BlendHardLight(base, blend)     BlendOverlay(blend, base)\n#define BlendColorDodge(base, blend)    Blend(base, blend, BlendColorDodgef)\n#define BlendColorBurn(base, blend)     Blend(base, blend, BlendColorBurnf)\n#define BlendLinearDodge                BlendAdd\n#define BlendLinearBurn                 BlendSubstract\n\n#define BlendLinearLight(base, blend)   Blend(base, blend, BlendLinearLightf)\n#define BlendVividLight(base, blend)    Blend(base, blend, BlendVividLightf)\n#define BlendPinLight(base, blend)      Blend(base, blend, BlendPinLightf)\n#define BlendHardMix(base, blend)       Blend(base, blend, BlendHardMixf)\n#define BlendReflect(base, blend)       Blend(base, blend, BlendReflectf)\n#define BlendGlow(base, blend)          BlendReflect(blend, base)\n#define BlendPhoenix(base, blend)       (min(base, blend) - max(base, blend) + vec3(1.0))\n#define BlendOpacity(base, blend, F, O) (F(base, blend) * O + blend * (1.0 - O))\n\nuniform sampler2D u_tex0;\nuniform sampler2D u_tex1;\n\nuniform float u_time;\nuniform vec2 u_mouse;\nuniform vec2 u_resolution;\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec3 colorA = texture2D(u_tex0,st).rgb;\n    vec3 colorB = texture2D(u_tex1,st).rgb;\n\n    color = BlendMultiply(colorA,colorB);\n    // color = BlendAdd(colorA,colorB);\n    // color = BlendLighten(colorA,colorB);\n    // color = BlendDarken(colorA,colorB);\n    // color = BlendAverage(colorA,colorB);\n    // color = BlendSubstract(colorA,colorB);\n    // color = BlendDifference(colorA,colorB);\n    // color = BlendNegation(colorA,colorB);\n    // color = BlendExclusion(colorA,colorB);\n    // color = BlendScreen(colorA,colorB);\n    // color = BlendOverlay(colorA,colorB);\n    // color = BlendSoftLight(colorA,colorB);\n    // color = BlendHardLight(colorA,colorB);\n    // color = BlendColorDodge(colorA,colorB);\n    // color = BlendColorBurn(colorA,colorB);\n    // color = BlendLinearLight(colorA,colorB);\n    // color = BlendVividLight(colorA,colorB);\n    // color = BlendPinLight(colorA,colorB);\n    // color = BlendHardMix(colorA,colorB);\n    // color = BlendReflect(colorA,colorB);\n    // color = BlendGlow(colorA,colorB);\n    // color = BlendPhoenix(colorA,colorB);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"Frontend/shader/16/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/16/README-ua/#_1","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u0456\u0437 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f\u043c\u0438","text":"<p>\u041d\u0438\u0436\u0447\u0435 \u0432\u0438 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0435 \u043a\u0456\u043b\u044c\u043a\u0430 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432 \u0456\u0437 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f\u043c\u0438, \u0434\u0435 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0433\u0440\u0430\u0442\u0438 \u0437\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0430 \u0440\u043e\u0437\u043a\u043e\u043c\u0435\u043d\u0442\u0443\u0432\u0430\u0442\u0438 \u043f\u0435\u0432\u043d\u0456 \u0440\u044f\u0434\u043a\u0438, \u0449\u043e\u0431 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p>"},{"location":"Frontend/shader/16/README-ua/#_2","title":"\u0406\u043d\u0432\u0435\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f","text":"<p>\u0420\u043e\u0437\u043a\u043e\u043c\u0435\u043d\u0442\u0443\u0439\u0442\u0435 \u0440\u044f\u0434\u043e\u043a 18:</p>"},{"location":"Frontend/shader/16/README-ua/#_3","title":"\u0414\u043e\u0434\u0430\u0432\u0430\u043d\u043d\u044f, \u0432\u0456\u0434\u043d\u0456\u043c\u0430\u043d\u043d\u044f, \u043c\u043d\u043e\u0436\u0435\u043d\u043d\u044f \u0442\u0430 \u0456\u043d\u0448\u0456 \u0432\u0430\u0440\u0456\u0430\u043d\u0442\u0438","text":"<p>\u0412 \u0434\u0430\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456 \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043e \u0434\u0432\u0430 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f, \u044f\u043a\u0456 \u0440\u043e\u0437\u0442\u0430\u0448\u043e\u0432\u0430\u043d\u043e \u043e\u0434\u0438\u043d \u043d\u0430\u0434 \u043e\u0434\u043d\u0438\u043c. \u041f\u043e \u0447\u0435\u0440\u0437\u0456 \u0440\u043e\u0437\u043a\u043e\u043c\u0435\u043d\u0442\u043e\u0432\u0443\u0439\u0442\u0435 \u0440\u044f\u0434\u043a\u0438 22-27 \u0442\u0430 \u0441\u043f\u043e\u0441\u0442\u0435\u0440\u0456\u0433\u0430\u0439\u0442\u0435 \u0437\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u043f\u043e\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0446\u0438\u0445 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u044c \u0437\u0430\u043b\u0435\u0436\u043d\u043e \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457. \u041f\u0435\u0440\u0448 \u043d\u0456\u0436 \u0440\u043e\u0437\u043a\u043e\u043c\u0435\u043d\u0442\u0443\u0432\u0430\u0442\u0438 \u0440\u044f\u0434\u043e\u043a, \u043f\u043e\u043c\u0456\u0440\u043a\u0443\u0439\u0442\u0435 \u043d\u0430\u0434 \u0442\u0438\u043c \u044f\u043a\u0438\u0439 \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0456 \u0447\u043e\u043c\u0443:</p> <p></p>"},{"location":"Frontend/shader/16/README-ua/#photoshop","title":"\u0420\u0435\u0436\u0438\u043c\u0438 \u0437\u043c\u0456\u0448\u0443\u0432\u0430\u043d\u043d\u044f \u044f\u043a \u0443 Photoshop","text":""},{"location":"Frontend/shader/16/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/16/tmp/#image-operations","title":"Image operations","text":"<p>Below you will see some examples with images where you can play around and uncomment some lines to see the corresponding results.</p>"},{"location":"Frontend/shader/16/tmp/#invert","title":"Invert","text":"<pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\n\nuniform float u_time;\nuniform vec2 u_mouse;\nuniform vec2 u_resolution;\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = texture2D(u_tex0,st).rgb;\n\n    // color = 1.0-color;\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"Frontend/shader/16/tmp/#add-subtract-multiply-and-others","title":"Add, Subtract, Multiply and others","text":"<pre><code>// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D u_tex0;\nuniform sampler2D u_tex1;\n\nuniform float u_time;\nuniform vec2 u_mouse;\nuniform vec2 u_resolution;\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.);\n    vec3 colorA = texture2D(u_tex0,st).rgb;\n    vec3 colorB = texture2D(u_tex1,st).rgb;\n\n    color = colorA+colorB;      // Add\n    // color = colorA-colorB;      // Diff\n    // color = abs(colorA-colorB); // Abs Diff\n    // color = colorA*colorB;      // Mult\n    // color = colorA/colorB;      // Div\n    // color = max(colorA,colorB); // Ligther\n    // color = min(colorA,colorB); // Darker\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"Frontend/shader/16/tmp/#ps-blending-modes","title":"PS Blending modes","text":"<pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define BlendLinearDodgef               BlendAddf\n#define BlendLinearBurnf                BlendSubstractf\n#define BlendAddf(base, blend)          min(base + blend, 1.0)\n#define BlendSubstractf(base, blend)    max(base + blend - 1.0, 0.0)\n#define BlendLightenf(base, blend)      max(blend, base)\n#define BlendDarkenf(base, blend)       min(blend, base)\n#define BlendLinearLightf(base, blend)  (blend &lt; 0.5 ? BlendLinearBurnf(base, (2.0 * blend)) : BlendLinearDodgef(base, (2.0 * (blend - 0.5))))\n#define BlendScreenf(base, blend)       (1.0 - ((1.0 - base) * (1.0 - blend)))\n#define BlendOverlayf(base, blend)      (base &lt; 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))\n#define BlendSoftLightf(base, blend)    ((blend &lt; 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)))\n#define BlendColorDodgef(base, blend)   ((blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0))\n#define BlendColorBurnf(base, blend)    ((blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0))\n#define BlendVividLightf(base, blend)   ((blend &lt; 0.5) ? BlendColorBurnf(base, (2.0 * blend)) : BlendColorDodgef(base, (2.0 * (blend - 0.5))))\n#define BlendPinLightf(base, blend)     ((blend &lt; 0.5) ? BlendDarkenf(base, (2.0 * blend)) : BlendLightenf(base, (2.0 *(blend - 0.5))))\n#define BlendHardMixf(base, blend)      ((BlendVividLightf(base, blend) &lt; 0.5) ? 0.0 : 1.0)\n#define BlendReflectf(base, blend)      ((blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0))\n\n// Component wise blending\n#define Blend(base, blend, funcf)       vec3(funcf(base.r, blend.r), funcf(base.g, blend.g), funcf(base.b, blend.b))\n\n#define BlendNormal(base, blend)        (blend)\n#define BlendLighten                    BlendLightenf\n#define BlendDarken                     BlendDarkenf\n#define BlendMultiply(base, blend)      (base * blend)\n#define BlendAverage(base, blend)       ((base + blend) / 2.0)\n#define BlendAdd(base, blend)           min(base + blend, vec3(1.0))\n#define BlendSubstract(base, blend)     max(base + blend - vec3(1.0), vec3(0.0))\n#define BlendDifference(base, blend)    abs(base - blend)\n#define BlendNegation(base, blend)      (vec3(1.0) - abs(vec3(1.0) - base - blend))\n#define BlendExclusion(base, blend)     (base + blend - 2.0 * base * blend)\n#define BlendScreen(base, blend)        Blend(base, blend, BlendScreenf)\n#define BlendOverlay(base, blend)       Blend(base, blend, BlendOverlayf)\n#define BlendSoftLight(base, blend)     Blend(base, blend, BlendSoftLightf)\n#define BlendHardLight(base, blend)     BlendOverlay(blend, base)\n#define BlendColorDodge(base, blend)    Blend(base, blend, BlendColorDodgef)\n#define BlendColorBurn(base, blend)     Blend(base, blend, BlendColorBurnf)\n#define BlendLinearDodge                BlendAdd\n#define BlendLinearBurn                 BlendSubstract\n\n#define BlendLinearLight(base, blend)   Blend(base, blend, BlendLinearLightf)\n#define BlendVividLight(base, blend)    Blend(base, blend, BlendVividLightf)\n#define BlendPinLight(base, blend)      Blend(base, blend, BlendPinLightf)\n#define BlendHardMix(base, blend)       Blend(base, blend, BlendHardMixf)\n#define BlendReflect(base, blend)       Blend(base, blend, BlendReflectf)\n#define BlendGlow(base, blend)          BlendReflect(blend, base)\n#define BlendPhoenix(base, blend)       (min(base, blend) - max(base, blend) + vec3(1.0))\n#define BlendOpacity(base, blend, F, O) (F(base, blend) * O + blend * (1.0 - O))\n\nuniform sampler2D u_tex0;\nuniform sampler2D u_tex1;\n\nuniform float u_time;\nuniform vec2 u_mouse;\nuniform vec2 u_resolution;\n\nvoid main (void) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec3 colorA = texture2D(u_tex0,st).rgb;\n    vec3 colorB = texture2D(u_tex1,st).rgb;\n\n    color = BlendMultiply(colorA,colorB);\n    // color = BlendAdd(colorA,colorB);\n    // color = BlendLighten(colorA,colorB);\n    // color = BlendDarken(colorA,colorB);\n    // color = BlendAverage(colorA,colorB);\n    // color = BlendSubstract(colorA,colorB);\n    // color = BlendDifference(colorA,colorB);\n    // color = BlendNegation(colorA,colorB);\n    // color = BlendExclusion(colorA,colorB);\n    // color = BlendScreen(colorA,colorB);\n    // color = BlendOverlay(colorA,colorB);\n    // color = BlendSoftLight(colorA,colorB);\n    // color = BlendHardLight(colorA,colorB);\n    // color = BlendColorDodge(colorA,colorB);\n    // color = BlendColorBurn(colorA,colorB);\n    // color = BlendLinearLight(colorA,colorB);\n    // color = BlendVividLight(colorA,colorB);\n    // color = BlendPinLight(colorA,colorB);\n    // color = BlendHardMix(colorA,colorB);\n    // color = BlendReflect(colorA,colorB);\n    // color = BlendGlow(colorA,colorB);\n    // color = BlendPhoenix(colorA,colorB);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"Frontend/shader/17/README-ch/","title":"17","text":""},{"location":"Frontend/shader/17/README-ch/#kernel-convolutions","title":"Kernel convolutions","text":""},{"location":"Frontend/shader/17/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/17/tmp/#kernel-convolutions","title":"Kernel convolutions","text":""},{"location":"Frontend/shader/18/README-ch/","title":"18","text":""},{"location":"Frontend/shader/18/README-ch/#filters","title":"Filters","text":""},{"location":"Frontend/shader/18/tmp/","title":"Tmp","text":""},{"location":"Frontend/shader/18/tmp/#filters","title":"Filters","text":""},{"location":"Frontend/shader/appendix/","title":"Appendix","text":"<ol> <li> <p>How can I navigate this book off-line?</p> </li> <li> <p>How to run the examples on a Raspberry Pi?</p> </li> <li> <p>How to print this book?</p> </li> <li> <p>How can I collaborate with this book?</p> </li> <li> <p>An introduction for those coming from JS by Nicolas Barradeau</p> </li> <li> <p>An introduction for vectors by ...</p> </li> <li> <p>An introduction to interpolation by ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-ch/","title":"\u9644\u5f55","text":"<ol> <li> <p>\u5982\u4f55\u79bb\u7ebf\u9605\u8bfb\u6b64\u4e66\uff1f</p> </li> <li> <p>\u5982\u4f55\u5728\u6811\u8393\u6d3e\u4e0a\u8fd0\u884c\u793a\u4f8b\u7a0b\u5e8f\uff1f</p> </li> <li> <p>\u5982\u4f55\u6253\u5370\u8fd9\u672c\u4e66\uff1f</p> </li> <li> <p>\u6211\u600e\u6837\u5171\u521b\u8fd9\u672c\u4e66\uff1f</p> </li> <li> <p>\u7ed9\u90a3\u4e9b\u4eceJS\u8bed\u8a00\u8fc7\u6765\u7684\u4eba\u7684\u4ecb\u7ecd Nicolas Barradeau\u8457</p> </li> <li> <p>\u5411\u91cf\u5bfc\u8bba by ...</p> </li> <li> <p>\u63d2\u503c\u5bfc\u8bba by ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-de/","title":"Appendix","text":"<ol> <li> <p>Wie kann ich dieses Buch offline lesen?</p> </li> <li> <p>Wie kann ich die Beispielprogramme auf einem Raspberry Pi ausf\u00fchren?</p> </li> <li> <p>Wie kann ich dieses Buch ausdrucken?</p> </li> <li> <p>Wie kann ich zu diesem Buch beitragen?</p> </li> <li> <p>An introduction for those coming from JS by Nicolas Barradeau</p> </li> <li> <p>An introduction for vectors by ...</p> </li> <li> <p>An introduction to interpolation by ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-fr/","title":"Annexes","text":"<ol> <li> <p>Comment puis-je consulter ce livre hors-ligne ?</p> </li> <li> <p>Comment ex\u00e9cuter les exemples sur un Raspberry Pi ?</p> </li> <li> <p>Comment imprimer ce livre ?</p> </li> <li> <p>Comment puis-je contribuer \u00e0 ce livre?</p> </li> <li> <p>Une introduction pour ceux qui viennent de JS de Nicolas Barradeau</p> </li> <li> <p>Une introduction aux vecteurs de ...</p> </li> <li> <p>Une introduction \u00e0 l'interpolation de ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-id/","title":"Lampiran","text":"<ol> <li> <p>Bagaimana saya mendapatkan buku ini secara offline?</p> </li> <li> <p>Bagaimana cara menjalankan contoh di Raspberry Pi?</p> </li> <li> <p>Bagaimana mencetak buku ini?</p> </li> <li> <p>Bagaimana saya bisa berkolaburasi?</p> </li> <li> <p>An introduction for those coming from JS by Nicolas Barradeau</p> </li> <li> <p>An introduction for vectors by ...</p> </li> <li> <p>An introduction to interpolation by ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-pl/","title":"Dodatek","text":"<ol> <li> <p>Jak mog\u0119 nawigowa\u0107 po tej ksi\u0105\u017cce w trybie off-line?</p> </li> <li> <p>Jak uruchomi\u0107 przyk\u0142ady na Raspberry Pi?</p> </li> <li> <p>Jak wydrukowa\u0107 t\u0119 ksi\u0105\u017ck\u0119?</p> </li> <li> <p>Jak wsp\u00f3\u0142pracowa\u0107 przy tworzeniu tej ksi\u0105\u017cki?</p> </li> <li> <p>Wprowadzenie dla os\u00f3b pochodz\u0105cych z JS autorstwa Nicolas Barradeau</p> </li> <li> <p>Wprowadzenie dla wektor\u00f3w autorstwa ...</p> </li> <li> <p>Wprowadzenie do interpolacji przez ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-ru/","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435","text":"<ol> <li> <p>\u041a\u0430\u043a \u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043e\u0444\u0444\u043b\u0430\u0439\u043d?</p> </li> <li> <p>\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Raspberry Pi?</p> </li> <li> <p>\u041a\u0430\u043a \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443?</p> </li> <li> <p>\u041a\u0430\u043a \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043d\u0438\u0433\u0438?</p> </li> <li> <p>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u043b\u044f JavaScript-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 (\u041d\u0438\u043a\u043e\u043b\u044f \u0411\u0430\u0440\u0440\u0430\u0434\u043e)</p> </li> <li> <p>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u0443\u044e \u0430\u043b\u0433\u0435\u0431\u0440\u0443</p> </li> <li> <p>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044e</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-ua/","title":"\u0414\u043e\u0434\u0430\u0442\u043e\u043a","text":"<ol> <li> <p>\u042f\u043a \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0442\u0438\u0441\u044c \u043a\u043d\u0438\u0433\u043e\u044e \u043e\u0444\u043b\u0430\u0439\u043d?</p> </li> <li> <p>\u042f\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u043d\u0430 Raspberry Pi?</p> </li> <li> <p>\u042f\u043a \u043d\u0430\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u0446\u044e \u043a\u043d\u0438\u0433\u0443?</p> </li> <li> <p>\u042f\u043a \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0438 \u0443\u0447\u0430\u0441\u0442\u044c \u0443 \u0440\u043e\u0437\u0432\u0438\u0442\u043a\u0443 \u043a\u043d\u0438\u0433\u0438?</p> </li> <li> <p>\u0412\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u0442\u0438\u0445, \u0445\u0442\u043e \u043f\u0440\u0438\u0439\u0448\u043e\u0432 \u0456\u0437 JS \u0432\u0456\u0434 Nicolas Barradeau</p> </li> <li> <p>\u0412\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0434\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432</p> </li> <li> <p>\u0412\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0432 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u044e</p> </li> </ol>"},{"location":"Frontend/shader/appendix/README-vi/","title":"Ph\u1ee5 l\u1ee5c","text":"<ol> <li> <p>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 \u0111\u1ecdc quy\u1ec3n s\u00e1ch n\u00e0y m\u00e0 kh\u00f4ng c\u1ea7n Internet ?</p> </li> <li> <p>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ch\u1ea1y th\u1eed v\u00ed d\u1ee5 tr\u00ean Raspberry Pi ?</p> </li> <li> <p>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 in quy\u1ec3n s\u00e1ch n\u00e0y ?</p> </li> <li> <p>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 g\u00f3p s\u1ee9c cho quy\u1ec3n s\u00e1ch n\u00e0y ?</p> </li> <li> <p>Gi\u1edbi thi\u1ec7u cho ng\u01b0\u1eddi \u0111\u00e3 bi\u1ebft Javascript t\u1eeb Nicolas Barradeau</p> </li> <li> <p>Gi\u1edbi thi\u1ec7u v\u1ec1 vector t\u1eeb ...</p> </li> <li> <p>Gi\u1edbi thi\u1ec7u v\u1ec1 n\u1ed9i suy t\u1eeb ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/tmp/","title":"Appendix","text":"<ol> <li> <p>How can I navigate this book off-line?</p> </li> <li> <p>How to run the examples on a Raspberry Pi?</p> </li> <li> <p>How to print this book?</p> </li> <li> <p>How can I collaborate with this book?</p> </li> <li> <p>An introduction for those coming from JS by Nicolas Barradeau</p> </li> <li> <p>An introduction for vectors by ...</p> </li> <li> <p>An introduction to interpolation by ...</p> </li> </ol>"},{"location":"Frontend/shader/appendix/00/","title":"Index","text":""},{"location":"Frontend/shader/appendix/00/#how-can-i-navigate-this-book-off-line","title":"How can I navigate this book off-line?","text":"<p>Let\u2019s say you have a long trip and you want to use it to teach yourself some shaders. In that case you can make a local copy of this book on your computer and run a local server.</p> <p>For that you only need PHP, Python 3 and a git client. On MacOS and Raspberry Pi computers Python is installed by default but you still need to install PHP and a git client. For that:</p> <p>On MacOSX be sure to have homebrew installed and then on your terminal do:</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>On Raspberry Pi you need to get Raspbian, a Debian-based Linux distribution made for Raspberry Pi and then do:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>Once you have everything installed you just need to do:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>Then open your browser to <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-ch/","title":"README ch","text":""},{"location":"Frontend/shader/appendix/00/README-ch/#_1","title":"\u5982\u4f55\u79bb\u7ebf\u9605\u8bfb\u6b64\u4e66\uff1f","text":"<p>\u5047\u5982\u4f60\u5728\u8ba1\u5212\u4e00\u6b21\u957f\u9014\u65c5\u884c\uff0c\u5e76\u4e14\u4f60\u6253\u7b97\u901a\u8fc7\u6b64\u4e66\u5728\u65c5\u9014\u4e2d\u81ea\u5b66\u4e00\u4e9b\u7740\u8272\u5668\u76f8\u5173\u7684\u77e5\u8bc6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5728\u4f60\u7684\u7535\u8111\u4e0a\u53ef\u4ee5\u641e\u4e00\u4efd\u672c\u5730\u7248\u7684\u8fd9\u672c\u4e66\uff0c\u5e76\u8fd0\u884c\u4e00\u4e2a\u672c\u5730\u670d\u52a1\u5668\u3002</p> <p>\u8981\u8fd9\u4e48\u641e\u7684\u8bdd\u4f60\u53ea\u9700\u8981PHP\uff0cPython 3\u4ee5\u53ca\u4e00\u4e2agit\u5ba2\u6237\u7aef\u3002\u5728MacOS\u548c\u6811\u8393\u6d3e\u8bbe\u5907\u4e0a\uff0cPython\u5df2\u7ecf\u9884\u88c5\u597d\u4e86\uff0c\u4f46\u662f\u4f60\u4ecd\u7136\u9700\u8981\u81ea\u884c\u5b89\u88c5PHP\u548c\u4e00\u4e2agit\u5ba2\u6237\u7aef\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a</p> <p>\u5728 MacOSX \u4e0a\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 homebrew \u7136\u540e\u5728\u4f60\u7684\u7ec8\u7aef\u4e0a\u8f93\u5165\u5982\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>\u5728 \u6811\u8393\u6d3e \u4e0a\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 Raspbian, \u4e00\u4e2a\u4e3a\u6811\u8393\u6d3e\u5f00\u53d1\u7684\u57fa\u4e8eDebian\u7684Linux\u53d1\u884c\u7248\u672c\uff0c\u7136\u540e\u6267\u884c\u5982\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>\u4e00\u65e6\u4f60\u628a\u4e00\u5207\u88c5\u597d\u4e4b\u540e\u4f60\u53ea\u9700\u8981\u8fd9\u4e48\u505a\uff1a</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>\u7136\u540e\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\uff0c\u6253\u5f00 <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-de/","title":"README de","text":""},{"location":"Frontend/shader/appendix/00/README-de/#wie-kann-ich-dieses-buch-offline-lesen","title":"Wie kann ich dieses Buch offline lesen?","text":"<p>Nehmen wir einmal an, Du gehst auf eine l\u00e4ngere Reise und m\u00f6chtest Dich unterwegs in die Shader-Programmierung einarbeiten. In diesem Fall k\u00f6nntest Du eine Kopie dieses Buches auf Deinen Rechner laden und diese \u00fcber einen lokalen Server anzeigen lassen.</p> <p>Alles, was Du daf\u00fcr ben\u00f6tigst, ist Python 3 und ein Client-Programm f\u00fcr GIT. Auf Computern mit MacOS und auf dem RaspberryPi ist Python standardm\u00e4\u00dfig bereits vorinstalliert. Dort musst Du lediglich den GIT-Client zus\u00e4tzlich installieren.</p> <p>Unter MacOSX ben\u00f6tigst Du daf\u00fcr homebrew. Sobald das Paket installiert ist, kannst Du in einem Terminal-Fenster folgendes eingeben:</p> <pre><code>brew update\nbrew upgrade\nbrew install git\n</code></pre> <p>Auf einem RaspberryPi gibst Du folgendes ein:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre> <p>Hast Du alles beisammen, musst Du lediglich folgende Befehle aufrufen, um das Book of Shaders per GIT auf Deinen Rechner zu laden und den Server zur Anzeige des Inhalts zu starten:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>Nutze dann den vorinstallierten Internet-Browser auf Deinem Rechner zur Anzeige des Buches durch Eingabe folgender URL <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-fr/","title":"README fr","text":""},{"location":"Frontend/shader/appendix/00/README-fr/#comment-puis-je-consulter-ce-livre-hors-ligne","title":"Comment puis-je consulter ce livre hors-ligne ?","text":"<p>Disons que vous vous pr\u00e9parez \u00e0 partir pour un long voyage et que vous souhaitez le mettre \u00e0 profit pour apprendre quelques shaders. Dans ce cas, pourquoi pas cr\u00e9er une copie locale de ce livre sur votre ordinateur et lancer un serveur local.</p> <p>Pour cela, vous n'avez besoin que de PHP, Python 3 et d'un client git. Sur les ordinateurs MacOS et Raspberry Pi, Python est install\u00e9 par d\u00e9faut, mais vous il vous reste \u00e0 installer PHP et un client git. Pour cela :</p> <p>Sous MacOSX, assurez-vous d'avoir homebrew install\u00e9 et ensuite dans votre terminal :</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>Sur votre Raspberry Pi, vous devez installer Raspbian, une distribution Linux bas\u00e9e sur Debian con\u00e7u pour Raspberry Pi, puis lancer :</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>Une fois que vous avez tout install\u00e9, il vous suffit d'ex\u00e9cuter les commandes :</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>Enfin, ouvrez dans votre navigateur l'URL <code>http://localhost:8000/</code>, et voil\u00e0 !</p>"},{"location":"Frontend/shader/appendix/00/README-id/","title":"README id","text":""},{"location":"Frontend/shader/appendix/00/README-id/#bagaimana-saya-mendapatkan-buku-ini-secara-offline","title":"Bagaimana saya mendapatkan buku ini secara offline?","text":"<p>Katakanlah anda sedang berada di perjalanan jauh dan anda ingin mempelajari beberapa shader, Dalam kasus itu anda dapat membuat salinan lokal dari buku ini di komputermu dan berjalan di server lokal.</p> <p>Untuk itu anda membutuhkan PHP, Python 3 dan Git Client. Pada komputer MacOS dan Raspberry Pi, Python sudah terpasang secara bawaan tapi anda tetap harus menginstall git client:</p> <p>Pada MacOSX, pastikan mempunyai homebrew yang terpasang dan terminal lakukanlah:</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>Pada Raspberry Pi, anda harus mempunyai Raspbian, sebuah distribusi Linux berbasis Debian yang dibuat untuk Raspberry Pi dan lakukanlah:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>Setelah semua terpasang, anda hanya perlu melakukan:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>Lalu di browser anda kunjungi 'http://localhost:8000/'</p>"},{"location":"Frontend/shader/appendix/00/README-it/","title":"README it","text":""},{"location":"Frontend/shader/appendix/00/README-it/#come-posso-consultare-questo-libro-offline","title":"Come posso consultare questo libro offline?","text":"<p>Diciamo che si dispone di un lungo viaggio e si desidera usarlo per imparare da soli alcuni shaders. In questo caso \u00e8 possibile effettuare una copia locale di questo libro sul computer ed eseguire un server locale.</p> <p>Per questo \u00e8 necessario solo Python 3 e un client git. Sui computer MacOS e Raspberry Pi, Python \u00e8 installato di default, ma \u00e8 comunque necessario installare un client git. Per fare ci\u00f2:</p> <p>Su MacOSX siate sicuri di avere installato homebrew e quindi sul terminale fate:</p> <pre><code>brew update\nbrew upgrade\nbrew install git\n</code></pre> <p>Su Raspberry Pi \u00e8 necessario fare:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre> <p>Una volta che avete installato tutto, non vi resta che fare:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>Quindi aprite il browser e inserite <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/appendix/00/README-pl/#jak-moge-korzystac-z-tej-ksiazki-offline","title":"Jak mog\u0119 korzysta\u0107 z tej ksi\u0105\u017cki offline?","text":"<p>Powiedzmy, \u017ce masz przed sob\u0105 d\u0142ug\u0105 podr\u00f3\u017c i chcesz j\u0105 wykorzysta\u0107 do nauczenia si\u0119 kilku shader\u00f3w. W takim przypadku mo\u017cesz zrobi\u0107 lokaln\u0105 kopi\u0119 tej ksi\u0105\u017cki na swoim komputerze i uruchomi\u0107 lokalny serwer.</p> <p>Do tego potrzebujesz tylko PHP, Pythona 3 i Git'a. Na komputerach z systemem macOS i Raspberry Pi Python jest zainstalowany domy\u015blnie, ale musisz jeszcze zainstalowa\u0107 PHP i klienta Git. W tym celu:</p> <p>Na MacOSX musisz mie\u0107 zainstalowane homebrew by nast\u0119pnie w terminalu uruchomi\u0107:</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>Na Raspberry Pi potrzebujesz Raspbian, opartej na Debianie dystrybucji Linuxa, by nast\u0119pnie uruchomi\u0107:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>Gdy masz ju\u017c wszystko zainstalowane wystarczy uruchomi\u0107:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>Nast\u0119pnie otw\u00f3rz swoj\u0105 przegl\u0105dark\u0119 na <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-ru/","title":"README ru","text":""},{"location":"Frontend/shader/appendix/00/README-ru/#_1","title":"\u041a\u0430\u043a \u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043e\u0444\u0444\u043b\u0430\u0439\u043d?","text":"<p>\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0432\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u0432 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435, \u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0448\u0435\u0439\u0434\u0435\u0440\u043e\u0432 \u0437\u0430 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043a \u0441\u0435\u0431\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e.</p> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e PHP, Python 3 \u0438 git-\u043a\u043b\u0438\u0435\u043d\u0442. \u041d\u0430 MacOS \u0438 Raspberry Pi Python \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u043e PHP \u0438 Git \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <p>\u041d\u0430 MacOSX \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d homebrew \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435:</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>\u041d\u0430 Raspberry Pi \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Raspbian - \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 Linux  \u0434\u043b\u044f Raspberry Pi, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 Debian, \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>\u041a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0448\u0430\u0433:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0430\u0434\u0440\u0435\u0441 <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/appendix/00/README-ua/#_1","title":"\u042f\u043a \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0442\u0438\u0441\u044c \u043a\u043d\u0438\u0433\u043e\u044e \u043e\u0444\u043b\u0430\u0439\u043d?","text":"<p>\u041f\u0440\u0438\u043f\u0443\u0441\u0442\u0438\u043c\u043e, \u0443 \u0432\u0430\u0441 \u0434\u043e\u0432\u0433\u0430 \u043f\u043e\u0434\u043e\u0440\u043e\u0436 \u0456 \u0432\u0438 \u0445\u043e\u0447\u0435\u0442\u0435 \u0437\u0430 \u0446\u0435\u0439 \u0447\u0430\u0441 \u043f\u043e\u0432\u0447\u0438\u0442\u0438 \u0448\u0435\u0439\u0434\u0435\u0440\u0438. \u0423 \u0442\u0430\u043a\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u043e\u043f\u0456\u044e\u0432\u0430\u0442\u0438 \u043a\u043d\u0438\u0433\u0443 \u043d\u0430 \u0441\u0432\u0456\u0439 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440 \u0456 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u0457\u0457 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0456.</p> <p>\u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0456 \u043b\u0438\u0448\u0435 PHP, Python 3 \u0456 git-\u043a\u043b\u0456\u0454\u043d\u0442. \u041d\u0430 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440\u0430\u0445 MacOS \u0456 Raspberry Pi Python \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c, \u0430\u043b\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0449\u0435 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 PHP \u0456 git-\u043a\u043b\u0456\u0454\u043d\u0442. \u0426\u0435 \u043c\u043e\u0436\u043d\u0430 \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c:</p> <p>\u0414\u043b\u044f MacOSX \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0430\u0439\u0442\u0435\u0441\u044c, \u0449\u043e \u0443 \u0432\u0430\u0441 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e homebrew, \u043f\u0456\u0441\u043b\u044f \u0447\u043e\u0433\u043e \u0432 \u0442\u0435\u0440\u043c\u0456\u043d\u0430\u043b\u0456 \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438:</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>\u041d\u0430 Raspberry Pi \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0456\u0442\u044c Raspbian, \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 Linux \u0434\u043b\u044f Raspberry Pi \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 Debian, \u0430 \u043f\u043e\u0442\u0456\u043c \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>\u041f\u0456\u0441\u043b\u044f \u0442\u043e\u0433\u043e, \u044f\u043a \u0432\u0441\u0435 \u0431\u0443\u0434\u0435 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0441\u043a\u043b\u043e\u043d\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0454\u043a\u0442 \u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0456\u0442\u044c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>\u041f\u043e\u0442\u0456\u043c \u0432\u0456\u0434\u043a\u0440\u0438\u0439\u0442\u0435 \u0443 \u0441\u0432\u043e\u0454\u043c\u0443 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0456 \u0430\u0434\u0440\u0435\u0441\u0443 <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/00/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/00/README-vi/#lam-the-nao-e-oc-quyen-sach-nay-ma-khong-can-internet","title":"L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 \u0111\u1ecdc quy\u1ec3n s\u00e1ch n\u00e0y m\u00e0 kh\u00f4ng c\u1ea7n Internet ?","text":"<p>Gi\u1ea3 s\u1eed b\u1ea1n c\u00f3 m\u1ed9t chuy\u1ebfn \u0111i d\u00e0i v\u00e0 mu\u1ed1n tranh th\u1ee7 h\u1ecdc shader. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 b\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o m\u1ed9t b\u1ea3n sao c\u1ee7a quy\u1ec3n s\u00e1ch n\u00e0y v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 b\u1eb1ng server n\u1ed9i b\u1ed9.</p> <p>\u0110\u1ec3 l\u00e0m \u0111i\u1ec1u \u0111\u00f3, b\u1ea1n ch\u1ec9 c\u1ea7n c\u00f3 PHP, Python 2.6 v\u00e0 git. Tr\u00ean c\u00e1c m\u00e1y MacOS v\u00e0 Raspberry Pi th\u00ec Python \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t s\u1eb5n r\u1ed3i nh\u01b0ng b\u1ea1n v\u1eabn c\u1ea7n c\u00e0i th\u00eam PHP v\u00e0 git. C\u1ee5 th\u1ec3:</p> <p>Tr\u00ean MacOSX h\u00e3y c\u00e0i homebrew tr\u01b0\u1edbc r\u1ed3i m\u1edf terminal ra v\u00e0 g\u00f5:</p> <pre><code>brew update\nbrew upgrade\nbrew install git php\n</code></pre> <p>Tr\u00ean Raspberry Pi b\u1ea1n c\u1ea7n c\u00e0i Raspbian, l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n Linux d\u1ef1a tr\u00ean Debian d\u00e0nh ri\u00eang cho Raspberry Pi, sau \u0111\u00f3 g\u00f5 l\u1ec7nh:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer php\n</code></pre> <p>Khi \u0111\u00e3 c\u00e0i \u0111\u1eb7t xong c\u00e1c ph\u1ea7n m\u1ec1m c\u1ea7n thi\u1ebft, b\u1ea1n ch\u1ec9 c\u1ea7n g\u00f5:</p> <pre><code>cd ~\ngit clone --recursive https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\ngit submodule foreach git submodule init &amp;&amp; git submodule update\nphp -S localhost:8000\n</code></pre> <p>R\u1ed3i truy c\u1eadp server n\u1ed9i b\u1ed9 \u1edf \u0111\u1ecba ch\u1ec9 <code>http://localhost:8000/</code></p>"},{"location":"Frontend/shader/appendix/01/","title":"Index","text":""},{"location":"Frontend/shader/appendix/01/#how-to-run-the-examples-on-a-raspberry-pi","title":"How to run the examples on a Raspberry Pi?","text":"<p>A few years ago, assuming that everybody has a computer with a graphical processing unit was a long shot. Now, most computers have a GPU, but it's still a high bar for a requirement in a workshop or class, for example.</p> <p>Thanks to the Raspberry Pi Foundation a new type of small and cheap generation of computers (around $35 each) has found its way into classrooms. More importantly for the purposes of this book, the Raspberry Pi comes with a decent Broadcom GPU that can be accessed directly from the console. I made a flexible GLSL live coding tool call glslViewer that runs all the examples in this book. This program also has the ability to update automatically when the user saves a change to their code. What does this mean? You can edit the shader and every time you save it, the shader will be re-compile and render for you.</p> <p>By making a local copy of the repository of this book (see the above section) and having <code>glslViewer</code> installed, users can run the examples with <code>glslviewer</code>. Also by using the <code>-l</code> flag they can render the example in a corner of the screen while they modify it with any text editor (like <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> or <code>emacs</code>). This also works if the user is connected through ssh/sftp.</p> <p>To install and set this all up on the Raspberry Pi after installing Raspbian, a Debian-based Linux distribution made for Raspberry Pi, and logging in, type the following commands:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-ch/","title":"README ch","text":""},{"location":"Frontend/shader/appendix/01/README-ch/#_1","title":"\u5982\u4f55\u5728\u6811\u8393\u6d3e\u4e0a\u8fd0\u884c\u793a\u4f8b\u7a0b\u5e8f\uff1f","text":"<p>\u51e0\u5e74\u524d\uff0c\u5047\u8bbe\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u53f0\u6709\u56fe\u5f62\u5904\u7406\u5355\u5143\u7684\u8ba1\u7b97\u673a\u662f\u4e00\u4e2a\u5927\u80c6\u7684\u60f3\u6cd5\u3002 \u73b0\u5728\uff0c\u5927\u591a\u6570\u8ba1\u7b97\u673a\u90fd\u6709 GPU\uff0c\u4f46\u5bf9\u4e8e\u5de5\u4f5c\u574a\u6216\u8bfe\u5802\u7684\u8981\u6c42\u6765\u8bf4\uff0c\u8fd9\u4ecd\u7136\u662f\u4e2a\u5f88\u9ad8\u7684\u6807\u51c6\u3002</p> <p>\u591a\u4e8f\u4e86 \u6811\u8393\u6d3e\u57fa\u91d1\u4f1a\uff0c \u4e00\u79cd\u65b0\u578b\u7684\u5c0f\u578b\u5ec9\u4ef7\u8ba1\u7b97\u673a\uff08\u6bcf\u53f0\u7ea635\u7f8e\u5143\uff09\u5df2\u88ab\u5f15\u5165\u8bfe\u5802\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5c31\u672c\u4e66\u7684\u9700\u6c42\u800c\u8a00\uff0c\u6811\u8393\u6d3e\u914d\u5907\u4e86\u4e00\u4e2a\u4e0d\u9519\u7684\u53ef\u4ee5\u76f4\u63a5\u4ece\u63a7\u5236\u53f0\u8bbf\u95ee\u7684Broadcom GPU\u3002\u6211\u505a\u4e86\u4e00\u4e2a \u53eb\u4f5cglslViewer\u7684\u7075\u6d3b\u7684GLSL\u5b9e\u65f6\u7f16\u7a0b\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u8fd0\u884c\u8fd9\u672c\u4e66\u91cc\u5168\u90e8\u7684\u793a\u4f8b\u3002\u5f53\u7528\u6237\u4fdd\u5b58\u5bf9\u5176\u4ee3\u7801\u7684\u66f4\u6539\u65f6\uff0c\u8be5\u7f16\u7a0b\u5de5\u5177\u8fd8\u5177\u6709\u81ea\u52a8\u66f4\u65b0\u7684\u80fd\u529b\u3002\u8fd9\u662f\u5565\u610f\u601d\uff1f \u5c31\u662f\u8bf4\uff0c\u4f60\u53ef\u4ee5\u7f16\u8f91\u7740\u8272\u5668\uff0c\u6bcf\u6b21\u4fdd\u5b58\u65f6\uff0c\u7740\u8272\u5668\u90fd\u4f1a\u91cd\u65b0\u7f16\u8bd1\u5e76\u6e32\u67d3\u3002</p> <p>\u901a\u8fc7\u5236\u4f5c\u672c\u4e66\u7684\u672c\u5730\u526f\u672c\uff08\u8be6\u60c5\u89c1\u4e0a\u4e00\u7ae0\u8282\uff09 \u5e76 \u5b89\u88c5\u597d<code>glslViewer</code>\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528<code>glslviewer</code>\u8fd0\u884c\u793a\u4f8b\u3002\u6b64\u5916\uff0c\u901a\u8fc7\u4f7f\u7528  <code>-l</code> \u6807\u5fd7\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u4f60\u7528\u4efb\u4f55\u6587\u672c\u7f16\u8f91\u5668\uff08\u4f8b\u5982 <code>nano</code>\uff0c <code>pico</code>\uff0c <code>vi</code>\uff0c <code>vim</code> \u6216 <code>emacs</code>)\u6765\u4fee\u6539\u4ee3\u7801\u7684\u65f6\u5019\u5728\u5c4f\u5e55\u89d2\u843d\u6e32\u67d3\u793a\u4f8b\u3002\u5982\u679c\u7528\u6237\u901a\u8fc7ssh\u6216sftp\u534f\u8bae\u8fde\u63a5\uff0c\u8fd9\u4e5f\u6709\u6548\u3002</p> <p>\u5728\u6811\u8393\u6d3e\u4e0a\u88c5\u5b8c Raspbian\u2014\u2014\u4e00\u4e2a\u4e3a\u6811\u8393\u6d3e\u5f00\u53d1\u7684\u57fa\u4e8eDebian\u7684Linux\u53d1\u884c\u7248\u672c\u2014\u2014\u4e4b\u540e\uff0c\u8981\u5728\u6811\u8393\u6d3e\u4e0a\u88c5\u597d\u641e\u597d\u8fd9\u4e00\u5207\uff0c\u53ea\u9700\u8981\u767b\u9646\u7cfb\u7edf\uff0c\u8f93\u5165\u5982\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-de/","title":"README de","text":""},{"location":"Frontend/shader/appendix/01/README-de/#wie-kann-ich-die-beispiele-auf-einem-raspberrypi-ausfuhren","title":"Wie kann ich die Beispiele auf einem RaspberryPi ausf\u00fchren?","text":"<p>Vor wenigen Jahren konnte man noch nicht davon ausgehen, dass jedermann \u00fcber einen Computer mit einer GPU verf\u00fcgt. Heutzutage gilt das nicht mehr. Doch im Bereich von Schulen, Universit\u00e4ten und anderen Weiterbildungseichrichtungen ist dies immer noch eine hohe Anforderung.</p> <p>Durch das Raspberry Projekt hat mittlerweile eine neue Generation kleiner und billiger Computer (das St\u00fcck ab ca. 40 Euro) ihren Weg in viele Klassenzimmer gefunden. Vor allem verf\u00fcgt der RaspberryPi \u00fcber einen ansehnlichen Grafikchip mit GPU, der direkt aus der Kommandozeile angesprochen werden kann.</p> <p>Ich habe ein flexibles Werkzeug f\u00fcr die Programmierung von GLSL-Shadern entwickelt, den glslViewer. Damit k\u00f6nnen alle Beispiele aus diesem Buch ausgef\u00fchrt werden. Sobald man Ver\u00e4nderungen am aktuellen Shader-Programmcode abspeichert, kompiliert das Programm den Shader erneut und bringt ihn zur Ausf\u00fchrung. Auf dem Bildschirm erscheint daraufhin die aktualisierte Anzeige des Shaders.</p> <p>Indem Du eine lokale Kopie dieses Buches und seiner Beispielprogramme auf Deinem Rechner anlegst (mehr dazu im vorhergehenden Kapitel) und den [<code>glslViewer</code>] (https://github.com/patriciogonzalezvivo/glslViewer) installierst, kannst Du die Beispielprogramme mit dem <code>glslviewer</code> ausf\u00fchren. Wenn Du beim Start dieses Programms den Kommandozeilenschalter <code>-l</code> angibst, erscheint die erzeugte Grafik in einer Ecke des Bildschirms, w\u00e4hrend Du gleichzeitig den Shader-Programmcode mit einem beliebigen Text-Editor (etwa <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> oder <code>emacs</code>) bearbeitest. Das funktioniert auch, wenn Du mit dem Terminal des RaspberryPi \u00fcber ssh/sftp verbunden bist.</p> <p>Um die angesprochenen Tools auf einem RaspberryPi zu installieren, rufe nach dem Start des Betriebssystems und dem Einloggen folgende Befehle \u00fcber die Kommandozeile auf:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-fr/","title":"README fr","text":""},{"location":"Frontend/shader/appendix/01/README-fr/#comment-executer-les-exemples-sur-un-raspberry-pi","title":"Comment ex\u00e9cuter les exemples sur un Raspberry Pi ?","text":"<p>Il y a quelques ann\u00e9es, supposer que tout le monde dispose d'un ordinateur dot\u00e9 d'une unit\u00e9 de traitement graphique \u00e9tait ambitieux. Maintenant, la plupart des ordinateurs poss\u00e8dent un GPU, mais c'est toujours une exigence compliqu\u00e9 dans un atelier ou une classe, par exemple.</p> <p>Gr\u00e2ce \u00e0 la Fondation Raspberry Pi, une nouvelle g\u00e9n\u00e9ration d'ordinateurs peu co\u00fbteux (environ 30\u20ac l'unit\u00e9) a trouv\u00e9 son chemin dans les salles de classe. Plus important encore pour le propos de ce livre, le Raspberry Pi est livr\u00e9 avec un bon GPU Broadcom qui peut \u00eatre utilis\u00e9 directement depuis la console. J'ai cr\u00e9\u00e9 un outil flexible de d\u00e9veloppement en temps r\u00e9el pour GLSL appel\u00e9 glslViewer  qui ex\u00e9cute tous les exemples de ce livre. Ce programme a \u00e9galement la capacit\u00e9 de s'actualiser automatiquement lorsque l'utilisateur enregistre une modification de son code. Qu'est-ce que cela veut dire ? Vous pouvez modifier le shader et chaque fois que vous l'enregistrez, le shader sera re-compil\u00e9 et rendu pour vous.</p> <p>En effectuant une copie locale du d\u00e9p\u00f4t git de ce livre (voir la section ci-dessous) et avec <code>glslViewer</code> install\u00e9, les utilisateurs peuvent ex\u00e9cuter les exemples avec <code>glslviewer</code>. De plus, en utilisant l'option <code>-l</code>, ils peuvent lancer les exemples dans un coin de l'\u00e9cran pendant qu'ils les modifient avec n'importe quel \u00e9diteur de texte (comme <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> ou <code>emacs</code>). Cela fonctionne \u00e9galement si l'utilisateur est connect\u00e9 via ssh/sftp.</p> <p>Pour installer et configurer tout cela sur Raspberry Pi, apr\u00e8s l'installation de Raspbian, une distribution Linux bas\u00e9e sur Debian con\u00e7ue pour Raspberry Pi, connectez-vous et tapez les commandes suivantes :</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-id/","title":"README id","text":""},{"location":"Frontend/shader/appendix/01/README-id/#bagaimana-cara-menjalankan-contoh-di-raspberry-pi","title":"Bagaimana cara menjalankan contoh di Raspberry Pi?","text":"<p>Beberapa tahun yang lalu, asumsikan bahwa setiap orang memiliki komputer dengan unit pemrosesan grafis adalah hal yang mustahil. Sekarang, sebagian besar komputer memiliki GPU, tetapi masih merupakan standar yang tinggi untuk persyaratan di bengkel atau kelas, misalnya.</p> <p>Terima Kasih kepada Raspberry Pi Foundation sebuah jenis baru dari generasi komputer yang kecil dan murah (sekitar $35/Rp500,000 satunya) telah menemukan jalannya ke kelas. Yang terpenting untuk tujuan buku ini, Raspberry Pi hadir dengan GPU Broadcom yang layak yang dapat diakses langsung dari konsol. Saya membuat panggilan alat pengkodean langsung GLSL fleksibel glslViewer yang menjalankan semua contoh dalam buku ini. Program ini juga memiliki kemampuan untuk memperbarui secara otomatis ketika pengguna menyimpan perubahan pada kode mereka. Apa artinya ini? Anda dapat mengedit shader dan setiap kali Anda menyimpannya, shader akan dikompilasi ulang dan dirender untuk Anda.</p> <p>Dengan membuat salinan lokal dari repositori buku ini (lihat bagian di atas) dan <code>glslViewer</code> diinstal, pengguna dapat menjalankan contoh dengan<code>glslviewer</code>. Juga dengan menggunakan flag <code>-l</code> mereka dapat membuat contoh di sudut layar sementara mereka memodifikasinya dengan editor teks apa pun (seperti <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> atau<code>emacs</code>) . Ini juga berfungsi jika pengguna terhubung melalui ssh/sftp.</p> <p>Untuk memasang dan mengatur semua ini pada Raspberry Pi setelah memasang Raspbian, sebuah distribusi Linux berbasis Debian yang dibuat untuk Raspberry Pi, ketik perintah berikut:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-it/","title":"README it","text":""},{"location":"Frontend/shader/appendix/01/README-it/#come-posso-eseguire-gli-esempi-su-un-raspberry-pi","title":"Come posso eseguire gli esempi su un Raspberry Pi?","text":"<p>Alcuni anni fa, non era del tutto ovvio che tutti disponessero di un computer con una GPU. Ora, nonostante la maggior parte dei computer abbia una carta grafica, non tutti i corsi o classi possono permettersene uno.</p> <p>Grazie al progetto Raspberry Pi una nuova generazione di computer piccoli ed economici (circa 35euro ciascuno) ha cominciato a diffondersi nelle aule scolastiche. Ancora pi\u00f9 importante ai fini di questo libro, il Raspberry Pi viene fornito con una scheda GPU Bradcom decente a cui si pu\u00f2 accedere direttamente dalla console. Ho creato uno strumento flessibile per programmare GLSL live chiamato glslViewer capace di far funzionare tutti gli esempi di questo libro. Questo programma \u00e8 anche capace di aggiornare automaticamente le modifiche che l'utente fa quando le salva. Cosa significa? \u00e8 possibile modificare lo shader e ogni volta che lo si salva, lo shader sar\u00e0 ricompilato e visualizzato per voi.</p> <p>Facendo una copia locale del repository di questo libro (vedi paragrafo precedente) e con <code>glslViewer</code> installato, gli utenti possono eseguire gli esempi con <code>glslviewer</code>. Inoltre usando il flag <code>-l</code> si pu\u00f2 visualiizare l'esempio in un angolo dello schermo mentre lo si modifica con un qualsiasi editor di testo (come <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> or <code>emacs</code>). Questo funziona anche quando l'utente \u00e8 collegato tramite ssh/sftp.</p> <p>Per installare e configurare tutto ci\u00f2 sul Raspberry Pi, dopo l'installazione del sistema operativo e il login, digitate i seguenti comandi:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/appendix/01/README-pl/#jak-uruchomic-przykady-na-raspberry-pi","title":"Jak uruchomi\u0107 przyk\u0142ady na Raspberry Pi?","text":"<p>Jeszcze kilka lat temu za\u0142o\u017cenie, \u017ce ka\u017cdy ma komputer z procesorem graficznym by\u0142o dalekie od prawdy. Teraz wi\u0119kszo\u015b\u0107 komputer\u00f3w ma GPU, ale to wci\u0105\u017c wysoka poprzeczka.</p> <p>Dzi\u0119ki Fundacji Raspberry Pi nowy typ ma\u0142ych i tanich komputer\u00f3w nowej generacji (oko\u0142o 35 dolar\u00f3w za sztuk\u0119) trafi\u0142 do sal lekcyjnych. Co wa\u017cniejsze dla cel\u00f3w tej ksi\u0105\u017cki, Raspberry Pi jest wyposa\u017cone w przyzwoity procesor graficzny Broadcom, do kt\u00f3rego mo\u017cna uzyska\u0107 dost\u0119p bezpo\u015brednio z konsoli. Stworzy\u0142em elastyczne narz\u0119dzie do kodowania GLSL na \u017cywo o nazwie glslViewer, kt\u00f3re uruchamia wszystkie przyk\u0142ady zawarte w tej ksi\u0105\u017cce. Program ten automatycznie si\u0119 odswie\u017ca, gdy u\u017cytkownik zapisze zmiany w swoim kodzie. Co to oznacza? Mo\u017cesz edytowa\u0107 shader i za ka\u017cdym razem, gdy go zapiszesz, shader zostanie ponownie skompilowany i wyrenderowany za Ciebie.</p> <p>Robi\u0105c lokaln\u0105 kopi\u0119 repozytorium tej ksi\u0105\u017cki (zobacz poprzedni rozdzia\u0142) i maj\u0105c zainstalowany <code>glslViewer</code>, u\u017cytkownicy mog\u0105 uruchamia\u0107 przyk\u0142ady za pomoc\u0105 <code>glslviewer</code>. Dodaj\u0105c flag\u0119 <code>-l</code> mog\u0105 oni renderowa\u0107 przyk\u0142ad w rogu ekranu, podczas gdy modyfikuj\u0105 go za pomoc\u0105 dowolnego edytora tekstu (jak <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> lub <code>emacs</code>). Dzia\u0142a to r\u00f3wnie\u017c przy po\u0142\u0105czeniu przez ssh/sftp.</p> <p>Aby zainstalowa\u0107 i skonfigurowa\u0107 to wszystko na Raspberry Pi, po zainstalowaniu Raspbian (dystrybucja Linuksa oparta na Debianie, stworzona dla Raspberry Pi) i zalogowaniu si\u0119, wpisz nast\u0119puj\u0105ce polecenia:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-ru/","title":"README ru","text":""},{"location":"Frontend/shader/appendix/01/README-ru/#raspberry-pi","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Raspberry Pi?","text":"<p>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0435\u0442 \u043d\u0430\u0437\u0430\u0434 \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043e\u043f\u0440\u043e\u043c\u0435\u0442\u0447\u0438\u0432\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0441 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u0435\u043b\u0435\u043c. \u0422\u0435\u043f\u0435\u0440\u044c \u0436\u0435 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 GPU, \u043d\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0435\u0433\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0443\u0447\u0435\u0431\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u0438 \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0430.</p> <p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f Raspberry Pi Foundation, \u0432 \u0443\u0447\u0435\u0431\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 \u043f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0438 \u0434\u0435\u0448\u0451\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 (\u043e\u043a\u043e\u043b\u043e $35 \u0437\u0430 \u0448\u0442\u0443\u043a\u0443). \u0427\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0438, Raspberry Pi \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u043f\u0440\u0438\u043b\u0438\u0447\u043d\u044b\u043c GPU \u0444\u0438\u0440\u043c\u044b Broadcom, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u042f \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0433\u0438\u0431\u043a\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 GLSL \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c glslViewer. \u0421 \u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0437 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438. \u042d\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0434\u0435. \u0427\u0442\u043e \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442? \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0435 \u0448\u0435\u0439\u0434\u0435\u0440 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043f\u0435\u0440\u0435\u0440\u0438\u0441\u0443\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.</p> <p>\u0421\u0434\u0435\u043b\u0430\u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043f\u0438\u044e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u043a\u043d\u0438\u0433\u0438 (\u0441\u043c. \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444) \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 <code>glslViewer</code>, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u043b\u0430\u0433 <code>-l</code>, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432 \u0443\u0433\u043b\u0443 \u044d\u043a\u0440\u0430\u043d\u0430 \u043f\u0440\u044f\u043c\u043e \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u044e\u0431\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c (<code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> \u0438\u043b\u0438 <code>emacs</code>). \u042d\u0442\u043e \u0442\u0430\u043a \u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043f\u043e ssh \u0438\u043b\u0438 sftp.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0451 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043d\u0430 Raspberry Pi, \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 Raspbian \u0438 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/appendix/01/README-ua/#raspberry-pi","title":"\u042f\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u043d\u0430 Raspberry Pi?","text":"<p>\u041a\u0456\u043b\u044c\u043a\u0430 \u0440\u043e\u043a\u0456\u0432 \u0442\u043e\u043c\u0443, \u043f\u0440\u0438\u043f\u0443\u0441\u043a\u0430\u0442\u0438, \u0449\u043e \u043a\u043e\u0436\u0435\u043d \u043c\u0430\u0454 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440 \u0456\u0437 \u0433\u0440\u0430\u0444\u0456\u0447\u043d\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440\u043e\u043c, \u0431\u0443\u043b\u043e \u0432\u0430\u0436\u043a\u043e. \u0417\u0430\u0440\u0430\u0437 \u0431\u0456\u043b\u044c\u0448\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440\u0456\u0432 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c GPU, \u0445\u043e\u0447\u0430 \u043f\u043e\u0434\u0435\u043a\u0443\u0434\u0438 \u0439 \u0434\u043b\u044f \u0434\u0435\u044f\u043a\u0438\u0445 \u043d\u0430\u0432\u0447\u0430\u043b\u044c\u043d\u0438\u0445 \u043a\u043b\u0430\u0441\u0456\u0432 \u0446\u0435 \u0432\u0441\u0435 \u0449\u0435 \u043d\u0435 \u0442\u0430\u043a.</p> <p>\u0417\u0430\u0432\u0434\u044f\u043a\u0438 Raspberry Pi Foundation \u043d\u043e\u0432\u0438\u0439 \u0442\u0438\u043f \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u0456 \u0434\u0435\u0448\u0435\u0432\u0438\u0445 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440\u0456\u0432 (\u0431\u043b\u0438\u0437\u044c\u043a\u043e 35$ \u0437\u0430 \u0448\u0442\u0443\u043a\u0443) \u0437\u043d\u0430\u0439\u0448\u043e\u0432 \u0441\u0432\u0456\u0439 \u0448\u043b\u044f\u0445 \u0434\u043e \u043d\u0430\u0432\u0447\u0430\u043b\u044c\u043d\u0438\u0445 \u043a\u043b\u0430\u0441\u0456\u0432. \u0429\u043e \u0449\u0435 \u0432\u0430\u0436\u043b\u0438\u0432\u0456\u0448\u0435 \u0434\u043b\u044f \u0446\u0456\u043b\u0435\u0439 \u0446\u0456\u0454\u0457 \u043a\u043d\u0438\u0433\u0438, Raspberry Pi \u043f\u043e\u0441\u0442\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u0433\u0456\u0434\u043d\u0438\u043c \u0433\u0440\u0430\u0444\u0456\u0447\u043d\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440\u043e\u043c Broadcom, \u0434\u043e \u044f\u043a\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0431\u0435\u0437\u043f\u043e\u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e \u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0456. \u042f \u0441\u0442\u0432\u043e\u0440\u0438\u0432 \u0433\u043d\u0443\u0447\u043a\u0438\u0439 \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043e\u043d\u043b\u0430\u0439\u043d-\u043a\u043e\u0434\u0443\u0432\u0430\u043d\u043d\u044f GLSL \u043f\u0456\u0434 \u043d\u0430\u0437\u0432\u043e\u044e glslViewer, \u044f\u043a\u0438\u0439 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0454 \u0432\u0441\u0456 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0446\u0456\u0454\u0457 \u043a\u043d\u0438\u0433\u0438. \u0426\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u043c\u0430\u0454 \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u043e\u043d\u043e\u0432\u043b\u044e\u0432\u0430\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043a\u043e\u043b\u0438 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0437\u043c\u0456\u043d\u0438 \u0443 \u0441\u0432\u043e\u0454\u043c\u0443 \u043a\u043e\u0434\u0456. \u0429\u043e \u0446\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u044c? \u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u043a\u043e\u0434 \u0448\u0435\u0439\u0434\u0435\u0440\u0443, \u0456 \u0449\u043e\u0440\u0430\u0437\u0443, \u043a\u043e\u043b\u0438 \u0432\u0438 \u0439\u043e\u0433\u043e \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454\u0442\u0435, \u0432\u0456\u043d \u0431\u0443\u0434\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0441\u043a\u043e\u043c\u043f\u0456\u043b\u044c\u043e\u0432\u0430\u043d\u0438\u0439 \u0437 \u043e\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f\u043c \u0432\u0438\u0441\u043b\u0456\u0434\u043d\u043e\u0433\u043e \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f.</p> <p>\u0421\u0442\u0432\u043e\u0440\u0438\u0432\u0448\u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443 \u043a\u043e\u043f\u0456\u044e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0456\u044e \u043a\u043d\u0438\u0433\u0438 (\u0434\u0438\u0432. \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u0440\u043e\u0437\u0434\u0456\u043b) \u0456 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432\u0448\u0438 <code>glslViewer</code>, \u043c\u043e\u0436\u043d\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0438 <code>glslviewer</code>. \u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u0437 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u043c \u043f\u0440\u0430\u043f\u043e\u0440\u0446\u0435\u043c <code>-l</code> \u043c\u043e\u0436\u043d\u0430 \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u043f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u0443 \u043a\u0443\u0442\u043a\u0443 \u0435\u043a\u0440\u0430\u043d\u0430 \u043f\u0456\u0434 \u0447\u0430\u0441 \u0440\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u0434\u0443 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430 (\u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, <code>nano</code>, <code>pico</code>, <code>vi</code>, <code>vim</code> \u0430\u0431\u043e <code>emacs</code>) . \u0426\u0435 \u0442\u0430\u043a\u043e\u0436 \u043f\u0440\u0430\u0446\u044e\u0454 \u043f\u0440\u0438 \u043f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u0456 \u0447\u0435\u0440\u0435\u0437 ssh/sftp.</p> <p>\u0429\u043e\u0431 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u0442\u0430 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u0442\u0438 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u043d\u0430 Raspberry Pi, \u043f\u0456\u0441\u043b\u044f \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f Raspbian \u0456 \u0432\u0445\u043e\u0434\u0443 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/01/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/01/README-vi/#lam-the-nao-e-chay-cac-vi-du-tren-raspberry-pi","title":"L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ch\u1ea1y c\u00e1c v\u00ed d\u1ee5 tr\u00ean Raspberry Pi ?","text":"<p>V\u00e0i n\u0103m tr\u01b0\u1edbc, vi\u1ec7c m\u1ed9t ai \u0111\u00f3 s\u1edf h\u1eefu m\u1ed9t chi\u1ebfc m\u00e1y t\u00ednh c\u00f3 card \u0111\u1ed3 ho\u1ea1 c\u00f2n kh\u00e1 hi\u1ebfm. Gi\u1edd th\u00ec h\u1ea7u nh\u01b0u m\u00e1y n\u00e0o c\u0169ng c\u00f3, nh\u01b0ng v\u1eabn c\u00f2n l\u00e2u n\u1eefa th\u00ec c\u00e1c l\u1edbp h\u1ecdc m\u1edbi \u0111\u01b0\u1ee3c trang b\u1ecb \u0111\u1ea7y \u0111\u1ee7.</p> <p>Nh\u1edd c\u00f3 Raspberry Pi Foundation, m\u1ed9t th\u1ebf h\u1ec7 m\u00e1y t\u00ednh m\u1edbi r\u1ea5t nh\u1ecf v\u00e0 r\u1ebb (ch\u1ec9 kho\u1ea3ng 35$ m\u1ed9t chi\u1ebfc) \u0111\u00e3 ra \u0111\u1eddi v\u00e0 \u0111\u01b0\u1ee3c trang b\u1ecb cho c\u00e1c l\u1edbp h\u1ecdc. \u0110i\u1ec1u quan tr\u1ecdng nh\u1ea5t \u0111\u1ed1i v\u1edbi quy\u1ec3n s\u00e1ch n\u00e0y l\u00e0, c\u00e1c m\u00e1y Raspberry Pi \u0111\u01b0\u1ee3c trang b\u1ecb GPU \u0111\u1eddi m\u1edbi c\u1ee7a h\u00e3ng Broadcom s\u1ebd cho ph\u00e9p truy c\u1eadp tr\u1ef1c ti\u1ebfp ngay t\u1eeb c\u1eeda s\u1ed5 d\u00f2ng l\u1ec7nh. T\u00f4i \u0111\u00e3 t\u1ea1o ra m\u1ed9t c\u00f4ng c\u1ee5 h\u1ed7 tr\u1ee3 code GLSL g\u1ecdi l\u00e0 glslViewer c\u00f3 th\u1ec3 ch\u1ea1y t\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5 trong quy\u1ec3n s\u00e1ch n\u00e0y. C\u00f4ng c\u1ee5 n\u00e0y c\u00f2n c\u00f3 kh\u1ea3 n\u0103ng c\u1eadp nh\u1eadt h\u00ecnh \u1ea3nh t\u1ef1 \u0111\u1ed9ng, ngay khi b\u1ea1n s\u1eeda code.</p> <p>B\u1eb1ng c\u00e1ch t\u1ea1o m\u1ed9t b\u1ea3n sao c\u1ee7a quy\u1ec3n s\u00e1ch n\u00e0y \u1edf m\u00e1y t\u00ednh c\u1ee7a b\u1ea1n (xem h\u01b0\u1edbng d\u1eabn \u1edf ph\u1ea7n tr\u01b0\u1edbc) v\u00e0 c\u00e0i \u0111\u1eb7t <code>glslViewer</code>, b\u1ea1n c\u00f3 th\u1ec3 ch\u1ea1y c\u00e1c v\u00ed d\u1ee5 v\u1edbi <code>glslViewer</code>. Ngo\u00e0i ra n\u1ebfu th\u00eam tham s\u1ed1 <code>-l</code> khi ch\u1ea1y th\u00ec m\u1ed9t g\u00f3c m\u00e0n h\u00ecnh s\u1ebd \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 d\u1ef1ng h\u00ecnh v\u00ed d\u1ee5 \u0111\u00f3, trong khi b\u1ea1n c\u00f3 th\u1ec3 d\u00f9ng b\u1ea5t k\u1ef3 ch\u01b0\u01a1ng tr\u00ecnh bi\u00ean so\u1ea1n n\u00e0o \u0111\u1ec3 s\u1eeda code. N\u00f3 c\u00f2n ho\u1ea1t \u0111\u1ed9ng ngay c\u1ea3 khi b\u1ea1n k\u1ebft n\u1ed1i t\u1eeb m\u1ed9t m\u00e1y t\u00ednh kh\u00e1c th\u00f4ng qua ssh/sftp.</p> <p>\u0110\u1ec3 t\u1ea1o b\u1ea3n sao c\u1ee7a quy\u1ec3n s\u00e1ch v\u00e0 c\u00e0i glslViewer sau khi \u0111\u00e3 c\u00f3 Raspbian, g\u00f5 c\u00e1c l\u1ec7nh sau:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\ncd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\n</code></pre>"},{"location":"Frontend/shader/appendix/02/","title":"Index","text":""},{"location":"Frontend/shader/appendix/02/#how-to-print-this-book","title":"How to print this book?","text":"<p>Let\u2019s say you don\u2019t want to navigate or interact with the examples and you just want a good old fashion text book which you can read on the beach or on your commute to the city. In that case you can print this book.</p>"},{"location":"Frontend/shader/appendix/02/#installing-glslviewer","title":"Installing glslViewer","text":"<p>For printing this book you need first to parse it. For that you will need <code>glslViewer</code> a console shader tool that will compile and transform the shader examples into images.</p> <p>In MacOSX get sure to have homebrew installed and then on your terminal do:</p> <pre><code>brew install glslviewer\n</code></pre> <p>On Raspberry Pi you need to get Raspbian, a Debian-based Linux distribution made for Raspberry Pi and then do:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/#installing-python-3-latex-engine-and-pandoc","title":"Installing Python 3, Latex Engine and Pandoc","text":"<p>For parsing the Markdown chapters into Latex and then into a PDF file we will use Xetex Latex Engine and Pandoc.</p> <p>In MacOSX:</p> <p>Download and Install MacTeX by:</p> <pre><code>brew install --cask mactex-no-gui\n</code></pre> <p>and then install Pandoc and Python 3 by:</p> <pre><code>brew install pandoc python\n</code></pre> <p>On Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/#compile-the-book-into-a-pdf-and-print-it","title":"Compile the book into a pdf and print it","text":"<p>Now that you have all you need, it is time to clone the repository of this book and compile the book.</p> <p>For that open your terminal once again and type:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean pdf\n</code></pre> <p>If everything goes well, you will see a <code>book.pdf</code> file which you can read on your favorite device or print.</p>"},{"location":"Frontend/shader/appendix/02/#compile-the-book-into-an-epub-for-use-with-an-e-reader","title":"Compile the book into an epub for use with an e-reader","text":"<pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean epub\n</code></pre> <p>The generated <code>book.epub</code> can be used directly, or converted to a <code>.mobi</code> file for use with Kindle by using a converter, for example Calibre.</p>"},{"location":"Frontend/shader/appendix/02/README-ch/","title":"README ch","text":""},{"location":"Frontend/shader/appendix/02/README-ch/#_1","title":"\u5982\u4f55\u6253\u5370\u8fd9\u672c\u4e66\uff1f","text":"<p>\u5047\u8bbe\u4f60\u4e0d\u60f3\u6d4f\u89c8\u793a\u4f8b\u6216\u4e0e\u793a\u4f8b\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u53ea\u60f3\u8981\u4e00\u672c\u7edd\u4f73\u7684\u3001\u8001\u6d3e\u7684\u3001\u53ef\u4ee5\u5728\u6d77\u6ee9\u4e0a\u6216\u901a\u52e4\u5230\u57ce\u5e02\u7684\u8def\u4e0a\u9605\u8bfb\u7684\u7eb8\u8d28\u4e66\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u672c\u4e66\u6253\u5370\u51fa\u6765\u3002</p>"},{"location":"Frontend/shader/appendix/02/README-ch/#glslviewer","title":"\u5b89\u88c5glslViewer","text":"<p>\u8981\u6253\u5370\u8fd9\u672c\u4e66\uff0c\u4f60\u9996\u5148\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u3002\u4e3a\u6b64\uff0c\u4f60\u4f1a\u9700\u8981 <code>glslViewer</code>\u2014\u2014\u4e00\u4e2a\u63a7\u5236\u53f0\u7740\u8272\u5668\u5de5\u5177\uff0c\u5b83\u5c06\u7f16\u8bd1\u7740\u8272\u5668\u793a\u4f8b\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u56fe\u50cf\u3002</p> <p>\u5728 MacOSX \u4e0a\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 homebrew \u7136\u540e\u5728\u4f60\u7684\u7ec8\u7aef\u4e0a\u8f93\u5165\u5982\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>brew install glslviewer\n</code></pre> <p>\u5728 \u6811\u8393\u6d3e \u4e0a\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 Raspbian, \u4e00\u4e2a\u4e3a\u6811\u8393\u6d3e\u5f00\u53d1\u7684\u57fa\u4e8eDebian\u7684Linux\u53d1\u884c\u7248\u672c\uff0c\u7136\u540e\u6267\u884c\u5982\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-ch/#python-3latex-enginepandoc","title":"\u5b89\u88c5Python 3\uff0cLatex Engine\u548cPandoc","text":"<p>\u4e3a\u4e86\u5c06 Markdown \u7ae0\u8282\u89e3\u6790\u4e3a Latex\uff0c\u7136\u540e\u8f6c\u6362\u4e3aPDF\u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Xetex Latex Engine \u548c Pandoc\u3002</p> <p>\u5728 MacOSX \u4e0a\uff1a</p> <p>\u4e0b\u8f7d\u5e76\u5b89\u88c5 MacTeX \uff1a</p> <pre><code>brew cask install mactex-no-gui\n</code></pre> <p>\u7136\u540e\u5b89\u88c5 Pandoc \u548c Python 3:</p> <pre><code>brew install pandoc python\n</code></pre> <p>\u5728 \u6811\u8393\u6d3e \uff08Raspbian\uff09\u4e0a:</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-ch/#pdf","title":"\u5c06\u4e66\u7f16\u8bd1\u6210pdf\u5e76\u6253\u5370","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u62e5\u6709\u4e86\u6240\u9700\u7684\u4e00\u5207\uff0c\u662f\u65f6\u5019\u514b\u9686 \u672c\u4e66\u7684\u5e93 \u5e76\u7f16\u8bd1\u672c\u4e66\u4e86\u3002</p> <p>\u4e3a\u6b64\uff0c\u8bf7\u518d\u6b21\u6253\u5f00\u4f60\u7684\u7ec8\u7aef\u5e76\u8f93\u5165\uff1a</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean pdf\n</code></pre> <p>\u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u4f60\u5c06\u770b\u5230\u4e00\u4e2a <code>book.pdf</code> \u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u5728\u81ea\u5df1\u559c\u6b22\u7684\u8bbe\u5907\u4e0a\u9605\u8bfb\u6216\u6253\u5370\u8be5\u6587\u4ef6\u3002</p>"},{"location":"Frontend/shader/appendix/02/README-ch/#epub","title":"\u5c06\u4e66\u7f16\u8bd1\u6210 epub \u4ee5\u4f9b\u7535\u5b50\u9605\u8bfb\u5668\u4f7f\u7528","text":"<pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean epub\n</code></pre> <p>\u751f\u6210\u7684 <code>book.epub</code> \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8f6c\u6362\u5668\uff08\u4f8b\u5982 Calibre\uff09\u8f6c\u6362\u4e3a <code>.mobi</code> \u6587\u4ef6\u4ee5\u4f9b Kindle \u9605\u8bfb\u3002</p>"},{"location":"Frontend/shader/appendix/02/README-de/","title":"README de","text":""},{"location":"Frontend/shader/appendix/02/README-de/#wie-kann-ich-dieses-buch-ausdrucken","title":"Wie kann ich dieses Buch ausdrucken?","text":"<p>Nehmen wir einmal an, Du willst gar nicht mit den Beispielprogrammen in diesem Buch interagieren, sondern den Text wie ein gutes altes Buch im Urlaub oder auf dem t\u00e4glichen Weg zur Arbeit lesen. In diesem Fall kannst Du Dir den Text einfach ausdrucken.</p>"},{"location":"Frontend/shader/appendix/02/README-de/#installation-des-glslviewer","title":"Installation des glslViewer","text":"<p>Um den Text auszudrucken, m\u00fcssen die verschiedenen Bestandteile des Buches zun\u00e4chst aufbereitet werden. Daf\u00fcr ben\u00f6tigst Du den <code>glslViewer</code>, ein Werkzeug f\u00fcr die Kommandozeile, mit dem Du aus den verschiedenen Beispielprogrammen die daraus resultierenden Bilder generieren kannst.</p> <p>Unter MacOSX ben\u00f6tigst Du zun\u00e4chst homebrew. Nach dessen Installation kannst Du in einem Terminalfenster folgendes eingeben:</p> <pre><code>brew update\nbrew upgrade\nbrew tap homebrew/versions\nbrew install glfw3\ncd ~\ngit clone http://github.com/patriciogonzalezvivo/glslViewer.git\ncd glslViewer\nmake\nmake install\n</code></pre> <p>Auf einem RaspberryPi gibst Du folgende Befehle ein:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-de/#installation-von-latex-und-pandoc","title":"Installation von Latex und Pandoc","text":"<p>F\u00fcr den Ausdruck m\u00fcssen die einzelnen Kapitel zun\u00e4chst aus dem vorliegenden Textformat (Markdown) zun\u00e4chst nach Latex und anschlie\u00dfend nach PDF konvertiert werden.</p> <p>Unter MacOSX:</p> <p>Lade und installiere zun\u00e4chst basictex inkl. der  MacTeX-Erweiterungen und installiere anschlie\u00dfend Pandoc, indem Du folgende Kommandos eingibst:</p> <pre><code>brew install pandoc\n</code></pre> <p>Auf einem RaspberryPi gibst Du bitte folgende Kommandos ein:</p> <pre><code>sudo apt-get install texlive-xetex pandoc\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-de/#das-buch-nach-pdf-umwandeln-und-ausdrucken","title":"Das Buch nach PDF umwandeln und ausdrucken","text":"<p>Jetzt, wo Du alle Werkzeuge beisammenhast, ist es an der Zeit, eine Kopie des Buches aus der Ablage im Internet herunterzuladen und daraus eine PDF-Datei zu erstellen.</p> <p>\u00d6ffne daf\u00fcr erneut ein Terminalfenster und gib die folgenden Befehle ein:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake\n</code></pre> <p>Wenn alles funktioniert hat, findest Du anschlie\u00dfend die Datei <code>book.pdf</code> vor, die Du auf Deinem bevorzugten Ger\u00e4t lesen oder ausdrucken kannst.</p>"},{"location":"Frontend/shader/appendix/02/README-fr/","title":"README fr","text":""},{"location":"Frontend/shader/appendix/02/README-fr/#comment-imprimer-ce-livre","title":"Comment imprimer ce livre ?","text":"<p>Disons que vous ne voulez pas naviguer ou interagir avec les exemples et que vous voulez juste un bon livre papier \u00e0 l'ancienne, que vous pourrez lire sur la plage ou sur votre trajet vers la ville. Dans ce cas, vous pouvez imprimer ce livre.</p>"},{"location":"Frontend/shader/appendix/02/README-fr/#installation-de-glslviewer","title":"Installation de glslViewer","text":"<p>Pour imprimer ce livre, il faut d'abord l'analyser. Pour cela, vous aurez besoin de <code>glslViewer</code> un outil en ligne de commande qui compile et transforme les exemples de shaders en images.</p> <p>Sous MacOSX, assurez-vous d'avoir install\u00e9 homebrew et ensuite dans votre terminal :</p> <pre><code>brew update\nbrew upgrade\nbrew tap homebrew/versions\nbrew install glfw3\ncd ~\ngit clone http://github.com/patriciogonzalezvivo/glslViewer.git\ncd glslViewer\nmake\nmake install\n</code></pre> <p>Sur Raspberry Pi, vous devez installer Raspbian, une distribution Linux bas\u00e9e sur Debian con\u00e7u pour Raspberry Pi puis de lancer :</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-fr/#installation-de-python-3-latex-et-pandoc","title":"Installation de Python 3, Latex et Pandoc","text":"<p>Pour analyser les chapitres Markdown dans Latex, puis dans un fichier PDF, nous utiliserons Xetex Latex Engine et Pandoc.</p> <p>Sous MacOSX:</p> <p>T\u00e9l\u00e9chargez et installez basictex &amp; MacTeX-Additions, puis installez Pandoc et Python avec :</p> <pre><code>brew install pandoc python2.7\n</code></pre> <p>Sur Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-fr/#compilez-le-livre-dans-un-document-pdf-et-imprimez-le","title":"Compilez le livre dans un document pdf et imprimez-le","text":"<p>Maintenant que vous avez tout ce dont vous avez besoin, il est temps de cloner le d\u00e9p\u00f4t git de ce livre et de compiler le livre.</p> <p>Pour cela, ouvrez votre terminal une fois de plus et tapez :</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake\n</code></pre> <p>Si tout se passe bien, vous verrez un fichier <code>book.pdf</code> que vous pouvez lire sur votre appareil pr\u00e9f\u00e9r\u00e9 ou imprimer.</p>"},{"location":"Frontend/shader/appendix/02/README-id/","title":"README id","text":""},{"location":"Frontend/shader/appendix/02/README-id/#bagaimana-mencetak-buku-ini","title":"Bagaimana mencetak buku ini?","text":"<p>Katakanlah anda tidak ingin melihat atau berinteraksi dengan contoh dan Anda hanya ingin buku teks mode lama yang bagus yang dapat Anda baca di pantai atau dalam perjalanan Anda ke kota. Dalam hal ini, Anda dapat mencetak buku ini.</p>"},{"location":"Frontend/shader/appendix/02/README-id/#memasang-glslviewer","title":"Memasang glslViewer","text":"<p>Untuk mencetak buku ini anda terlebih dahulu harus menguraikannya. Untuk itu anda akan membutuhkan <code>glslViewer</code> sebuah alat shader konsol yang akan mengkompilasi dan mengubah contoh shader ke gambar.</p> <p>Pada MacOSX, pastikan mempunyai homebrew yang terpasang dan terminal lakukanlah:</p> <pre><code>brew install glslviewer\n</code></pre> <p>Pada Raspberry Pi, anda harus mempunyai Raspbian, sebuah distribusi Linux berbasis Debian yang dibuat untuk Raspberry Pi dan lakukanlah:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-id/#memasang-python-3-latex-engine-dan-pandoc","title":"Memasang Python 3, Latex Engine dan Pandoc","text":"<p>Untuk mengurai bab Markdown ke Latex dan kemudian ke berkas PDF, kita akan menggunakan Xetex Letex Engine dan Pandoc</p> <p>Pada MacOSX:</p> <p>Unduh dan Pasang MacTeX dengan:</p> <pre><code>brew install --cask mactex-no-gui\n</code></pre> <p>Kemudian pasang Pandoc dan Python 3 dengan:</p> <pre><code>brew install pandoc python\n</code></pre> <p>Pada Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-id/#compile-the-book-into-a-pdf-and-print-it","title":"Compile the book into a pdf and print it","text":"<p>Sekarang anda sudah mempunya apa yang dibutuhkan, waktunya untuk mengkloning repositori buku ini) dan kompilasi buku ini:</p> <p>Untuk itu buka terminal sekali lagi dan ketik:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean pdf\n</code></pre> <p>Jika semua berjalan lancar, anda akan melihat berkas <code>book.pdf</code> yang bisa anda baca di perangkat favorit atau dicetak.</p>"},{"location":"Frontend/shader/appendix/02/README-id/#kompilasi-buku-menjadi-epub-untuk-digunakan-dengan-e-reader","title":"Kompilasi buku menjadi epub untuk digunakan dengan e-reader","text":"<pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean epub\n</code></pre> <p><code>Book.epub</code> yang dihasilkan dapat digunakan secara langsung, atau diubah menjadi file<code>.mobi</code> untuk digunakan dengan Kindle dengan menggunakan konverter, misalnya Calibre.</p>"},{"location":"Frontend/shader/appendix/02/README-it/","title":"README it","text":""},{"location":"Frontend/shader/appendix/02/README-it/#come-posso-stampare-questo-libro","title":"Come posso stampare questo libro?","text":"<p>Diciamo che non si vuole navigare o interagire con gli esempi e si desidera solo un buon vecchio libro di testo che si pu\u00f2 leggere sulla spiaggia o sul vostro tragitto verso la citt\u00e0. In questo caso \u00e8 possibile stampare questo libro.</p>"},{"location":"Frontend/shader/appendix/02/README-it/#installare-glslviewer","title":"Installare glslViewer","text":"<p>Per la stampa di questo libro \u00e8 necessario in primo luogo trasformarlo. Per questo \u00e8 necessario <code>glslViewer</code> uno strumento console per gli shader che compiler\u00e0 e trasformare gli esempi in immagini.</p> <p>Su MacOSX siate sicuri di avere installato homebrew e quindi sul terminale digitate:</p> <pre><code>brew update\nbrew upgrade\nbrew tap homebrew/versions\nbrew install glfw3\ncd ~\ngit clone http://github.com/patriciogonzalezvivo/glslViewer.git\ncd glslViewer\nmake\nmake install\n</code></pre> <p>Su Raspberry Pi \u00e8 necessario fare:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-it/#installare-latex-engine-e-pandoc","title":"Installare Latex Engine e Pandoc","text":"<p>Per trasformare i capitoli Markdown in Latex e poi in un file PDF useremo Xetex Latex Engine e Pandoc.</p> <p>Su  MacOSX:</p> <p>Scarica e Installa basictex &amp; MacTeX-Additions e poi installa Pandoc facendo:</p> <pre><code>brew install pandoc\n</code></pre> <p>Su Raspberry Pi:</p> <pre><code>sudo apt-get install texlive-xetex pandoc\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-it/#trasforma-il-libro-in-un-pdf-e-stampalo","title":"Trasforma il libro in un pdf e stampalo","text":"<p>Ora che avete tutto ci\u00f2 che serve, \u00e8 il momento di clonare la repository di questo libro e compilare il libro.</p> <p>A tale scopo aprite il terminale e digitate:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake\n</code></pre> <p>Se tutto va bene, si vedr\u00e0 un file <code>book.pdf</code> che potete leggere sul vostro dispositivo preferito o stampare.</p>"},{"location":"Frontend/shader/appendix/02/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/appendix/02/README-pl/#jak-wydrukowac-te-ksiazke","title":"Jak wydrukowa\u0107 t\u0119 ksi\u0105\u017ck\u0119?","text":"<p>Powiedzmy, \u017ce nie chcesz nawigowa\u0107 ani wchodzi\u0107 w interakcje z przyk\u0142adami i chcesz po prostu mie\u0107 star\u0105 dobr\u0105 ksi\u0105\u017ck\u0119 tekstow\u0105, kt\u00f3r\u0105 mo\u017cesz czyta\u0107 na pla\u017cy lub podczas dojazdu do miasta. W takim przypadku mo\u017cesz wydrukowa\u0107 t\u0119 ksi\u0105\u017ck\u0119.</p>"},{"location":"Frontend/shader/appendix/02/README-pl/#instalacja-programu-glslviewer","title":"Instalacja programu glslViewer","text":"<p>Aby wydrukowa\u0107 t\u0119 ksi\u0105\u017ck\u0119, musisz najpierw j\u0105 przetworzy\u0107. W tym celu b\u0119dziesz potrzebowa\u0142 <code>glslViewer</code> - konsolowego narz\u0119dzia do shader\u00f3w, kt\u00f3re skompiluje i przekszta\u0142ci przyk\u0142ady shader\u00f3w w obrazy.</p> <p>W MacOSX upewnij si\u0119, \u017ce masz zainstalowany homebrew, a nast\u0119pnie w terminalu wykonaj:</p> <pre><code>brew install glslviewer\n</code></pre> <p>Na Raspberry Pi nale\u017cy pobra\u0107 Raspbian, dystrybucj\u0119 Linuksa opart\u0105 na Debianie, stworzon\u0105 dla Raspberry Pi, a nast\u0119pnie wykona\u0107:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-pl/#instalacja-pythona-3-silnika-latex-i-pandoc","title":"Instalacja Pythona 3, silnika Latex i Pandoc","text":"<p>Do parsowania Markdowna do Latexa, a nast\u0119pnie do pliku PDF u\u017cyjemy Xetex Latex Engine i Pandoc.</p> <p>W MacOSX:</p> <p>Pobierz i zainstalluj MacTeX:</p> <pre><code>brew cask install mactex-no-gui\n</code></pre> <p>a nast\u0119pnie zainstalowuj Pandoc i Python 3 przez:</p> <pre><code>brew install pandoc python\n</code></pre> <p>Na Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-pl/#skompiluj-ksiazke-do-pdf-i-wydrukuj-ja","title":"Skompiluj ksi\u0105\u017ck\u0119 do pdf i wydrukuj j\u0105","text":"<p>Teraz, gdy masz ju\u017c wszystko, czego potrzebujesz, nadszed\u0142 czas na sklonowanie repozytorium tej ksi\u0105\u017cki i skompilowanie ksi\u0105\u017cki.</p> <p>W tym celu otw\u00f3rz jeszcze raz sw\u00f3j terminal i wpisz:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean pdf\n</code></pre> <p>Je\u015bli wszystko p\u00f3jdzie dobrze, zobaczysz plik <code>book.pdf</code>, kt\u00f3ry mo\u017cesz przeczyta\u0107 na swoim ulubionym urz\u0105dzeniu lub wydrukowa\u0107.</p>"},{"location":"Frontend/shader/appendix/02/README-pl/#skompiluj-ksiazke-do-postaci-epub-aby-uzyc-jej-w-e-czytniku","title":"Skompiluj ksi\u0105\u017ck\u0119 do postaci epub, aby u\u017cy\u0107 jej w e-czytniku.","text":"<pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean epub\n</code></pre> <p>Wygenerowany <code>book.epub</code> mo\u017ce by\u0107 u\u017cyty bezpo\u015brednio, lub przekonwertowany, za pomomoc\u0105, na przyk\u0142ad, Calibre, na plik <code>.mobi</code> do u\u017cytku z Kindle.</p>"},{"location":"Frontend/shader/appendix/02/README-ru/","title":"README ru","text":""},{"location":"Frontend/shader/appendix/02/README-ru/#_1","title":"\u041a\u0430\u043a \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443?","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u0430 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438, \u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043d\u0430 \u043f\u043b\u044f\u0436\u0435 \u0438\u043b\u0438 \u043f\u043e \u043f\u0443\u0442\u0438 \u0432 \u0433\u043e\u0440\u043e\u0434. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443.</p>"},{"location":"Frontend/shader/appendix/02/README-ru/#glslviewer","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 glslViewer","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443, \u0435\u0451 \u043d\u0443\u0436\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>glslViewer</code> - \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0448\u0435\u0439\u0434\u0435\u0440\u043e\u0432 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0438\u0445 \u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041d\u0430 MacOSX \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c homebrew, \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:</p> <pre><code>brew update\nbrew upgrade\nbrew tap homebrew/versions\nbrew install glfw3\ncd ~\ngit clone http://github.com/patriciogonzalezvivo/glslViewer.git\ncd glslViewer\nmake\nmake install\n</code></pre> <p>\u041d\u0430 Raspberry Pi \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Raspbian - \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 Linux  \u0434\u043b\u044f Raspberry Pi, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 Debian, \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-ru/#python-3-latex-engine-pandoc","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Python 3, Latex Engine \u0438 Pandoc","text":"<p>\u0414\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 Markdown-\u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u043e\u0432 \u0432 Latex \u0438 \u0437\u0430\u0442\u0435\u043c \u0432 PDF, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f Xetex \u0438 Pandoc.</p> <p>\u041d\u0430 MacOSX:</p> <p>\u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 basictex &amp; MacTeX-Additions, \u0437\u0430\u0442\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Pandoc \u0438 Python \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <pre><code>brew install pandoc python2.7\n</code></pre> <p>\u041d\u0430 Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-ru/#pdf","title":"\u041a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0432 pdf \u0438 \u043f\u0435\u0447\u0430\u0442\u044c","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0441\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0451:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u0441\u0451 \u043f\u0440\u043e\u0448\u043b\u043e \u0445\u043e\u0440\u043e\u0448\u043e, \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0444\u0430\u0439\u043b <code>book.pdf</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0438\u043b\u0438 \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c.</p>"},{"location":"Frontend/shader/appendix/02/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/appendix/02/README-ua/#_1","title":"\u042f\u043a \u043d\u0430\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u0446\u044e \u043a\u043d\u0438\u0433\u0443?","text":"<p>\u0421\u043a\u0430\u0436\u0456\u043c\u043e, \u0432\u0430\u043c \u043d\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0430 \u043d\u0430\u0432\u0456\u0433\u0430\u0446\u0456\u044f \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0447\u0438 \u0432\u0437\u0430\u0454\u043c\u043e\u0434\u0456\u044f \u0437 \u0456\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0438\u043c\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0430\u043c\u0438, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0430 \u043a\u043d\u0438\u0433\u0430, \u044f\u043a\u0443 \u0432\u0438 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0447\u0438\u0442\u0430\u0442\u0438 \u043d\u0430 \u043f\u043b\u044f\u0436\u0456 \u0430\u0431\u043e \u043f\u0456\u0434 \u0447\u0430\u0441 \u043f\u043e\u0457\u0437\u0434\u043e\u043a. \u0423 \u0442\u0430\u043a\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u0457\u0457.</p>"},{"location":"Frontend/shader/appendix/02/README-ua/#glslviewer","title":"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f glslViewer","text":"<p>\u0429\u043e\u0431 \u043d\u0430\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438 \u0446\u044e \u043a\u043d\u0438\u0433\u0443, \u0457\u0457 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0440\u043e\u0437\u043f\u0430\u0440\u0441\u0438\u0442\u0438. \u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u0432\u0430\u043c \u0437\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f <code>glslViewer</code> - \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0438\u0439 \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u044f\u043a\u0438\u0439 \u043a\u043e\u043c\u043f\u0456\u043b\u044e\u0454 \u0442\u0430 \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0448\u0435\u0439\u0434\u0435\u0440\u0456\u0432 \u0443 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f.</p> <p>\u041d\u0430 MacOSX \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0430\u0439\u0442\u0435\u0441\u044c, \u0449\u043e \u0443 \u0432\u0430\u0441 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e homebrew \u0456 \u043f\u043e\u0442\u0456\u043c \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u0443 \u0442\u0435\u0440\u043c\u0456\u043d\u0430\u043b\u0456 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <pre><code>brew install glslviewer\n</code></pre> <p>\u041d\u0430 Raspberry Pi \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0456\u0442\u044c Raspbian - \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 Linux \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 Debian, \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u0439 \u0434\u043b\u044f Raspberry Pi, \u0430 \u043f\u043e\u0442\u0456\u043c \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u0442\u0430\u043a\u0456 \u0434\u0456\u0457:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-ua/#python-3-latex-engine-pandoc","title":"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f Python 3, Latex Engine \u0456 Pandoc","text":"<p>\u0414\u043b\u044f \u0440\u043e\u0437\u0431\u043e\u0440\u0443 \u0440\u043e\u0437\u0434\u0456\u043b\u0456\u0432 Markdown-\u0440\u043e\u0437\u043c\u0456\u0442\u043a\u0438 \u0443 Latex, \u0430 \u043f\u043e\u0442\u0456\u043c \u0443 PDF-\u0444\u0430\u0439\u043b, \u043c\u0438 \u0431\u0443\u0434\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 Xetex Latex Engine \u0456 Pandoc.</p> <p>\u041d\u0430 MacOSX:</p> <p>\u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0442\u0435 \u0442\u0430 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0456\u0442\u044c MacTeX:</p> <pre><code>brew install --cask mactex-no-gui\n</code></pre> <p>\u0430 \u043f\u043e\u0442\u0456\u043c \u0456\u043d\u0441\u0442\u0430\u043b\u044e\u0439\u0442\u0435 Pandoc \u0456 Python 3 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0438:</p> <pre><code>brew install pandoc python\n</code></pre> <p>\u041d\u0430 Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-ua/#pdf-","title":"\u0417\u0431\u0435\u0440\u0456\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0443 pdf-\u0444\u043e\u0440\u043c\u0430\u0442 \u0442\u0430 \u0440\u043e\u0437\u0434\u0440\u0443\u043a\u0443\u0439\u0442\u0435 \u0457\u0457","text":"<p>\u0422\u0435\u043f\u0435\u0440, \u043a\u043e\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0454 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435, \u043d\u0430\u0441\u0442\u0430\u0432 \u0447\u0430\u0441 \u043a\u043b\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0456\u0439 \u0446\u0456\u0454\u0457 \u043a\u043d\u0438\u0433\u0438 \u0442\u0430 \u0441\u043a\u043e\u043c\u043f\u0456\u043b\u044e\u0432\u0430\u0442\u0438 \u0439\u043e\u0433\u043e.</p> <p>\u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u0449\u0435 \u0440\u0430\u0437 \u0432\u0456\u0434\u043a\u0440\u0438\u0439\u0442\u0435 \u0442\u0435\u0440\u043c\u0456\u043d\u0430\u043b \u0456 \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean pdf\n</code></pre> <p>\u042f\u043a\u0449\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u0439\u0434\u0435 \u0434\u043e\u0431\u0440\u0435, \u0432\u0438 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0435 \u0444\u0430\u0439\u043b <code>book.pdf</code>, \u044f\u043a\u0438\u0439 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u0438 \u043d\u0430 \u0441\u0432\u043e\u0454\u043c\u0443 \u0443\u043b\u044e\u0431\u043b\u0435\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457 \u0430\u0431\u043e \u0440\u043e\u0437\u0434\u0440\u0443\u043a\u0443\u0432\u0430\u0442\u0438.</p>"},{"location":"Frontend/shader/appendix/02/README-ua/#epub-kindle","title":"\u0417\u0431\u0435\u0440\u0456\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 epub-\u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0437 Kindle","text":"<pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean epub\n</code></pre> <p>\u0417\u0433\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0444\u0430\u0439\u043b <code>book.epub</code> \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0431\u0435\u0437\u043f\u043e\u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e \u0430\u0431\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u0443 \u0444\u043e\u0440\u043c\u0430\u0442 <code>.mobi</code> \u0434\u043b\u044f \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0437 Kindle \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0435\u0440\u0430, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434 Calibre.</p>"},{"location":"Frontend/shader/appendix/02/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/02/README-vi/#lam-the-nao-e-in-quyen-sach-nay","title":"L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 in quy\u1ec3n s\u00e1ch n\u00e0y","text":"<p>Gi\u1ea3 s\u1eed b\u1ea1n kh\u00f4ng c\u00f3 nhu c\u1ea7u t\u01b0\u01a1ng t\u00e1c v\u1edbi c\u00e1c v\u00ed d\u1ee5 m\u00e0 ch\u1ec9 mu\u1ed1n \u0111\u1ecdc quy\u1ec3n s\u00e1ch theo c\u00e1ch c\u1ed5 \u0111i\u1ec3n nh\u01b0 khi \u0111ang n\u1eb1m tr\u00ean b\u00e3i bi\u1ec3n ho\u1eb7c tr\u00ean t\u00e0u \u0111i\u1ec7n. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 b\u1ea1n c\u00f3 th\u1ec3 in quy\u1ec3n s\u00e1ch n\u00e0y.</p>"},{"location":"Frontend/shader/appendix/02/README-vi/#cai-at-glslviewer","title":"C\u00e0i \u0111\u1eb7t glslViewer","text":"<p>\u0110\u1ec3 in quy\u1ec3n s\u00e1ch n\u00e0y \u0111\u1ea7u ti\u00ean ph\u1ea3i bi\u00ean d\u1ecbch n\u00f3 \u0111\u00e3. \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c vi\u1ec7c \u0111\u00f3 th\u00ec b\u1ea1n c\u1ea7n <code>glslViewer</code> \u0111\u1ec3 bi\u1ebfn c\u00e1c \u0111o\u1ea1n code shader th\u00e0nh \u1ea3nh minh ho\u1ea1.</p> <p>Tr\u00ean MacOSX n\u1ebfu \u0111\u00e3 c\u00f3 homebrew th\u00ec c\u1ea7n g\u00f5 l\u1ec7nh sau:</p> <pre><code>brew install glslviewer\n</code></pre> <p>Tr\u00ean Raspberry Pi b\u1ea1n c\u1ea7n c\u00e0i Raspbian, m\u1ed9t phi\u00ean b\u1ea3n Linux d\u1ef1a tr\u00ean Debian d\u00e0nh ri\u00eang cho Raspberry PI r\u1ed3i g\u00f5 l\u1ec7nh sau:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install git-core glslviewer\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-vi/#cai-at-python-27-latex-engine-va-pandoc","title":"C\u00e0i \u0111\u1eb7t Python 2.7, Latex Engine v\u00e0 Pandoc","text":"<p>\u0110\u1ec3 bi\u00ean d\u1ecbch c\u00e1c ch\u01b0\u01a1ng s\u00e1ch vi\u1ebft theo c\u00fa ph\u00e1p Markdown b\u1eb1ng ph\u1ea7n m\u1ec1m Latex r\u1ed3i xu\u1ea5t ra \u0111\u1ecbnh d\u1ea1ng PDF th\u00ec b\u1ea1n c\u1ea7n c\u00f3 Latex Engine v\u00e0 Pandoc.</p> <p>Tr\u00ean MacOSX:</p> <p>T\u1ea3i v\u00e0 c\u00e0i \u0111\u1eb7t MacTeX b\u1eb1ng l\u1ec7nh:</p> <pre><code>brew install --cask mactex-no-gui\n</code></pre> <p>sau \u0111\u00f3 c\u00e0i th\u00eam Pandoc v\u00e0 Python 2 b\u1eb1ng l\u1ec7nh:</p> <pre><code>brew install pandoc python@2\n</code></pre> <p>Tr\u00ean Raspberry Pi (Raspbian):</p> <pre><code>sudo apt-get install texlive-xetex pandoc python2.7\n</code></pre>"},{"location":"Frontend/shader/appendix/02/README-vi/#chuyen-oi-quyen-sach-sang-inh-dang-pdf","title":"Chuy\u1ec3n \u0111\u1ed5i quy\u1ec3n s\u00e1ch sang \u0111\u1ecbnh d\u1ea1ng PDF","text":"<p>Gi\u1edd b\u1ea1n \u0111\u00e3 c\u00f3 \u0111\u1ee7 c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft, h\u00e3y t\u1ea1o m\u1ed9t b\u1ea3n sao c\u1ee7a quy\u1ec3n s\u00e1ch n\u00e0y v\u00e0 in n\u00f3 th\u00f4i.</p> <p>\u1ede c\u1eeda s\u1ed5 terminal, h\u00e3y g\u00f5 l\u1ec7nh:</p> <pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean pdf\n</code></pre> <p>N\u1ebfu m\u1ecdi th\u1ee9 \u1ed5n, b\u1ea1n s\u1ebd th\u1ea5y file <code>book.pdf</code> m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc b\u1eb1ng b\u1ea5t k\u1ef3 thi\u1ebft b\u1ecb n\u00e0o ho\u1eb7c in ra.</p>"},{"location":"Frontend/shader/appendix/02/README-vi/#chuyen-oi-quyen-sach-sang-inh-dang-epub-e-oc-tren-thiet-bi-ky-thuat-so","title":"Chuy\u1ec3n \u0111\u1ed5i quy\u1ec3n s\u00e1ch sang \u0111\u1ecbnh d\u1ea1ng epub \u0111\u1ec3 \u0111\u1ecdc tr\u00ean thi\u1ebft b\u1ecb k\u1ef9 thu\u1eadt s\u1ed1","text":"<pre><code>cd ~\ngit clone https://github.com/patriciogonzalezvivo/thebookofshaders.git\ncd thebookofshaders\nmake clean epub\n</code></pre> <p>File <code>book.epub</code> c\u00f3 th\u1ec3 \u0111\u1ecdc tr\u1ef1c ti\u1ebfp ho\u1eb7c c\u1ea7n chuy\u1ec3n sang \u0111\u1ecbnh d\u1ea1ng <code>.mobi</code> \u0111\u1ec3 \u0111\u1ecdc tr\u00ean Kindle b\u1eb1ng m\u1ed9t ph\u1ea7n m\u1ec1m kh\u00e1c nh\u01b0 Calibre ch\u1eb3ng h\u1ea1n.</p>"},{"location":"Frontend/shader/appendix/03/","title":"Index","text":""},{"location":"Frontend/shader/appendix/03/#how-can-i-collaborate-with-this-book","title":"How can I collaborate with this book?","text":"<p>Thanks for being willing to collaborate! There are plenty of ways you can:</p> <ul> <li>Translating content</li> <li>Improving the <code>glossary/</code> section</li> <li>Editing content</li> <li>Sharing your shaders examples through the on-line editor to</li> </ul>"},{"location":"Frontend/shader/appendix/03/#translating-content","title":"Translating content","text":"<p>This book is written in Markdown language so it's very easy to edit and work on it.</p> <ol> <li> <p>Start by going to github's repository at <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. Take a look at the files and folders inside it. You will note that the content is in the <code>README.md</code> and other files with capital letters like: <code>TITLE.md</code>, <code>SUMMARY.md</code>, etc. Also note that translations are hosted in files with names ending in two letters referencing the language they are for, ex.: <code>README-jp.md</code>, <code>README-es.md</code>, etc.</p> </li> <li> <p>Fork the repository and clone it in your computer.</p> </li> <li> <p>Duplicate the content of the files want to translate. Remember to add to the two letters that makes reference to the language you are translating to the files you will work on.</p> </li> <li> <p>Translate the content line by line (see Translation notes).</p> </li> <li> <p>Test it (see Testing).</p> </li> <li> <p>Push to your own github fork to then make a Pull Request</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/#translating-notes","title":"Translating notes","text":"<p>Do not erase or modify things the embedded examples, that looks like this:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>or</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/#testing","title":"Testing","text":"<p>Start running a local PHP server inside the local repository folder:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>Then in your browser search for <code>localhost:8000</code> go to the chapter you are translating and add <code>?lan=</code> followed by the two letters you used to mark the language you are translating to.</p> <p>For example, if you are translating the chapter <code>03</code> to french you had been working with the file <code>03/README-fr.md</code> and you can test it by going to: <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/#improving-the-glossary-section","title":"Improving the glossary section","text":"<p>This section is under development. We are happy to listen to your ideas on how to make it a friendly tool for all. Send us a message to @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/#editing-content","title":"Editing content","text":"<p>We are all humans. If you see something say something and make a Pull Request or open an issue. Thanks!</p>"},{"location":"Frontend/shader/appendix/03/#sharing-your-shaders-examples","title":"Sharing your shaders examples","text":"<p>You will see a lot of links to the on-line editor and embedded instances of it. Once you code something that makes you proud, click the \"Export\" (or the <code>\u21ea</code> icon) and then copy the \"URL to code...\". Send it to @bookofshaders or @kyndinfo. We are looking forward to see it and add it to the example gallery section.</p>"},{"location":"Frontend/shader/appendix/03/README-ch/","title":"README ch","text":""},{"location":"Frontend/shader/appendix/03/README-ch/#_1","title":"\u6211\u600e\u6837\u5171\u521b\u8fd9\u672c\u4e66\uff1f","text":"<p>\u611f\u8c22\u60a8\u613f\u610f\u5408\u4f5c\uff01 \u60a8\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u53c2\u4e0e\u5176\u4e2d\uff1a</p> <ul> <li>\u7ffb\u8bd1\u5185\u5bb9</li> <li>\u6539\u8fdb <code>\u8bcd\u6c47\u8868</code> \u90e8\u5206</li> <li>\u7f16\u8f91\u5185\u5bb9</li> <li>\u901a\u8fc7 \u5728\u7ebf\u7f16\u8f91\u5668 \u5206\u4eab\u60a8\u7684\u7740\u8272\u5668\u793a\u4f8b\u5230____</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-ch/#_2","title":"\u7ffb\u8bd1\u5185\u5bb9","text":"<p>\u8fd9\u672c\u4e66\u662f\u7528 Markdown \u8bed\u8a00 \u7f16\u5199\u7684\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7f16\u8f91\u548c\u4fee\u6539\u3002</p> <ol> <li> <p>\u9996\u5148\u8bf7\u5230 \u4f4d\u4e8e <code>github.com/patriciogonzalezvivo/thebookofshaders</code> github\u5e93\u3002 \u4f60\u4f1a\u6ce8\u610f\u5230\u5185\u5bb9\u5728 <code>README.md</code> \u548c\u5176\u4ed6\u4ee5\u5927\u5199\u5b57\u6bcd\u547d\u540d\u7684\u6587\u4ef6\u4e2d\uff0c\u4f8b\u5982\uff1a<code>TITLE.md</code>\u3001<code>SUMMARY.md</code> \u7b49\u3002\u8fd8\u8981\u6ce8\u610f\u6587\u4ef6\u540d\u79f0\u672b\u5c3e\u7684\u4e24\u4e2a\u5b57\u6bcd\u8868\u793a\u7740\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u4f8b\u5982\uff1a<code>README-jp.md</code>\u3001<code>README-es.md</code> \u7b49\u3002</p> </li> <li> <p>Fork\u8fd9\u4e2a\u5e93\u5e76\u5c06\u5176\u514b\u9686\u5230\u60a8\u7684\u8ba1\u7b97\u673a\u4e2d\u3002</p> </li> <li> <p>\u590d\u5236\u4f60\u8981\u7ffb\u8bd1\u7684\u6587\u4ef6\u5185\u5bb9\u3002 \u522b\u5fd8\u4e86\u5728\u4f60\u6b63\u5728\u7ffb\u8bd1\u7684\u6587\u4ef6\u540d\u672b\u5c3e\u52a0\u4e0a\u4e24\u4e2a\u8868\u793a\u7740\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u7684\u5b57\u6bcd\u3002</p> </li> <li> <p>\u9010\u884c\u7ffb\u8bd1\u5185\u5bb9\uff08\u89c1\u7ffb\u8bd1\u987b\u77e5\uff09\u3002</p> </li> <li> <p>\u6d4b\u8bd5\u5b83 \uff08\u89c1 \u6d4b\u8bd5\uff09\u3002</p> </li> <li> <p>\u63a8\u9001\u5230\u4f60\u81ea\u5df1\u7684 github fork \u7136\u540e\u53d1\u8d77\u4e00\u4e2a Pull Request</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-ch/#_3","title":"\u7ffb\u8bd1\u987b\u77e5","text":"<p>\u4e0d\u8981\u64e6\u9664\u6216\u4fee\u6539\u5d4c\u5165\u7684\u793a\u4f8b\u5185\u5bb9\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>or</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-ch/#_4","title":"\u6d4b\u8bd5","text":"<p>\u5f00\u59cb\u5728\u672c\u5730\u5b58\u50a8\u5e93\u6587\u4ef6\u5939\u4e2d\u8fd0\u884c\u672c\u5730 PHP \u670d\u52a1\u5668\uff1a</p> <pre><code>php -S localhost:8000\n</code></pre> <p>\u7136\u540e\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u4e2d\u641c\u7d22 <code>localhost:8000</code> \u8f6c\u5230\u60a8\u6b63\u5728\u7ffb\u8bd1\u7684\u7ae0\u8282\u5e76\u6dfb\u52a0 <code>?lan=</code> \u540e\u8ddf\u60a8\u7528\u6765\u6807\u8bb0\u60a8\u8981\u7ffb\u8bd1\u7684\u8bed\u8a00\u7684\u4e24\u4e2a\u5b57\u6bcd\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5c06\u7ae0\u8282 <code>03</code> \u7ffb\u8bd1\u6210\u6cd5\u8bed\uff0c\u4f60\u4e00\u76f4\u5728\u4f7f\u7528\u6587\u4ef6 <code>03/README-fr.md</code>\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\uff1a <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/README-ch/#_5","title":"\u6539\u8fdb\u8bcd\u6c47\u8868\u90e8\u5206","text":"<p>\u672c\u7ae0\u8282\u6b63\u5728\u5f00\u53d1\u4e2d\u3002 \u6211\u4eec\u5f88\u9ad8\u5174\u542c\u53d6\u60a8\u5173\u4e8e\u5982\u4f55\u4f7f\u5176\u6210\u4e3a\u6240\u6709\u4eba\u7684\u597d\u5de5\u5177\u7684\u60f3\u6cd5\u3002 \u7ed9\u6211\u4eec\u53d1\u9001\u6d88\u606f\u5230 @bookofshaders\u3002</p>"},{"location":"Frontend/shader/appendix/03/README-ch/#_6","title":"\u7f16\u8f91\u5185\u5bb9","text":"<p>\u6211\u4eec\u90fd\u662f\u4eba\u7c7b\u3002 \u5982\u679c\u60a8\u770b\u5230\u67d0\u4e9b\u4e0d\u5bf9\u52b2\u7684\u5730\u65b9\uff0c\u8bf4\u51fa\u6765\u5e76\u63d0\u51fa\u4e00\u4e2aPull Request\u6216\u63d0\u4ea4\u4e00\u4e2aissue\u3002 \u591a\u8c22\uff01</p>"},{"location":"Frontend/shader/appendix/03/README-ch/#_7","title":"\u5206\u4eab\u4f60\u7684\u7740\u8272\u5668\u793a\u4f8b","text":"<p>\u60a8\u4f1a\u770b\u5230\u5f88\u591a\u6307\u5411 \u5728\u7ebf\u7f16\u8f91\u5668 \u7684\u94fe\u63a5\u4ee5\u53ca\u5b83\u7684\u5d4c\u5165\u5b9e\u4f8b\u3002 \u4e00\u65e6\u60a8\u7f16\u5199\u4e86\u8ba9\u60a8\u611f\u5230\u81ea\u8c6a\u7684\u4ee3\u7801\uff0c\u8bf7\u5355\u51fb\u201c\u5bfc\u51fa\u201d\uff08\u6216 <code>\u21ea</code> \u56fe\u6807\uff09\uff0c\u7136\u540e\u590d\u5236\u201cURL to code...\u201d\u3002 \u5c06\u5176\u53d1\u9001\u5230 @bookofshaders \u6216 @kyndinfo\u3002 \u6211\u4eec\u671f\u5f85\u770b\u5230\u5b83\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 \u793a\u4f8b\u5e93\u90e8\u5206\u3002</p>"},{"location":"Frontend/shader/appendix/03/README-de/","title":"README de","text":""},{"location":"Frontend/shader/appendix/03/README-de/#wie-kann-ich-zu-diesem-buch-beitragen","title":"Wie kann ich zu diesem Buch beitragen?","text":"<p>Sch\u00f6n, dass Du Interesse hast, an diesem Buch mitzuwirken. Zahlreiche M\u00f6glichkeiten bieten sich daf\u00fcr an. Du kannst ...</p> <ul> <li>Inhalte \u00fcbersetzen</li> <li>Das <code>Glossar</code> verbessern</li> <li>Fehler bereinigen</li> <li>Deine eigenen GLSL-Shader \u00fcber den Online Editor mit anderen teilen</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-de/#inhalte-ubersetzen","title":"Inhalte \u00fcbersetzen","text":"<p>Der Quelltext dieses Buches wurde in Markdown verfasst. Dadurch ist es sehr einfach, den Text zu bearbeiten und zu erweitern.</p> <ol> <li> <p>Besuche zun\u00e4chst die Internet-Ablage dieses Buches bei Github unter <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. Verschaffe Dir einen \u00dcberblick \u00fcber die verschiedenen Verzeichnisse und die darin enthaltenen Dateien. Du wirst feststellen, dass die eigentlichen Textinhalte des Buches jeweils in der Datei <code>README.md</code> und in anderen Dateien enthalten sind, die Gro\u00dfbuchstaben im Namen tragen. Beispiele daf\u00fcr sind etwa <code>TITLE.md</code>, <code>SUMMARY.md</code> usw. Die \u00dcbersetzungen dieser Texte stecken in Dateien, die am Ende des Namens ein K\u00fcrzel f\u00fcr die jeweilige Sprache tragen, also z.B. <code>README-jp.md</code>, <code>README-es.md</code> usw.</p> </li> <li> <p>Lege einen Fork der Ablage an und klone den Fork auf Deinen Computer.</p> </li> <li> <p>Lege jeweils eine Kopie der Datei an, die Du \u00fcbersetzen m\u00f6chtest, und vergiss dabei nicht, das Sprachk\u00fcrzel im Dateinamen zu erg\u00e4nzen.</p> </li> <li> <p>\u00dcbersetze den Inhalt des Dokuments Zeile f\u00fcr Zeile (siehe dazu auch die \u00dcbersetzungshinweise unten).</p> </li> <li> <p>\u00dcberpr\u00fcfe den Inhalt hinsichtlich der Rechtschreibung und der korrekten Anzeige im Browser (siehe unten unter Testen).</p> </li> <li> <p>Lade die ver\u00e4nderten Dateien in Deinen Fork hoch und setze einen Pull Request ab.</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-de/#ubersetzungshinweise","title":"\u00dcbersetzungshinweise","text":"<p>L\u00f6sche und ver\u00e4ndere nichts an der Einbindung der Beispielprogramme innerhalb des Quelltextes. Dieses sehen wie folgt aus:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>oder</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-de/#testen","title":"Testen","text":"<p>Starte auf Deinem lokalen Rechner einen PHP-Server innerhalb des Verzeichnisses, in das Du das Buch geklont hast:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>Rufe dann in Deinem Internet-Browser die URL <code>localhost:8000</code> auf. Klicke Dich bis zu dem Kapitel durch, an dem Du gerade arbeitest. F\u00fcge der angezeigten URL in der Adresszeile des Browsers den Zusatz <code>?lan=</code> hinzu, gefolgt von dem Sprachenk\u00fcrzel, das Du bei der Benennung der jeweiligen Datei verwendet hast.</p> <p>Um ein Beispiel zu nennen: Wenn Du gerade das Kapitel <code>03</code> ins Franz\u00f6sische \u00fcbersetzt und dabei mit der Datei <code>03/README-fr.md</code> arbeitest, kannst Du diese Datei anzeigen, indem Du folgende URL eingibst: <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/README-de/#verbesserungen-am-glossar","title":"Verbesserungen am Glossar","text":"<p>Das Glossar befindet sich noch in Arbeit. Wir freuen uns \u00fcber Vorschl\u00e4ge, wie man das Glossar zu einem wertvollen Bestandteil des Buches ausbauen kann. Schick uns einfach eine Nachricht an @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/README-de/#fehler-bereinigen","title":"Fehler bereinigen","text":"<p>Irren ist menschlich! Wenn Dir ein Fehler auff\u00e4llt, bereinige die Stelle und setze einfach einen entsprechenden Pull Request auf Github ab, oder er\u00f6ffnete dort eine Diskussion zu dem Thema. Vielen Dank!</p>"},{"location":"Frontend/shader/appendix/03/README-de/#teile-deine-shader-mit-anderen","title":"Teile Deine Shader mit Anderen","text":"<p>Du wirst im Quelltext des Buches bei den Beispielen viele Verweise auf den Online-Editor sehen. Sobald Du einen Shader entwickelt hast, auf den Du stolz bist, klicke auf die \u201eExport\u201c-Schaltfl\u00e4che (bzw. das <code>\u21ea</code>-Symbol) und kopiere anschlie\u00dfend die im Editor angezeigte \u201eURL to code...\u201c. Sende diese URL an @bookofshaders oder an @kyndinfo. Wir freuen uns auf tolle Shader und werden diese gerne unserer Galerie mit Beispielen hinzuf\u00fcgen.</p>"},{"location":"Frontend/shader/appendix/03/README-id/","title":"README id","text":""},{"location":"Frontend/shader/appendix/03/README-id/#bagaimana-saya-bisa-berkolaburasi","title":"Bagaimana saya bisa berkolaburasi?","text":"<p>Terima kasih telah bersedia untuk berkolaborasi! Ada banyak cara yang bisa anda lakukan:</p> <ul> <li>Menerjemahkan konten</li> <li>Mengimprovisasi bagian glosarium (<code>glossary/</code>)</li> <li>Menyunting konten</li> <li>Membagikan contoh shadermu melalui editor on-line</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-id/#menerjemahkan-konten","title":"Menerjemahkan Konten","text":"<p>Buku ini dibuat dalam bahasa Markdown jadi ini sangat mudah untuk disunting dan dikerjakan.</p> <ol> <li> <p>Mulailah dengan membuka repositori Github di <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. Lihatlah file dan folder di dalamnya. Anda akan melihat bahwa isinya ada di <code>README.md</code> dan file lain dengan huruf kapital seperti: <code>TITLE.md</code>, <code>SUMMARY.md</code>, dll. Perhatikan juga bahwa terjemahan di-host dalam file dengan nama yang diakhiri dengan dua huruf yang merujuk pada bahasanya, mis .: <code>README-jp.md</code>, <code>README-es.md</code>, dll.</p> </li> <li> <p>Fork repositori dan klon di komputer Anda.</p> </li> <li> <p>Gandakan konten file yang ingin diterjemahkan. Ingatlah untuk menambahkan dua huruf yang mengacu pada bahasa yang Anda terjemahkan ke file yang akan anda kerjakan.</p> </li> <li> <p>Terjemahkan baris demi baris konten (lihat Catatan terjemahan).</p> </li> <li> <p>Uji (lihat Pengujian).</p> </li> <li> <p>Push ke fork github anda sendiri untuk kemudian buatlah Pull Request</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-id/#catatan-terjemahan","title":"Catatan Terjemahan","text":"<p>Jangan menghapus atau mengubah contoh yang disematkan, seperti:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>or</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-id/#pengujian","title":"Pengujian","text":"<p>Mulai jalankan server lokal PHP di dalam folder repositori lokal:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>Kemudian dalam browser cari <code>localhost:8000</code>, pergi ke bab yang ingin diterjemahkan dan tambahkan <code>?lan=</code> diikuti dengan dua huruf yang anda gunakan untuk menandai bahasa yang anda terjemahkan.</p>"},{"location":"Frontend/shader/appendix/03/README-id/#mengimprovisasi-bagian-glosarium","title":"Mengimprovisasi bagian glosarium","text":"<p>Bagian ini dibawah pengembangan. Kami senang untuk mendengar idemu pada cara untuk membuat alat yang bersahabat untuk semua.</p>"},{"location":"Frontend/shader/appendix/03/README-id/#menyunting-konten","title":"Menyunting konten","text":"<p>Kita semua manusia. Jika anda melihat sesuatu, lakukanlah sesuatu, buat Pull Request atau buka/buat isu. Terima Kasih!</p>"},{"location":"Frontend/shader/appendix/03/README-id/#membagikan-contoh-shadermu","title":"Membagikan contoh shadermu","text":"<p>Anda akan melihat banyak tautan ke editor on-line dan contoh yang disematkan darinya. Setelah anda membuat sesuatu yang membuat anda bangga, klik \"Export\" (atau ikon <code>\u21ea</code>) dan kemudian salin \"URL to code...\", kirim ke  @bookofshaders atau @kyndinfo. Kami sangat menantikan untuk melihatnya dan menambahkannya ke bagian galeri contoh</p>"},{"location":"Frontend/shader/appendix/03/README-it/","title":"README it","text":""},{"location":"Frontend/shader/appendix/03/README-it/#come-posso-collaborare-a-questo-libro","title":"Come posso collaborare a questo libro?","text":"<p>Grazie per voler collaborare! Ci sono vari modi per poterlo fare:</p> <ul> <li>Tradurre i contenuti</li> <li>Migliorare la sezione <code>glossario/</code></li> <li>Modificare i contenuti</li> <li>Condividere i vostri esempi di shaders attraversol'editor on-line</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-it/#tradurre-i-contenuti","title":"Tradurre i contenuti","text":"<p>Questo libro \u00e8 scritto nel linguaggio Markdown quindi \u00e8 molto facile da modificare e lavorare su di esso.</p> <ol> <li> <p>Iniziate andando alla repository di GitHub <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. Date un'occhiata ai file e alle cartelle al suo interno. Si noti che il contenuto \u00e8 presente nei file <code>README.md</code> e negli altri con lettere maiuscole come:<code>TITLE.md</code>, <code>SUMMARY.md</code>, ecc. Si noti inoltre che le traduzioni sono contenute in file che terminano con due lettere che fanno riferimento alla lingua che sono tradotte, es .: <code>README-jp.md</code>, <code>README-es.md</code>, ecc.</p> </li> <li> <p>Biforcare (\"Fork\") la repository e clonatela (\"Clone\") sul vostro computer.</p> </li> <li> <p>Duplicate il contenuto dei file da tradurre. Ricordatevi di aggiungere ai file su cui si sta lavorando le due lettere che fanno riferimento alla lingua che si sta traducendo.</p> </li> <li> <p>Traducete linea per linea i contenuti (vedi Note di traduzione).</p> </li> <li> <p>Testate le pagine tradotte (vedi Test).</p> </li> <li> <p>Inviate (\"Push\") i vostri commit alla biforcazione (\"Fork\") della vostra repository su GitHub, per poi fare un Pull Request</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-it/#note-di-traduzione","title":"Note di traduzione","text":"<p>Non cancellate o modificate gli esempi integrati alla pagina, che assomigliano a questo codice:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>oppure</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-it/#testare","title":"Testare","text":"<p>Iniziate l'esecuzione di un server locale PHP all'interno della cartella locale:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>Poi, nel tuo browser aprite la pagina <code>localhost:8000</code>, andate al capitolo che state traducendo e aggiungete <code>?lan=</code> seguito dal codice della lingua in cui state traducendo.</p> <p>Per esempio se si sta traducendo il capitolo <code>03</code> in francese, starete lavorando sul file<code>03/README-fr.md</code> e lo si pu\u00f2 testare andando alla pagina: <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/README-it/#migliorare-la-sezione-glossario","title":"Migliorare la sezione glossario","text":"<p>Questa sezione \u00e8 in fase di sviluppo. Siamo lieti di ascoltare le vostre idee su come rendere uno strumento intuitivo per tutti. Inviaci un messaggio a @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/README-it/#modifica-il-contenuto","title":"Modifica il contenuto","text":"<p>Siamo tutti esseri umani. Se vedete qualcosa, ditelo e fate un Pull Request oppure aprite un problema su GitHub. Grazie!</p>"},{"location":"Frontend/shader/appendix/03/README-it/#condividete-i-vostri-esempi-di-shaders","title":"Condividete i vostri esempi di shaders","text":"<p>Vedrete un sacco di link verso l'editor on-line e verso delle sue istanze integrate alla pagina. Una volta che si scrive un codice che vi rende orgoglioso, fate clic su \"Esporta\" (o sull' icona <code>\u21ea</code>) e quindi copiate l' \"URL verso il codice...\" (\"URL to code...\"). Inviatelo a @bookofshaders o a @kyndinfo. Non vediamo l'ora di vederlo e aggiungerlo alla sezione galleria di esempi.</p>"},{"location":"Frontend/shader/appendix/03/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/appendix/03/README-pl/#jak-moge-pomoc","title":"Jak mog\u0119 pom\u00f3c?","text":"<p>Dzi\u0119kujemy za ch\u0119\u0107 wsp\u00f3\u0142pracy! Jest wiele sposob\u00f3w pomocy:</p> <ul> <li>T\u0142umaczenie tre\u015bci</li> <li>Poprawianie sekcji <code>glosariusz/</code></li> <li>Edytowanie zawarto\u015bci</li> <li>Dzielenie si\u0119 swoimi przyk\u0142adami shader\u00f3w poprzez edytor on-line</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-pl/#tumaczenie-tresci","title":"T\u0142umaczenie tre\u015bci","text":"<p>Ta ksi\u0105\u017cka jest napisana w j\u0119zyku Markdown, wi\u0119c bardzo \u0142atwo jest j\u0105 edytowa\u0107 i pracowa\u0107 nad ni\u0105.</p> <ol> <li>Zacznij od przej\u015bcia do repozytorium github pod adresem <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. Przyjrzyj si\u0119 znajduj\u0105cym si\u0119 w nim plikom i folderom. Zauwa\u017cysz, \u017ce tre\u015b\u0107 znajduje si\u0119 w pliku <code>README.md</code> oraz innych plikach z du\u017cymi literami jak: <code>TITLE.md</code>, <code>SUMMARY.md</code>, itd. Zauwa\u017c r\u00f3wnie\u017c, \u017ce t\u0142umaczenia s\u0105 hostowane w plikach z nazwami ko\u0144cz\u0105cymi si\u0119 na dwie litery reprezentuj\u0105ce j\u0119zyk t\u0142umaczenia, na przyk\u0142ad: <code>README-jp.md</code>, <code>README-es.md</code>, itd.</li> </ol> <ol> <li> <p>Forkuj repozytorium i sklonuj je w swoim komputerze.</p> </li> <li> <p>Zduplikuj zawarto\u015b\u0107 plik\u00f3w, kt\u00f3re chcesz przet\u0142umaczy\u0107. Pami\u0119taj, aby do plik\u00f3w, nad kt\u00f3rymi b\u0119dziesz pracowa\u0142, doda\u0107 dwie litery nawi\u0105zuj\u0105ce do j\u0119zyka, kt\u00f3ry t\u0142umaczysz.</p> </li> <li> <p>Przet\u0142umacz tre\u015b\u0107 linijka po linijce (patrz Uwagi dotycz\u0105ce t\u0142umaczenia).</p> </li> <li> <p>Przetestuj j\u0105 (patrz Testy).</p> </li> <li> <p>Pushuj na w\u0142asny fork githuba, aby nast\u0119pnie zrobi\u0107 Pull Request</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-pl/#uwagi-dotyczace-tumaczenia","title":"Uwagi dotycz\u0105ce t\u0142umaczenia","text":"<p>Nie wymazuj ani nie modyfikuj rzeczy w osadzonych przyk\u0142adach, wygl\u0105daj\u0105cych tak:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>lub</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-pl/#testowanie","title":"Testowanie","text":"<p>Rozpocznij uruchamianie lokalnego serwera PHP wewn\u0105trz lokalnego folderu repozytorium:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>Nast\u0119pnie w przegl\u0105darce wyszukaj <code>localhost:8000</code>, przejd\u017a do rozdzia\u0142u, kt\u00f3ry t\u0142umaczysz i dodaj <code>?lan=</code>, a nast\u0119pnie dwie litery, kt\u00f3rych u\u017cy\u0142e\u015b do oznaczenia j\u0119zyka, na kt\u00f3ry t\u0142umaczysz.</p> <p>Na przyk\u0142ad, je\u015bli t\u0142umaczysz rozdzia\u0142 <code>03</code> na j\u0119zyk francuski pracowa\u0142e\u015b z plikiem <code>03/README-fr.md</code>, to mo\u017cesz go przetestowa\u0107 wchodz\u0105c na: <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/README-pl/#ulepszanie-glosariusza","title":"Ulepszanie glosariusza","text":"<p>Glosariusz jest w trakcie rozwoju. Ch\u0119tnie wys\u0142uchamy Twoich pomys\u0142\u00f3w, jak uczyni\u0107 j\u0105 przyjaznym narz\u0119dziem dla wszystkich. Wy\u015blij nam wiadomo\u015b\u0107 na adres @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/README-pl/#edycja-tresci","title":"Edycja tre\u015bci","text":"<p>Wszyscy jeste\u015bmy lud\u017ami. Je\u015bli widzisz b\u0142\u0105d, daj zna\u0107 i zr\u00f3b Pull Request lub otw\u00f3rz Issue. Dzi\u0119ki!</p>"},{"location":"Frontend/shader/appendix/03/README-pl/#dzielenie-sie-przykadami-shaderow","title":"Dzielenie si\u0119 przyk\u0142adami shader\u00f3w","text":"<p>Zobaczysz wiele link\u00f3w do edytora on-line i jego osadzonych instancji. Gdy zakodujesz co\u015b, co sprawi, \u017ce b\u0119dziesz dumny, kliknij \"Export\" (lub ikon\u0119 <code>\u21ea</code>), a nast\u0119pnie skopiuj \"URL to code...\". Wy\u015blij go do @bookofshaders lub @kyndinfo. Czekamy na nie i dodamy je do dzia\u0142u galeria przyk\u0142ad\u00f3w.</p>"},{"location":"Frontend/shader/appendix/03/README-ru/","title":"README ru","text":""},{"location":"Frontend/shader/appendix/03/README-ru/#_1","title":"\u041a\u0430\u043a \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043d\u0438\u0433\u0438?","text":"<p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0438\u043c \u0437\u0430 \u0432\u0430\u0448\u0435 \u0436\u0435\u043b\u0430\u043d\u0438\u0435 \u043f\u043e\u043c\u043e\u0447\u044c! \u0415\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c:</p> <ul> <li>\u041f\u0435\u0440\u0435\u0432\u043e\u0434</li> <li>\u0414\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u043b\u043e\u0441\u0441\u0430\u0440\u0438\u044f</li> <li>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</li> <li>\u0412\u044b\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u043e\u0432 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-ru/#_2","title":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434","text":"<p>\u041a\u043d\u0438\u0433\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 Markdown, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441 \u0435\u0451 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043e\u0447\u0435\u043d\u044c \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.</p> <ol> <li> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. \u041e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438 \u0432 \u043d\u0451\u043c. \u041b\u0435\u0433\u043a\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 <code>README.md</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u0439\u043b\u0430\u0445, \u043d\u0430\u0437\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438: <code>TITLE.md</code>, <code>SUMMARY.md</code> \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0422\u0430\u043a \u0436\u0435 \u0432\u044b \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u0435, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445, \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0443\u043c\u044f \u0431\u0443\u043a\u0432\u0430\u043c\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u043c\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: <code>README-jp.md</code>, <code>README-es.md</code> \u0438 \u043f\u0440\u043e\u0447\u0438\u0435.</p> </li> <li> <p>\u0424\u043e\u0440\u043a\u043d\u0438\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0438 \u0441\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u043a \u0441\u0435\u0431\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440.</p> </li> <li> <p>\u041f\u0440\u043e\u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0432\u0443\u0445\u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u044f\u0437\u044b\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0435.</p> </li> <li> <p>\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 (\u0441\u043c. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435).</p> </li> <li> <p>\u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 (\u0441\u043c. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435).</p> </li> <li> <p>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 push \u0432 \u0432\u0430\u0448 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043a \u0438 \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439.</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-ru/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435","text":"<p>\u041d\u0435 \u0443\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>\u0438\u043b\u0438 \u0442\u0430\u043a:</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-ru/#_4","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 PHP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043f\u0430\u043f\u043a\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>localhost:8000</code>, \u0437\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0430\u0434\u0440\u0435\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 <code>?lan=xx</code>, \u0433\u0434\u0435 <code>xx</code> - \u043a\u043e\u0434 \u044f\u0437\u044b\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0435.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0435 \u0433\u043b\u0430\u0432\u0443 <code>03</code> \u043d\u0430 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u0438\u0439, \u0437\u043d\u0430\u0447\u0438\u0442 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u043d\u0430\u0434 \u0444\u0430\u0439\u043b\u043e\u043c <code>03/README-fr.md</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>http://localhost:8000/03/?lan=fr</code>.</p>"},{"location":"Frontend/shader/appendix/03/README-ru/#_5","title":"\u0414\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u043b\u043e\u0441\u0441\u0430\u0440\u0438\u044f","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435. \u041c\u044b \u0440\u0430\u0434\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0432\u0430\u0448\u0435 \u043c\u043d\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435. \u041f\u0438\u0448\u0438\u0442\u0435 \u043d\u0430\u043c \u043d\u0430 @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/README-ru/#_6","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0412\u0441\u0435 \u043c\u044b \u043b\u044e\u0434\u0438. \u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u0438\u0434\u0438\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0443 - \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435 \u043e \u043d\u0435\u0439 \u0438 \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442, \u0438\u043b\u0438 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 issue \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435. \u0421\u043f\u0430\u0441\u0438\u0431\u043e!</p>"},{"location":"Frontend/shader/appendix/03/README-ru/#_7","title":"\u0412\u044b\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0439\u0442\u0435 \u0432\u0430\u0448\u0438 \u0448\u0435\u0439\u0434\u0435\u0440\u044b","text":"<p>\u0412\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u043e\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0432 \u043d\u0451\u043c \u043a\u043e\u0434, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 \u043a\u043d\u0438\u0433\u0443. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u0441\u0442\u043e\u044f\u0449\u0435\u0435, \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u00abExport\u00bb (\u0438\u043b\u0438 \u0438\u043a\u043e\u043d\u043a\u0443 <code>\u21ea</code>) \u0438 \u0441\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043a\u043e\u0434. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0435\u0451 \u043d\u0430 @bookofshaders \u0438\u043b\u0438 @kyndinfo. \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0434\u044b \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0430\u0448 \u043a\u043e\u0434 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u0433\u0430\u043b\u0435\u0440\u0435\u044e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432.</p>"},{"location":"Frontend/shader/appendix/03/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/appendix/03/README-ua/#_1","title":"\u042f\u043a \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0438 \u0443\u0447\u0430\u0441\u0442\u044c \u0443 \u0440\u043e\u0437\u0432\u0438\u0442\u043a\u0443 \u043a\u043d\u0438\u0433\u0438?","text":"<p>\u0414\u044f\u043a\u0443\u0454\u043c\u043e \u0437\u0430 \u0431\u0430\u0436\u0430\u043d\u043d\u044f \u0441\u043f\u0456\u0432\u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438! \u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u0456\u0441\u043d\u0443\u0454 \u043a\u0456\u043b\u044c\u043a\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0456\u0432:</p> <ul> <li>\u041f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0443</li> <li>\u041f\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u044f \u0442\u0430 \u0434\u043e\u043f\u0440\u0430\u0446\u044e\u0432\u0430\u043d\u043d\u044f <code>\u0433\u043b\u043e\u0441\u0430\u0440\u0456\u044e</code></li> <li>\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0443</li> <li>\u0414\u0456\u043b\u0456\u0442\u044c\u0441\u044f \u0441\u0432\u043e\u0457\u043c\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0430\u043c\u0438 \u0448\u0435\u0439\u0434\u0435\u0440\u0456\u0432 \u0447\u0435\u0440\u0435\u0437 \u043e\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-ua/#_2","title":"\u041f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0443","text":"<p>\u0426\u044f \u043a\u043d\u0438\u0433\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043c\u043e\u0432\u043e\u044e \u0440\u043e\u0437\u043c\u0456\u0442\u043a\u0438 Markdown, \u0442\u043e\u043c\u0443 \u0457\u0457 \u0434\u0443\u0436\u0435 \u043b\u0435\u0433\u043a\u043e \u0440\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u0442\u0430 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438 \u0437 \u043d\u0435\u044e.</p> <ol> <li> <p>\u0414\u043b\u044f \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u043f\u0435\u0440\u0435\u0439\u0434\u0456\u0442\u044c \u0434\u043e github-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0456\u044e \u0437\u0430 \u0430\u0434\u0440\u0435\u0441\u043e\u044e  <code>github.com/patriciogonzalezvivo/thebookofshaders</code>. \u041f\u0435\u0440\u0435\u0433\u043b\u044f\u043d\u044c\u0442\u0435 \u0432 \u043d\u044c\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0438 \u0442\u0430 \u0442\u0435\u043a\u0438. \u0412\u0438 \u043f\u043e\u043c\u0456\u0442\u0438\u0442\u0435, \u0449\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 <code>README.md</code> \u0442\u0430 \u0456\u043d\u0448\u0438\u0445 \u0444\u0430\u0439\u043b\u0430\u0445 \u0437 \u043d\u0430\u0437\u0432\u0430\u043c\u0438 \u0456\u0437 \u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043b\u0456\u0442\u0435\u0440, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434: <code>TITLE.md</code>, <code>SUMMARY.md</code> \u0442\u043e\u0449\u043e. \u0422\u0430\u043a\u043e\u0436 \u0437\u0430\u0443\u0432\u0430\u0436\u0442\u0435, \u0449\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0438 \u0440\u043e\u0437\u043c\u0456\u0449\u0443\u044e\u0442\u044c\u0441\u044f \u0443 \u0444\u0430\u0439\u043b\u0430\u0445, \u0456\u043c\u0435\u043d\u0430 \u044f\u043a\u0438\u0445 \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u044e\u0442\u044c\u0441\u044f \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u043c\u0438 \u0434\u0432\u043e\u043c\u0430 \u043b\u0456\u0442\u0435\u0440\u0430\u043c\u0438, \u0449\u043e \u0432\u043a\u0430\u0437\u0443\u044e\u0442\u044c \u043d\u0430 \u043c\u043e\u0432\u0443 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0443, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434: <code>README-jp.md</code>, <code>README-es.md</code> \u0442\u043e\u0449\u043e.</p> </li> <li> <p>\u0417\u0440\u043e\u0431\u0456\u0442\u044c \u0432\u0456\u0434\u0433\u0430\u043b\u0443\u0436\u0435\u043d\u043d\u044f \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0456\u044e \u0456 \u043a\u043b\u043e\u043d\u0443\u0439\u0442\u0435 \u0439\u043e\u0433\u043e \u043d\u0430 \u0441\u0432\u0456\u0439 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440.</p> </li> <li> <p>\u041f\u0440\u043e\u0434\u0443\u0431\u043b\u044e\u0439\u0442\u0435 \u0432\u043c\u0456\u0441\u0442 \u0444\u0430\u0439\u043b\u0456\u0432, \u044f\u043a\u0456 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0442\u0438. \u0414\u043e\u0434\u0430\u0439\u0442\u0435 \u0434\u043e \u043d\u0438\u0445 \u0434\u0432\u043e\u0431\u0443\u043a\u0432\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u043a\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u043d\u0430 \u043c\u043e\u0432\u0443 \u0434\u043b\u044f \u044f\u043a\u043e\u0457 \u0432\u0438 \u0440\u043e\u0431\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434.</p> </li> <li> <p>\u041f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0456\u0442\u044c \u0432\u043c\u0456\u0441\u0442 \u0444\u0430\u0439\u043b\u0443 (\u0434\u0438\u0432. \u041f\u0440\u0438\u043c\u0456\u0442\u043a\u0438 \u0449\u043e\u0434\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0443).</p> </li> <li> <p>\u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0443\u0439\u0442\u0435 \u0437\u043c\u0456\u043d\u0438 (\u0434\u0438\u0432. \u0422\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f).</p> </li> <li> <p>\u0417\u0440\u043e\u0431\u0456\u0442\u044c push \u0443 \u0432\u0430\u0448 \u0432\u043b\u0430\u0441\u043d\u0438\u0439 \u0444\u043e\u0440\u043a \u043f\u0440\u043e\u0454\u043a\u0442\u0443 \u0456 \u0441\u0442\u0432\u043e\u0440\u0456\u0442\u044c pull request</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-ua/#_3","title":"\u041f\u0440\u0438\u043c\u0456\u0442\u043a\u0438 \u0449\u043e\u0434\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0443","text":"<p>\u041d\u0435 \u0432\u0438\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0442\u0430 \u043d\u0435 \u0437\u043c\u0456\u043d\u044e\u0439\u0442\u0435 \u0432\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0456 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438, \u044f\u043a\u0456 \u0432\u0438\u0433\u043b\u044f\u0434\u0430\u044e\u0442\u044c \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u043d\u043e \u0442\u0430\u043a:</p> <pre><code>&lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>\u0410\u0431\u043e \u0442\u0430\u043a:</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-ua/#_4","title":"\u0422\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f","text":"<p>\u0417\u0430\u043f\u0443\u0441\u0442\u0456\u0442\u044c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0438\u0439 PHP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0443 \u0442\u0435\u0446\u0456 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0456\u044e:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440 \u0443 \u0432\u0430\u0448\u043e\u043c\u0443 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0456 \u0437\u0430\u0439\u0434\u0456\u0442\u044c \u043d\u0430 \u0430\u0434\u0440\u0435\u0441\u0443 <code>localhost:8000</code>, \u043f\u0435\u0440\u0435\u0439\u0434\u0456\u0442\u044c \u0434\u043e \u0440\u043e\u0437\u0434\u0456\u043b\u0443, \u044f\u043a\u0438\u0439 \u0432\u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u0435, \u0456 \u0434\u043e\u0434\u0430\u0439\u0442\u0435 \u0432 \u043a\u0456\u043d\u0446\u0456 \u0430\u0434\u0440\u0435\u0441\u0438 \u0442\u0430\u043a\u0438\u0439 \u0440\u044f\u0434\u043e\u043a <code>?lan=</code>, \u0430 \u043f\u0456\u0441\u043b\u044f \u043d\u044c\u043e\u0433\u043e \u0434\u0432\u0456 \u043b\u0456\u0442\u0435\u0440\u0438 \u0434\u043b\u044f \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043c\u043e\u0432\u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0443.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u044f\u043a\u0449\u043e \u0432\u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u0435 \u0440\u043e\u0437\u0434\u0456\u043b <code>03</code> \u043d\u0430 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044c\u043a\u0443 \u043c\u043e\u0432\u0443, \u0437\u043d\u0430\u0447\u0438\u0442\u044c \u0432\u0438 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u043b\u0438 \u0437 \u0444\u0430\u0439\u043b\u043e\u043c <code>03/README-fr.md</code>, \u0456 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438 \u0439\u043e\u0433\u043e \u0437\u0430 \u0430\u0434\u0440\u0435\u0441\u043e\u044e: <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/README-ua/#_5","title":"\u041f\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u044f \u0433\u043b\u043e\u0441\u0430\u0440\u0456\u044e","text":"<p>\u0426\u0435\u0439 \u0440\u043e\u0437\u0434\u0456\u043b \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u043e\u0437\u0440\u043e\u0431\u0446\u0456. \u041c\u0438 \u0440\u0430\u0434\u0456 \u0432\u0438\u0441\u043b\u0443\u0445\u0430\u0442\u0438 \u0432\u0430\u0448\u0456 \u0456\u0434\u0435\u0457 \u0449\u043e\u0434\u043e \u0439\u043e\u0433\u043e \u043f\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u044f, \u0449\u043e\u0431 \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0439\u043e\u0433\u043e \u043a\u043e\u0440\u0438\u0441\u043d\u0438\u043c \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0432\u0441\u0456\u0445. \u041d\u0430\u0434\u0441\u0438\u043b\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0457 \u043f\u0440\u043e\u043f\u043e\u0437\u0438\u0446\u0456\u0457 \u043d\u0430 @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/README-ua/#_6","title":"\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0443","text":"<p>\u041c\u0438 \u0432\u0441\u0456 \u043b\u044e\u0434\u0438. \u042f\u043a\u0449\u043e \u0432\u0438 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0435 \u043f\u043e\u043c\u0438\u043b\u043a\u0443, \u0442\u043e \u0441\u043f\u043e\u0432\u0456\u0441\u0442\u0456\u0442\u044c \u043f\u0440\u043e \u043d\u0435\u0457, \u0437\u0440\u043e\u0431\u0456\u0442\u044c pull-request \u0437 \u0432\u0438\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f\u043c \u0430\u0431\u043e \u0432\u0456\u0434\u043a\u0440\u0438\u0439\u0442\u0435 issue. \u0414\u044f\u043a\u0443\u044e!</p>"},{"location":"Frontend/shader/appendix/03/README-ua/#_7","title":"\u0414\u0456\u043b\u0456\u0442\u044c\u0441\u044f \u0441\u0432\u043e\u0457\u043c\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0430\u043c\u0438 \u0448\u0435\u0439\u0434\u0435\u0440\u0456\u0432","text":"<p>\u0412\u0438 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0435 \u0431\u0430\u0433\u0430\u0442\u043e \u043f\u043e\u0441\u0438\u043b\u0430\u043d\u044c \u043d\u0430 \u043e\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0456 \u0439\u043e\u0433\u043e \u0432\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0456 \u0443 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0437 \u043a\u043e\u0434\u043e\u043c. \u041a\u043e\u043b\u0438 \u0432\u0438 \u0437\u0430\u043a\u043e\u0434\u0443\u0454\u0442\u0435 \u0449\u043e\u0441\u044c \u043a\u043e\u0440\u0438\u0441\u043d\u0435 \u0447\u0438 \u0446\u0456\u043a\u0430\u0432\u0435, \u043d\u0430\u0442\u0438\u0441\u043d\u0456\u0442\u044c \u00abExport\u00bb (\u0430\u0431\u043e \u043f\u0456\u043a\u0442\u043e\u0433\u0440\u0430\u043c\u0443 <code>\u21ea</code>) \u0456 \u043d\u0430\u0434\u0456\u0448\u043b\u0456\u0442\u044c \u0439\u043e\u0433\u043e \u043d\u0430 \u0430\u0434\u0440\u0435\u0441\u0443 @bookofshaders \u0430\u0431\u043e @kyndinfo. \u041c\u0438 \u0431\u0443\u0434\u0435\u043c\u043e \u0440\u0430\u0434\u0456 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u043d\u0443\u0442\u0438 \u0439\u043e\u0433\u043e \u0456 \u0434\u043e\u0434\u0430\u0442\u0438 \u0434\u043e \u0433\u0430\u043b\u0435\u0440\u0435\u0457 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432.</p>"},{"location":"Frontend/shader/appendix/03/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/03/README-vi/#lam-the-nao-e-ong-gop-cho-quyen-sach-nay","title":"L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 \u0111\u00f3ng g\u00f3p cho quy\u1ec3n s\u00e1ch n\u00e0y","text":"<p>C\u1ea3m \u01a1n b\u1ea1n v\u00ec mu\u1ed1n g\u00f3p s\u1ee9c! C\u00f3 r\u1ea5t nhi\u1ec1u c\u00e1ch \u0111\u1ec3 l\u00e0m vi\u1ec7c \u0111\u00f3:</p> <ul> <li>D\u1ecbch quy\u1ec3n s\u00e1ch sang ng\u00f4n ng\u1eef kh\u00e1c</li> <li>C\u1ea3i thi\u1ec7n ph\u1ea7n <code>Ch\u00fa gi\u1ea3i</code></li> <li>Bi\u00ean t\u1eadp l\u1ea1i n\u1ed9i dung</li> <li>Chia s\u1ebb code shader c\u1ee7a b\u1ea1n tr\u00ean editor online</li> </ul>"},{"location":"Frontend/shader/appendix/03/README-vi/#dich-quyen-sach-sang-ngon-ngu-khac","title":"D\u1ecbch quy\u1ec3n s\u00e1ch sang ng\u00f4n ng\u1eef kh\u00e1c","text":"<p>Quy\u1ec3n s\u00e1ch n\u00e0y \u0111\u01b0\u1ee3c vi\u1ebft theo c\u00fa ph\u00e1p Markdown n\u00ean r\u1ea5t d\u1ec5 ch\u1ec9nh s\u1eeda.</p> <ol> <li> <p>B\u1ea1n c\u00f3 th\u1ec3 truy c\u1eadp repository <code>github.com/patriciogonzalezvivo/thebookofshaders</code> tr\u00ean GitHub. H\u00e3y xem c\u00e1c file v\u00e0 th\u01b0 m\u1ee5c \u1edf \u0111\u00f3. B\u1ea1n s\u1ebd th\u1ea5y n\u1ed9i dung c\u1ee7a c\u00e1c ch\u01b0\u01a1ng n\u1eb1m \u1edf c\u00e1c file <code>README.md</code> v\u00e0 c\u00e1c file c\u00f3 t\u00ean vi\u1ebft hoa nh\u01b0: <code>TITLE.md</code>, <code>SUMMARY.md</code>, v\u00e2n v\u00e2n. Ngo\u00e0i ra th\u00ec c\u00e1c b\u1ea3n d\u1ecbch s\u1ebd c\u00f3 file ri\u00eang v\u00e0 c\u00f3 t\u00ean k\u1ebft th\u00fac b\u1eb1ng m\u00e3 ng\u00f4n ng\u1eef 2 k\u00fd t\u1ef1, v\u00ed d\u1ee5: <code>README-jp.md</code>, <code>README-es.md</code>, v\u00e2n v\u00e2n.</p> </li> <li> <p>Fork repository n\u00e0y r\u1ed3i t\u1ea1o m\u1ed9t b\u1ea3n sao tr\u00ean m\u00e1y c\u1ee7a b\u1ea1n.</p> </li> <li> <p>T\u1ea1o m\u1ed9t b\u1ea3n sao cho m\u1ed7i file m\u00e0 b\u1ea1n mu\u1ed1n d\u1ecbch. H\u00e3y nh\u1edb th\u00eam m\u00e3 ng\u00f4n ng\u1eef 2 k\u00fd t\u1ef1 v\u00e0o cu\u1ed1i t\u00ean file.</p> </li> <li> <p>D\u1ecbch n\u1ed9i dung sang ng\u00f4n ng\u1eef kh\u00e1c (xem m\u1ee5c Ch\u00fa \u00fd khi d\u1ecbch thu\u1eadt).</p> </li> <li> <p>Ki\u1ec3m tra l\u1ea1i (xem m\u1ee5c Ki\u1ec3m tra).</p> </li> <li> <p>Push l\u00ean repository ri\u00eang c\u1ee7a b\u1ea1n r\u1ed3i t\u1ea1o m\u1ed9t Pull Request v\u00e0o repository c\u1ee7a ch\u00fang t\u00f4i.</p> </li> </ol>"},{"location":"Frontend/shader/appendix/03/README-vi/#chu-y-khi-dich-thuat","title":"Ch\u00fa \u00fd khi d\u1ecbch thu\u1eadt","text":"<p>Kh\u00f4ng \u0111\u01b0\u1ee3c xo\u00e1 ho\u1eb7c thay \u0111\u1ed5i m\u00e3 nh\u00fang c\u00e1c v\u00ed d\u1ee5 t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c \u0111o\u1ea1n m\u00e3 sau:</p> <pre><code>    &lt;div class=\"codeAndCanvas\" data=\"grid-making.frag\"&gt;&lt;/div&gt;\n</code></pre> <p>ho\u1eb7c</p> <pre><code>&lt;div class=\"simpleFunction\" data=\"y = mod(x,2.0);\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"Frontend/shader/appendix/03/README-vi/#kiem-tra","title":"Ki\u1ec3m tra","text":"<p>H\u00e3y th\u1eed ch\u1ea1y tr\u00ean server PHP n\u1ed9i b\u1ed9 c\u1ee7a b\u1ea1n:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>R\u1ed3i truy c\u1eadp <code>localhost:8000</code> tr\u00ean tr\u00ecnh duy\u1ec7t v\u00e0 t\u1edbi ch\u01b0\u01a1ng m\u00e0 b\u1ea1n \u0111\u00e3 d\u1ecbch r\u1ed3i th\u00eam \u0111u\u00f4i <code>?lan=</code> k\u00e8m m\u00e3 ng\u00f4n ng\u1eef 2 k\u00fd t\u1ef1.</p> <p>V\u00ed d\u1ee5, n\u1ebfu b\u1ea1n d\u1ecbch ch\u01b0\u01a1ng <code>03</code> sang ti\u1ebfng Ph\u00e1p t\u1ee9c l\u00e0 b\u1ea1n s\u1eeda file <code>03/README-fr.md</code> n\u00ean gi\u1edd b\u1ea1n s\u1ebd t\u1ef1 ki\u1ec3m tra l\u1ea1i t\u1ea1i \u0111\u1ecba ch\u1ec9: <code>http://localhost:8000/03/?lan=fr</code></p>"},{"location":"Frontend/shader/appendix/03/README-vi/#cai-thien-phan-chu-giai","title":"C\u1ea3i thi\u1ec7n ph\u1ea7n ch\u00fa gi\u1ea3i","text":"<p>Ph\u1ea7n n\u00e0y v\u1eabn \u0111ang \u0111\u01b0\u1ee3c b\u1ed5 sung. Ch\u00fang t\u00f4i r\u1ea5t vui l\u00f2ng l\u1eafng nghe c\u00e1c \u00fd t\u01b0\u1edfng c\u1ee7a b\u1ea1n \u0111\u1ec3 khi\u1ebfn n\u00f3 tr\u1edf n\u00ean d\u1ec5 hi\u1ec3u h\u01a1n. H\u00e3y g\u1eedi tin nh\u1eafn t\u1edbi @bookofshaders.</p>"},{"location":"Frontend/shader/appendix/03/README-vi/#bien-tap-noi-dung","title":"Bi\u00ean t\u1eadp n\u1ed9i dung","text":"<p>Ch\u00fang ta \u0111\u1ec1u l\u00e0 nh\u1eefng ng\u01b0\u1eddi b\u00ecnh th\u01b0\u1eddng c\u00f3 nhi\u1ec1u \u0111i\u1ec3m c\u00f3 th\u1ec3 c\u1ea3i thi\u1ec7n h\u01a1n n\u1eefa. N\u1ebfu b\u1ea1n c\u00f3 g\u00ec mu\u1ed1n g\u00f3p \u00fd, c\u1ee9 t\u1ea1o Pull Request ho\u1eb7c m\u1ed9t issue. C\u1ea3m \u01a1n!</p>"},{"location":"Frontend/shader/appendix/03/README-vi/#chia-se-code-shader","title":"Chia s\u1ebb code shader","text":"<p>B\u1ea1n s\u1ebd th\u1ea5y r\u1ea5t nhi\u1ec1u link tr\u1ecf t\u1edbi editor online ho\u1eb7c c\u00e1c phi\u00ean b\u1ea3n nh\u00fang c\u1ee7a n\u00f3 \u1edf quy\u1ec3n s\u00e1ch n\u00e0y. N\u1ebfu b\u1ea1n ho\u00e0n th\u00e0nh 1 \u0111o\u1ea1n code hay ho n\u00e0o \u0111\u00f3, h\u00e3y click n\u00fat \"Export\" (ho\u1eb7c bi\u1ec3u t\u01b0\u1ee3ng <code>\u21ea</code>) r\u1ed3i copy \"URL to code...\". Sau \u0111\u00f3 g\u1eedi URL t\u1edbi @bookofshaders ho\u1eb7c @kyndinfo. Ch\u00fang t\u00f4i r\u1ea5t mong ch\u1edd \u0111\u01b0\u1ee3c b\u1ed5 sung n\u00f3 v\u00e0o ph\u1ea7n th\u01b0 vi\u1ec7n c\u00e1c v\u00ed d\u1ee5.</p>"},{"location":"Frontend/shader/appendix/04/","title":"Index","text":""},{"location":"Frontend/shader/appendix/04/#an-introduction-for-those-coming-from-js","title":"An introduction for those coming from JS","text":"<p>by Nicolas Barradeau</p> <p>If you're a JavaScript developer, chances are you'll be a bit puzzled when reading the book. Indeed, there are many differences between manipulating high-level JS and getting down and dirty with shaders. Yet, as opposed to the underlying assembly language, GLSL is human readable and I'm sure that, once you acknowledge its specificities, you'll quickly be up and running.</p> <p>I assume you have a prior (be it shallow) knowledge of JavaScript of course, but also of the Canvas API. If not, don't worry, you'll still be able to get most of this section.</p> <p>Also, I won't go too much into details and some things may be half true, don't expect a \"definitive guide\" but rather</p>"},{"location":"Frontend/shader/appendix/04/#a-big-hug","title":"A BIG HUG","text":"<p>JavaScript is great at quick prototyping ; you throw a bunch of random, untyped variables and methods, you can dynamically add and remove class members, refresh the page and see if it works, make changes accordingly, refresh the page, repeat, life is easy. So you may wonder what is the difference between JavaScript and GLSL. After all, both run in the browser, both are used to draw a bunch of funky stuff on a screen and to that extent, JS is easier to use.</p> <p>Well, the main difference is that Javascript is an interpreted language while GLSL is a compiled language. A compiled program is executed natively on the OS, it is low level and generally fast. An interpreted program requires a Virtual Machine (VM) to be executed, it is high level and generally slow.</p> <p>When a browser (the JavaScript VM) executes or interprets a piece of JS, it has no clue about which variable is what and which function does what (with the notable exception of TypedArrays). Therefore it can't optimize anything upfront, so it takes some time to read your code, to infer (deduce from the usage) the types of your variables and methods  and when possible, it will convert some of your code into assembly code that will execute much faster.</p> <p>It's a slow, painstaking and insanely complex process, if you're interested in the details, I'd recommend watching how Chrome's V8 engine works. The worst is that every browser optimizes JS its way and the process is hidden from you ; you are powerless.</p> <p>A compiled program is not interpreted ; the OS runs it, if the program is valid, the program is executed. That's a big change ; if you forget a semicolon at the end of line, your code is invalid, it will not compile: your code won't turn into a program at all.</p> <p>That's cold but that's what a shader is: a compiled program executed on the GPU. Fear not! a compiler, the piece of program that makes sure your code is valid, will become your best friend. The examples of this book and the companion editor are very user friendly. They'll tell you where and why your program failed to compile, then you'll have to fix things and whenever the shader is ready to compile, it will be displayed instantly. That's a great way of learning as it's very visual and you can't really break anything.</p> <p>Last note, a shader is made of 2 programs, the vertex shader and the fragment shader. In a nutshell, the vertex shader, the first program, receives a geometry as an input and turns it into series of pixels (or fragments) then hands them over to the fragment shader, the second program, that will decide which color to paint the pixels. This book is mostly focused on the latter, in all the examples, the geometry is a simple quadrilateral that covers the whole screen.</p> <p>SO! ready?</p> <p>off we go!</p>"},{"location":"Frontend/shader/appendix/04/#strong-types","title":"Strong types","text":"<p>When you come from JS or any untyped language, typing your variables is an alien concept, making typing the hardest step to take towards GLSL. Typing, as the name suggests, means that you'll give a type to your variables (and functions of course). This basically means that the word <code>var</code> doesn't exist anymore. The GLSL thought-police erased it from the common tongue and you're not able to speak it because, well... it doesn't exist.</p> <p>Instead of using the magic word <code>var</code>, you'll have to explicitly specify the type of each variable you use, then the compiler will only see objects and primitives it knows how to handle efficiently. The downside when you can't use the <code>var</code> keyword and must specify everything, is that you'll have to know the type of all the variables and know them well. Rest assured, there are few and they're fairly simple (GLSL is not a Java framework).</p> <p>Might sound scary but all in all, it's not very different from what you're doing when you code JavaScript ; if a variable is a <code>boolean</code>, you'll expect it to store <code>true</code> or <code>false</code> and nothing else. If a variable is called <code>var uid = XXX;</code>, chances are that you'll store an integer value in there and a <code>var y = YYY;</code> might be a reference to a floating point value. Even better, with strong types, you won't waste time wondering if <code>X == Y</code> (or was it <code>typeof X == typeof Y</code> ? .. or <code>typeof X !== null &amp;&amp; Y...</code> ... anyway) ; you'll just know it and if you don't, the compiler will.</p> <p>Here are the scalar types (a scalar describes a quantity) you can use in GLSL: <code>bool</code> (Boolean), <code>int</code>(Integer), <code>float</code>(floating point Number). There are other types but let's take it easy, the following snippet shows how to declare <code>vars</code> (yes, I spoke the forbidden word) in GLSL:</p> <pre><code>//a Boolean value:\nJS: var b = true;               GLSL: bool b = true;\n\n//an Integer value\nJS: var i = 1;                  GLSL: int i = 1;\n\n//a Float value (a Number)\nJS: var f = 3.14159;            GLSL: float f = 3.14159;\n</code></pre> <p>Not that hard right? as mentioned above, it even makes things easier when it comes to coding as you don't waste your time checking the type of a given variable. When in doubt, remember that you're doing this for your program to run immensely faster than in JS.</p>"},{"location":"Frontend/shader/appendix/04/#void","title":"void","text":"<p>There is a <code>void</code> type that roughly corresponds to <code>null</code>, it is used as the return type of a method that doesn't return anything. you can't assign it to a variable.</p>"},{"location":"Frontend/shader/appendix/04/#boolean","title":"boolean","text":"<p>As you know, Booleans are mostly used in conditional tests ; <code>if( myBoolean == true ){}else{}</code>. If the conditional branching is a valid option on the CPU, the parallel nature of GLSL makes it less true. Using conditionals is even discouraged most of the time, the book explains a couple of alternative techniques to solve this.</p>"},{"location":"Frontend/shader/appendix/04/#type-casting","title":"type casting","text":"<p>As Boromir put it, \"One does not simply combine Typed primitives\". Unlike JavaScript, GLSL will not allow you to perform operations between variables of different types.</p> <p>This for instance:</p> <pre><code>int     i = 2;\nfloat   f = 3.14159;\n\n//trying to multiply an integer by a float value\nfloat   r = i * f;\n</code></pre> <p>will not play nice because you're trying to crossbreed a cat and a giraffe. The solution to this is to use type casting ; it will make the compiler believe that <code>i</code> is of type <code>float</code> without actually changing the type of <code>i</code>.</p> <pre><code>//casting the type of the integer variable 'i' into float\nfloat   r = float( i ) * f;\n</code></pre> <p>Which is strictly equivalent to dressing up a cat in a giraffe outfit and will work as expected ( <code>r</code> will store the result of <code>i</code> x <code>f</code>).</p> <p>It is possible to cast any of the above types into any other type, note that casting a <code>float</code> to <code>int</code> will behave like a <code>Math.floor()</code> as it will remove the values behind the floating point.  Casting a <code>float</code> or a <code>int</code> to <code>bool</code> will return <code>true</code> if the variable is not equal to zero.</p>"},{"location":"Frontend/shader/appendix/04/#constructor","title":"constructor","text":"<p>The variable types are also their own class constructor ; in fact a <code>float</code> variable can be thought of as an <code>instance</code> of a <code>Float</code> class.</p> <p>This declarations are equally valid:</p> <pre><code>int     i = 1;\nint     i = int( 1 );\nint     i = int( 1.9995 );\nint     i = int( true );\n</code></pre> <p>This may not sound like much for <code>scalar</code> types, it's not very different from casting, but it will make sense when addressing the overload section.</p> <p>Ok, so these three are the <code>primitive types</code>, things you can't live without but of course, GLSL has more to offer.</p>"},{"location":"Frontend/shader/appendix/04/#vectors","title":"Vectors","text":"<p>In Javascript like in GLSL, you'll need more sophisticated ways of handling data, that's where <code>vectors</code> come in handy. I suppose that you've already coded a <code>Point</code> class in JavaScript to hold together a <code>x</code> and a <code>y</code> value, the code for this would go like:</p> <pre><code>// 'class' definition:\nvar Point = function( x, y ){\n    this.x = x || 0;\n    this.y = y || 0;\n}\n\n//and you would instantiate it like:\nvar p = new Point( 100,100 );\n</code></pre> <p>As we've just seen, this is SO wrong at SO many levels! That <code>var</code> keyword for one, then the horrendous <code>this</code>, then again untyped <code>x</code> and <code>y</code> values... No, this is not going to work in shaderland.</p> <p>Instead, GLSL exposes built-in data structures to hold data together, namely:</p> <ul> <li><code>bvec2</code>: a 2D Boolean vector, <code>bvec3</code>: a 3D Boolean vector, <code>bvec4</code>: a 4D Boolean vector</li> <li><code>ivec2</code>: a 2D Integer vector, <code>ivec3</code>: a 3D Integer vector, <code>ivec4</code>: a 4D Integer vector</li> <li><code>vec2</code>: a 2D Float vector, <code>vec3</code>: a 3D Float vector, <code>vec4</code>: a 4D Float vector</li> </ul> <p>You immediately noticed that there's a type of vector for each primitive type, clever bunny. From what we just saw, you can deduce that a <code>bvec2</code> will hold two values of type <code>bool</code> and a <code>vec4</code> will hold four <code>float</code> values.</p> <p>Another thing introduced by vectors is a number of dimensions, it doesn't mean that a 2D vector is used when you render 2D graphics and a 3D vector when you do 3D. What would a 4D vector represent then? (well, actually it is called a tesseract or hypercube)</p> <p>No, the dimensions represent the number and the type of components or variables stored into the vector:</p> <pre><code>// let's create a 2D Boolean vector\nbvec2 b2 = bvec2 ( true, false );\n\n// let's create a 3D Integer vector\nivec3 i3 = ivec3( 0,0,1 );\n\n// let's create a 4D Float vector\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 1. );\n</code></pre> <p><code>b2</code> stores two different boolean values, <code>i3</code> stores 3 different integer values and <code>v4</code> stores 4 different float values.</p> <p>but how to retrieve those values? in the case of <code>scalars</code>, the answer is obvious ; with <code>float f = 1.2;</code>, the variable <code>f</code> holds the value <code>1.2</code>. With vectors it's a bit different and quite beautiful.</p>"},{"location":"Frontend/shader/appendix/04/#accessors","title":"accessors","text":"<p>There are different ways of accessing the values</p> <pre><code>// let's create a 4D Float vector\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n</code></pre> <p>to retrieve the 4 values, you can do the following:</p> <pre><code>float x = v4.x;     // x = 0.0\nfloat y = v4.y;     // y = 1.0\nfloat z = v4.z;     // z = 2.0\nfloat w = v4.w;     // w = 3.0\n</code></pre> <p>nice and easy ; but the following are equally valid ways of accessing your data:</p> <pre><code>float x =   v4.x    =   v4.r    =   v4.s    =   v4[0];     // x = 0.0\nfloat y =   v4.y    =   v4.g    =   v4.t    =   v4[1];     // y = 1.0\nfloat z =   v4.z    =   v4.b    =   v4.p    =   v4[2];     // z = 2.0\nfloat w =   v4.w    =   v4.a    =   v4.q    =   v4[3];     // w = 3.0\n</code></pre> <p>And the clever bunny you are already noticed three things:    * <code>X</code>, <code>Y</code>, <code>Z</code> &amp; <code>W</code> are used in 3D programs to represent 3D vectors    * <code>R</code>, <code>G</code>, <code>B</code> &amp; <code>A</code> are used to encode colors and alpha    * <code>[0]</code>, <code>[1]</code>, <code>[2]</code> &amp; <code>[3]</code> mean that we have a random access array of values</p> <p>So depending on whether you're manipulating 2D or 3D coordinates, a color with or without an alpha value or simply some random variables, you can pick the most suited vector type and size. Typically 2D coordinates and vectors (in the geometric sense) are stored as a <code>vec2</code>, <code>vec3</code> or <code>vec4</code>, colors as <code>vec3</code> or <code>vec4</code> if you need opacity but there is no restriction on how to use the vectors. For instance, if you want to store only one boolean value in a <code>bvec4</code>, it's possible, it's just a waste of memory.</p> <p>note: in a shader, color values (<code>R</code>, <code>G</code>, <code>B</code> &amp; <code>A</code>) are normalised, they range from 0 to 1 and not from 0 to 0xFF, so you'd rather use a Float <code>vec4</code> than an Integer <code>ivec4</code> to store them.</p> <p>Nice already, but there's more!</p>"},{"location":"Frontend/shader/appendix/04/#swizzle","title":"swizzle","text":"<p>It is possible to return more than one value at once ; say you need only the <code>X</code> and <code>Y</code> values of a <code>vec4</code>, in JavaScript, you'd have to write something like:</p> <pre><code>var needles = [0, 1]; // location of 'x' &amp; 'y' in our data structure\nvar a = [ 0,1,2,3 ]; // our 'vec4' data structure\nvar b = a.filter( function( val, i, array ) {\nreturn needles.indexOf( array.indexOf( val ) ) != -1;\n});\n// b = [ 0, 1 ]\n\n//or more literally:\nvar needles = [0, 1];\nvar a = [ 0,1,2,3 ]; // our 'vec4' data structure\nvar b = [ a[ needles[ 0 ] ], a[ needles[ 1 ] ] ]; // b = [ 0, 1 ]\n</code></pre> <p>Ugly. In GLSL you can retrieve them like so:</p> <pre><code>// create a 4D Float vector\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n\n//and retrieve only the X &amp; Y components\nvec2 xy =   v4.xy; //   xy = vec2( 0.0, 1.0 );\n</code></pre> <p>What just happened?! when you concatenate accessors, GLSL gracefully returns a subset of the values you asked for, in the best suited vector format. Indeed, the vector is a random access data structure, like an array in JavaScript if you want. So not only can you retrieve a subset of your data, but you can also specify the order in which you need it, this will invert the values of the components of a vector:</p> <pre><code>// create a 4D Float vector: R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n//and retrieve the color components in the A,B,G,R order\nvec4 backwards = color.abgr; // backwards = vec4( 1.0, 0.0, 0.8, 0.2 );\n</code></pre> <p>And of course, you can ask the same component multiple times:</p> <pre><code>// create a 4D Float vector: R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n//and retrieve a GAG vec3 based on the G &amp; A channels of the color\nvec3 GAG = color.gag; // GAG = vec4( 0.8, 1.0, 0.8 );\n</code></pre> <p>This is extremely handy to combine parts of vectors together, extract only the rgb channels of a RGBA color etc.</p>"},{"location":"Frontend/shader/appendix/04/#overload-everything","title":"overload everything!","text":"<p>In the types section, I mentioned something about the constructor and that's yet again a great feature of GLSL ; overloading. For those who don't know, overloading an operator or a function roughly means: 'changing the behaviour of said operator or function depending on the operands/arguments'. Overloading is not allowed in JavaScript, so this may be a bit strange at first but I'm sure that once you get used to it, you'll wonder why it is not implemented in JS (short answer, typing).</p> <p>The most basic example of operator overloading goes as follow:</p> <pre><code>vec2 a = vec2( 1.0, 1.0 );\nvec2 b = vec2( 1.0, 1.0 );\n//overloaded addition\nvec2 c = a + b;     // c = vec2( 2.0, 2.0 );\n</code></pre> <p>WHAT? So you can add things that are not numbers?!</p> <p>Yes, precisely. Of course this applies to all operators (<code>+</code>, <code>-</code>, <code>*</code> &amp; <code>/</code>) but that's only the beginning. Consider the following snippet:</p> <pre><code>vec2 a = vec2( 0.0, 0.0 );\nvec2 b = vec2( 1.0, 1.0 );\n//overloaded constructor\nvec4 c = vec4( a , b );         // c = vec4( 0.0, 0.0, 1.0, 1.0 );\n</code></pre> <p>We built a <code>vec4</code> out of two <code>vec2</code>, by doing so, the new <code>vec4</code> used the <code>a.x</code> and <code>a.y</code> as the <code>X</code>, <code>Y</code> components of <code>c</code>. Then it took <code>b.x</code> and <code>b.y</code> and used them as the <code>Z</code> and <code>W</code> components of <code>c</code>.</p> <p>This is what happens when a function is overloaded to accept different arguments, in this case, the <code>vec4</code> constructor. It means that many versions of the same method with a different signature can coexist in the same program, for instance the following declarations are all valid:</p> <pre><code>vec4 a = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 a = vec4(1.0);// x, y, z, w all equal 1.0\nvec4 a = vec4( v2, float, v4 );// vec4( v2.x, v2.y, float, v4.x );\nvec4 a = vec4( v3, float );// vec4( v3.x, v3.y, v3.z, float );\netc.\n</code></pre> <p>The only thing you should make sure of is to provide enough arguments to feed your vector.</p> <p>Last thing, you are allowed to overload the built-in functions in your program so they can take arguments they were not designed for (this shouldn't happen too often though).</p>"},{"location":"Frontend/shader/appendix/04/#more-types","title":"more types","text":"<p>Vectors are fun, they're the meat of your shader. There are other primitives such as Matrices and Texture samplers which will be covered later in the book.</p> <p>We can also use Arrays. Of course they have to be typed and there are twists:  * they have a fixed size  * you can't push(), pop(), splice() etc. and there is no <code>length</code> property  * you can't initialize them immediately with values  * you have to set the values individually</p> <p>this won't work:</p> <pre><code>int values[3] = [0,0,0];\n</code></pre> <p>but this will:</p> <pre><code>int values[3];\nvalues[0] = 0;\nvalues[1] = 0;\nvalues[2] = 0;\n</code></pre> <p>This is fine when you know your data or have small arrays of values. If you want a more expressive way of declaring a variable, there is also a <code>struct</code> type. These are like objects without methods ; they allow to store and access multiple variables inside the same object</p> <pre><code>struct ColorStruct {\n    vec3 color0;\n    vec3 color1;\n    vec3 color2;\n}\n</code></pre> <p>then you can set and retrieve the values of colors by doing:</p> <pre><code>//initialize the struct with some values\nColorStruct sandy = ColorStruct(    vec3(0.92,0.83,0.60),\n                                    vec3(1.,0.94,0.69),\n                                    vec3(0.95,0.86,0.69) );\n\n//access a values from the struct\nsandy.color0 // vec3(0.92,0.83,0.60)\n</code></pre> <p>This is syntactic sugar but it can help you write cleaner code, at least code you're more familiar with.</p>"},{"location":"Frontend/shader/appendix/04/#statements-conditions","title":"statements &amp; conditions","text":"<p>Data structures are nice as such but we might need to iterate or perform conditional tests at some point. Fortunately for us, the syntax is very close to the JavaScript. A condition is like:</p> <pre><code>if( condition ){\n    //true\n}else{\n    //false\n}\n</code></pre> <p>A for loop is usually:</p> <pre><code>const int count = 10;\nfor( int i = 0; i &lt;= count; i++){\n    //do something\n}\n</code></pre> <p>or with a float iterator:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    //do something\n}\n</code></pre> <p>Note that <code>count</code> will have to be defined as a <code>constant</code>. This means prefixing the type with a <code>const</code> qualifier, we'll cover this in a second.</p> <p>we also have the <code>break</code> and <code>continue</code> statements:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    if( i &lt; 5. )continue;\n    if( i &gt;= 8. )break;\n}\n</code></pre> <p>Note that on some hardware, <code>break</code> does not work as expected and the loop doesn't bail out early.</p> <p>In general, you'll want to keep the iteration count as low as possible and avoid the loops and the conditionals as often as you can.</p>"},{"location":"Frontend/shader/appendix/04/#qualifiers","title":"qualifiers","text":"<p>On top of the variable types, GLSL uses qualifiers. Long story short, qualifiers help the compiler know which variable is what. For instance some data can only be provided by the CPU to the GPU, those are called attributes and uniforms. The attributes are reserved for the vertex shaders, the uniforms can be used in both the vertex and the fragment shaders. There's also a <code>varying</code> qualifier used to pass variables between the vertex and the fragment shader.</p> <p>I won't go too much into details here as we're mostly focused on the fragment shader but later in the book, you'll see something like:</p> <pre><code>uniform vec2 u_resolution;\n</code></pre> <p>See what we did here? We stuck a <code>uniform</code> qualifier before the type of the variable This means that the resolution of the canvas we're working on is passed to the shader from the CPU. The width of the canvas is stored in the x and the height in the y component of the 2D vector.</p> <p>When the compiler sees a variable preceded by this qualifier, it will make sure that you can't set those values at runtime.</p> <p>The same applied to our <code>count</code> variable which was the limit of our <code>for</code> loop:</p> <pre><code>const float count = 10.;\nfor( ... )\n</code></pre> <p>When we use a <code>const</code> qualifier, the compiler will make sure that we set the variable's value only once, otherwise it's not a constant.</p> <p>There are 3 extra qualifiers that are used in the functions signatures : <code>in</code>, <code>out</code> and <code>inout</code>. In JavaScript, when you pass scalar arguments to a function, their value is read-only and if you change their values inside the function, the changes are not applied to the variable outside the function.</p> <pre><code>function banana( a ){\n    a += 1;\n}\nvar value = 0;\nbanana( value );\nconsole.log( value );// &gt; 0 ; the changes are not taken into account outside the function\n</code></pre> <p>With arguments qualifiers, you can specify the behaviour of the arguments:   * <code>in</code> will be read-only ( default )   * <code>out</code>  write-only: you can't read the value of this argument but you can set it   * <code>inout</code>  read-write: you can both get and set the value of this variable</p> <p>Rewriting the banana method in GLSL would look like</p> <pre><code>void banana( inout float a ){\n    a += 1.;\n}\nfloat A = 0.;\nbanana( A ); //now A = 1.;\n</code></pre> <p>This is very different from JS and quite powerful too but you don't have to specify the signature qualifiers (the default is read-only).</p>"},{"location":"Frontend/shader/appendix/04/#space-coordinates","title":"space &amp; coordinates","text":"<p>Final note, in the DOM and the Canvas 2D, we're used to have the Y axis pointing 'down'. This makes sense in the context of a DOM as it follows the way a web page unrolls ; the navbar at the top, content expanding towards the bottom. In a WebGL canvas, the Y axis is flipped: Y points 'up'.</p> <p>This means that the origin, the point (0,0), is located at the bottom left corner of a WebGL context, not at the top left corner like in a 2D Canvas. The textures coordinates follow this rule which might be counter-intuitive at first.</p>"},{"location":"Frontend/shader/appendix/04/#and-were-done","title":"And we're done!","text":"<p>Of course we could have gone deeper into the various concepts but as mentioned earlier, this is meant to give a BIG HUG to the newcomers. It's a quite a lot to ingest but with patience and practice, this will become more and more natural.</p> <p>I hope you found some of this useful, now what about starting your journey through the book?</p>"},{"location":"Frontend/shader/appendix/04/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/appendix/04/README-pl/#wprowadzenie-dla-osob-przychodzacych-z-js","title":"Wprowadzenie dla os\u00f3b przychodz\u0105cych z JS","text":"<p>przez Nicolas Barradeau</p> <p>Je\u015bli jeste\u015b programist\u0105 JavaScript, prawdopodobnie nieco zaskoczy Ci\u0119 tre\u015b\u0107 tej ksi\u0105\u017cki. Rzeczywi\u015bcie, istnieje wiele r\u00f3\u017cnic pomi\u0119dzy manipulowaniem wysokopoziomowym kodem JS a zag\u0142\u0119bianiem si\u0119 w \u015bwiat shader\u00f3w. Jednak w przeciwie\u0144stwie do niskopoziomowego j\u0119zyka asemblerowego, GLSL jest czytelny dla cz\u0142owieka i jestem pewien, \u017ce po zrozumieniu jego specyfiki szybko zaczniesz go u\u017cywa\u0107.</p> <p>Zak\u0142adam, \u017ce masz podstawow\u0105 (cho\u0107 mo\u017ce p\u0142ytk\u0105) wiedz\u0119 o JavaScript, ale tak\u017ce o Canvas API. Je\u015bli nie, nie martw si\u0119 \u2013 wi\u0119kszo\u015b\u0107 tej sekcji b\u0119dzie dla Ciebie zrozumia\u0142a.</p> <p>Nie b\u0119d\u0119 zag\u0142\u0119bia\u0107 si\u0119 zbytnio w szczeg\u00f3\u0142y, a niekt\u00f3re kwestie mog\u0105 by\u0107 p\u00f3\u0142prawdziwe; nie oczekuj \"wyczerpuj\u0105cego przewodnika\", ale raczej</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#wielki-uscisk","title":"WIELKI U\u015aCISK","text":"<p>JavaScript \u015bwietnie nadaje si\u0119 do szybkiego prototypowania; wrzucasz gar\u015b\u0107 losowych, nieotypowanych zmiennych i metod, mo\u017cesz dynamicznie dodawa\u0107 i usuwa\u0107 cz\u0142onk\u00f3w klas, od\u015bwie\u017ca\u0107 stron\u0119 i sprawdza\u0107, czy wszystko dzia\u0142a, wprowadza\u0107 zmiany, od\u015bwie\u017ca\u0107 stron\u0119, powtarza\u0107 \u2013 \u017cycie jest proste. Mo\u017cesz si\u0119 wi\u0119c zastanawia\u0107, jaka jest r\u00f3\u017cnica mi\u0119dzy JavaScriptem a GLSL. W ko\u0144cu oba dzia\u0142aj\u0105 w przegl\u0105darce, oba s\u0142u\u017c\u0105 do rysowania r\u00f3\u017cnych efektownych rzeczy na ekranie i pod tym wzgl\u0119dem JS jest \u0142atwiejszy w u\u017cyciu.</p> <p>G\u0142\u00f3wna r\u00f3\u017cnica polega jednak na tym, \u017ce JavaScript jest j\u0119zykiem interpretowanym, podczas gdy GLSL jest j\u0119zykiem kompilowanym. Kompilowany program jest wykonywany natywnie przez system operacyjny, jest niskopoziomowy i zazwyczaj szybki. Interpretowany program wymaga wirtualnej maszyny (VM) do wykonania, jest wysokopoziomowy i zazwyczaj wolniejszy.</p> <p>Gdy przegl\u0105darka (czyli JavaScriptowa VM) wykonuje lub interpretuje fragment kodu JS, nie wie, jaka zmienna czym jest i jaka funkcja co robi (z wyj\u0105tkiem oczywistych przypadk\u00f3w, takich jak TypedArrays). Dlatego nie mo\u017ce nic zoptymalizowa\u0107 z g\u00f3ry, wi\u0119c potrzebuje troch\u0119 czasu, aby przeczyta\u0107 Tw\u00f3j kod, wywnioskowa\u0107 (dedukowa\u0107 na podstawie u\u017cycia) typy Twoich zmiennych i metod, a kiedy to mo\u017cliwe, przekszta\u0142ci cz\u0119\u015b\u0107 Twojego kodu w kod asemblerowy, kt\u00f3ry wykona si\u0119 znacznie szybciej.</p> <p>To powolny, mozolny i niesamowicie skomplikowany proces \u2013 je\u015bli interesuj\u0105 Ci\u0119 szczeg\u00f3\u0142y, polecam przyjrze\u0107 si\u0119 dzia\u0142aniu silnika V8 w Chrome. Najgorsze jest to, \u017ce ka\u017cda przegl\u0105darka optymalizuje JS na sw\u00f3j spos\u00f3b, a ca\u0142y proces jest ukryty przed u\u017cytkownikiem; jeste\u015b bezsilny.</p> <p>Kompilowany program nie jest interpretowany; system operacyjny go uruchamia, a je\u015bli program jest poprawny, zostaje wykonany. To du\u017ca zmiana; je\u015bli zapomnisz o \u015bredniku na ko\u0144cu linii, Tw\u00f3j kod jest niepoprawny i nie skompiluje si\u0119: Tw\u00f3j kod w og\u00f3le nie przekszta\u0142ci si\u0119 w program.</p> <p>To surowe, ale tak w\u0142a\u015bnie dzia\u0142a shader: skompilowany program wykonywany na GPU. Nie b\u00f3j si\u0119! Kompilator, czyli cz\u0119\u015b\u0107 programu, kt\u00f3ra dba o to, aby Tw\u00f3j kod by\u0142 poprawny, stanie si\u0119 Twoim najlepszym przyjacielem. Przyk\u0142ady z tej ksi\u0105\u017cki oraz edytor towarzysz\u0105cy s\u0105 bardzo przyjazne u\u017cytkownikowi. Powiedz\u0105 Ci, gdzie i dlaczego Tw\u00f3j program nie skompilowa\u0142 si\u0119, a nast\u0119pnie b\u0119dziesz musia\u0142 wprowadzi\u0107 poprawki \u2013 i za ka\u017cdym razem, gdy shader b\u0119dzie gotowy do kompilacji, zostanie on natychmiast wy\u015bwietlony. To \u015bwietny spos\u00f3b na nauk\u0119, poniewa\u017c jest bardzo wizualny i tak naprawd\u0119 niczego nie mo\u017cesz zepsu\u0107.</p> <p>Ostatnia uwaga: shader sk\u0142ada si\u0119 z dw\u00f3ch program\u00f3w, vertex shader i fragment shader. W skr\u00f3cie, vertex shader, pierwszy program, otrzymuje geometri\u0119 jako dane wej\u015bciowe i przekszta\u0142ca j\u0105 w seri\u0119 pikseli (lub fragment\u00f3w), kt\u00f3re nast\u0119pnie przekazuje do fragment shader, drugiego programu, kt\u00f3ry decyduje, jaki kolor nada\u0107 pikselom. Ta ksi\u0105\u017cka koncentruje si\u0119 g\u0142\u00f3wnie na tym drugim \u2013 we wszystkich przyk\u0142adach geometria to prosty czworobok pokrywaj\u0105cy ca\u0142y ekran.</p> <p>Wi\u0119c! Gotowy?</p> <p>No to ruszamy!</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#silne-typowanie","title":"Silne typowanie","text":"<p>Dla os\u00f3b przychodz\u0105cych z JS lub innego j\u0119zyka bez typ\u00f3w, typowanie zmiennych jest obcym konceptem, co sprawia, \u017ce typowanie stanowi najtrudniejszy krok w kierunku nauki GLSL. Typowanie, jak sama nazwa wskazuje, oznacza, \u017ce musisz przypisa\u0107 typ ka\u017cdej zmiennej (oraz funkcjom, oczywi\u015bcie). To zasadniczo oznacza, \u017ce s\u0142owo <code>var</code> przestaje istnie\u0107. Polityka my\u015blenia GLSL wymaza\u0142a je z powszechnego j\u0119zyka i nie jeste\u015b w stanie go u\u017cywa\u0107, poniewa\u017c... po prostu nie istnieje.</p> <p>Zamiast u\u017cywa\u0107 magicznego s\u0142owa <code>var</code>, b\u0119dziesz musia\u0142 jawnie okre\u015bli\u0107 typ ka\u017cdej u\u017cywanej zmiennej, dzi\u0119ki czemu kompilator b\u0119dzie widzia\u0142 tylko obiekty i prymitywy, kt\u00f3re wie, jak efektywnie obs\u0142ugiwa\u0107. Minusem braku mo\u017cliwo\u015bci u\u017cycia s\u0142owa <code>var</code> i konieczno\u015bci jawnego okre\u015blania wszystkiego jest to, \u017ce musisz zna\u0107 typ wszystkich zmiennych i dobrze je rozumie\u0107. Spokojnie \u2013 jest ich niewiele, a do tego s\u0105 do\u015b\u0107 proste (GLSL nie jest frameworkiem Java).</p> <p>Mo\u017ce to brzmie\u0107 strasznie, ale og\u00f3lnie nie r\u00f3\u017cni si\u0119 to bardzo od tego, co robisz w JavaScript; je\u015bli zmienna jest typu <code>boolean</code>, oczekujesz, \u017ce b\u0119dzie przechowywa\u0107 <code>true</code> lub <code>false</code> i nic wi\u0119cej. Je\u015bli zmienna jest zadeklarowana jako <code>var uid = XXX;</code>, prawdopodobnie przechowasz w niej warto\u015b\u0107 ca\u0142kowit\u0105, a <code>var y = YYY;</code> mo\u017ce odnosi\u0107 si\u0119 do warto\u015bci zmiennoprzecinkowej. Co wi\u0119cej, dzi\u0119ki silnemu typowaniu nie b\u0119dziesz traci\u0142 czasu na zastanawianie si\u0119, czy <code>X == Y</code> (albo czy <code>typeof X == typeof Y</code>? ... albo <code>typeof X !== null &amp;&amp; Y...</code>... w ka\u017cdym razie) \u2013 po prostu b\u0119dziesz tego wiedzia\u0142, a je\u015bli nie, kompilator Ci\u0119 o tym poinformuje.</p> <p>Oto typy skalarne (skalar okre\u015bla ilo\u015b\u0107), kt\u00f3rych mo\u017cesz u\u017cywa\u0107 w GLSL: <code>bool</code> (Boolean), <code>int</code> (liczba ca\u0142kowita), <code>float</code> (liczba zmiennoprzecinkowa). Istniej\u0105 te\u017c inne typy, ale nie ma co si\u0119 przejmowa\u0107 \u2013 poni\u017cszy fragment pokazuje, jak deklarowa\u0107 zmienne (<code>vars</code>) (tak, u\u017cy\u0142em zakazanego s\u0142owa) w GLSL:</p> <pre><code>// warto\u015b\u0107 typu Boolean:\nJS: var b = true;               GLSL: bool b = true;\n\n// warto\u015b\u0107 typu Integer\nJS: var i = 1;                  GLSL: int i = 1;\n\n// warto\u015b\u0107 typu Float (liczba)\nJS: var f = 3.14159;            GLSL: float f = 3.14159;\n</code></pre> <p>Nie jest to trudne, prawda? Jak wspomnia\u0142em, u\u0142atwia to kodowanie, poniewa\u017c nie tracisz czasu na sprawdzanie typu danej zmiennej. W razie w\u0105tpliwo\u015bci pami\u0119taj, \u017ce robisz to po to, aby Tw\u00f3j program dzia\u0142a\u0142 o wiele szybciej ni\u017c w JS.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#void","title":"void","text":"<p>Istnieje typ <code>void</code>, kt\u00f3ry w przybli\u017ceniu odpowiada <code>null</code>; jest on u\u017cywany jako typ zwracany przez funkcj\u0119, kt\u00f3ra nic nie zwraca. Nie mo\u017cesz przypisa\u0107 go do zmiennej.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#boolean","title":"boolean","text":"<p>Jak wiesz, warto\u015bci logiczne (Boolean) s\u0105 najcz\u0119\u015bciej u\u017cywane w testach warunkowych, np. <code>if( myBoolean == true ){}else{}</code>. Cho\u0107 rozga\u0142\u0119zianie warunkowe jest mo\u017cliwe na CPU, r\u00f3wnoleg\u0142a natura GLSL czyni to mniej sensownym. U\u017cywanie instrukcji warunkowych jest cz\u0119sto wr\u0119cz zniech\u0119cane \u2013 ksi\u0105\u017cka przedstawia kilka alternatywnych technik rozwi\u0105zania tego problemu.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#rzutowanie-typow","title":"rzutowanie typ\u00f3w","text":"<p>Jak powiedzia\u0142 Boromir: \"Nie \u0142\u0105czy si\u0119 po prostu otypowanych prymityw\u00f3w\". W przeciwie\u0144stwie do JavaScript, GLSL nie pozwala na wykonywanie operacji pomi\u0119dzy zmiennymi o r\u00f3\u017cnych typach.</p> <p>This for instance:</p> <pre><code>int     i = 2;\nfloat   f = 3.14159;\n\n// pr\u00f3ba pomno\u017cenia liczby ca\u0142kowitej przez warto\u015b\u0107 zmiennoprzecinkow\u0105:\nfloat   r = i * f;\n</code></pre> <p>nie zadzia\u0142a, poniewa\u017c pr\u00f3bujesz po\u0142\u0105czy\u0107 kota z \u017cyraf\u0105. Rozwi\u0105zaniem jest u\u017cycie rzutowania typ\u00f3w; to sprawi, \u017ce kompilator uwierzy, \u017ce <code>i</code> jest typu <code>float</code>, nie zmieniaj\u0105c faktycznie typu <code>i</code>.</p> <pre><code>// rzutowanie typu zmiennej ca\u0142kowitej 'i' na float:\nfloat   r = float( i ) * f;\n</code></pre> <p>Co jest \u015bci\u015ble r\u00f3wnowa\u017cne przebraniu kota w \u017cyrafi str\u00f3j i zadzia\u0142a zgodnie z oczekiwaniami (<code>r</code> b\u0119dzie wynikiem <code>i</code> x <code>f</code>).</p> <p>Mo\u017cna rzutowa\u0107 dowolny z wymienionych typ\u00f3w na inny; zauwa\u017c, \u017ce rzutowanie <code>float</code> na <code>int</code> dzia\u0142a jak <code>Math.floor()</code>, poniewa\u017c usuwa cz\u0119\u015b\u0107 dziesi\u0119tn\u0105. Rzutowanie <code>float</code> lub <code>int</code> na <code>bool</code> zwr\u00f3ci <code>true</code>, je\u015bli warto\u015b\u0107 zmiennej nie wynosi zero.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#konstruktor","title":"konstruktor","text":"<p>Typy zmiennych s\u0105 r\u00f3wnie\u017c swoimi w\u0142asnymi konstruktorami klas; w rzeczywisto\u015bci zmienna typu <code>float</code> mo\u017ce by\u0107 traktowana jako <code>instancja</code> klasy <code>Float</code>.</p> <p>Nast\u0119puj\u0105ce deklaracje s\u0105 r\u00f3wnie poprawne:</p> <pre><code>int     i = 1;\nint     i = int( 1 );\nint     i = int( 1.9995 );\nint     i = int( true );\n</code></pre> <p>Mo\u017ce si\u0119 to nie wydawa\u0107 znacz\u0105ce dla typ\u00f3w <code>skalarnych</code>, ale nie r\u00f3\u017cni si\u0119 to zbytnio od rzutowania \u2013 nabierze sensu, gdy przejdziemy do sekcji dotycz\u0105cej przeci\u0105\u017cania.</p> <p>Ok, wi\u0119c te trzy to <code>typy prymitywne</code>, rzeczy, bez kt\u00f3rych nie mo\u017cesz \u017cy\u0107 \u2013 ale oczywi\u015bcie GLSL ma do zaoferowania wi\u0119cej.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#wektory","title":"Wektory","text":"<p>W JavaScript, podobnie jak w GLSL, potrzebujesz bardziej zaawansowanych sposob\u00f3w obs\u0142ugi danych, dlatego przydaj\u0105 si\u0119 wektory. Przypuszczam, \u017ce ju\u017c napisa\u0142e\u015b klas\u0119 <code>Point</code> w JavaScript, kt\u00f3ra przechowuje razem warto\u015b\u0107 <code>x</code> i <code>y</code>, kod wygl\u0105da\u0142by mniej wi\u0119cej tak:</p> <pre><code>// definicja 'klasy':\nvar Point = function( x, y ){\n    this.x = x || 0;\n    this.y = y || 0;\n}\n\n// i instancjonowa\u0142oby si\u0119 j\u0105 tak:\nvar p = new Point( 100,100 );\n</code></pre> <p>Jak w\u0142a\u015bnie widzieli\u015bmy, to jest TAK niepoprawne na TYLU poziomach! Po pierwsze, u\u017cycie s\u0142owa kluczowego <code>var</code>, potem okropne <code>this</code>, a nast\u0119pnie znowu nieotypowane warto\u015bci <code>x</code> i <code>y</code>... Nie, to nie zadzia\u0142a w \u015bwiecie shader\u00f3w.</p> <p>Zamiast tego GLSL udost\u0119pnia wbudowane struktury danych, kt\u00f3re s\u0142u\u017c\u0105 do przechowywania danych razem, mianowicie:</p> <ul> <li><code>bvec2</code>: 2-wymiarowy wektor Boolean, <code>bvec3</code>: 3-wymiarowy wektor Boolean, <code>bvec4</code>: 4-wymiarowy wektor Boolean</li> <li><code>ivec2</code>: 2-wymiarowy wektor Integer, <code>ivec3</code>: 3-wymiarowy wektor Integer, <code>ivec4</code>: 4-wymiarowy wektor Integer</li> <li><code>vec2</code>: 2-wymiarowy wektor Float, <code>vec3</code>: 3-wymiarowy wektor Float, <code>vec4</code>: 4-wymiarowy wektor Float</li> </ul> <p>Natychmiast zauwa\u017cy\u0142e\u015b, \u017ce dla ka\u017cdego typu prymitywnego istnieje odpowiedni wektor, spryciarzu. Z tego, co w\u0142a\u015bnie widzieli\u015bmy, mo\u017cna wywnioskowa\u0107, \u017ce <code>bvec2</code> przechowa dwie warto\u015bci typu <code>bool</code>, a <code>vec4</code> cztery warto\u015bci typu <code>float</code>.</p> <p>Inn\u0105 rzecz\u0105 wprowadzon\u0105 przez wektory jest liczba wymiar\u00f3w; nie oznacza to, \u017ce do renderowania grafiki 2D u\u017cywasz 2-wymiarowego wektora, a do 3D \u2013 3-wymiarowego. Co by wtedy reprezentowa\u0142 4-wymiarowy wektor? (w\u0142a\u015bciwie nazywa si\u0119 tesseraktem lub hiperkostk\u0105)</p> <p>Nie, wymiary oznaczaj\u0105 liczb\u0119 oraz typ sk\u0142adowych lub zmiennych przechowywanych w wektorze:</p> <pre><code>// stw\u00f3rzmy 2-wymiarowy wektor Boolean\nbvec2 b2 = bvec2 ( true, false );\n\n// stw\u00f3rzmy 3-wymiarowy wektor Integer\nivec3 i3 = ivec3( 0,0,1 );\n\n// stw\u00f3rzmy 4-wymiarowy wektor Float\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 1. );\n</code></pre> <p><code>b2</code> przechowuje dwie r\u00f3\u017cne warto\u015bci logiczne, <code>i3</code> przechowuje trzy r\u00f3\u017cne warto\u015bci ca\u0142kowite, a <code>v4</code> cztery r\u00f3\u017cne warto\u015bci zmiennoprzecinkowe.</p> <p>Ale jak odczyta\u0107 te warto\u015bci? w przypadku <code>skalar\u00f3w</code> odpowied\u017a jest oczywista \u2013 przy <code>float f = 1.2</code>; zmienna <code>f</code> przechowuje warto\u015b\u0107 <code>1.2</code>. W przypadku wektor\u00f3w jest to nieco inne i ca\u0142kiem pi\u0119kne.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#akcesory","title":"akcesory","text":"<p>Istniej\u0105 r\u00f3\u017cne sposoby dost\u0119pu do warto\u015bci</p> <pre><code>// stw\u00f3rzmy 4-wymiarowy wektor Float\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n</code></pre> <p>Aby odczyta\u0107 te 4 warto\u015bci, mo\u017cesz zrobi\u0107 nast\u0119puj\u0105co:</p> <pre><code>float x = v4.x;     // x = 0.0\nfloat y = v4.y;     // y = 1.0\nfloat z = v4.z;     // z = 2.0\nfloat w = v4.w;     // w = 3.0\n</code></pre> <p>bu\u0142ka z mas\u0142em; ale poni\u017csze sposoby s\u0105 r\u00f3wnie poprawne w dost\u0119pie do Twoich danych:</p> <pre><code>float x =   v4.x    =   v4.r    =   v4.s    =   v4[0];     // x = 0.0\nfloat y =   v4.y    =   v4.g    =   v4.t    =   v4[1];     // y = 1.0\nfloat z =   v4.z    =   v4.b    =   v4.p    =   v4[2];     // z = 2.0\nfloat w =   v4.w    =   v4.a    =   v4.q    =   v4[3];     // w = 3.0\n</code></pre> <p>I spryciarzu, ju\u017c zauwa\u017cy\u0142e\u015b trzy rzeczy:    * <code>X</code>, <code>Y</code>, <code>Z</code> i <code>W</code> s\u0105 u\u017cywane w programach 3D do reprezentacji wektor\u00f3w 3D    * <code>R</code>, <code>G</code>, <code>B</code> i <code>A</code> s\u0142u\u017c\u0105 do kodowania kolor\u00f3w oraz kana\u0142u alfa    * <code>[0]</code>, <code>[1]</code>, <code>[2]</code> i <code>[3]</code> oznaczaj\u0105, \u017ce mamy dost\u0119p do warto\u015bci w spos\u00f3b losowy (tablica indeksowana)</p> <p>W zale\u017cno\u015bci od tego, czy manipulujesz wsp\u00f3\u0142rz\u0119dnymi 2D czy 3D, kolorem z lub bez kana\u0142u alfa, czy te\u017c po prostu r\u00f3\u017cnymi zmiennymi, mo\u017cesz wybra\u0107 najbardziej odpowiedni typ i rozmiar wektora. Zazwyczaj wsp\u00f3\u0142rz\u0119dne 2D i wektory (w sensie geometrycznym) przechowywane s\u0105 jako <code>vec2</code>, <code>vec3</code> lub <code>vec4</code>, kolory jako <code>vec3</code> lub <code>vec4</code> (je\u015bli potrzebujesz kana\u0142u alfa), ale nie ma ogranicze\u0144 co do sposobu u\u017cycia wektor\u00f3w. Na przyk\u0142ad, je\u015bli chcesz przechowa\u0107 tylko jedn\u0105 warto\u015b\u0107 logiczn\u0105 w <code>bvec4</code>, jest to mo\u017cliwe, ale to marnotrawstwo pami\u0119ci.</p> <p>uwaga: w shaderze warto\u015bci kolor\u00f3w (<code>R</code>, <code>G</code>, <code>B</code> i <code>A</code>) s\u0105 normalizowane, mieszcz\u0105 si\u0119 w przedziale od 0 do 1, a nie od 0 do 0xFF, dlatego lepiej u\u017cy\u0107 Float <code>vec4</code> ni\u017c Integer <code>ivec4</code> do ich przechowywania.</p> <p>Ju\u017c nie\u017ale, ale to nie wszystko!</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#swizzle","title":"swizzle","text":"<p>Mo\u017cna zwr\u00f3ci\u0107 wi\u0119cej ni\u017c jedn\u0105 warto\u015b\u0107 jednocze\u015bnie; powiedzmy, \u017ce potrzebujesz tylko sk\u0142adowych <code>X</code> i <code>Y</code> z <code>vec4</code>, w JavaScript musia\u0142by\u015b napisa\u0107 co\u015b takiego:</p> <pre><code>var needles = [0, 1]; // pozycja 'x' i 'y' w naszej strukturze danych\nvar a = [ 0,1,2,3 ]; // nasza struktura danych 'vec4'\nvar b = a.filter( function( val, i, array ) {\nreturn needles.indexOf( array.indexOf( val ) ) != -1;\n});\n// b = [ 0, 1 ]\n\n// albo bardziej bezpo\u015brednio:\nvar needles = [0, 1];\nvar a = [ 0,1,2,3 ]; // our 'vec4' data structure\nvar b = [ a[ needles[ 0 ] ], a[ needles[ 1 ] ] ]; // b = [ 0, 1 ]\n</code></pre> <p>Brzydko. W GLSL mo\u017cesz je uzyska\u0107 w ten spos\u00f3b:</p> <pre><code>// stwr\u00f3rz 4-wymiarowy wektor Float\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n\n// i odczytaj tylko 'x' i 'y'\nvec2 xy =   v4.xy; //   xy = vec2( 0.0, 1.0 );\n</code></pre> <p>Co tu si\u0119 sta\u0142o?! Gdy skonkatenujesz akcesory, GLSL elegancko zwraca podzbi\u00f3r warto\u015bci, o kt\u00f3re prosi\u0142e\u015b, w najbardziej odpowiednim formacie wektora. Rzeczywi\u015bcie, wektor to struktura danych o losowym dost\u0119pie, podobna do tablicy w JavaScript. Tak wi\u0119c, nie tylko mo\u017cesz pobra\u0107 podzbi\u00f3r swoich danych, ale tak\u017ce okre\u015bli\u0107 kolejno\u015b\u0107, w jakiej maj\u0105 by\u0107 zwr\u00f3cone \u2013 mo\u017ce to odwr\u00f3ci\u0107 kolejno\u015b\u0107 sk\u0142adowych wektora:</p> <pre><code>// stw\u00f3rz 4-wymiarowy wektor: R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n// i odczytaj go w kolejno\u015bci: A,B,G,R\nvec4 backwards = color.abgr; // backwards = vec4( 1.0, 0.0, 0.8, 0.2 );\n</code></pre> <p>I oczywi\u015bcie, mo\u017cesz zapyta\u0107 o t\u0119 sam\u0105 sk\u0142adow\u0105 wielokrotnie:</p> <pre><code>// stw\u00f3rz 4-wymiarowy wektor: R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n// i odczytaj GAG (Green, Alpha, Green) vec3 z kana\u0142\u00f3w G i A\nvec3 GAG = color.gag; // GAG = vec4( 0.8, 1.0, 0.8 );\n</code></pre> <p>Jest to niezwykle przydatne, aby \u0142\u0105czy\u0107 cz\u0119\u015bci wektor\u00f3w, wyodr\u0119bnia\u0107 tylko kana\u0142y rgb z koloru RGBA itp.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#przeciazaj-wszystko","title":"przeci\u0105\u017caj wszystko!","text":"<p>W sekcji o typach wspomnia\u0142em o konstruktorze i tu mamy kolejn\u0105 \u015bwietn\u0105 cech\u0119 GLSL \u2013 przeci\u0105\u017canie. Dla tych, kt\u00f3rzy nie wiedz\u0105, przeci\u0105\u017canie operatora lub funkcji oznacza mniej wi\u0119cej: \"zmian\u0119 zachowania danego operatora lub funkcji w zale\u017cno\u015bci od operand\u00f3w/argument\u00f3w\". Przeci\u0105\u017canie nie jest dozwolone w JavaScript, wi\u0119c na pocz\u0105tku mo\u017ce to wydawa\u0107 si\u0119 dziwne, ale jestem pewien, \u017ce gdy si\u0119 do tego przyzwyczaisz, zastanowisz si\u0119, dlaczego nie zosta\u0142o to zaimplementowane w JS (kr\u00f3tka odpowied\u017a, typowanie).</p> <p>Najprostszy przyk\u0142ad przeci\u0105\u017cania operator\u00f3w wygl\u0105da nast\u0119puj\u0105co:</p> <pre><code>vec2 a = vec2( 1.0, 1.0 );\nvec2 b = vec2( 1.0, 1.0 );\n// przeci\u0105\u017cone dodawanie\nvec2 c = a + b;     // c = vec2( 2.0, 2.0 );\n</code></pre> <p>CO? Czyli mo\u017cna dodawa\u0107 rzeczy, kt\u00f3re nie s\u0105 liczbami?!</p> <p>Tak, dok\u0142adnie. Oczywi\u015bcie dotyczy to wszystkich operator\u00f3w (<code>+</code>, <code>-</code>, <code>*</code> oraz <code>/</code>), ale to dopiero pocz\u0105tek. Rozwa\u017c poni\u017cszy fragment:</p> <pre><code>vec2 a = vec2( 0.0, 0.0 );\nvec2 b = vec2( 1.0, 1.0 );\n// przeci\u0105\u017cony konstruktor\nvec4 c = vec4( a , b );         // c = vec4( 0.0, 0.0, 1.0, 1.0 );\n</code></pre> <p>Zbudowali\u015bmy <code>vec4</code> z dw\u00f3ch <code>vec2</code>, przy czym nowy <code>vec4</code> u\u017cy\u0142 <code>a.x</code> i <code>a.y</code> jako sk\u0142adowych <code>X</code> i <code>Y</code> wektora <code>c</code>. Nast\u0119pnie wzi\u0105\u0142 <code>b.x</code> i <code>b.y</code> i u\u017cy\u0142 ich jako sk\u0142adowych <code>Z</code> i <code>W</code>.</p> <p>Tak w\u0142a\u015bnie dzia\u0142a przeci\u0105\u017cony konstruktor vec4, kt\u00f3ry akceptuje r\u00f3\u017cne argumenty. Oznacza to, \u017ce wiele wersji tej samej funkcji o r\u00f3\u017cnych sygnaturach mo\u017ce wsp\u00f3\u0142istnie\u0107 w jednym programie, na przyk\u0142ad nast\u0119puj\u0105ce deklaracje s\u0105 wszystkie poprawne:</p> <pre><code>vec4 a = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 a = vec4(1.0);// x, y, z, w wszystkie s\u0105 r\u00f3wne 1.0\nvec4 a = vec4( v2, float, v4 );// vec4( v2.x, v2.y, float, v4.x );\nvec4 a = vec4( v3, float );// vec4( v3.x, v3.y, v3.z, float );\netc.\n</code></pre> <p>Jedyne, na co musisz zwr\u00f3ci\u0107 uwag\u0119, to dostarczenie wystarczaj\u0105cej liczby argument\u00f3w, aby wype\u0142ni\u0107 Tw\u00f3j wektor.</p> <p>Ostatnia rzecz, mo\u017cesz przeci\u0105\u017ca\u0107 wbudowane funkcje w swoim programie, aby przyjmowa\u0142y argumenty, dla kt\u00f3rych nie zosta\u0142y zaprojektowane (cho\u0107 nie powinno si\u0119 to zdarza\u0107 zbyt cz\u0119sto).</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#inne-typy","title":"inne typy","text":"<p>Wektory s\u0105 fajne, to sedno Twojego shadera. Istniej\u0105 inne prymitywy, takie jak macierze (Matrices) i pr\u00f3bki tekstur (Texture samplers), kt\u00f3re zostan\u0105 om\u00f3wione p\u00f3\u017aniej w ksi\u0105\u017cce.</p> <p>Mo\u017cemy tak\u017ce u\u017cywa\u0107 tablic (Arrays). Oczywi\u015bcie musz\u0105 by\u0107 typowane, a przy tym wyst\u0119puj\u0105 pewne pu\u0142apki:  * maj\u0105 ustalony rozmiar  * nie mo\u017cesz u\u017cywa\u0107 metod push(), pop(), splice() itp., a w\u0142a\u015bciwo\u015b\u0107 <code>length</code> nie istnieje  * nie mo\u017cesz od razu zainicjalizowa\u0107 ich warto\u015bciami  * musisz przypisywa\u0107 warto\u015bci pojedynczo</p> <p>to nie zadzia\u0142a:</p> <pre><code>int values[3] = [0,0,0];\n</code></pre> <p>ale to zadzia\u0142a:</p> <pre><code>int values[3];\nvalues[0] = 0;\nvalues[1] = 0;\nvalues[2] = 0;\n</code></pre> <p>To jest w porz\u0105dku, gdy znasz swoje dane lub masz ma\u0142e tablice warto\u015bci. Je\u015bli chcesz bardziej ekspresyjnego sposobu deklaracji zmiennej, mo\u017cesz u\u017cy\u0107 r\u00f3wnie\u017c typu <code>struct</code>. S\u0105 one jak obiekty bez metod; pozwalaj\u0105 przechowywa\u0107 i uzyskiwa\u0107 dost\u0119p do wielu zmiennych w jednym obiekcie.</p> <pre><code>struct ColorStruct {\n    vec3 color0;\n    vec3 color1;\n    vec3 color2;\n}\n</code></pre> <p>nast\u0119pnie mo\u017cesz ustawia\u0107 i odczytywa\u0107 warto\u015bci kolor\u00f3w w nast\u0119puj\u0105cy spos\u00f3b:</p> <pre><code>// zainicjuj struct z jakimi\u015b warto\u015bciami\nColorStruct sandy = ColorStruct(    vec3(0.92,0.83,0.60),\n                                    vec3(1.,0.94,0.69),\n                                    vec3(0.95,0.86,0.69) );\n\n// odczytaj warto\u015b\u0107 ze struct\nsandy.color0 // vec3(0.92,0.83,0.60)\n</code></pre> <p>To lukier sk\u0142adniowy, ale mo\u017ce pom\u00f3c w pisaniu bardziej przejrzystego kodu, przynajmniej takiego, do kt\u00f3rego jeste\u015b przyzwyczajony.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#instrukcje-i-warunki","title":"instrukcje i warunki","text":"<p>Struktury danych s\u0105 przydatne, ale mo\u017ce b\u0119dziesz musia\u0142 iterowa\u0107 lub wykonywa\u0107 testy warunkowe w pewnym momencie. Na szcz\u0119\u015bcie sk\u0142adnia jest bardzo zbli\u017cona do tej w JavaScript. Warunek wygl\u0105da tak:</p> <pre><code>if( warunek ){\n    // prawda\n}else{\n    // fa\u0142sz\n}\n</code></pre> <p>P\u0119tla for zazwyczaj wygl\u0105da tak:</p> <pre><code>const int count = 10;\nfor( int i = 0; i &lt;= count; i++){\n    // zr\u00f3b co\u015b\n}\n</code></pre> <p>lub z iteratorem typu float:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    // zr\u00f3b co\u015b\n}\n</code></pre> <p>Zauwa\u017c, \u017ce <code>count</code> musi by\u0107 zdefiniowane jako sta\u0142a. Oznacza to, \u017ce poprzedzasz typ kwalifikatorem <code>const</code>, o czym opowiem za chwil\u0119.</p> <p>Mamy r\u00f3wnie\u017c instrukcje <code>break</code> i <code>continue</code>:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    if( i &lt; 5. )continue;\n    if( i &gt;= 8. )break;\n}\n</code></pre> <p>Miej na uwadze, \u017ce na niekt\u00f3rych urz\u0105dzeniach instrukcja <code>break</code> mo\u017ce nie dzia\u0142a\u0107 zgodnie z oczekiwaniami i p\u0119tla nie przerwie iteracji wcze\u015bniej.</p> <p>Og\u00f3lnie rzecz bior\u0105c, powiniene\u015b utrzymywa\u0107 liczb\u0119 iteracji na mo\u017cliwie najni\u017cszym poziomie i unika\u0107 p\u0119tli oraz instrukcji warunkowych tak cz\u0119sto, jak to mo\u017cliwe.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#kwalifikatory","title":"kwalifikatory","text":"<p>Opr\u00f3cz typ\u00f3w zmiennych, GLSL u\u017cywa kwalifikator\u00f3w. Kr\u00f3tko m\u00f3wi\u0105c, kwalifikatory pomagaj\u0105 kompilatorowi zrozumie\u0107, jaka jest rola danej zmiennej. Na przyk\u0142ad, niekt\u00f3re dane mog\u0105 by\u0107 dostarczane tylko przez CPU do GPU, nazywamy je atrybutami i uniformami. Atrybuty s\u0105 zarezerwowane dla vertex shader\u00f3w, a uniformy mog\u0105 by\u0107 u\u017cywane zar\u00f3wno w vertex, jak i fragment shaderach. Jest te\u017c kwalifikator <code>varying</code>, s\u0142u\u017c\u0105cy do przekazywania zmiennych mi\u0119dzy vertex a fragment shaderem.</p> <p>Nie b\u0119d\u0119 zag\u0142\u0119bia\u0107 si\u0119 tutaj w szczeg\u00f3\u0142y, poniewa\u017c skupiamy si\u0119 g\u0142\u00f3wnie na fragment shaderze, ale p\u00f3\u017aniej w ksi\u0105\u017cce zobaczysz co\u015b takiego:</p> <pre><code>uniform vec2 u_resolution;\n</code></pre> <p>Widzisz, co zrobili\u015bmy? Dodali\u015bmy kwalifikator <code>uniform</code> przed typem zmiennej. Oznacza to, \u017ce rozdzielczo\u015b\u0107 kanwy, nad kt\u00f3r\u0105 pracujemy, jest przekazywana do shadera z CPU. Szeroko\u015b\u0107 kanwy zapisana jest w komponencie x, a wysoko\u015b\u0107 w komponencie y 2-wymiarowego wektora.</p> <p>Gdy kompilator napotka zmienn\u0105 poprzedzon\u0105 tym kwalifikatorem, upewni si\u0119, \u017ce nie mo\u017cesz zmienia\u0107 tych warto\u015bci w czasie wykonywania programu.</p> <p>To samo dotyczy naszej zmiennej <code>count</code>, kt\u00f3ra by\u0142a limitem w p\u0119tli <code>for</code>:</p> <pre><code>const float count = 10.;\nfor( ... )\n</code></pre> <p>Kiedy u\u017cywamy kwalifikatora <code>const</code>, kompilator upewni si\u0119, \u017ce warto\u015b\u0107 zmiennej zostanie ustawiona tylko raz, w przeciwnym razie nie jest to sta\u0142a.</p> <p>Istniej\u0105 trzy dodatkowe kwalifikatory u\u017cywane w sygnaturach funkcji: in, out oraz inout. W JavaScript, gdy przekazujesz prymitywne argumenty do funkcji, ich warto\u015b\u0107 jest tylko do odczytu, a je\u015bli zmienisz ich warto\u015b\u0107 wewn\u0105trz funkcji, zmiany nie maj\u0105 wp\u0142ywu na zmienn\u0105 poza funkcj\u0105.</p> <pre><code>function banana( a ){\n    a += 1;\n}\nvar value = 0;\nbanana( value );\nconsole.log( value );// &gt; 0 ; zmiany nie s\u0105 brane pod uwag\u0119 poza funkcj\u0105\n</code></pre> <p>With arguments qualifiers, you can specify the behaviour of the arguments:   * <code>in</code> will be read-only ( default )   * <code>out</code>  write-only: you can't read the value of this argument but you can set it   * <code>inout</code>  read-write: you can both get and set the value of this variable</p> <p>Przepisanie funkcji banana do GLSL wygl\u0105da\u0142oby tak:</p> <pre><code>void banana( inout float a ){\n    a += 1.;\n}\nfloat A = 0.;\nbanana( A ); // teraz A = 1.;\n</code></pre> <p>To bardzo r\u00f3\u017cni si\u0119 od JS i jest r\u00f3wnie\u017c pot\u0119\u017cne, ale nie musisz jawnie okre\u015bla\u0107 kwalifikator\u00f3w w sygnaturze (domy\u015blnie s\u0105 one tylko do odczytu).</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#przestrzen-i-wsporzedne","title":"przestrze\u0144 i wsp\u00f3\u0142rz\u0119dne","text":"<p>Ostatnia uwaga: w DOM oraz w 2D Canvas jeste\u015bmy przyzwyczajeni, \u017ce o\u015b Y wskazuje w d\u00f3\u0142. Ma to sens w kontek\u015bcie DOM, poniewa\u017c odpowiada sposobowi, w jaki rozwija si\u0119 strona internetowa \u2013 pasek nawigacyjny na g\u00f3rze, zawarto\u015b\u0107 rozci\u0105gaj\u0105ca si\u0119 ku do\u0142owi. W kanwie WebGL o\u015b Y jest odwr\u00f3cona: Y wskazuje w g\u00f3r\u0119.</p> <p>Oznacza to, \u017ce punkt pocz\u0105tkowy, czyli (0,0), znajduje si\u0119 w lewym dolnym rogu kontekstu WebGL, a nie w lewym g\u00f3rnym, jak ma to miejsce w 2D Canvas. Wsp\u00f3\u0142rz\u0119dne tekstur podlegaj\u0105 tej zasadzie, co na pocz\u0105tku mo\u017ce by\u0107 nieintuicyjne.</p>"},{"location":"Frontend/shader/appendix/04/README-pl/#i-to-wszystko","title":"I to wszystko!","text":"<p>Oczywi\u015bcie mogliby\u015bmy zag\u0142\u0119bi\u0107 si\u0119 w r\u00f3\u017cne koncepcje, ale jak wspomniano wcze\u015bniej, chodzi\u0142o o to, aby da\u0107 WIELKI U\u015aCISK nowoprzyby\u0142ym. To sporo materia\u0142u do przyswojenia, ale z cierpliwo\u015bci\u0105 i praktyk\u0105 stanie si\u0119 to coraz bardziej naturalne.</p> <p>Mam nadziej\u0119, \u017ce cz\u0119\u015b\u0107 z tego oka\u017ce si\u0119 przydatna. A teraz, co powiesz na rozpocz\u0119cie swojej podr\u00f3\u017cy przez t\u0119 ksi\u0105\u017ck\u0119?</p>"},{"location":"Frontend/shader/appendix/04/README-ru/","title":"README ru","text":""},{"location":"Frontend/shader/appendix/04/README-ru/#javascript-","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u043b\u044f JavaScript-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432","text":"<p>\u0430\u0432\u0442\u043e\u0440 \u041d\u0438\u043a\u043e\u043b\u044f \u0411\u0430\u0440\u0440\u0430\u0434\u043e</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b JavaScript-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0432\u0435\u043b\u0438\u043a\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0437\u0430\u0434\u0430\u0447\u0435\u043d\u042b, \u0447\u0438\u0442\u0430\u044f \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443. \u0412 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c\u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 JS \u0438 \u043a\u043e\u0432\u044b\u0440\u044f\u043d\u0438\u0435\u043c \u0432 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445. \u041d\u043e, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u044f\u0437\u044b\u043a\u0430 \u0430\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440\u0430, GLSL \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c, \u0438 \u044f \u0443\u0432\u0435\u0440\u0435\u043d, \u0447\u0442\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044c \u0441 \u0435\u0433\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438, \u0432\u044b \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0447\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.</p> <p>\u042f \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044e, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f JavaScript \u0438 Canvas API. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435 \u0442\u0430\u043a - \u043d\u0438\u0447\u0435\u0433\u043e \u0441\u0442\u0440\u0430\u0448\u043d\u043e\u0433\u043e. \u0412\u0430\u043c \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0447\u0438\u0442\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u044b.</p> <p>\u0422\u0430\u043a \u0436\u0435, \u044f \u043d\u0435 \u0431\u0443\u0434\u0443 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u0433\u043b\u0443\u0431\u043b\u044f\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u0442\u0430\u043b\u0438, \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0449\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043b\u0438\u0448\u044c \u043f\u043e\u043b\u0443\u043f\u0440\u0430\u0432\u0434\u043e\u0439. \u042d\u0442\u0430 \u0433\u043b\u0430\u0432\u0430 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c.</p> <p>JavaScript \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0431\u0435\u0441\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u043d\u043e \u043d\u0430\u0431\u0440\u043e\u0441\u0430\u0442\u044c \u043a\u0443\u0447\u0443 \u043d\u0435\u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0447\u043b\u0435\u043d\u044b \u043a\u043b\u0430\u0441\u0441\u0430, \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u0430\u043a \u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0417\u0430\u0442\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0432\u0438\u0434\u0435\u043d\u043d\u044b\u043c, \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c. \u0416\u0438\u0437\u043d\u044c - \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0448\u0442\u0443\u043a\u0430. \u0422\u0430\u043a \u0432 \u0447\u0451\u043c \u0436\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 JavaScript \u0438 GLSL? \u041e\u043d\u0438 \u043e\u0431\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435, \u043e\u0431\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u044f\u043a\u0438\u0445 \u043f\u0440\u0438\u043a\u043e\u043b\u044c\u043d\u044b\u0445 \u0448\u0442\u0443\u043a \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435, \u0438 \u043a \u0442\u043e\u043c\u0443 \u0436\u0435, JS \u043f\u0440\u043e\u0449\u0435 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438.</p> <p>\u041e\u0421\u043d\u043e\u0432\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e JavaScript - \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a GLSL - \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u043c\u044b\u0439. \u0421\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0438\u0432\u043d\u043e, \u043e\u043d\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0439 \u0438 \u0432 \u0446\u0435\u043b\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430. \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0448\u0438\u043d\u0443 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0439 \u0438 \u0432 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0439.</p> <p>\u041a\u043e\u0433\u0434\u0430 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 (\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 JavaScript) \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0438\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430 \u043d\u0430 JS, \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0438 \u043c\u0430\u043b\u0435\u0439\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u0447\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u0430\u0436\u0434\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0442\u043e-\u043b\u0438\u0431\u043e \u043d\u0430\u043f\u0435\u0440\u0451\u0434. \u0427\u0442\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043e\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0432\u0440\u0435\u043c\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 (\u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f) \u0442\u0438\u043f\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0438, \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u0432 \u0430\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435.</p> <p>\u042d\u0442\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439, \u0431\u043e\u043b\u0435\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0438 \u0434\u043e \u0441\u0443\u043c\u0430\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u0432\u0438\u0436\u043e\u043a V8 \u0432 \u0425\u0440\u043e\u043c\u0435. \u0425\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0442\u043e, \u0447\u0442\u043e \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 JS \u043a\u0430\u043a \u0435\u043c\u0443 \u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0438 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043a\u0440\u044b\u0442 \u043e\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430. \u0412\u044b \u0431\u0435\u0441\u0441\u0438\u043b\u044c\u043d\u044b.</p> <p>\u041a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0445\u043e\u0434\u0443. \u0415\u0451 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0438 \u043e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430. \u042d\u0442\u043e \u043c\u043d\u043e\u0433\u043e\u0435 \u043c\u0435\u043d\u044f\u0435\u0442. \u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u0443\u0434\u0435\u0442\u0435 \u0442\u043e\u0447\u043a\u0443 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432\u0430\u0448 \u043a\u043e\u0434 \u0441\u0442\u0430\u043d\u0435\u0442 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u041e\u043d \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443.</p> <p>\u042d\u0442\u043e \u0441\u0443\u0440\u043e\u0432\u043e, \u043d\u043e \u044d\u0442\u043e \u0442\u043e, \u0447\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0448\u0435\u0439\u0434\u0435\u0440: \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0430 GPU. \u041d\u0435 \u043f\u0443\u0433\u0430\u0439\u0442\u0435\u0441\u044c! \u041a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c, \u0441\u0442\u0430\u043d\u0435\u0442 \u0432\u0430\u0448\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u043c \u0434\u0440\u0443\u0433\u043e\u043c. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043e\u0447\u0435\u043d\u044c \u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b \u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u041e\u043d\u0430 \u043f\u043e\u0434\u0441\u043a\u0430\u0436\u0443\u0442 \u0432 \u043a\u0430\u043a\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0435 \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c, \u0438 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u0430\u0432\u043e\u043a \u0448\u0435\u0439\u0434\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u0433\u043e\u0442\u043e\u0432 \u043a \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0451\u043d. \u042d\u0442\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0438\u043b\u0443 \u0435\u0433\u043e \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0447\u0442\u043e-\u043b\u0438\u0431\u043e \u0441\u043b\u043e\u043c\u0430\u0442\u044c.</p> <p>\u0418 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435: \u0448\u0435\u0439\u0434\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c: \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430. \u0412\u043a\u0440\u0430\u0442\u0446\u0435, \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u044b\u0439 \u0448\u0435\u0439\u0434\u0435\u0440 (\u043f\u0435\u0440\u0432\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0435\u0442 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 (\u0438\u043b\u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432), \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0445 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430. \u0418 \u0443\u0436\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u0448\u0435\u0439\u0434\u0435\u0440 \u0440\u0435\u0448\u0430\u0435\u0442 \u0432 \u043a\u0430\u043a\u043e\u0439 \u0446\u0432\u0435\u0442 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043a\u0440\u0430\u0441\u0438\u0442\u044c \u043f\u0438\u043a\u0441\u0435\u043b\u0438. \u042d\u0442\u0430 \u043a\u043d\u0438\u0433\u0430 \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u0442\u043e\u0440\u044b\u043c \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u043c. \u0412\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u044f - \u044d\u0442\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a, \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u0441\u044e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c.</p> <p>\u0413\u043e\u0442\u043e\u0432\u044b?</p> <p>\u041f\u043e\u0435\u0445\u0430\u043b\u0438!</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_1","title":"\u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0435 \u0441 JS \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043d\u0435\u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430, \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0430\u0441 \u0447\u0443\u0436\u0435\u0440\u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0435\u0439, \u0438 \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u0435\u0439\u0448\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043a GLSL. \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f, \u043a\u0430\u043a \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0433\u0430\u0434\u0430\u0442\u044c\u0441\u044f, \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0434\u0430\u0432\u0430\u0442\u044c \u0442\u0438\u043f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041e\u0442\u0441\u044e\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 <code>var</code> \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. \u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u043f\u043e\u043b\u0438\u0446\u0438\u044f \u043c\u044b\u0441\u043b\u0435\u0439 \u043e\u0442 GLSL \u0441\u0442\u0451\u0440\u043b\u0430 \u0435\u0433\u043e \u0438\u0437 \u043e\u0431\u0449\u0435\u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u043c\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0438 \u0432\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u043d\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e, \u043d\u0443... \u0435\u0433\u043e \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.</p> <p>\u0412\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 <code>var</code> \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0438\u043f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0442\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u0443\u0432\u0438\u0434\u0438\u0442 \u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d \u0443\u043c\u0435\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f. \u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 <code>var</code> \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u0437\u043d\u0430\u0442\u044c \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0442\u0438\u043f\u043e\u0432 \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445. \u041d\u043e \u043f\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0442\u0438\u043f\u043e\u0432 \u0432 GLSL \u043d\u0435\u043c\u043d\u043e\u0433\u043e, \u0438 \u043e\u043d\u0438 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b (GLSL - \u043d\u0435 Java-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a).</p> <p>\u0412\u0441\u0451 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u043f\u0443\u0433\u0430\u044e\u0449\u0435, \u043d\u043e \u0432\u0441\u0451 \u0436\u0435 \u044d\u0442\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432\u044b \u043e\u0431\u044b\u0447\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043d\u0430 JS. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u0443\u043b\u0435\u0432\u0430, \u0442\u043e \u0432 \u043d\u0435\u0439 \u043c\u043e\u0436\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e <code>true</code> \u0438\u043b\u0438 <code>false</code>. \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>var uid = XXX;</code>, \u0442\u043e \u0432 \u043d\u0435\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u0436\u0435 \u043e\u043d\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0430 \u043a\u0430\u043a <code>var y = YYY;</code>, \u0442\u043e \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439. \u0427\u0442\u043e \u0435\u0449\u0451 \u043b\u0443\u0447\u0448\u0435, \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0438\u043b\u044c\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0432\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0433\u0430\u0434\u0430\u0442\u044c \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 <code>X == Y</code>, \u0438 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043b\u0438 \u044d\u0442\u043e <code>typeof X == typeof Y</code>, \u0438\u043b\u0438 <code>typeof X !== null &amp;&amp; Y...</code>. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0447\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0430 \u0435\u0441\u043b\u0438 \u0438 \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435, \u0442\u043e \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u0437\u043d\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e.</p> <p>\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043c \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u044f\u0437\u044b\u043a\u0430 GLSL (\u0441\u043a\u0430\u043b\u044f\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e): <code>bool</code> (\u0431\u0443\u043b\u0435\u0432 \u0442\u0438\u043f), <code>int</code> (\u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439) \u0438 <code>float</code> (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439). \u0415\u0441\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0442\u0438\u043f\u044b, \u043d\u043e \u043f\u043e\u043a\u0430 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 GLSL:</p> <pre><code>// \u0431\u0443\u043b\u0435\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\nJS: var b = true;               GLSL: bool b = true;\n\n// \u0446\u0435\u043b\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\nJS: var i = 1;                  GLSL: int i = 1;\n\n// \u0447\u0438\u0441\u043b\u043e \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439\nJS: var f = 3.14159;            GLSL: float f = 3.14159;\n</code></pre> <p>\u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0442\u0440\u0443\u0434\u043d\u043e, \u043f\u0440\u0430\u0432\u0434\u0430? \u041a\u0430\u043a \u0431\u044b\u043b\u043e \u0437\u0430\u043c\u0435\u0447\u0435\u043d\u043e \u0432\u044b\u0448\u0435, \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0449\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u044b \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0432\u044b\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0412\u0441\u0451 \u0435\u0449\u0451 \u0441\u043e\u043c\u043d\u0435\u0432\u0430\u0435\u0442\u0435\u0441\u044c? \u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0442\u0430\u043a \u0436\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c \u0432 \u0440\u0430\u0437\u044b \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c \u043d\u0430 JS.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#void","title":"void","text":"<p>\u0412 GLSL \u0435\u0441\u0442\u044c \u0442\u0438\u043f <code>void</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 <code>null</code>. \u041e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e, \u0438 \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u044d\u0442\u043e\u0433\u043e \u0442\u0438\u043f\u0430.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#boolean","title":"boolean","text":"<p>\u041a\u0430\u043a \u0432\u0430\u043c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0431\u0443\u043b\u0435\u0432\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0439: <code>if( myBoolean == true ){}else{}</code>. \u0423\u0441\u043b\u043e\u0432\u043d\u043e\u0435 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0447\u0435\u043d\u044c \u043b\u0435\u0433\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 CPU, \u043d\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u0438\u0440\u043e\u0434\u0430 GLSL \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u0432\u0435\u0440\u043d\u044b\u043c. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f, \u0438 \u0432 \u043a\u043d\u0438\u0433\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043e\u0431\u043e\u0439\u0442\u0438 \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_2","title":"\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","text":"<p>\u041a\u0430\u043a \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u0411\u043e\u0440\u043e\u043c\u0438\u0440, \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0430\u043a \u0432\u0437\u044f\u0442\u044c \u0438 \u0441\u043c\u0435\u0448\u0430\u0442\u044c \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 JavaScript, GLSL \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u0430\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u043e\u0442 \u044d\u0442\u043e:</p> <pre><code>int     i = 2;\nfloat   f = 3.14159;\n\n// \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u0446\u0435\u043b\u043e\u0435 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439\nfloat   r = i * f;\n</code></pre> <p>\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u044b \u043f\u044b\u0442\u0430\u0435\u0442\u0435\u0441\u044c \u0441\u043a\u0440\u0435\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0448\u043a\u0443 \u0441 \u0436\u0438\u0440\u0430\u0444\u043e\u043c. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u043f\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e <code>i</code> \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f <code>float</code>, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0438\u043f <code>i</code>.</p> <pre><code>//\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 'i' \u043a float\nfloat   r = float( i ) * f;\n</code></pre> <p>\u042d\u0442\u043e \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043e\u0434\u0435\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0448\u043a\u0438 \u0432 \u0448\u043a\u0443\u0440\u0443 \u0436\u0438\u0440\u0430\u0444\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f: \u0432 <code>r</code> \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f <code>i</code> x <code>f</code>.</p> <p>\u041b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b\u0445 \u0432\u044b\u0448\u0435 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043b\u044e\u0431\u043e\u043c\u0443 \u0434\u0440\u0443\u0433\u043e\u043c\u0443. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 <code>float</code> \u043a <code>int</code> \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a <code>Math.floor()</code>, \u0443\u0434\u0430\u043b\u044f\u044f \u0447\u0438\u0441\u043b\u0430 \u0441\u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 <code>float</code> \u0438\u043b\u0438 <code>int</code> \u043a \u0431\u0443\u043b\u0435\u0432\u0443 \u0442\u0438\u043f\u0443 \u0432\u0435\u0440\u043d\u0451\u0442 <code>true</code> \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_3","title":"\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440","text":"<p>\u0422\u0438\u043f\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0442\u0430\u043a \u0436\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u0441\u0430\u043c\u0438\u0445 \u0441\u0435\u0431\u044f. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0442\u0438\u043f\u0430 <code>float</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u0430\u043a <code>\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440</code> \u043a\u043b\u0430\u0441\u0441\u0430 <code>float</code>.</p> <p>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u044b:</p> <pre><code>int     i = 1;\nint     i = int( 1 );\nint     i = int( 1.9995 );\nint     i = int( true );\n</code></pre> <p>\u0414\u043b\u044f <code>\u0441\u043a\u0430\u043b\u044f\u0440\u043d\u044b\u0445</code> \u0442\u0438\u043f\u043e\u0432 \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e, \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044f\u0441\u044c \u043e\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043d\u043e \u0432 \u044d\u0442\u043e\u043c \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0434\u043e\u0439\u0434\u0451\u043c \u0434\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043e \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430\u0445.</p> <p>\u0418\u0442\u0430\u043a, \u043c\u044b \u0438\u0437\u0443\u0447\u0438\u043b\u0438 \u0442\u0440\u0438 <code>\u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u0430</code>, \u0431\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c, \u043d\u043e \u0432 GLSL \u0435\u0441\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_4","title":"\u0412\u0435\u043a\u0442\u043e\u0440\u044b","text":"<p>\u041a\u0430\u043a \u0438 JavaScript, \u0432 GLSL \u0432\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043b\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0438 \u0437\u0434\u0435\u0441\u044c <code>\u0432\u0435\u043a\u0442\u043e\u0440\u044b</code> \u0431\u0443\u0434\u0442 \u043e\u0447\u0435\u043d\u044c \u043a\u0441\u0442\u0430\u0442\u0438. \u042f \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044e, \u0447\u0442\u043e \u0432\u0430\u043c \u0434\u043e\u0432\u043e\u0434\u0438\u043b\u043e\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 JS \u043a\u043b\u0430\u0441\u0441 <code>Point</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>x</code> \u0438 <code>y</code>, \u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a:</p> <pre><code>// \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:\nvar Point = function( x, y ){\n    this.x = x || 0;\n    this.y = y || 0;\n}\n\n// \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430:\nvar p = new Point( 100,100 );\n</code></pre> <p>\u041a\u0430\u043a \u043c\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0432\u0438\u0434\u0435\u043b\u0438, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0436\u0443\u0442\u043a\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u0435\u043d \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445. \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u044d\u0442\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e <code>var</code>, \u0437\u0430\u0442\u0435\u043c \u044d\u0442\u043e \u0443\u0436\u0430\u0441\u0430\u044e\u0449\u0435\u0435 <code>this</code> \u0438 \u043d\u0435\u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>x</code> \u0438 <code>y</code>... \u041d\u0435\u0442, \u0442\u0430\u043a\u043e\u0435 \u044f\u0432\u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043c\u0438\u0440\u0435 \u0448\u0435\u0439\u0434\u0435\u0440\u043e\u0432.</p> <p>\u0412\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e GLSL \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445:</p> <ul> <li><code>bvec2</code>: 2D \u0431\u0443\u043b\u0435\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, <code>bvec3</code>: 3D \u0431\u0443\u043b\u0435\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, <code>bvec4</code>: 4D \u0431\u0443\u043b\u0435\u0432 \u0432\u0435\u043a\u0442\u043e\u0440</li> <li><code>ivec2</code>: 2D \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440, <code>ivec3</code>: 3D \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440, <code>ivec4</code>: 4D \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</li> <li><code>vec2</code>: 2D \u0432\u0435\u043a\u0442\u043e\u0440 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, <code>vec3</code>: 3D\u0432\u0435\u043a\u0442\u043e\u0440 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, <code>vec4</code>: 4D \u0432\u0435\u043a\u0442\u043e\u0440 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439</li> </ul> <p>\u0412\u0434\u0443\u043c\u0447\u0438\u0432\u044b\u0439 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043c\u0435\u0442\u0438\u0442, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u0442\u0438\u043f. \u0418\u0437 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u043b\u0435\u0433\u043a\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438, \u0447\u0442\u043e <code>bvec2</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0431\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0430 <code>vec4</code> \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439.</p> <p>\u0422\u0430\u043a \u0436\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u0432\u0432\u043e\u0434\u044f\u0442 \u0442\u0430\u043a\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443, \u043a\u0430\u043a \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c. \u042d\u0442\u043e \u043d\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 2D-\u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0440\u0438 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0435 2D-\u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0438 3D \u043f\u0440\u0438 \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0438 3D-\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0414\u043b\u044f \u0447\u0435\u0433\u043e \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0442\u044b\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440? (\u043d\u0443, \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u044d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u00ab\u0442\u0435\u0441\u0441\u0435\u0440\u0430\u043a\u0442\u00bb \u0438\u043b\u0438 \u00ab\u0433\u0438\u043f\u0435\u0440\u043a\u0443\u0431\u00bb)</p> <p>\u041d\u0435\u0442, \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0445 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435:</p> <pre><code>// \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u0431\u0443\u043b\u0435\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\nbvec2 b2 = bvec2 ( true, false );\n\n// \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0442\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0439 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\nivec3 i3 = ivec3( 0,0,1 );\n\n// \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0447\u0435\u0442\u044b\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u044f\u0442\u043e\u0439\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 1. );\n</code></pre> <p><code>b2</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0431\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, <code>i3</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 3 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445, \u0430 <code>v4</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 4 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439.</p> <p>\u041d\u043e \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u044d\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c? \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043a\u0430\u043b\u044f\u0440\u043e\u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0447\u0435\u0432\u0438\u0434\u0435\u043d: \u043f\u0440\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0438 <code>float f = 1.2;</code> \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f <code>f</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>1.2</code>. \u0414\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0432\u0441\u0451 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043a\u0440\u0430\u0441\u0438\u0432\u043e.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_5","title":"\u0434\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432","text":"<p>\u0415\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c</p> <pre><code>// \u043e\u0431\u044a\u044f\u0432\u0438\u043c \u0447\u0435\u0442\u044b\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n</code></pre> <p>\u0447\u0435\u0442\u044b\u0440\u0435 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c</p> <pre><code>float x = v4.x;     // x = 0.0\nfloat y = v4.y;     // y = 1.0\nfloat z = v4.z;     // z = 2.0\nfloat w = v4.w;     // w = 3.0\n</code></pre> <p>\u043b\u0435\u0433\u043a\u043e \u0438 \u043f\u0440\u043e\u0441\u0442\u043e. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c:</p> <pre><code>float x =   v4.x    =   v4.r    =   v4.s    =   v4[0];     // x = 0.0\nfloat y =   v4.y    =   v4.g    =   v4.t    =   v4[1];     // y = 1.0\nfloat z =   v4.z    =   v4.b    =   v4.p    =   v4[2];     // z = 2.0\nfloat w =   v4.w    =   v4.a    =   v4.q    =   v4[3];     // w = 3.0\n</code></pre> <p>\u0412\u0434\u0443\u043c\u0447\u0438\u0432\u044b\u0439 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043c\u0435\u0442\u0438\u043b \u0442\u0440\u0438 \u0444\u0430\u043a\u0442\u0430:    * <code>X</code>, <code>Y</code>, <code>Z</code> \u0438 <code>W</code> \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0432 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435    * <code>R</code>, <code>G</code>, <code>B</code> \u0438 <code>A</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0432\u0435\u0442\u0430 \u0438 \u0430\u043b\u044c\u0444\u0430-\u043a\u0430\u043d\u0430\u043b\u0430    * <code>[0]</code>, <code>[1]</code>, <code>[2]</code> \u0438 <code>[3]</code> \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442, \u0447\u0442\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438 \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c</p> <p>\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u0441 \u0434\u0432\u0443\u0445- \u0438\u043b\u0438 \u0442\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u043c\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438, \u0446\u0432\u0435\u0442\u043e\u043c \u0441 \u0430\u043b\u044c\u0444\u0430-\u043a\u0430\u043d\u0430\u043b\u043e\u043c \u0438\u043b\u0438 \u0431\u0435\u0437 \u0442\u0430\u043a\u043e\u0432\u043e\u0433\u043e, \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0430\u043a\u0438\u043c\u0438-\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0442\u0438\u043f \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u0430. \u041e\u0431\u044b\u0447\u043d\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u044b (\u0432 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0441\u043c\u044b\u0441\u043b\u0435 \u0441\u043b\u043e\u0432\u0430) \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u0430\u043a <code>vec2</code>, <code>vec3</code> \u0438\u043b\u0438 <code>vec4</code>, \u0446\u0432\u0435\u0442\u0430 \u043a\u0430\u043a <code>vec3</code> \u0438\u043b\u0438 <code>vec4</code>, \u043d\u043e \u0432 \u0446\u0435\u043b\u043e\u043c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0442. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 \u0432\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0431\u0443\u043b\u0435\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043a <code>bvec4</code>, \u043d\u043e \u044d\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u0442 \u0432 \u0438\u0437\u043b\u0438\u0448\u043d\u0435\u043c\u0443 \u0440\u0430\u0441\u0445\u043e\u0434\u0443 \u043f\u0430\u043c\u044f\u0442\u0438.</p> <p>\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0432 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0432\u0435\u0442\u0430 (<code>R</code>, <code>G</code>, <code>B</code>, <code>A</code>) \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043b\u0435\u0436\u0430\u0442 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 0 \u0434\u043e 1, \u0430 \u043d\u0435 \u043e\u0442 0 \u0434\u043e 0xFF, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043d\u0438\u0445 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f <code>vec4</code>, \u0430 \u043d\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 <code>ivec4</code>.</p> <p>\u0423\u0436\u0435 \u043b\u0443\u0447\u0448\u0435, \u043d\u043e \u043c\u044b \u0438\u0434\u0451\u043c \u0434\u0430\u043b\u0435\u0435!</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_6","title":"\u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0418\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e <code>X</code> \u0438 <code>Y</code> \u0438\u0437 <code>vec4</code>, \u043d\u0430 JavaScript \u0432\u044b \u0431\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u044d\u0442\u043e\u0433\u043e:</p> <pre><code>var needles = [0, 1]; // \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435 'x' \u0438 'y' \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nvar a = [ 0,1,2,3 ]; // \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 'vec4'\nvar b = a.filter( function( val, i, array ) {\nreturn needles.indexOf( array.indexOf( val ) ) != -1;\n});\n// b = [ 0, 1 ]\n\n// \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e:\nvar needles = [0, 1];\nvar a = [ 0,1,2,3 ]; // \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 'vec4'\nvar b = [ a[ needles[ 0 ] ], a[ needles[ 1 ] ] ]; // b = [ 0, 1 ]\n</code></pre> <p>\u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0443\u0440\u043e\u0434\u043b\u0438\u0432\u043e. \u0412 GLSL \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0432\u043e\u0442 \u0442\u0430\u043a:</p> <pre><code>// \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0447\u0435\u0442\u044b\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u044f\u0442\u043e\u0439\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n\n// \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e X \u0438 Y\nvec2 xy =   v4.xy; //   xy = vec2( 0.0, 1.0 );\n</code></pre> <p>\u0427\u0442\u043e \u044d\u0442\u043e \u0431\u044b\u043b\u043e?! \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0432\u043e\u0435\u0434\u0438\u043d\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043f\u043e\u043b\u044f\u043c, GLSL \u0438\u0437\u044f\u0449\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432 \u0432\u0438\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0442\u0438\u043f\u0430. \u042d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u0435\u043a\u0442\u043e\u0440 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c, \u043f\u0440\u044f\u043c\u043e \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 javaScript. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0430, \u043d\u043e \u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u043e\u0431\u0440\u0430\u0442\u0438\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430:</p> <pre><code>// \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0447\u0435\u0442\u044b\u0440\u0451\u0445\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n// \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0446\u0432\u0435\u0442\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 A,B,G,R\nvec4 backwards = v4.abgr; // backwards = vec4( 1.0, 0.0, 0.8, 0.2 );\n</code></pre> <p>\u0418 \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, \u043a \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043c\u043d\u043e\u0433\u043e\u043a\u0440\u0430\u0442\u043d\u043e:</p> <pre><code>// \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0447\u0435\u0442\u044b\u0440\u0451\u0445\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n// \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c vec3 \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438 GAG \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 G \u0438 A \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430\nvec3 GAG = v4.gag; // GAG = vec4( 0.8, 1.0, 0.8 );\n</code></pre> <p>\u041e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u043e\u0435\u0434\u0438\u043d\u043e, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e rgb-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430 \u0441 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0442.\u043f.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_7","title":"\u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u0438\u043c \u0432\u0441\u0451!","text":"<p>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e \u0442\u0438\u043f\u0430\u0445 \u044f \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043b \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043b \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b \u0438 \u0435\u0449\u0451 \u043e\u0434\u043d\u043e \u0432\u0435\u043b\u0438\u043a\u043e\u043b\u0435\u043f\u043d\u043e\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u044f\u0437\u044b\u043a\u0430 GLSL - \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0443. \u041f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u043e\u0432/\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u0412 JavsScript \u043d\u0435\u0442 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u043e\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0432\u0430\u043c \u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0439, \u043d\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432\u0448\u0438\u0441\u044c \u0435\u0439, \u0432\u044b \u0437\u0430\u0434\u0430\u0434\u0438\u0442\u0435\u0441\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c, \u043f\u043e\u0447\u0435\u043c\u0443 \u0436\u0435 \u043e\u043d\u0430 \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 JavaScript (\u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043e\u0442\u0432\u0435\u0442 - \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f).</p> <p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438:</p> <pre><code>vec2 a = vec2( 1.0, 1.0 );\nvec2 b = vec2( 1.0, 1.0 );\n// \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435\nvec2 c = a + b;     // c = vec2( 2.0, 2.0 );\n</code></pre> <p>\u0428\u0422\u041e\u0410? \u041c\u043e\u0436\u043d\u043e \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430\u043c\u0438?!</p> <p>\u0418\u043c\u0435\u043d\u043d\u043e. \u0418 \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, \u044d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u043a\u043e \u0432\u0441\u0435\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c (<code>+</code>, <code>-</code>, <code>*</code> \u0438 <code>/</code>), \u0438 \u044d\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0447\u0430\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430:</p> <pre><code>vec2 a = vec2( 0.0, 0.0 );\nvec2 b = vec2( 1.0, 1.0 );\n// \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\nvec4 c = vec4( a , b );         // c = vec4( 0.0, 0.0, 1.0, 1.0 );\n</code></pre> <p>\u041c\u044b \u0441\u043e\u043e\u0440\u0443\u0434\u0438\u043b\u0438 <code>vec4</code> \u0438\u0437 \u0434\u0432\u0443\u0445 <code>vec2</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>a.x</code> \u0438 <code>a.y</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 <code>X</code> \u0438 <code>Y</code> \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 <code>c</code>. \u0417\u0430\u0442\u0435\u043c \u043c\u044b \u0432\u0437\u044f\u043b\u0438 <code>b.x</code> \u0438 <code>b.y</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 <code>Z</code> \u0438 <code>W</code> \u0434\u043b\u044f <code>c</code>.</p> <p>\u0422\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e \u043d\u0430\u0431\u043e\u0440\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 <code>vec4</code>. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0440\u0441\u0438\u0439 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u043c\u0438\u0440\u043d\u043e \u0441\u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0441\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b:</p> <pre><code>vec4 a = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 a = vec4(1.0);// x, y, z, w all equal 1.0\nvec4 a = vec4( v2, float, v4 );// vec4( v2.x, v2.y, float, v4.x );\nvec4 a = vec4( v3, float );// vec4( v3.x, v3.y, v3.z, float );\netc.\n</code></pre> <p>\u041e\u0442 \u0432\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430.</p> <p>\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0442\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0438 \u043d\u0435 \u0431\u044b\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u0443\u043c\u0430\u043d\u044b (\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0447\u0430\u0441\u0442\u043e).</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_8","title":"\u043d\u0443\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0438\u043f\u043e\u0432","text":"<p>\u0412\u0435\u043a\u0442\u043e\u0440\u044b \u043f\u0440\u0438\u043a\u043e\u043b\u044c\u043d\u044b\u0435. \u041e\u043d\u0438 - \u043c\u044b\u0448\u0446\u044b \u0432\u0430\u0448\u0435\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430. \u041d\u043e \u0435\u0441\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0442\u0438\u043f\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u043d\u044b\u0435 \u0441\u0435\u043c\u043f\u043b\u0435\u0440\u044b, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0438\u0436\u0435.</p> <p>\u0412 GLSL \u0435\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u044b. \u041a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, \u043e\u043d\u0438 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0438 \u0443 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043b\u0438\u0447\u0438\u0439 \u043e\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0432 JS:  * \u0443 \u043d\u0438\u0445 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440  * \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c push(), pop(), splice() \u0438 \u0442.\u043f., \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e <code>length</code> \u0442\u043e\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442  * \u0438\u0445 \u043d\u0435\u043b\u044c\u0437\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0440\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0438  * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443</p> <p>\u0432\u043e\u0442 \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442:</p> <pre><code>int values[3] = [0,0,0];\n</code></pre> <p>\u0430 \u0432\u043e\u0442 \u044d\u0442\u043e \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442:</p> <pre><code>int values[3];\nvalues[0] = 0;\nvalues[1] = 0;\nvalues[2] = 0;\n</code></pre> <p>\u042d\u0442\u043e\u0433\u043e \u0445\u0432\u0430\u0442\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432\u0441\u0435 \u0432\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b (<code>struct</code>). \u041e\u043d\u0438 \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 \u043e\u0434\u043d\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435:</p> <pre><code>struct ColorStruct {\n    vec3 color0;\n    vec3 color1;\n    vec3 color2;\n}\n</code></pre> <p>\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0432\u0435\u0442\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>// \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443\nColorStruct sandy = ColorStruct(    vec3(0.92,0.83,0.60),\n                                    vec3(1.,0.94,0.69),\n                                    vec3(0.95,0.86,0.69) );\n\n// \u043f\u043e\u043b\u0443\u0447\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\nsandy.color0 // vec3(0.92,0.83,0.60)\n</code></pre> <p>\u042d\u0442\u043e \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0445\u0430\u0440, \u043d\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0447\u0438\u0441\u0442\u044b\u0439, \u0438\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u044b\u0439 \u043a\u043e\u0434.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_9","title":"\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f","text":"<p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b, \u043d\u043e \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e  \u043d\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0438\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u041a \u0441\u0447\u0430\u0441\u0442\u044c\u044e, \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043e\u043a \u043a JavaScript. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a:</p> <pre><code>if( condition ){\n    //true\n}else{\n    //false\n}\n</code></pre> <p>\u0426\u0438\u043a\u043b <code>for</code> \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a:</p> <pre><code>const int count = 10;\nfor( int i = 0; i &lt;= count; i++){\n    //do something\n}\n</code></pre> <p>\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0446\u0438\u043a\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    //do something\n}\n</code></pre> <p>\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e <code>count</code> \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0430 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434 \u0435\u0451 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 <code>const</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d \u0447\u0443\u0442\u044c \u043d\u0438\u0436\u0435.</p> <p>\u0422\u0430\u043a \u0436\u0435 \u043d\u0430\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 <code>break</code> \u0438 <code>continue</code>:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    if( i &lt; 5. )continue;\n    if( i &gt;= 8. )break;\n}\n</code></pre> <p>\u0418\u043c\u0435\u0439\u0442\u0435 \u0432\u0432\u0438\u0434\u0443, \u0447\u0442\u043e \u043d\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f <code>break</code> \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438 \u043d\u0435 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0435\u0442 \u0446\u0438\u043a\u043b \u0437\u0430\u0440\u0430\u043d\u0435\u0435.</p> <p>\u0412 \u0446\u0435\u043b\u043e\u043c, \u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0438 \u0438\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u0446\u0438\u043a\u043b\u043e\u0432 \u0438 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0439 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0447\u0430\u0449\u0435.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_10","title":"\u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b","text":"<p>\u041f\u043e\u043c\u0438\u043c\u043e \u0442\u0438\u043f\u043e\u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 GLSL \u0435\u0441\u0442\u044c \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b. \u0412\u043a\u0440\u0430\u0442\u0446\u0435, \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0430\u044e\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0443 \u043a\u0430\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f GPU \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b CPU. \u0422\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0438 \u044e\u043d\u0438\u0444\u043e\u0440\u043c\u0430\u043c\u0438. \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u044b\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445, \u0430 \u044e\u043d\u0438\u0444\u043e\u0440\u043c\u044b - \u0438 \u0432 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u044b\u0445, \u0438 \u0432\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u044b\u0445. \u0422\u0430\u043a \u0436\u0435 \u0435\u0441\u0442\u044c \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 <code>varying</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430 \u043a \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443.</p> <p>\u042f \u043d\u0435 \u0431\u0443\u0434\u0443 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u0433\u043b\u0443\u0431\u043b\u044f\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438, \u0438\u0431\u043e \u043c\u044b \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c *\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u044b\u0435 \u0448\u0435\u0439\u0434\u0435\u0440\u044b, \u043d\u043e \u0434\u0430\u043b\u0435\u0435 \u0432 \u043a\u043d\u0438\u0433\u0435 \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u0441\u044f \u0447\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435</p> <pre><code>uniform vec2 u_resolution;\n</code></pre> <p>\u0427\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442? \u041c\u044b \u0437\u0430\u0434\u0430\u043b\u0438 \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 <code>uniform</code> \u043f\u0435\u0440\u0435\u0434 \u0442\u0438\u043f\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0443\u043a\u0430\u0437\u0430\u0432, \u0447\u0442\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u0448\u0435\u0439\u0434\u0435\u0440 \u0438\u0437 CPU. \u0428\u0438\u0440\u0438\u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 <code>x</code>-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 2D-\u0432\u0435\u043a\u0442\u043e\u0440\u0430, \u0430 \u0432\u044b\u0441\u043e\u0442\u0430 - \u0432 <code>y</code>-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435.</p> <p>\u041a\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u0432\u0438\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441 \u044d\u0442\u0438\u043c \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c, \u043e\u043d \u0441\u0434\u0435\u043b\u0430\u0435\u0442 \u0447\u0442\u043e\u0431\u044b \u0432\u044b \u043d\u0435 \u043c\u043e\u0433\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0435.</p> <p>\u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 <code>count</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u0446\u0438\u043a\u043b\u0435 <code>for</code>:</p> <pre><code>const float count = 10.;\nfor( ... )\n</code></pre> <p>\u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 <code>const</code>, \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u043d\u0435 \u0434\u0430\u0451\u0442 \u043d\u0430\u043c \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u0431\u044b \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439.</p> <p>\u0415\u0449\u0451 \u0442\u0440\u0438 \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439: <code>in</code>, <code>out</code> \u0438 <code>inout</code>. \u0412 JavaScript \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. \u0418\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430 \u0435\u0451 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438.</p> <pre><code>function banana( a ){\n    a += 1;\n}\nvar value = 0;\nbanana( value );\nconsole.log( value );// &gt; 0 ; \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435:   * <code>in</code> \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)   * <code>out</code>  \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438: \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c   * <code>inout</code>  \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c</p> <p>\u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b\u0439 \u0432\u044b\u0448\u0435 \u043c\u0435\u0442\u043e\u0434 \u043d\u0430 GLSL:</p> <pre><code>void banana( inout float a ){\n    a += 1.;\n}\nfloat A = 0.;\nbanana( A ); // \u0442\u0435\u043f\u0435\u0440\u044c A = 1.;\n</code></pre> <p>\u042d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 JS \u0438 \u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_11","title":"\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b","text":"<p>\u041d\u0430\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u043a \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0432 DOM \u0438 Canvas 2D \u043e\u0441\u044c Y \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043d\u0438\u0437. \u042d\u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 DOM, \u0438\u0431\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043c\u0443, \u043a\u0430\u043a \u0441\u0432\u0451\u0440\u0441\u0442\u0430\u043d\u0430 web-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043f\u0430\u043d\u0435\u043b\u044c \u043d\u0430\u0432\u0435\u0440\u0445\u0443, \u0430 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u043f\u0440\u043e\u043a\u0440\u0443\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043d\u0438\u0437. \u0412 webgl-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u043e\u0441\u044c Y \u043f\u0435\u0440\u0435\u0432\u0451\u0440\u043d\u0443\u0442\u0430 \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0432\u0435\u0440\u0445.</p> <p>\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 (\u0442\u043e\u0447\u043a\u0430 (0,0)) \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043e \u0432 \u043b\u0435\u0432\u043e\u043c \u043d\u0438\u0436\u043d\u0435\u043c, \u0430 \u043d\u0435 \u0432 \u043b\u0435\u0432\u043e\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0433\u043b\u0443 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430. \u0422\u0435\u043a\u0441\u0442\u0443\u0440\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u0430\u043a \u0436\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0442\u0440\u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u044b\u043c.</p>"},{"location":"Frontend/shader/appendix/04/README-ru/#_12","title":"\u041d\u0430 \u044d\u0442\u043e\u043c \u0432\u0441\u0451!","text":"<p>\u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043c\u044b \u043c\u043e\u0433\u043b\u0438 \u043c\u044b \u0443\u0433\u043b\u0443\u0431\u0438\u0442\u044c\u0441\u044f \u0432\u043e \u0432\u0441\u044f\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0435\u0442\u0430\u043b\u0438, \u043d\u043e, \u043a\u0430\u043a \u0431\u044b\u043b\u043e \u0441\u043a\u0430\u0437\u0430\u043d\u043e \u0432\u043d\u0430\u0447\u0430\u043b\u0435, \u044d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u0438\u0441\u0430\u043b\u0430\u0441\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u043e\u0432\u0438\u0447\u043a\u043e\u0432. \u0417\u0434\u0435\u0441\u044c \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0432\u0430\u0440\u0438\u0432\u0430\u0442\u044c \u044d\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u043d\u043e \u0441 \u0442\u0435\u0440\u043f\u0435\u043d\u0438\u0435\u043c \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 \u044d\u0442\u043e\u0442 \u044f\u0437\u044b\u043a \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0451 \u0431\u043e\u043b\u0435\u0435 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0430\u0441.</p> <p>\u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u044d\u0442\u043e\u0442 \u0442\u0435\u043a\u0441\u0442 \u0431\u044b\u043b \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u0430 \u043f\u043e\u0442\u043e\u043c\u0443 \u0441\u0430\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043a\u043d\u0438\u0433\u0438!</p>"},{"location":"Frontend/shader/appendix/04/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/appendix/04/README-ua/#js","title":"\u0412\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u0442\u0438\u0445, \u0445\u0442\u043e \u043f\u0440\u0438\u0439\u0448\u043e\u0432 \u0456\u0437 JS","text":"<p>\u0430\u0432\u0442\u043e\u0440 Nicolas Barradeau</p> <p>\u042f\u043a\u0449\u043e \u0432\u0438 JavaScript-\u0440\u043e\u0437\u0440\u043e\u0431\u043d\u0438\u043a, \u0448\u0432\u0438\u0434\u0448\u0435 \u0437\u0430 \u0432\u0441\u0435, \u0432\u0438 \u0431\u0443\u0434\u0435\u0442\u0435 \u0442\u0440\u043e\u0445\u0438 \u0441\u043f\u0430\u043d\u0442\u0435\u043b\u0438\u0447\u0435\u043d\u0456, \u0447\u0438\u0442\u0430\u044e\u0447\u0438 \u043a\u043d\u0438\u0433\u0443. \u0414\u0456\u0439\u0441\u043d\u043e, \u0454 \u0431\u0430\u0433\u0430\u0442\u043e \u0432\u0456\u0434\u043c\u0456\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u043c\u0456\u0436 \u043c\u0430\u043d\u0456\u043f\u0443\u043b\u044e\u0432\u0430\u043d\u043d\u044f\u043c \u0432\u0438\u0441\u043e\u043a\u043e\u0440\u0456\u0432\u043d\u0435\u0432\u0438\u043c JS \u0456 \u0434\u043b\u0443\u0431\u0430\u043d\u043d\u044f\u043c \u0443 \u043c\u0435\u043d\u0448 \u0432\u0438\u0441\u043e\u043a\u043e\u0440\u0456\u0432\u043d\u0435\u0432\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445. \u041f\u0440\u043e\u0442\u0435, \u043d\u0430 \u0432\u0456\u0434\u043c\u0456\u043d\u0443 \u0432\u0456\u0434 \u0431\u0456\u043b\u044c\u0448 \u043d\u0438\u0437\u044c\u043a\u043e\u0440\u0456\u0432\u043d\u0435\u0432\u043e\u0457 \u043c\u043e\u0432\u0438 \u0430\u0441\u0435\u043c\u0431\u043b\u0435\u0440\u0430, GLSL \u0454 \u043b\u044e\u0434\u0438\u043d\u043e-\u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e\u044e \u043c\u043e\u0432\u043e\u044e, \u0456 \u044f \u0432\u043f\u0435\u0432\u043d\u0435\u043d\u0438\u0439, \u0449\u043e \u044f\u043a \u0442\u0456\u043b\u044c\u043a\u0438 \u0432\u0438 \u0440\u043e\u0437\u0431\u0435\u0440\u0435\u0442\u0435\u0441\u044f \u0437 \u0457\u0457 \u043e\u0441\u043e\u0431\u043b\u0438\u0432\u043e\u0441\u0442\u044f\u043c\u0438, \u0442\u043e \u0448\u0432\u0438\u0434\u043a\u043e \u0437\u0430\u043f\u0440\u0430\u0446\u044e\u0454\u0442\u0435.</p> <p>\u042f \u043f\u0440\u0438\u043f\u0443\u0441\u043a\u0430\u044e, \u0449\u043e \u0432\u0438 \u043c\u0430\u0454\u0442\u0435 \u0445\u043e\u0447\u0430 \u0431 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u0435\u0432\u0435 \u0437\u043d\u0430\u043d\u043d\u044f \u043f\u0440\u043e JavaScript \u0456 API Canvas. \u042f\u043a\u0449\u043e \u043d\u0456, \u043d\u0435 \u0445\u0432\u0438\u043b\u044e\u0439\u0442\u0435\u0441\u044f, \u0432\u0438 \u0432\u0441\u0435 \u043e\u0434\u043d\u043e \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u0442\u0438 \u0431\u0456\u043b\u044c\u0448\u0443 \u0447\u0430\u0441\u0442\u0438\u043d\u0443 \u0446\u044c\u043e\u0433\u043e \u0440\u043e\u0437\u0434\u0456\u043b\u0443.</p> <p>\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u044f \u043d\u0435 \u0431\u0443\u0434\u0443 \u043d\u0430\u0434\u0442\u043e \u0432\u0434\u0430\u0432\u0430\u0442\u0438\u0441\u044f \u0432 \u043f\u043e\u0434\u0440\u043e\u0431\u0438\u0446\u0456, \u0456 \u0434\u0435\u044f\u043a\u0456 \u0440\u0435\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u043d\u0430\u043f\u0456\u0432\u043f\u0440\u0430\u0432\u0434\u043e\u044e, \u0442\u043e\u0436 \u043d\u0435 \u0440\u043e\u0437\u0440\u0430\u0445\u043e\u0432\u0443\u0432\u0430\u0439\u0442\u0435 \u043d\u0430 \"\u0432\u0438\u0447\u0435\u0440\u043f\u043d\u0438\u0439 \u043f\u043e\u0441\u0456\u0431\u043d\u0438\u043a\", \u0430 \u0440\u0430\u0434\u0448\u0435 \u043d\u0430 \u043e\u0437\u043d\u0430\u0439\u043e\u043c\u043b\u0435\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u0430\u0447\u043a\u0456\u0432","text":"<p>JavaScript \u0447\u0443\u0434\u043e\u0432\u043e \u043f\u0456\u0434\u0445\u043e\u0434\u0438\u0442\u044c \u0434\u043b\u044f \u0448\u0432\u0438\u0434\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0443\u0432\u0430\u043d\u043d\u044f; \u0432\u0438 \u043d\u0430\u043a\u0438\u0434\u0443\u0454\u0442\u0435 \u043a\u0443\u043f\u0443 \u0440\u0456\u0437\u043d\u043e\u043c\u0430\u043d\u0456\u0442\u043d\u0438\u0445 \u043d\u0435\u0442\u0438\u043f\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0445 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0456 \u043c\u0435\u0442\u043e\u0434\u0456\u0432, \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0438\u043d\u0430\u043c\u0456\u0447\u043d\u043e \u0434\u043e\u0434\u0430\u0432\u0430\u0442\u0438 \u0442\u0430 \u0432\u0438\u0434\u0430\u043b\u044f\u0442\u0438 \u0447\u043b\u0435\u043d\u0438 \u043a\u043b\u0430\u0441\u0456\u0432, \u043e\u043d\u043e\u0432\u043b\u044e\u0432\u0430\u0442\u0438 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443 \u0456 \u0448\u0432\u0438\u0434\u043a\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0442\u0438 \u0447\u0438 \u0432\u043e\u043d\u0430 \u043f\u0440\u0430\u0446\u044e\u0454. \u041f\u043e\u0442\u0456\u043c \u043c\u043e\u0436\u043d\u0430 \u0432\u043d\u0435\u0441\u0442\u0438 \u043d\u043e\u0432\u0456 \u0437\u043c\u0456\u043d\u0438, \u043e\u043d\u043e\u0432\u0438\u0442\u0438 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0438 - \u043b\u0435\u0433\u043a\u0435 \u0436\u0438\u0442\u0442\u044f. \u0422\u043e\u0436 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u0441\u043e\u0431\u0456 \u043f\u0438\u0442\u0430\u043d\u043d\u044f, \u0443 \u0447\u043e\u043c\u0443 \u0440\u0456\u0437\u043d\u0438\u0446\u044f \u043c\u0456\u0436 JavaScript \u0456 GLSL? \u0417\u0440\u0435\u0448\u0442\u043e\u044e, \u043e\u0431\u0438\u0434\u0432\u0430 \u043f\u0440\u0430\u0446\u044e\u044e\u0442\u044c \u0443 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0456, \u043e\u0431\u0438\u0434\u0432\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043c\u0430\u043b\u044e\u0432\u0430\u043d\u043d\u044f \u043a\u0443\u043f\u0438 \u043f\u0440\u0438\u043a\u043e\u043b\u044c\u043d\u0438\u0445 \u0448\u0442\u0443\u043a \u043d\u0430 \u0435\u043a\u0440\u0430\u043d\u0456, \u0456 \u0432 \u0446\u044c\u043e\u043c\u0443 \u0441\u0435\u043d\u0441\u0456 JS \u043b\u0435\u0433\u0448\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438.</p> <p>\u0429\u043e \u0436, \u0433\u043e\u043b\u043e\u0432\u043d\u0430 \u0432\u0456\u0434\u043c\u0456\u043d\u043d\u0456\u0441\u0442\u044c \u043f\u043e\u043b\u044f\u0433\u0430\u0454 \u0432 \u0442\u043e\u043c\u0443, \u0449\u043e Javascript \u0454 \u0456\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u043e\u0432\u0430\u043d\u043e\u044e \u043c\u043e\u0432\u043e\u044e, \u0442\u043e\u0434\u0456 \u044f\u043a GLSL \u0454 \u043a\u043e\u043c\u043f\u0456\u043b\u044c\u043e\u0432\u0430\u043d\u043e\u044e. \u0421\u043a\u043e\u043c\u043f\u0456\u043b\u044c\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0432\u0438\u043a\u043e\u043d\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430\u0442\u0438\u0432\u043d\u043e \u0432 \u041e\u0421, \u0454 \u043d\u0438\u0437\u044c\u043a\u043e\u0440\u0456\u0432\u043d\u0435\u0432\u043e\u044e \u0456 \u0437\u0430\u0433\u0430\u043b\u043e\u043c \u0448\u0432\u0438\u0434\u043a\u043e\u044e. \u0406\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0454 \u0434\u043b\u044f \u0441\u0432\u043e\u0433\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0432\u0456\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443 \u043c\u0430\u0448\u0438\u043d\u0443 (VM), \u0454 \u0432\u0438\u0441\u043e\u043a\u043e\u0440\u0456\u0432\u043d\u0435\u0432\u043e\u044e \u0456 \u0432\u0456\u0434\u043d\u043e\u0441\u043d\u043e \u0431\u0456\u043b\u044c\u0448 \u043f\u043e\u0432\u0456\u043b\u044c\u043d\u043e\u044e.</p> <p>\u041a\u043e\u043b\u0438 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 (VM \u0434\u043b\u044f JavaScript) \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0430\u0431\u043e \u0456\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0443\u0454 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 JS-\u043a\u043e\u0434\u0443, \u0432\u0456\u043d \u0449\u0435 \u043d\u0435 \u043c\u0430\u0454 \u0443\u044f\u0432\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u0442\u0435, \u044f\u043a\u0430 \u0437\u043c\u0456\u043d\u043d\u0430 \u0447\u0438\u043c \u044f\u0432\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u0456 \u044f\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0449\u043e \u0440\u043e\u0431\u0438\u0442\u044c (\u0437\u0430 \u0432\u0438\u043d\u044f\u0442\u043a\u043e\u043c \u0442\u0438\u043f\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0445 \u043c\u0430\u0441\u0438\u0432\u0456\u0432).  \u0422\u043e\u0436 \u0432\u0456\u043d \u043d\u0435 \u043c\u043e\u0436\u0435 \u043d\u0456\u0447\u043e\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u043d\u0430\u043f\u0435\u0440\u0435\u0434. \u041f\u043e\u0442\u0440\u0456\u0431\u0435\u043d \u0434\u0435\u044f\u043a\u0438\u0439 \u0447\u0430\u0441, \u0449\u043e\u0431 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u0438 \u0432\u0430\u0448 \u043a\u043e\u0434, \u0449\u043e\u0431 \u0432\u0438\u0432\u0435\u0441\u0442\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f, \u0442\u0438\u043f\u0438 \u0432\u0430\u0448\u0438\u0445 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0442\u0430 \u043c\u0435\u0442\u043e\u0434\u0456\u0432 \u0456, \u043a\u043e\u043b\u0438 \u0446\u0435 \u043c\u043e\u0436\u043b\u0438\u0432\u043e, \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0438 \u0434\u0435\u0449\u043e \u0437 \u0432\u0430\u0448\u043e\u0433\u043e \u043a\u043e\u0434\u0443 \u043d\u0430 \u043a\u043e\u0434 \u0430\u0441\u0435\u043c\u0431\u043b\u0435\u0440\u0430, \u044f\u043a\u0438\u0439 \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438\u043c\u0435\u0442\u044c\u0441\u044f \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0448\u0432\u0438\u0434\u0448\u0435.</p> <p>\u0426\u0435 \u043f\u043e\u0432\u0456\u043b\u044c\u043d\u0438\u0439, \u043a\u0440\u043e\u043f\u0456\u0442\u043a\u0438\u0439 \u0456 \u0448\u0430\u043b\u0435\u043d\u043e \u0441\u043a\u043b\u0430\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441. \u042f\u043a\u0449\u043e \u0432\u0430\u0441 \u0446\u0456\u043a\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0456, \u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043f\u043e\u0434\u0438\u0432\u0438\u0442\u0438\u0441\u044f, \u044f\u043a \u043f\u0440\u0430\u0446\u044e\u0454 \u0440\u0443\u0448\u0456\u0439 V8 \u0443 Chrome. \u041d\u0430\u0439\u0433\u0456\u0440\u0448\u0435 \u0442\u0435, \u0449\u043e \u043a\u043e\u0436\u0435\u043d \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043e\u043f\u0442\u0438\u043c\u0456\u0437\u0443\u0454 JS \u043f\u043e-\u0441\u0432\u043e\u0454\u043c\u0443, \u0430 \u043f\u0440\u043e\u0446\u0435\u0441 \u043f\u0440\u0438\u0445\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0456\u0434 \u0432\u0430\u0441. \u0412 \u0446\u044c\u043e\u043c\u0443 \u043f\u043b\u0430\u043d\u0456 \u0432\u0438 \u0431\u0435\u0437\u0441\u0438\u043b\u0456.</p> <p>\u041a\u043e\u043c\u043f\u0456\u043b\u044c\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0454 \u0456\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0456\u0457. \u041e\u043f\u0435\u0440\u0430\u0446\u0456\u0439\u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0454 \u0457\u0457 \u0456 \u044f\u043a\u0449\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0432\u0430\u043b\u0456\u0434\u043d\u0430, \u0432\u043e\u043d\u0430 \u0432\u0438\u043a\u043e\u043d\u0443\u0454\u0442\u044c\u0441\u044f. \u0426\u0435 \u0432\u0435\u043b\u0438\u043a\u0430 \u0432\u0456\u0434\u043c\u0456\u043d\u043d\u0456\u0441\u0442\u044c. \u042f\u043a\u0449\u043e \u0432\u0438 \u0437\u0430\u0431\u0443\u043b\u0438 \u043a\u0440\u0430\u043f\u043a\u0443 \u0437 \u043a\u043e\u043c\u043e\u044e \u0432 \u043a\u0456\u043d\u0446\u0456 \u0440\u044f\u0434\u043a\u0430, \u0432\u0430\u0448 \u043a\u043e\u0434 \u0432\u0436\u0435 \u043d\u0435 \u0432\u0430\u043b\u0456\u0434\u043d\u0438\u0439 \u0442\u0430 \u043d\u0435 \u0441\u043a\u043e\u043c\u043f\u0456\u043b\u044e\u0454\u0442\u044c\u0441\u044f, \u0432\u0456\u043d \u0432\u0437\u0430\u0433\u0430\u043b\u0456 \u043d\u0435 \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443.</p> <p>\u0426\u0435 \u0441\u0443\u0432\u043e\u0440\u043e, \u0430\u043b\u0435 \u0446\u0435 \u0442\u0435, \u0447\u0438\u043c \u0454 \u0448\u0435\u0439\u0434\u0435\u0440: \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043e\u044e, \u0449\u043e \u043a\u043e\u043c\u043f\u0456\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u043d\u0430 GPU. \u041d\u0435 \u0431\u0456\u0439\u0442\u0435\u0441\u044f! \u041a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440 \u044f\u043a\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u0432\u0430\u0448\u043e\u0433\u043e \u043a\u043e\u0434\u0443, \u0441\u0442\u0430\u043d\u0435 \u0432\u0430\u0448\u0438\u043c \u043d\u0430\u0439\u043a\u0440\u0430\u0449\u0438\u043c \u0434\u0440\u0443\u0433\u043e\u043c. \u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0446\u0456\u0454\u0457 \u043a\u043d\u0438\u0433\u0438 \u0442\u0430 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u043a\u043e\u0434\u0443 \u0434\u0443\u0436\u0435 \u0434\u0440\u0443\u0436\u043d\u0456 \u0434\u043e \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430. \u0412\u043e\u043d\u0438 \u043f\u0456\u0434\u043a\u0430\u0436\u0443\u0442\u044c \u0432\u0430\u043c \u0434\u0435 \u0456 \u0447\u043e\u043c\u0443 \u043d\u0435 \u0432\u0434\u0430\u043b\u043e\u0441\u044f \u0441\u043a\u043e\u043c\u043f\u0456\u043b\u044e\u0432\u0430\u0442\u0438 \u0432\u0430\u0448\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443. \u041f\u043e\u0442\u0456\u043c, \u043f\u0456\u0441\u043b\u044f \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0438\u0445 \u0432\u0438\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044c, \u043a\u043e\u043b\u0438 \u0448\u0435\u0439\u0434\u0435\u0440 \u0431\u0443\u0434\u0435 \u0433\u043e\u0442\u043e\u0432\u0438\u0439 \u0434\u043e \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0446\u0456\u0457, \u0432\u0456\u043d \u043c\u0438\u0442\u0442\u0454\u0432\u043e \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0432\u043e\u0454\u0457 \u0440\u043e\u0431\u043e\u0442\u0438. \u0426\u0435 \u0447\u0443\u0434\u043e\u0432\u0438\u0439 \u0441\u043f\u043e\u0441\u0456\u0431 \u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u0456\u043d \u0434\u0443\u0436\u0435 \u043d\u0430\u043e\u0447\u043d\u0438\u0439 \u0456 \u0431\u0435\u0437\u043f\u0435\u0447\u043d\u0438\u0439, \u0431\u043e \u043d\u0430\u0441\u043f\u0440\u0430\u0432\u0434\u0456 \u0432\u0438 \u043d\u0456\u0447\u043e\u0433\u043e \u043d\u0435 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u043b\u0430\u043c\u0430\u0442\u0438.</p> <p>\u041e\u0441\u0442\u0430\u043d\u043d\u0454 \u0437\u0430\u0443\u0432\u0430\u0436\u0435\u043d\u043d\u044f: \u0448\u0435\u0439\u0434\u0435\u0440 \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 2 \u043f\u0440\u043e\u0433\u0440\u0430\u043c: \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430 \u0456 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430. \u042f\u043a\u0449\u043e \u043a\u043e\u0440\u043e\u0442\u043a\u043e, \u0442\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u0438\u0439 \u0448\u0435\u0439\u0434\u0435\u0440 \u0446\u0435 \u043f\u0435\u0440\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430, \u0449\u043e \u043e\u0442\u0440\u0438\u043c\u0443\u0454 \u043d\u0430 \u0432\u0445\u0456\u0434 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0456\u044e \u0442\u0430 \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u044e\u0454 \u0457\u0457 \u043d\u0430 \u0441\u0435\u0440\u0456\u044e \u043f\u0456\u043a\u0441\u0435\u043b\u0456\u0432 (\u0430\u0431\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0456\u0432). \u041f\u043e\u0442\u0456\u043c \u0432\u043e\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0454 \u0457\u0445 \u0434\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430 - \u0434\u0440\u0443\u0433\u043e\u0457 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438, \u044f\u043a\u0430 \u0432\u0438\u0440\u0456\u0448\u0438\u0442\u044c, \u044f\u043a\u0438\u043c \u043a\u043e\u043b\u044c\u043e\u0440\u043e\u043c \u043f\u043e\u0444\u0430\u0440\u0431\u0443\u0432\u0430\u0442\u0438 \u0446\u0456 \u043f\u0456\u043a\u0441\u0435\u043b\u0456. \u0414\u0430\u043d\u0430 \u043a\u043d\u0438\u0433\u0430 \u0437\u0434\u0435\u0431\u0456\u043b\u044c\u0448\u043e\u0433\u043e \u0437\u043e\u0441\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u0430 \u043d\u0430 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445. \u0423 \u0432\u0441\u0456\u0445 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0430\u0445 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0456\u044f \u0454 \u043f\u0440\u043e\u0441\u0442\u0438\u043c \u0447\u043e\u0442\u0438\u0440\u0438\u043a\u0443\u0442\u043d\u0438\u043a\u043e\u043c, \u044f\u043a\u0438\u0439 \u043e\u0445\u043e\u043f\u043b\u044e\u0454 \u0432\u0435\u0441\u044c \u0435\u043a\u0440\u0430\u043d.</p> <p>\u0413\u043e\u0442\u043e\u0432\u0456?</p> <p>\u041f\u043e\u0457\u0445\u0430\u043b\u0438!</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_2","title":"\u0421\u0438\u043b\u044c\u043d\u0456 \u0442\u0438\u043f\u0438","text":"<p>\u041a\u043e\u043b\u0438 \u0432\u0438 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0435 \u0437 JS \u0430\u0431\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0457 \u0456\u043d\u0448\u043e\u0457 \u043d\u0435\u0442\u0438\u043f\u0456\u0437\u043e\u0432\u0430\u043d\u043e\u0457 \u043c\u043e\u0432\u0438, \u0442\u0438\u043f\u0456\u0437\u0430\u0446\u0456\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u044f\u0432\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0432\u0430\u0441 \u0447\u0443\u0436\u043e\u0440\u0456\u0434\u043d\u043e\u044e \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0456\u0454\u044e, \u0449\u043e \u0441\u0442\u0430\u0454 \u043d\u0430\u0439\u0432\u0430\u0436\u0447\u0438\u043c \u043a\u0440\u043e\u043a\u043e\u043c \u0434\u043e GLSL. \u0422\u0438\u043f\u0456\u0437\u0430\u0446\u0456\u044f, \u044f\u043a \u0432\u0438\u043f\u043b\u0438\u0432\u0430\u0454 \u0437 \u043d\u0430\u0437\u0432\u0438, \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043d\u0430\u0434\u0430\u0432\u0430\u0442\u0438 \u0442\u0438\u043f \u0443\u0441\u0456\u043c \u0441\u0432\u043e\u0457\u043c \u0437\u043c\u0456\u043d\u043d\u0438\u043c \u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u044f\u043c. \u0426\u0435 \u0444\u0430\u043a\u0442\u0438\u0447\u043d\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u0441\u043b\u0456\u0432 <code>var</code> \u0430\u0431\u043e <code>let</code> \u0431\u0456\u043b\u044c\u0448\u0435 \u043d\u0435 \u0456\u0441\u043d\u0443\u0454. \u041f\u043e\u043b\u0456\u0446\u0456\u044f \u0434\u0443\u043c\u043e\u043a GLSL \u0441\u0442\u0435\u0440\u043b\u0430 \u0457\u0445 \u0456\u0437 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u0457 \u043c\u043e\u0432\u0438 \u0439 \u0432\u0438 \u0431\u0456\u043b\u044c\u0448\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0457\u0445 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438, \u0442\u043e\u043c\u0443 \u0449\u043e, \u043d\u0443... \u0457\u0445 \u043d\u0435 \u0456\u0441\u043d\u0443\u0454.</p> <p>\u0417\u0430\u043c\u0456\u0441\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0447\u0430\u0440\u0456\u0432\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 <code>var</code> \u0432\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u044f\u0432\u043d\u043e \u0432\u043a\u0430\u0437\u0430\u0442\u0438 \u0442\u0438\u043f \u043a\u043e\u0436\u043d\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457, \u044f\u043a\u0443 \u0432\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u0435, \u0442\u043e\u0434\u0456 \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440 \u0431\u0430\u0447\u0438\u0442\u0438\u043c\u0435 \u043b\u0438\u0448\u0435 \u0442\u0456 \u043e\u0431'\u0454\u043a\u0442\u0438 \u0442\u0430 \u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u0438, \u0437 \u044f\u043a\u0438\u043c\u0438 \u0432\u0456\u043d \u0432\u043c\u0456\u0454 \u0435\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u0432\u043e\u0434\u0438\u0442\u0438\u0441\u044f. \u041c\u0456\u043d\u0443\u0441, \u0449\u043e \u0432\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043a\u043b\u044e\u0447\u043e\u0432\u0435 \u0441\u043b\u043e\u0432\u043e <code>var</code> \u0456 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u044f\u0432\u043d\u043e \u0432\u043a\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u0432\u0441\u0456 \u0442\u0438\u043f\u0438, \u043f\u043e\u043b\u044f\u0433\u0430\u0454 \u0432 \u0442\u043e\u043c\u0443, \u0449\u043e \u0432\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u0442\u0438 \u0442\u0438\u043f\u0438 \u0443\u0441\u0456\u0445 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0456 \u0437\u043d\u0430\u0442\u0438 \u0457\u0445 \u0434\u043e\u0431\u0440\u0435. \u0411\u0443\u0434\u044c\u0442\u0435 \u0441\u043f\u043e\u043a\u0456\u0439\u043d\u0456, \u0457\u0445 \u043d\u0435\u0431\u0430\u0433\u0430\u0442\u043e \u0456 \u0432\u043e\u043d\u0438 \u0434\u043e\u0441\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0456 (GLSL \u0446\u0435 \u0432\u0430\u043c \u043d\u0435 Java-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a).</p> <p>\u0426\u0435 \u043c\u043e\u0436\u0435 \u0437\u0434\u0430\u0442\u0438\u0441\u044f \u0441\u0442\u0440\u0430\u0448\u043d\u0438\u043c, \u0430\u043b\u0435 \u0437\u0430\u0433\u0430\u043b\u043e\u043c \u0446\u0435 \u043d\u0435 \u0434\u0443\u0436\u0435 \u0432\u0456\u0434\u0440\u0456\u0437\u043d\u044f\u0454\u0442\u044c\u0441\u044f \u0432\u0456\u0434 \u0442\u043e\u0433\u043e, \u0449\u043e \u0432\u0438 \u0440\u043e\u0431\u0438\u0442\u0435 \u043d\u0430 JavaScript. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u044f\u043a\u0449\u043e \u0432\u0438 \u043c\u0430\u0454\u0442\u0435 <code>boolean</code>-\u0437\u043c\u0456\u043d\u043d\u0443, \u0442\u043e \u0432\u0438 \u043e\u0447\u0456\u043a\u0443\u0454\u0442\u0435, \u0449\u043e \u0432\u043e\u043d\u0430 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0442\u0438\u043c\u0435 \u043b\u0438\u0448\u0435 <code>true</code> \u0430\u0431\u043e <code>false</code> \u0456 \u043d\u0456\u0447\u043e\u0433\u043e \u0431\u0456\u043b\u044c\u0448\u0435. \u042f\u043a\u0449\u043e \u0437\u043c\u0456\u043d\u043d\u0430 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f <code>var uid = XXX;</code>, \u0442\u043e \u0432 \u043d\u0456\u0439 \u0432\u0456\u0440\u043e\u0433\u0456\u0434\u043d\u043e \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454\u0442\u044c\u0441\u044f \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0430 <code>var y = YYY;</code> \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043f\u043e\u0441\u0438\u043b\u0430\u043d\u043d\u044f\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u0440\u0430\u043f\u043a\u043e\u044e. \u0429\u043e \u0449\u0435 \u043a\u0440\u0430\u0449\u0435, \u0437\u0430\u0432\u0434\u044f\u043a\u0438 \u0441\u0438\u043b\u044c\u043d\u0438\u043c \u0442\u0438\u043f\u0430\u043c \u0432\u0438 \u043d\u0435 \u0432\u0438\u0442\u0440\u0430\u0447\u0430\u0442\u0438\u043c\u0435\u0442\u0435 \u0447\u0430\u0441 \u043d\u0430 \u0440\u043e\u0437\u0434\u0443\u043c\u0438 \u043f\u0440\u043e \u0442\u0435, \u0447\u0438 <code>X == Y</code> (\u0447\u0438 <code>typeof X == typeof Y</code>?, \u0447\u0438 <code>typeof X !== null &amp;&amp; Y...</code>). \u0412\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u043d\u0430\u0454\u0442\u0435 \u0446\u0435, \u0430 \u044f\u043a\u0449\u043e \u043d\u0456, \u0442\u043e \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440 \u0437\u043d\u0430\u0442\u0438\u043c\u0435 \u043d\u0430\u043f\u0435\u0432\u043d\u043e.</p> <p>\u041e\u0441\u044c \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0456 \u0442\u0438\u043f\u0438 (\u0441\u043a\u0430\u043b\u044f\u0440 \u043e\u043f\u0438\u0441\u0443\u0454 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443), \u044f\u043a\u0456 \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0432 GLSL: <code>bool</code> (\u0431\u0443\u043b\u0456\u0432 \u0442\u0438\u043f), <code>int</code> (\u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e), <code>float</code> (\u0447\u0438\u0441\u043b\u043e \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u0440\u0430\u043f\u043a\u043e\u044e). \u0404 \u0439 \u0456\u043d\u0448\u0456 \u0442\u0438\u043f\u0438, \u0430\u043b\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\u043e \u043f\u043e\u0441\u043f\u0456\u0448\u0430\u0442\u0438. \u041d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043a\u0430\u0437\u0443\u0454, \u044f\u043a \u043e\u0433\u043e\u043b\u043e\u0441\u0438\u0442\u0438 <code>vars</code> (\u0442\u0430\u043a, \u044f \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0432 \u0437\u0430\u0431\u043e\u0440\u043e\u043d\u0435\u043d\u0435 \u0441\u043b\u043e\u0432\u043e) \u0443 GLSL:</p> <pre><code>// \u043b\u043e\u0433\u0456\u0447\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\nJS: var b = true;               GLSL: bool b = true;\n\n// \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\nJS: var i = 1;                  GLSL: int i = 1;\n\n// \u0447\u0438\u0441\u043b\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u0440\u0430\u043f\u043a\u043e\u044e\nJS: var f = 3.14159;            GLSL: float f = 3.14159;\n</code></pre> <p>\u041d\u0435 \u0434\u0443\u0436\u0435 \u0432\u0430\u0436\u043a\u043e, \u043f\u0440\u0430\u0432\u0434\u0430? \u042f\u043a \u0437\u0433\u0430\u0434\u0443\u0432\u0430\u043b\u043e\u0441\u044f \u0432\u0438\u0449\u0435, \u0446\u0435 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u043e\u043b\u0435\u0433\u0448\u0443\u0454 \u0440\u043e\u0431\u043e\u0442\u0443, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u0438 \u043d\u0435 \u0432\u0438\u0442\u0440\u0430\u0447\u0430\u0454\u0442\u0435 \u0447\u0430\u0441 \u043d\u0430 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0443 \u0442\u0438\u043f\u0456\u0432 \u0434\u0430\u043d\u0438\u0445 \u0437\u043c\u0456\u043d\u043d\u0438\u0445. \u042f\u043a\u0449\u043e \u0446\u0435 \u0437\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043d\u0456\u0432\u043d\u0438\u043c, \u0442\u043e \u043f\u0430\u043c'\u044f\u0442\u0430\u0439\u0442\u0435, \u0449\u043e \u0432\u0438 \u0440\u043e\u0431\u0438\u0442\u0435 \u0446\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u0432\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u043b\u0430\u0441\u044f \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0448\u0432\u0438\u0434\u0448\u0435, \u043d\u0456\u0436 \u043d\u0430 JS.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#void","title":"void","text":"<p>\u0422\u0438\u043f <code>void</code> \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u043d\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 <code>null</code>. \u0412\u0456\u043d \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0432 \u044f\u043a\u043e\u0441\u0442\u0456 \u0442\u0438\u043f\u0443, \u044f\u043a\u0438\u0439 \u043c\u0430\u0454 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0442\u0438 \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u043b\u0438 \u0432\u0456\u043d \u043d\u0456\u0447\u043e\u0433\u043e \u043d\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454. \u0412\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0430\u0442\u0438 \u0439\u043e\u0433\u043e \u0437\u043c\u0456\u043d\u043d\u0438\u043c.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#boolean","title":"boolean","text":"<p>\u042f\u043a \u0432\u0430\u043c \u0432\u0456\u0434\u043e\u043c\u043e, \u043b\u043e\u0433\u0456\u0447\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0434\u0435\u0431\u0456\u043b\u044c\u0448\u043e\u0433\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432 \u0443\u043c\u043e\u0432\u043d\u0438\u0445 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430\u0445: \"<code>if (myBoolean == true) {...} else {...}</code>\". \u042f\u043a\u0449\u043e \u0443\u043c\u043e\u0432\u043d\u0435 \u0440\u043e\u0437\u0433\u0430\u043b\u0443\u0436\u0435\u043d\u043d\u044f \u0454 \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u043c \u043f\u0456\u0434\u0445\u043e\u0434\u043e\u043c \u0434\u043b\u044f CPU, \u0442\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u0435\u043b\u044c\u043d\u043e\u0457 \u043f\u0440\u0438\u0440\u043e\u0434\u0438 GLSL \u0446\u0435 \u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043d\u043d\u044f \u0454 \u043c\u0435\u043d\u0448 \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u0438\u043c. \u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0443\u043c\u043e\u0432\u043d\u0438\u0445 \u0433\u0430\u043b\u0443\u0436\u0435\u043d\u044c \u043d\u0430\u0432\u0456\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0454\u0442\u044c\u0441\u044f \u0443 \u0431\u0456\u043b\u044c\u0448\u043e\u0441\u0442\u0456 \u0432\u0438\u043f\u0430\u0434\u043a\u0456\u0432 \u0456 \u0443 \u043a\u043d\u0438\u0437\u0456 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043a\u0456\u043b\u044c\u043a\u0430 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u0456\u0432 \u0434\u043b\u044f \u0432\u0438\u0440\u0456\u0448\u0435\u043d\u043d\u044f \u0446\u044c\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_3","title":"\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0442\u0438\u043f\u0456\u0432","text":"<p>\u042f\u043a \u043a\u0430\u0437\u0430\u0432 \u0411\u043e\u0440\u043e\u043c\u0438\u0440, \"\u043d\u0435 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0437\u044f\u0442\u0438 \u0442\u0430 \u0441\u043a\u043e\u043c\u0431\u0456\u043d\u0443\u0432\u0430\u0442\u0438 \u0442\u0438\u043f\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u0438\". \u041d\u0430 \u0432\u0456\u0434\u043c\u0456\u043d\u0443 \u0432\u0456\u0434 JavaScript, GLSL \u043d\u0435 \u0434\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u0432\u0430\u043c \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u043c\u0456\u0436 \u0437\u043c\u0456\u043d\u043d\u0438\u043c\u0438 \u0440\u0456\u0437\u043d\u0438\u0445 \u0442\u0438\u043f\u0456\u0432.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0446\u0435\u0439 \u043a\u043e\u0434:</p> <pre><code>int     i = 2;\nfloat   f = 3.14159;\n\n// \u0441\u043f\u0440\u043e\u0431\u0430 \u043f\u043e\u043c\u043d\u043e\u0436\u0438\u0442\u0438 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u0440\u0430\u043f\u043a\u043e\u044e\nfloat   r = i * f;\n</code></pre> <p>\u043d\u0435 \u0441\u043f\u0440\u0430\u0446\u044e\u0454, \u0442\u043e\u043c\u0443 \u0449\u043e \u0432\u0438 \u043d\u0430\u043c\u0430\u0433\u0430\u0454\u0442\u0435\u0441\u044f \u0441\u0445\u0440\u0435\u0441\u0442\u0438\u0442\u0438 \u043a\u043e\u0442\u0430 \u0456 \u0436\u0438\u0440\u0430\u0444\u0430. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0432\u0438\u0440\u0456\u0448\u0443\u0454\u0442\u044c\u0441\u044f \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0442\u0438\u043f\u0443, \u0449\u043e \u0437\u043c\u0443\u0441\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440 \u043f\u043e\u0432\u0456\u0440\u0438\u0442\u0438, \u0449\u043e <code>i</code> \u043c\u0430\u0454 \u0442\u0438\u043f <code>float</code> \u0431\u0435\u0437 \u0444\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0457 \u0437\u043c\u0456\u043d\u0438 \u0442\u0438\u043f\u0443 <code>i</code>.</p> <pre><code>// \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0442\u0438\u043f\u0443 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457 'i' \u0434\u043e float\nfloat   r = float(i) * f;\n</code></pre> <p>\u0426\u0435 \u044f\u043a \u0432\u0434\u044f\u0433\u0442\u0438 \u043a\u043e\u0442\u0430 \u0443 \u0448\u043a\u0456\u0440\u0443 \u0436\u0438\u0440\u0430\u0444\u0430 \u0456 \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438\u043c\u0435 \u043d\u0430\u043b\u0435\u0436\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c (\u0437\u043c\u0456\u043d\u043d\u0430 <code>r</code> \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0442\u0438\u043c\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043d\u043e\u0436\u0435\u043d\u043d\u044f <code>i</code> \u043d\u0430 <code>f</code>).</p> <p>\u041c\u043e\u0436\u043d\u0430 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0439 \u0437\u0456 \u0437\u0433\u0430\u0434\u0430\u043d\u0438\u0445 \u0432\u0438\u0449\u0435 \u0442\u0438\u043f\u0456\u0432 \u0434\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0433\u043e \u0456\u043d\u0448\u043e\u0433\u043e. \u0417\u0430\u0443\u0432\u0430\u0436\u0442\u0435, \u0449\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f <code>float</code> \u0434\u043e <code>int</code> \u043f\u043e\u0432\u043e\u0434\u0438\u0442\u0438\u043c\u0435\u0442\u044c\u0441\u044f \u044f\u043a <code>Math.floor()</code>, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u0438\u0434\u0430\u043b\u044f\u0442\u0438\u043c\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u0456\u0441\u043b\u044f \u0440\u0443\u0445\u043e\u043c\u043e\u0457 \u043a\u0440\u0430\u043f\u043a\u0438. \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f <code>float</code> \u0430\u0431\u043e <code>int</code> \u0434\u043e <code>bool</code> \u043f\u043e\u0432\u0435\u0440\u043d\u0435 <code>true</code>, \u044f\u043a\u0449\u043e \u0437\u043c\u0456\u043d\u043d\u0430 \u043d\u0435 \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043d\u0443\u043b\u044e.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_4","title":"\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440","text":"<p>\u0422\u0438\u043f\u0438 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0442\u0430\u043a\u043e\u0436 \u0454 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0456\u0432 \u0434\u043b\u044f \u0441\u0430\u043c\u0438\u0445 \u0441\u0435\u0431\u0435. \u0417\u043c\u0456\u043d\u043d\u0443 <code>float</code> \u0444\u0430\u043a\u0442\u0438\u0447\u043d\u043e \u043c\u043e\u0436\u043d\u0430 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u0442\u0438 \u044f\u043a <code>\u0435\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440</code> \u043a\u043b\u0430\u0441\u0443 <code>float</code>.</p> <p>\u041d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f \u0440\u0456\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u0430\u043b\u0456\u0434\u043d\u0456:</p> <pre><code>int     i = 1;\nint     i = int(1);\nint     i = int(1.9995);\nint     i = int(true);\n</code></pre> <p>\u0426\u0435 \u043c\u043e\u0436\u0435 \u0437\u0434\u0430\u0442\u0438\u0441\u044f \u043d\u0435 \u0434\u0443\u0436\u0435 \u0441\u0445\u043e\u0436\u0438\u043c \u043d\u0430 <code>\u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0456</code> \u0442\u0438\u043f\u0438 \u0442\u0430 \u043d\u0435 \u0434\u0443\u0436\u0435 \u0432\u0456\u0434\u0440\u0456\u0437\u043d\u044f\u0454\u0442\u044c\u0441\u044f \u0432\u0456\u0434 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0442\u0438\u043f\u0456\u0432, \u0430\u043b\u0435 \u0443 \u0446\u044c\u043e\u043c\u0443 \u0437'\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u0431\u0456\u043b\u044c\u0448\u0435 \u0441\u0435\u043d\u0441\u0443, \u043a\u043e\u043b\u0438 \u0434\u0456\u0439\u0434\u0435\u043c\u043e \u0434\u043e \u0440\u043e\u0437\u0434\u0456\u043b\u0443 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f.</p> <p>\u041e\u0442\u0436\u0435, \u043c\u0438 \u043f\u043e\u0437\u043d\u0430\u0439\u043e\u043c\u0438\u043b\u0438\u0441\u044f \u0437 \u0442\u0440\u044c\u043e\u043c\u0430 <code>\u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u043d\u0438\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438</code>, \u0431\u0435\u0437 \u044f\u043a\u0438\u0445 \u0432\u0438 \u043d\u0435 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0436\u0438\u0442\u0438, \u0430\u043b\u0435, \u0437\u0432\u0456\u0441\u043d\u043e, GLSL \u043c\u0430\u0454 \u0439 \u0456\u043d\u0448\u0456.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_5","title":"\u0412\u0435\u043a\u0442\u043e\u0440\u0438","text":"<p>\u0423 Javascript, \u044f\u043a \u0456 \u0432 GLSL, \u0432\u0430\u043c \u0437\u043d\u0430\u0434\u043e\u0431\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u043a\u043b\u0430\u0434\u043d\u0456\u0448\u0456 \u0441\u043f\u043e\u0441\u043e\u0431\u0438 \u043c\u0430\u043d\u0456\u043f\u0443\u043b\u044f\u0446\u0456\u0457 \u0434\u0430\u043d\u0438\u043c\u0438, \u043e\u0441\u044c \u0434\u0435 <code>\u0432\u0435\u043a\u0442\u043e\u0440\u0438</code> \u0441\u0442\u0430\u043d\u0443\u0442\u044c \u0443 \u043f\u0440\u0438\u0433\u043e\u0434\u0456. \u042f \u043f\u0440\u0438\u043f\u0443\u0441\u043a\u0430\u044e, \u0449\u043e \u0432\u0430\u043c \u0432\u0436\u0435 \u0434\u043e\u0432\u043e\u0434\u0438\u043b\u043e\u0441\u044f \u043f\u0438\u0441\u0430\u0442\u0438 \u043a\u043b\u0430\u0441 <code>Point</code> \u043d\u0430 JavaScript, \u0434\u043b\u044f \u0443\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u044c <code>x</code> \u0456 <code>y</code>, \u0449\u043e \u0432\u0438\u0433\u043b\u044f\u0434\u0430\u0432 \u044f\u043a\u043e\u0441\u044c \u0442\u0430\u043a:</p> <pre><code>// \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443:\nvar Point = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n}\n\n// \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0435\u043a\u0437\u0435\u043c\u043b\u044f\u0440\u0443:\nvar p = new Point(100, 100);\n</code></pre> <p>\u042f\u043a \u043c\u0438 \u0449\u043e\u0439\u043d\u043e \u043f\u043e\u0431\u0430\u0447\u0438\u043b\u0438, \u0446\u0435 \u0414\u0423\u0416\u0415 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430 \u0414\u0423\u0416\u0415 \u0431\u0430\u0433\u0430\u0442\u044c\u043e\u0445 \u0440\u0456\u0432\u043d\u044f\u0445! \u041f\u043e-\u043f\u0435\u0440\u0448\u0435, \u043a\u043b\u044e\u0447\u043e\u0432\u0435 \u0441\u043b\u043e\u0432\u043e <code>var</code>, \u0434\u0430\u043b\u0456 \u0436\u0430\u0445\u043b\u0438\u0432\u0435 <code>this</code>, \u043f\u043e\u0442\u0456\u043c \u0437\u043d\u043e\u0432\u0443 \u043d\u0435\u0442\u0438\u043f\u0456\u0437\u043e\u0432\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>x</code> \u0456 <code>y</code>... \u041d\u0456, \u0446\u0435 \u043d\u0435 \u0437\u0430\u043f\u0440\u0430\u0446\u044e\u0454 \u0432 \u0448\u0435\u0439\u0434\u0435\u0440\u043b\u0435\u043d\u0434\u0456.</p> <p>\u041d\u0430\u0442\u043e\u043c\u0456\u0441\u0442\u044c GLSL \u043d\u0430\u0434\u0430\u0454 \u0432\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438 \u0434\u0430\u043d\u0438\u0445 \u0434\u043b\u044f \u0457\u0445 \u0433\u0440\u0443\u043f\u0443\u0432\u0430\u043d\u043d\u044f, \u0430 \u0441\u0430\u043c\u0435:</p> <ul> <li><code>bvec2</code>: 2D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f bool, <code>bvec3</code>: 3D  \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f bool, <code>bvec4</code>: 4D  \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f bool</li> <li><code>ivec2</code>: 2D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f int, <code>ivec3</code>: 3D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f int, <code>ivec4</code>: 4D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f int</li> <li><code>vec2</code>: 2D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f float, <code>vec3</code>: 3D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f float, <code>vec4</code>: 4D \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f float</li> </ul> <p>\u0412\u0438 \u0432\u0456\u0434\u0440\u0430\u0437\u0443 \u043f\u043e\u043c\u0456\u0442\u0438\u043b\u0438, \u0449\u043e \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u0443 \u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u0438\u0439 \u0442\u0438\u043f. \u0417 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e\u0433\u043e \u0432\u0438\u0449\u0435, \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0432\u0438\u0441\u043d\u043e\u0432\u043e\u043a, \u0449\u043e <code>bvec2</code> \u0431\u0443\u0434\u0435 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0442\u0438\u043f\u0443 <code>bool</code>, \u0430 <code>vec4</code> \u2014 \u0447\u043e\u0442\u0438\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>float</code>.</p> <p>\u0422\u0430\u043a\u043e\u0436 \u0432\u0435\u043a\u0442\u043e\u0440\u0438 \u0432\u0432\u043e\u0434\u044f\u0442\u044c \u0442\u0430\u043a\u0443 \u0440\u0456\u0447 \u044f\u043a \u0432\u0438\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c \u0430\u0431\u043e \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c. \u0426\u0435 \u043d\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e 2D-\u0432\u0435\u043a\u0442\u043e\u0440 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043c\u0430\u043b\u044e\u0432\u0430\u043d\u043d\u0456 2D-\u0433\u0440\u0430\u0444\u0456\u043a\u0438, \u0430 3D-\u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0440\u0438 \u043c\u0430\u043b\u044e\u0432\u0430\u043d\u043d\u0456 3D-\u0441\u0446\u0435\u043d. \u041d\u0456! \u0429\u043e \u0432 \u0442\u0430\u043a\u043e\u043c\u0443 \u0440\u0430\u0437\u0456 \u0431\u0443\u0434\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u0438 4D-\u0432\u0435\u043a\u0442\u043e\u0440? (\u043d\u0443 \u043d\u0430\u0441\u043f\u0440\u0430\u0432\u0434\u0456 \u0446\u0435 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0442\u0435\u0441\u0435\u0440\u0430\u043a\u0442\u043e\u043c \u0430\u0431\u043e \u0433\u0456\u043f\u0435\u0440\u043a\u0443\u0431\u043e\u043c)</p> <p>\u0420\u043e\u0437\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0456 \u0442\u0438\u043f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0430\u0431\u043e \u0437\u043c\u0456\u043d\u043d\u0438\u0445, \u0449\u043e \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u044e\u0442\u044c\u0441\u044f \u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u0456:</p> <pre><code>// \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e \u0434\u0432\u043e\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\nbvec2 b2 = bvec2(true, false);\n\n// \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e \u0442\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\nivec3 i3 = ivec3(0, 0, 1);\n\n// \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e \u0447\u043e\u0442\u0438\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u043e\u043c\u043e\u044e\nvec4 v4 = vec4(0.0, 1.0, 2.0, 1.0);\n</code></pre> <p><code>b2</code> \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0434\u0432\u0430 \u0440\u0456\u0437\u043d\u0438\u0445 \u0431\u0443\u043b\u0435\u0432\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, <code>i3</code> - 3 \u0440\u0456\u0437\u043d\u0456 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0430 <code>v4</code> - 4 \u0440\u0456\u0437\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u043e\u043c\u043e\u044e.</p> <p>\u0410\u043b\u0435 \u044f\u043a \u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0438\u0441\u044f \u0434\u043e \u0446\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c? \u0423 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 <code>\u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432</code> \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0430: \u0434\u043b\u044f \"<code>float f = 1.2;</code>\", \u0437\u043c\u0456\u043d\u043d\u0430 <code>f</code> \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>1.2</code>. \u0417 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0446\u0435 \u0442\u0440\u043e\u0445\u0438 \u0456\u043d\u0430\u043a\u0448\u0435 \u0456 \u0434\u043e\u0432\u043e\u043b\u0456 \u043a\u0440\u0430\u0441\u0438\u0432\u043e.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#-","title":"\u0430\u043a\u0441\u0435\u0441\u043e\u0440\u0438 - \u0434\u043e\u0441\u0442\u0443\u043f\u0438 \u0434\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432","text":"<p>\u0406\u0441\u043d\u0443\u044e\u0442\u044c \u0440\u0456\u0437\u043d\u0456 \u0441\u043f\u043e\u0441\u043e\u0431\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0434\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u044c</p> <pre><code>// \u0441\u0442\u0432\u043e\u0440\u0438\u043c\u043e \u0447\u043e\u0442\u0438\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0442\u0438\u043f\u0443 float\nvec4 v4 = vec4(0.0, 1.0, 2.0, 3.0);\n</code></pre> <p>\u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u043a\u043e\u0436\u043d\u0435 \u0437 4-\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c, \u043c\u043e\u0436\u043d\u0430 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c:</p> <pre><code>float x = v4.x;     // x = 0.0\nfloat y = v4.y;     // y = 1.0\nfloat z = v4.z;     // z = 2.0\nfloat w = v4.w;     // w = 3.0\n</code></pre> <p>\u041f\u0440\u043e\u0441\u0442\u043e \u0456 \u043b\u0435\u0433\u043a\u043e. \u041d\u0430\u0432\u0435\u0434\u0435\u043d\u0456 \u043d\u0438\u0436\u0447\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u043f\u043e\u043a\u0430\u0437\u0443\u044e\u0442\u044c \u0456\u043d\u0448\u0456 \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0456 \u0441\u043f\u043e\u0441\u043e\u0431\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0434\u043e \u0446\u0438\u0445 \u0434\u0430\u043d\u0438\u0445:</p> <pre><code>float x =   v4.x    =   v4.r    =   v4.s    =   v4[0];     // x = 0.0\nfloat y =   v4.y    =   v4.g    =   v4.t    =   v4[1];     // y = 1.0\nfloat z =   v4.z    =   v4.b    =   v4.p    =   v4[2];     // z = 2.0\nfloat w =   v4.w    =   v4.a    =   v4.q    =   v4[3];     // w = 3.0\n</code></pre> <p>\u041a\u043c\u0456\u0442\u043b\u0438\u0432\u0438\u0439 \u0447\u0438\u0442\u0430\u0447 \u043c\u0456\u0433 \u043f\u043e\u043c\u0456\u0442\u0438\u0442\u0438 \u0442\u0440\u0438 \u0440\u0435\u0447\u0456: * <code>X</code>, <code>Y</code>, <code>Z</code>, <code>W</code> \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432 3D-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f 3D-\u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 * <code>R</code>, <code>G</code>, <code>B</code>, <code>A</code> \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0434\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u043b\u044c\u043e\u0440\u0456\u0432 \u0456 \u0430\u043b\u044c\u0444\u0430-\u043a\u0430\u043d\u0430\u043b\u0443 * <code>[0]</code>, <code>[1]</code>, <code>[2]</code>, <code>[3]</code> \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u043c\u0438 \u043c\u043e\u0436\u0435\u043c\u043e \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u0441\u044f \u0434\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0447\u0435\u0440\u0435\u0437 \u0456\u043d\u0434\u0435\u043a\u0441\u0438</p> <p>\u0422\u043e\u0436 \u0437\u0430\u043b\u0435\u0436\u043d\u043e \u0432\u0456\u0434 \u0442\u043e\u0433\u043e, \u0447\u0438 \u043f\u0440\u0430\u0446\u044e\u0454\u0442\u0435 \u0432\u0438 \u0437 \u0434\u0432\u043e- \u0447\u0438 \u0442\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u043c\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438, \u043a\u043e\u043b\u044c\u043e\u0440\u043e\u043c \u0437 \u0430\u043b\u044c\u0444\u0430-\u043a\u0430\u043d\u0430\u043b\u043e\u043c \u0447\u0438 \u0431\u0435\u0437 \u043d\u044c\u043e\u0433\u043e, \u0430\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0437 \u0434\u0435\u044f\u043a\u0438\u043c\u0438 \u0434\u043e\u0432\u0456\u043b\u044c\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438, \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0431\u0440\u0430\u0442\u0438 \u043d\u0430\u0439\u0431\u0456\u043b\u044c\u0448 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u0456 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u0430. \u0417\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0434\u0432\u043e\u0432\u0438\u043c\u0456\u0440\u043d\u0456 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0438 (\u0432 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u043c\u0443 \u0441\u0435\u043d\u0441\u0456) \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u044e\u0442\u044c\u0441\u044f \u044f\u043a <code>vec2</code>, <code>vec3</code> \u0430\u0431\u043e <code>vec4</code>, \u043a\u043e\u043b\u044c\u043e\u0440\u0438 \u044f\u043a <code>vec3</code> \u0430\u0431\u043e <code>vec4</code>, \u044f\u043a\u0449\u043e \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0430 \u043d\u0435\u043f\u0440\u043e\u0437\u043e\u0440\u0456\u0441\u0442\u044c. \u0410\u043b\u0435, \u0432 \u0446\u0456\u043b\u043e\u043c\u0443, \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u044c \u043d\u0430 \u0442\u0435 \u044f\u043a \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0438 \u043d\u0435\u043c\u0430\u0454. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u044f\u043a\u0449\u043e \u0432\u0438 \u0445\u043e\u0447\u0435\u0442\u0435 \u0437\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043b\u0438\u0448\u0435 \u043e\u0434\u043d\u0435 \u043b\u043e\u0433\u0456\u0447\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432 <code>bvec4</code>, \u0446\u0435 \u043c\u043e\u0436\u043b\u0438\u0432\u043e, \u0430\u043b\u0435 \u0431\u0443\u0434\u0435 \u043c\u0430\u0440\u043d\u043e\u044e \u0432\u0438\u0442\u0440\u0430\u0442\u043e\u044e \u043f\u0430\u043c'\u044f\u0442\u0456.</p> <p>\u041f\u0440\u0438\u043c\u0456\u0442\u043a\u0430: \u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043a\u043e\u043b\u044c\u043e\u0440\u0456\u0432 (<code>R</code>, <code>G</code>, <code>B</code>, <code>A</code>) \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456, \u0442\u043e\u0431\u0442\u043e \u0432\u0430\u0440\u0456\u044e\u044e\u0442\u044c\u0441\u044f \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 \u0432\u0456\u0434 0 \u0434\u043e 1, \u0430 \u043d\u0435 \u0432\u0456\u0434 0 \u0434\u043e 0xFF, \u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043d\u0438\u0445 \u043a\u0440\u0430\u0449\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0442\u0438\u043f float <code>vec4</code>, \u043d\u0456\u0436 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0442\u0438\u043f <code>ivec4</code>.</p> <p>\u0412\u0436\u0435 \u043c\u0430\u0454\u043c\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043f\u043e\u0447\u0430\u0442\u043e\u043a, \u0430\u043b\u0435 \u0440\u0443\u0448\u0430\u0439\u043c\u043e \u0434\u0430\u043b\u0456!</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_6","title":"\u0437\u043c\u0456\u0448\u0443\u0432\u0430\u043d\u043d\u044f","text":"<p>\u0417 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0431\u0456\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0430 \u0440\u0430\u0437. \u0421\u043a\u0430\u0436\u0456\u043c\u043e, \u0456\u0437 <code>vec4</code> \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0456 \u043b\u0438\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>X</code> \u0456 <code>Y</code>. \u0423 JavaScript \u0432\u0430\u043c \u0434\u043e\u0432\u0435\u043b\u043e\u0441\u044f \u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0449\u043e\u0441\u044c \u043f\u043e\u0434\u0456\u0431\u043d\u0435:</p> <pre><code>var needles = [0, 1]; // \u0440\u043e\u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f 'x' \u0456 'y' \u0432 \u043d\u0430\u0448\u0456\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0456 \u0434\u0430\u043d\u0438\u0445\nvar a = [0, 1, 2, 3]; // \u043d\u0430\u0448\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u0438\u0445 'vec4'\nvar b = a.filter(function(val, i, array) {\n  return needles.indexOf(array.indexOf(val)) != -1;\n});\n// b = [0, 1]\n\n// \u0430\u0431\u043e \u0431\u0456\u043b\u044c\u0448 \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e:\nvar needles = [0, 1];\nvar a = [0, 1, 2, 3]; // \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u0438\u0445 'vec4'\nvar b = [a[needles[0]], a[needles[1]]]; // b = [0, 1]\n</code></pre> <p>\u0412\u0438\u0433\u043b\u044f\u0434\u0430\u0454 \u043f\u043e\u0442\u0432\u043e\u0440\u043d\u043e. \u0423 GLSL \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0446\u0456 \u0434\u0430\u043d\u0456 \u0442\u0430\u043a:</p> <pre><code>// \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e 4D-\u0432\u0435\u043a\u0442\u043e\u0440 \u0442\u0438\u043f\u0443 float\nvec4 v4 = vec4(0.0, 1.0, 2.0, 3.0);\n\n// \u0456 \u043e\u0434\u043d\u043e\u0447\u0430\u0441\u043d\u043e \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u043b\u0438\u0448\u0435 X \u0442\u0430 Y\nvec2 xy = v4.xy; // xy = vec2(0.0, 1.0);\n</code></pre> <p>\u0429\u043e \u0446\u0435 \u0449\u043e\u0439\u043d\u043e \u0441\u0442\u0430\u043b\u043e\u0441\u044f?! \u041a\u043e\u043b\u0438 \u0432\u0438 \u043e\u0431'\u0454\u0434\u043d\u0443\u0454\u0442\u0435 \u0430\u043a\u0441\u0435\u0441\u043e\u0440\u0438, GLSL \u0435\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u044c, \u044f\u043a\u0456 \u0432\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u043b\u0438, \u0443 \u043d\u0430\u0439\u0431\u0456\u043b\u044c\u0448 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u043c\u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0456. \u0422\u043e\u0436 \u0442\u0443\u0442 \u0432\u0435\u043a\u0442\u043e\u0440 \u2014 \u0446\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u0438\u0445 \u0456\u0437 \u0434\u043e\u0432\u0456\u043b\u044c\u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c, \u0441\u0445\u043e\u0436\u0438\u0439 \u043d\u0430 \u043c\u0430\u0441\u0438\u0432 \u044f\u043a \u0443 JavaScript. \u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0435 \u0442\u0456\u043b\u044c\u043a\u0438 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u0438\u0445, \u0430\u043b\u0435 \u0456 \u0432\u043a\u0430\u0437\u0430\u0442\u0438 \u0457\u0445 \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0443 \u044f\u043a\u043e\u043c\u0443 \u0432\u043e\u043d\u0438 \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0456. \u041d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u0437\u043c\u0456\u043d\u044e\u0454 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430:</p> <pre><code>// \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e \u0447\u043e\u0442\u0438\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0442\u0438\u043f\u0443 float: R,G,B,A\nvec4 color = vec4(0.2, 0.8, 0.0, 1.0);\n\n// \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0438 \u043a\u043e\u043b\u044c\u043e\u0440\u0443 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 A,B,G,R\nvec4 backwards = color.abgr; // backwards = vec4(1.0, 0.0, 0.8, 0.2);\n</code></pre> <p>\u0406, \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u043e, \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438 \u0442\u043e\u0439 \u0441\u0430\u043c\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043a\u0456\u043b\u044c\u043a\u0430 \u0440\u0430\u0437\u0456\u0432:</p> <pre><code>// \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e \u0447\u043e\u0442\u0438\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0442\u0438\u043f\u0443 float: R,G,B,A\nvec4 color = vec4(0.2, 0.8, 0.0, 1.0);\n\n// \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e vec3 \u0437 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438 GAG \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 \u043a\u0430\u043d\u0430\u043b\u0456\u0432 G \u0456 A \u0437 \u043f\u043e\u0447\u0430\u0442\u043a\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043b\u044c\u043e\u0440\u0443\nvec3 GAG = color.gag; // GAG = vec4(0.8, 1.0, 0.8);\n</code></pre> <p>\u0426\u0435 \u043d\u0430\u0434\u0437\u0432\u0438\u0447\u0430\u0439\u043d\u043e \u0437\u0440\u0443\u0447\u043d\u043e \u0434\u043b\u044f \u043e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0447\u0430\u0441\u0442\u0438\u043d \u0432\u0435\u043a\u0442\u043e\u0440\u0443, \u0432\u0438\u0434\u0456\u043b\u0435\u043d\u043d\u044f \u043b\u0438\u0448\u0435 rgb-\u043a\u0430\u043d\u0430\u043b\u0456\u0432 \u0456\u0437 \u043a\u043e\u043b\u044c\u043e\u0440\u0443 RGBA \u0442\u043e\u0449\u043e.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_7","title":"\u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f","text":"<p>\u0423 \u0440\u043e\u0437\u0434\u0456\u043b\u0456 \u0442\u0438\u043f\u0456\u0432 \u044f \u0437\u0433\u0430\u0434\u0443\u0432\u0430\u0432 \u043f\u0440\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0456 \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f. \u0414\u043b\u044f \u0442\u0438\u0445, \u0445\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0454, \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0430\u0431\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u043e\u0437\u043d\u0430\u0447\u0430\u0454 '\u0437\u043c\u0456\u043d\u0443 \u043f\u043e\u0432\u0435\u0434\u0456\u043d\u043a\u0438 \u0437\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0430\u0431\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0437\u0430\u043b\u0435\u0436\u043d\u043e \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u0456\u0432/\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432'. \u0412 JavaScript \u043d\u0435\u043c\u0430\u0454 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f, \u0442\u043e\u043c\u0443 \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0432\u043e\u043d\u043e \u043c\u043e\u0436\u0435 \u0437\u0434\u0430\u0442\u0438\u0441\u044f \u0442\u0440\u043e\u0445\u0438 \u0434\u0438\u0432\u043d\u0438\u043c, \u0430\u043b\u0435 \u044f \u0432\u043f\u0435\u0432\u043d\u0435\u043d\u0438\u0439, \u0449\u043e \u044f\u043a \u0442\u0456\u043b\u044c\u043a\u0438 \u0432\u0438 \u0437\u0432\u0438\u043a\u043d\u0435\u0442\u0435 \u0434\u043e \u043d\u044c\u043e\u0433\u043e, \u0442\u043e \u0431\u0443\u0434\u0435\u0442\u0435 \u0434\u0438\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f, \u0447\u043e\u043c\u0443 \u0446\u0435 \u043d\u0435 \u0440\u0435\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u043e \u0432 JS (\u043a\u043e\u0440\u043e\u0442\u043a\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c - \u0442\u0438\u043f\u0456\u0437\u0430\u0446\u0456\u044f).</p> <p>\u041d\u0430\u0439\u043f\u0440\u043e\u0441\u0442\u0456\u0448\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0432\u0438\u0433\u043b\u044f\u0434\u0430\u0454 \u0442\u0430\u043a:</p> <pre><code>vec2 a = vec2(1.0, 1.0);\nvec2 b = vec2(1.0, 1.0);\n// \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u0435 \u0434\u043e\u0434\u0430\u0432\u0430\u043d\u043d\u044f\nvec2 c = a + b;     // c = vec2(2.0, 2.0);\n</code></pre> <p>\u0429\u041e? \u041e\u0442\u0436\u0435, \u043c\u043e\u0436\u043d\u0430 \u0434\u043e\u0434\u0430\u0432\u0430\u0442\u0438 \u0441\u0443\u0442\u043d\u043e\u0441\u0442\u0456, \u044f\u043a\u0456 \u043d\u0435 \u0454 \u0447\u0438\u0441\u043b\u0430\u043c\u0438?!</p> <p>\u0421\u0430\u043c\u0435 \u0442\u0430\u043a. \u0422\u0430\u043a\u043e\u0436 \u0446\u0435 \u0441\u0442\u043e\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u0432\u0441\u0456\u0445 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 (<code>+</code>, <code>-</code>, <code>*</code> \u0456 <code>/</code>), \u0430\u043b\u0435 \u0446\u0435 \u0442\u0456\u043b\u044c\u043a\u0438 \u043f\u043e\u0447\u0430\u0442\u043e\u043a. \u0420\u043e\u0437\u0433\u043b\u044f\u043d\u0435\u043c\u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442:</p> <pre><code>vec2 a = vec2(0.0, 0.0);\nvec2 b = vec2(1.0, 1.0);\n// \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u0438\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\nvec4 c = vec4(a, b);         // c = vec4(0.0, 0.0, 1.0, 1.0);\n</code></pre> <p>\u041c\u0438 \u0441\u0442\u0432\u043e\u0440\u0438\u043b\u0438 <code>vec4</code> \u0437 \u0434\u0432\u043e\u0445 <code>vec2</code>. \u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c \u043d\u043e\u0432\u0438\u0439 <code>vec4</code> \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0432 <code>a.x</code> \u0456 <code>a.y</code> \u044f\u043a <code>X</code>\u0456 <code>Y</code> \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0438 \u0442\u0430 <code>b.x</code> \u0456 <code>b.y</code> \u044f\u043a <code>Z</code> \u0456 <code>W</code> \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0438 \u0434\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 <code>c</code>.</p> <p>\u041e\u0441\u044c \u0449\u043e \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f, \u043a\u043e\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0442\u044f \u0440\u0456\u0437\u043d\u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432, \u0443 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0446\u0435 \u0431\u0443\u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 <code>vec4</code>. \u0426\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u0432 \u043e\u0434\u043d\u0456\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456 \u043c\u043e\u0436\u0435 \u0441\u043f\u0456\u0432\u0456\u0441\u043d\u0443\u0432\u0430\u0442\u0438 \u0431\u0430\u0433\u0430\u0442\u043e \u0432\u0435\u0440\u0441\u0456\u0439 \u043e\u0434\u043d\u043e\u0433\u043e \u0456 \u0442\u043e\u0433\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u0437 \u0440\u0456\u0437\u043d\u043e\u044e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u043e\u044e. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0443\u0441\u0456 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f \u0454 \u0432\u0430\u043b\u0456\u0434\u043d\u0438\u043c\u0438:</p> <pre><code>vec4 a = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 a = vec4(1.0); // x, y, z, w - \u0443\u0441\u0456 \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u044e\u0442\u044c 1.0\nvec4 a = vec4(v2, float, v4); // vec4(v2.x, v2.y, float, v4.x);\nvec4 a = vec4(v3, float); // vec4(v3.x, v3.y, v3.z, float);\n\u0442\u043e\u0449\u043e\n</code></pre> <p>\u0404\u0434\u0438\u043d\u0435 \u043f\u0440\u043e \u0449\u043e \u0432\u0438 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043f\u043e\u043f\u0456\u043a\u043b\u0443\u0432\u0430\u0442\u0438\u0441\u044f, \u0442\u0430\u043a \u0446\u0435 \u043f\u0440\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e\u0457 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u0432\u043d\u0435\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0443.</p> <p>\u041d\u0430\u0440\u0435\u0448\u0442\u0456, \u0432\u0438 \u0442\u0430\u043a\u043e\u0436 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0443\u0432\u0430\u0442\u0438 \u0432\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0443 \u0432\u0430\u0448\u0456\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456, \u0449\u043e\u0431 \u0432\u043e\u043d\u0438 \u043c\u043e\u0433\u043b\u0438 \u043f\u0440\u0438\u0439\u043c\u0430\u0442\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438, \u0434\u043b\u044f \u044f\u043a\u0438\u0445 \u043d\u0435 \u0431\u0443\u043b\u0438 \u0440\u043e\u0437\u0440\u043e\u0431\u043b\u0435\u043d\u0456 (\u0445\u043e\u0447\u0430 \u0446\u0435 \u043d\u0435 \u043f\u043e\u0432\u0438\u043d\u043d\u043e \u0442\u0440\u0430\u043f\u043b\u044f\u0442\u0438\u0441\u044f \u0437\u0430\u043d\u0430\u0434\u0442\u043e \u0447\u0430\u0441\u0442\u043e).</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_8","title":"\u0431\u0456\u043b\u044c\u0448\u0435 \u0442\u0438\u043f\u0456\u0432","text":"<p>\u0412\u0435\u043a\u0442\u043e\u0440\u0438 \u043f\u0440\u0438\u043a\u043e\u043b\u044c\u043d\u0456 \u0456 \u0454 \u043e\u0441\u043d\u043e\u0432\u043e\u044e \u0432\u0430\u0448\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430. \u0410 \u0449\u0435 \u0456\u0441\u043d\u0443\u044e\u0442\u044c \u0456\u043d\u0448\u0456 \u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u0438, \u0442\u0430\u043a\u0456 \u044f\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u0442\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u043d\u0456 \u0441\u0435\u043c\u043f\u043b\u0435\u0440\u0438, \u044f\u043a\u0456 \u0431\u0443\u0434\u0443\u0442\u044c \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u0456 \u043f\u0456\u0437\u043d\u0456\u0448\u0435 \u0432 \u043a\u043d\u0438\u0437\u0456.</p> <p>\u041c\u0438 \u0442\u0430\u043a\u043e\u0436 \u043c\u043e\u0436\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043c\u0430\u0441\u0438\u0432\u0438. \u0417\u0432\u0438\u0447\u0430\u0439\u043d\u043e, \u0457\u0445 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0442\u0438\u043f\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0439 \u0432\u043e\u043d\u0438 \u043c\u0430\u044e\u0442\u044c \u0441\u0432\u043e\u0457 \u043e\u0441\u043e\u0431\u043b\u0438\u0432\u043e\u0441\u0442\u0456 \u0443 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u0456 \u0437 JS: * \u043c\u0430\u044e\u0442\u044c \u0444\u0456\u043a\u0441\u043e\u0432\u0430\u043d\u0438\u0439 \u0440\u043e\u0437\u043c\u0456\u0440 * \u0432\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u0438 push(), pop(), splice() \u0442\u043e\u0449\u043e, \u0456 \u043d\u0435\u043c\u0430\u0454 \u0432\u043b\u0430\u0441\u0442\u0438\u0432\u043e\u0441\u0442\u0456 <code>length</code> * \u0432\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0456\u0434\u0440\u0430\u0437\u0443 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0457\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 * \u0412\u0438 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0456\u043d\u0434\u0438\u0432\u0456\u0434\u0443\u0430\u043b\u044c\u043d\u043e</p> <p>\u0426\u0435 \u043d\u0435 \u0441\u043f\u0440\u0430\u0446\u044e\u0454:</p> <pre><code>int values[3] = [0, 0, 0];\n</code></pre> <p>\u0410 \u043e\u0441\u044c \u0446\u0435 \u0441\u043f\u0440\u0430\u0446\u044e\u0454:</p> <pre><code>int values[3];\nvalues[0] = 0;\nvalues[1] = 0;\nvalues[2] = 0;\n</code></pre> <p>\u0414\u043e\u0431\u0440\u0435, \u043a\u043e\u043b\u0438 \u0432\u0438 \u0437\u043d\u0430\u0454\u0442\u0435 \u0441\u0432\u043e\u0457 \u0434\u0430\u043d\u0456 \u0430\u0431\u043e \u043c\u0430\u0454\u0442\u0435 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0456 \u043c\u0430\u0441\u0438\u0432\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u044c. \u042f\u043a\u0449\u043e \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0431\u0456\u043b\u044c\u0448\u0435 \u0432\u0438\u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0456, \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0442\u0438\u0441\u044f \u0442\u0438\u043f\u043e\u043c <code>struct</code>. \u0426\u0435 \u044f\u043a \u043e\u0431'\u0454\u043a\u0442\u0438 \u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u0456\u0432. \u0412\u043e\u043d\u0438 \u0434\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442\u044c \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0442\u0438 \u0442\u0430 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u043a\u0456\u043b\u044c\u043a\u043e\u0445 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0456 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431'\u0454\u043a\u0442\u0430:</p> <pre><code>struct ColorStruct {\n    vec3 color0;\n    vec3 color1;\n    vec3 color2;\n}\n</code></pre> <p>\u0412\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0442\u0432\u043e\u0440\u0438\u0442\u0438 \u0442\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f colors \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c:</p> <pre><code>// \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0443\u0454\u043c\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0435\u044f\u043a\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438\nColorStruct sandy = ColorStruct(\n    vec3(0.92, 0.83, 0.60),\n    vec3(1., 0.94, 0.69),\n    vec3(0.95, 0.86, 0.69)\n);\n\n// \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0456\u0437 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\nsandy.color0 // vec3(0.92, 0.83, 0.60)\n</code></pre> <p>\u0426\u0435 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u043d\u0438\u0439 \u0446\u0443\u043a\u043e\u0440, \u0430\u043b\u0435 \u0432\u0456\u043d \u043c\u043e\u0436\u0435 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u0442\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0447\u0438\u0441\u0442\u0456\u0448\u0438\u0439 \u043a\u043e\u0434, \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0431\u0456\u043b\u044c\u0448 \u0437\u0432\u0438\u0447\u043d\u0438\u0439 \u0434\u043b\u044f \u0432\u0430\u0441.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_9","title":"\u0432\u0438\u0440\u0430\u0437\u0438 \u0442\u0430 \u0443\u043c\u043e\u0432\u0438","text":"<p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438 \u0434\u0430\u043d\u0438\u0445 \u043a\u043e\u0440\u0438\u0441\u043d\u0456, \u0430\u043b\u0435 \u043d\u0430\u043c \u043c\u043e\u0436\u0435 \u0437\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0438\u0441\u044f \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u043d\u044f \u0434\u0456\u0457 \u0430\u0431\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0443\u043c\u043e\u0432\u043d\u0438\u0445 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043e\u043a. \u041d\u0430 \u0449\u0430\u0441\u0442\u044f \u0434\u043b\u044f \u043d\u0430\u0441, \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0434\u0443\u0436\u0435 \u0431\u043b\u0438\u0437\u044c\u043a\u0438\u0439 \u0434\u043e JavaScript. \u0423\u043c\u043e\u0432\u0430 \u0432\u0438\u0433\u043b\u044f\u0434\u0430\u0454 \u0442\u0430\u043a:</p> <pre><code>if (condition) {\n    // true\n} else {\n    // false\n}\n</code></pre> <p>\u0417\u0432\u0438\u0447\u0430\u0439\u043d\u0438 \u0446\u0438\u043a\u043b <code>for</code>:</p> <pre><code>const int count = 10;\nfor (int i = 0; i &lt;= count; i++) {\n    // do something\n}\n</code></pre> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0446\u0438\u043a\u043b\u0443 \u0437 \u0456\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0442\u0438\u043f\u0443 float:</p> <pre><code>const float count = 10.;\nfor (float i = 0.0; i &lt;= count; i += 1.0) {\n    // do something\n}\n</code></pre> <p>\u0417\u0430\u0443\u0432\u0430\u0436\u0442\u0435, \u0449\u043e <code>count</code> \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u044f\u043a <code>\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443</code>. \u0426\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u043f\u0435\u0440\u0435\u0434 \u0437\u043c\u0456\u043d\u043d\u043e\u044e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0434\u043e\u0434\u0430\u0442\u0438 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 <code>const</code>, \u044f\u043a\u0438\u0439 \u043c\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0435\u043c\u043e \u0442\u0440\u043e\u0445\u0438 \u0437\u0433\u043e\u0434\u043e\u043c.</p> <p>\u041d\u0430\u043c \u0442\u0430\u043a\u043e\u0436 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 <code>break</code> \u0456 <code>continue</code>:</p> <pre><code>const float count = 10.;\nfor (float i = 0.0; i &lt;= count; i += 1.0) {\n    if (i &lt; 5.) continue;\n    if (i &gt;= 8.) break;\n}\n</code></pre> <p>\u0417\u0430\u0443\u0432\u0430\u0436\u0442\u0435, \u0449\u043e \u043d\u0430 \u0434\u0435\u044f\u043a\u0438\u0445 \u0442\u0438\u043f\u0430\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457\u0432 <code>break</code> \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0454 \u043d\u0430\u043b\u0435\u0436\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c \u0456 \u0437\u0430\u0432\u0447\u0430\u0441\u043d\u043e \u043d\u0435 \u043f\u0435\u0440\u0435\u0440\u0438\u0432\u0430\u0454 \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0446\u0438\u043a\u043b\u0443.</p> <p>\u0417\u0430\u0433\u0430\u043b\u043e\u043c, \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0456\u0442\u0435\u0440\u0430\u0446\u0456\u0439 \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u044f\u043a\u043e\u043c\u043e\u0433\u0430 \u043c\u0435\u043d\u0448\u043e\u044e, \u0442\u0430 \u0456 \u0432 \u0446\u0456\u043b\u043e\u043c\u0443 \u0431\u0430\u0436\u0430\u043d\u043e \u0443\u043d\u0438\u043a\u0430\u0442\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f \u0446\u0438\u043a\u043b\u0456\u0432 \u0456 \u0443\u043c\u043e\u0432\u043d\u0438\u0445 \u0433\u0430\u043b\u0443\u0436\u0435\u043d\u044c.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_10","title":"\u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u0438","text":"<p>\u041e\u043a\u0440\u0456\u043c \u0442\u0438\u043f\u0456\u0432 \u0437\u043c\u0456\u043d\u043d\u0438\u0445, GLSL \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u0438. \u041a\u043e\u0440\u043e\u0442\u043a\u043e \u043a\u0430\u0436\u0443\u0447\u0438, \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u0438 \u0434\u043e\u043f\u043e\u043c\u0430\u0433\u0430\u044e\u0442\u044c \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0442\u0438 \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0434\u0435\u044f\u043a\u0456 \u0434\u0430\u043d\u0456 \u0434\u043b\u044f GPU \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u043d\u0430\u0434\u0430\u043d\u0456 \u0442\u0456\u043b\u044c\u043a\u0438 \u0432\u0456\u0434 CPU \u0456 \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c\u0441\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0442\u0430 \u0443\u043d\u0456\u0444\u043e\u0440\u043c\u0430\u043c\u0438. \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445, \u0430 \u0443\u043d\u0456\u0444\u043e\u0440\u043c\u0438 \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u044f\u043a \u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u0438\u0445, \u0442\u0430\u043a \u0456 \u0443 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445. \u0406\u0441\u043d\u0443\u0454 \u0442\u0430\u043a\u043e\u0436 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 <code>variying</code>, \u044f\u043a\u0438\u0439 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0456 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0456\u0434 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0443 \u0434\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e.</p> <p>\u042f \u043d\u0435 \u0431\u0443\u0434\u0443 \u0432\u0434\u0430\u0432\u0430\u0442\u0438\u0441\u044f \u0432 \u0434\u0435\u0442\u0430\u043b\u0456, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043c\u0438 \u0437\u043e\u0441\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u0456 \u043d\u0430 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u0438\u0445 \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u0445, \u0430\u043b\u0435 \u0434\u0430\u043b\u0456 \u0432 \u043a\u043d\u0438\u0437\u0456 \u0432\u0438 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0435 \u0449\u043e\u0441\u044c \u043d\u0430 \u043a\u0448\u0442\u0430\u043b\u0442:</p> <pre><code>uniform vec2 u_resolution;\n</code></pre> <p>\u0411\u0430\u0447\u0438\u0442\u0435, \u0449\u043e \u043c\u0438 \u0442\u0443\u0442 \u0437\u0440\u043e\u0431\u0438\u043b\u0438? \u041c\u0438 \u0434\u043e\u0434\u0430\u043b\u0438 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 <code>uniform</code> \u043f\u0435\u0440\u0435\u0434 \u0442\u0438\u043f\u043e\u043c \u0437\u043c\u0456\u043d\u043d\u043e\u0457. \u0426\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u0437\u043c\u0456\u043d\u043d\u0430, \u044f\u043a\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0437\u0430 \u0440\u043e\u0437\u0434\u0456\u043b\u044c\u043d\u0443 \u0437\u0434\u0430\u0442\u043d\u0456\u0441\u0442\u044c \u043f\u043e\u043b\u043e\u0442\u043d\u0430 \u0437 \u044f\u043a\u0438\u043c \u043c\u0438 \u043f\u0440\u0430\u0446\u044e\u0454\u043c\u043e, \u043f\u0435\u0440\u0435\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0448\u0435\u0439\u0434\u0435\u0440\u0443 \u0437 CPU. \u0428\u0438\u0440\u0438\u043d\u0430 \u043f\u043e\u043b\u043e\u0442\u043d\u0430 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454\u0442\u044c\u0441\u044f \u0432 x, \u0430 \u0432\u0438\u0441\u043e\u0442\u0430 \u0432 y-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456 \u0434\u0430\u043d\u043e\u0433\u043e 2D-\u0432\u0435\u043a\u0442\u043e\u0440\u0430.</p> <p>\u041a\u043e\u043b\u0438 \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440 \u0431\u0430\u0447\u0438\u0442\u044c \u0437\u043c\u0456\u043d\u043d\u0443, \u044f\u043a\u0456\u0439 \u043f\u0435\u0440\u0435\u0434\u0443\u0454 \u0446\u0435\u0439 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440, \u0432\u0456\u043d \u043f\u0440\u043e\u0441\u0442\u0435\u0436\u0438\u0442\u044c, \u0449\u043e\u0431 \u0432\u0438 \u043d\u0435 \u043c\u043e\u0433\u043b\u0438 \u0437\u043c\u0456\u043d\u0438\u0442\u0438 \u0442\u0430\u043a\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u0456\u0434 \u0447\u0430\u0441 \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0443.</p> <p>\u0422\u0435 \u0441\u0430\u043c\u0435 \u0441\u0442\u043e\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430\u0448\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457 <code>count</code>, \u044f\u043a\u0430 \u0441\u043b\u0443\u0433\u0443\u0432\u0430\u043b\u0430 \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u043d\u044f\u043c \u0434\u043b\u044f \u0446\u0438\u043a\u043b\u0443 <code>for</code>:</p> <pre><code>const float count = 10.;\nfor ( ... )\n</code></pre> <p>\u041a\u043e\u043b\u0438 \u043c\u0438 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u043c\u043e \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 <code>const</code>, \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0442\u043e\u0440 \u043d\u0435 \u0434\u0430\u0454 \u0437\u043c\u043e\u0433\u0443 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0443\u0432\u0430\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0442\u0430\u043a\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457, \u0456\u043d\u0430\u043a\u0448\u0435 \u0432\u043e\u043d\u0430 \u043d\u0435 \u0431\u0443\u043b\u0430 \u0431 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u044e.</p> <p>\u0423 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430\u0445 \u0444\u0443\u043d\u043a\u0446\u0456\u0439 \u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f 3 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0456 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u0438: <code>in</code>, <code>out</code> \u0442\u0430 <code>inout</code>. \u0423 JavaScript \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0456 \u0434\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0456 \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u043d\u043d\u044f. \u042f\u043a\u0449\u043e \u0432\u0438 \u0437\u043c\u0456\u043d\u044e\u0454\u0442\u0435 \u0457\u0445\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457, \u0442\u043e \u0446\u0456 \u0437\u043c\u0456\u043d\u0438 \u043d\u0435 \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0434\u043e \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \u043f\u043e\u0437\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u0454\u044e.</p> <pre><code>function banana(a) {\n    a += 1;\n}\n\nvar value = 0;\nbanana(value);\nconsole.log(value); // 0 - \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0430 \u043c\u0435\u0436\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u043d\u0435 \u0437\u043c\u0456\u043d\u0438\u043b\u043e\u0441\u044f\n</code></pre> <p>\u0417\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u0456\u0432 \u043f\u0435\u0440\u0435\u0434 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043a\u0430\u0437\u0430\u0442\u0438 \u0457\u0445 \u043f\u043e\u0432\u0435\u0434\u0456\u043d\u043a\u0443: * <code>in</code> - \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u043d\u043d\u044f (\u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c) * <code>out</code> - \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0443: \u043c\u043e\u0436\u043d\u0430 \u0437\u043c\u0456\u043d\u0438\u0442\u0438, \u0430\u043b\u0435 \u043d\u0435 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f * <code>inout</code> - \u0447\u0438\u0442\u0430\u043d\u043d\u044f \u0456 \u0437\u0430\u043f\u0438\u0441: \u043c\u043e\u0436\u043d\u0430 \u0456 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u0438 \u0439 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u043d\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f</p> <p>\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 banana \u0443 GLSL \u0432\u0438\u0433\u043b\u044f\u0434\u0430\u0454 \u0442\u0430\u043a:</p> <pre><code>void banana(inout float a) {\n    a += 1.;\n}\n\nfloat A = 0.;\nbanana(A); // \u0442\u0435\u043f\u0435\u0440 A = 1.;\n</code></pre> <p>\u0426\u0435 \u0434\u0443\u0436\u0435 \u0432\u0456\u0434\u0440\u0456\u0437\u043d\u044f\u0454\u0442\u044c\u0441\u044f \u0432\u0456\u0434 JS \u0456 \u0454 \u0434\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0442\u0443\u0436\u043d\u043e\u044e \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044e, \u0430\u043b\u0435 \u0432\u0430\u043c \u043d\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u0432\u043a\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432. \u0417\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c \u0432\u043e\u043d\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0456 \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0437\u0447\u0438\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_11","title":"\u043f\u0440\u043e\u0441\u0442\u0456\u0440 \u0456 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438","text":"<p>\u041e\u0441\u0442\u0430\u043d\u043d\u0454 \u0437\u0430\u0443\u0432\u0430\u0436\u0435\u043d\u043d\u044f: \u0443 DOM \u0456 Canvas 2D \u043c\u0438 \u0437\u0432\u0438\u043a\u043b\u0438, \u0449\u043e \u0432\u0456\u0441\u044c Y \u0441\u043f\u0440\u044f\u043c\u043e\u0432\u0430\u043d\u0430 '\u0432\u043d\u0438\u0437'. \u0426\u0435 \u043c\u0430\u0454 \u0441\u0435\u043d\u0441 \u0443 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0456 DOM, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0441\u043f\u043e\u0441\u043e\u0431\u0443 \u0440\u043e\u0437\u0433\u043e\u0440\u0442\u0430\u043d\u043d\u044f \u0432\u0435\u0431\u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438: \u043f\u0430\u043d\u0435\u043b\u044c \u043d\u0430\u0432\u0456\u0433\u0430\u0446\u0456\u0457 \u0432\u0433\u043e\u0440\u0456, \u0430 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u043f\u0440\u043e\u043a\u0440\u0443\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043e\u043d\u0438\u0437\u0443. \u0423 \u043f\u043e\u043b\u043e\u0442\u043d\u0456 WebGL \u0432\u0456\u0441\u044c Y \u043f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u0430 \u0456 \u0432\u043a\u0430\u0437\u0443\u0454 '\u0432\u0433\u043e\u0440\u0443'.</p> <p>\u0426\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u043f\u043e\u0447\u0430\u0442\u043e\u043a \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442, \u0442\u043e\u0447\u043a\u0430 (0, 0), \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043d\u0438\u0436\u043d\u044c\u043e\u043c\u0443 \u043b\u0456\u0432\u043e\u043c\u0443 \u043a\u0443\u0442\u0456 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 WebGL, \u0430 \u043d\u0435 \u0443 \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u043c\u0443 \u043b\u0456\u0432\u043e\u043c\u0443 \u043a\u0443\u0442\u0456, \u044f\u043a \u0443 2D Canvas. \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440 \u0442\u0430\u043a\u043e\u0436 \u0434\u043e\u0442\u0440\u0438\u043c\u0443\u044e\u0442\u044c\u0441\u044f \u0446\u044c\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0449\u043e \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043a\u043e\u043d\u0442\u0440\u0456\u043d\u0442\u0443\u0457\u0442\u0438\u0432\u043d\u0438\u043c.</p>"},{"location":"Frontend/shader/appendix/04/README-ua/#_12","title":"\u041e\u0441\u044c \u0456 \u0432\u0441\u0435!","text":"<p>\u0417\u0432\u0456\u0441\u043d\u043e, \u043c\u0438 \u0431 \u043c\u043e\u0433\u043b\u0438 \u0431\u0456\u043b\u044c\u0448\u0435 \u0437\u0430\u0433\u043b\u0438\u0431\u0438\u0442\u0438\u0441\u044f \u0432 \u0440\u0456\u0437\u043d\u043e\u043c\u0430\u043d\u0456\u0442\u043d\u0456 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0456\u0457, \u0430\u043b\u0435, \u044f\u043a \u0437\u0433\u0430\u0434\u0443\u0432\u0430\u043b\u043e\u0441\u044f \u0440\u0430\u043d\u0456\u0448\u0435, \u0446\u0435\u0439 \u0440\u043e\u0437\u0434\u0456\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u044f\u043a \u043f\u0440\u043e\u0441\u0442\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u0430\u0447\u043a\u0456\u0432. \u0422\u0443\u0442 \u0432\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u0437\u0430 \u0434\u0435\u044f\u043a\u0438\u0439 \u0447\u0430\u0441 \u043f\u0435\u0440\u0435\u0432\u0430\u0440\u0438\u0442\u0438 \u043d\u043e\u0432\u0456 \u0437\u043d\u0430\u043d\u043d\u044f, \u0430\u043b\u0435 \u0437 \u0442\u0435\u0440\u043f\u0456\u043d\u043d\u044f\u043c \u0456 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u044e \u0446\u044f \u043c\u043e\u0432\u0430 \u0441\u0442\u0430\u0432\u0430\u0442\u0438\u043c\u0435 \u0434\u043b\u044f \u0432\u0430\u0441 \u0432\u0441\u0435 \u0431\u0456\u043b\u044c\u0448 \u043f\u0440\u0438\u0440\u043e\u0434\u043d\u043e\u044e.</p> <p>\u0421\u043f\u043e\u0434\u0456\u0432\u0430\u044e\u0441\u044f, \u0446\u0435\u0439 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b \u0431\u0443\u0432 \u043a\u043e\u0440\u0438\u0441\u043d\u0438\u043c \u0434\u043b\u044f \u0432\u0430\u0441. \u0410 \u0442\u0435\u043f\u0435\u0440 \u044f\u043a \u0449\u043e\u0434\u043e \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0432\u0430\u0448\u043e\u0457 \u043f\u043e\u0434\u043e\u0440\u043e\u0436\u0456 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u044e \u0447\u0430\u0441\u0442\u0438\u043d\u043e\u044e \u043a\u043d\u0438\u0433\u0438?</p>"},{"location":"Frontend/shader/appendix/04/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/04/README-vi/#gioi-thieu-cho-nguoi-a-biet-javascript","title":"Gi\u1edbi thi\u1ec7u cho ng\u01b0\u1eddi \u0111\u00e3 bi\u1ebft Javascript","text":"<p>T\u00e1c gi\u1ea3: Nicolas Barradeau</p> <p>N\u1ebfu b\u1ea1n l\u00e0 developer Javascript, kh\u1ea3 n\u0103ng cao l\u00e0 b\u1ea1n s\u1ebd th\u1ea5y hoang mang m\u1ed9t ch\u00fat khi \u0111\u1ecdc quy\u1ec3n s\u00e1ch n\u00e0y. Th\u1ef1c t\u1ebf l\u00e0 c\u00f3 r\u1ea5t nhi\u1ec1u \u0111i\u1ec3m kh\u00e1c bi\u1ec7t khi code JavaScript v\u1ed1n ch\u1ec9 l\u00e0 b\u1ec1 n\u1ed5i, so v\u1edbi vi\u1ec7c ph\u1ea3i \u0111\u1ee5ng t\u1edbi shader \u1edf s\u00e2u b\u00ean d\u01b0\u1edbi t\u1ea3ng b\u0103ng ch\u00ecm. Tuy nhi\u00ean, kh\u00f4ng gi\u1ed1ng v\u1edbi ng\u00f4n ng\u1eef n\u1ec1n t\u1ea3ng l\u00e0 Assembly, GLSL r\u1ea5t g\u1ea7n v\u1edbi ng\u00f4n ng\u1eef m\u00e0 con ng\u01b0\u1eddi c\u00f3 th\u1ec3 hi\u1ec3u \u0111\u01b0\u1ee3c, v\u00e0 t\u00f4i tin r\u1eb1ng m\u1ed9t khi b\u1ea1n \u0111\u00e3 n\u1eafm \u0111\u01b0\u1ee3c c\u00e1c \u0111\u1eb7c t\u00ednh c\u1ee7a n\u00f3 th\u00ec b\u1ea1n s\u1ebd b\u1eaft k\u1ecbp r\u1ea5t nhanh th\u00f4i.</p> <p>Coi nh\u01b0 b\u1ea1n \u0111\u00e3 bi\u1ebft v\u1ec1 Javascript v\u00e0 c\u1ea3 Canvas API \u0111i. M\u00e0 n\u1ebfu c\u00f3 ch\u01b0a bi\u1ebft m\u1ea5y th\u00ec c\u0169ng \u0111\u1eebng lo, b\u1ea1n v\u1eabn s\u1ebd hi\u1ec3u \u0111\u01b0\u1ee3c ph\u1ea7n l\u1edbn n\u1ed9i dung c\u1ee7a ph\u1ea7n n\u00e0y th\u00f4i.</p> <p>T\u1ea5t nhi\u00ean t\u00f4i s\u1ebd kh\u00f4ng \u0111i s\u00e2u v\u00e0o chi ti\u1ebft v\u00e0 m\u1ed9t v\u00e0i \u0111i\u1ec1u t\u00f4i n\u00f3i c\u00f3 th\u1ec3 kh\u00f4ng ch\u00ednh x\u00e1c ho\u00e0n to\u00e0n, n\u00ean \u0111\u1eebng k\u1ef3 v\u1ecdng n\u00f3 \u0111\u01b0\u1ee3c nh\u01b0 \"c\u1ea7m tay ch\u1ec9 vi\u1ec7c\" m\u00e0 h\u00e3y coi n\u00f3 nh\u01b0</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#mot-cai-om-nong-am","title":"M\u1ed8T C\u00c1I \u00d4M N\u1ed2NG \u1ea4M","text":"<p>JavaScript r\u1ea5t th\u00edch h\u1ee3p \u0111\u1ec3 th\u1eed nghi\u1ec7m nhanh ; b\u1ea1n ch\u1ec9 vi\u1ec7c vi\u1ebft v\u00e0i h\u00e0m \u0111\u01a1n gi\u1ea3n, kh\u00f4ng c\u00f3 r\u00e0ng bu\u1ed9c g\u00ec v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u, tu\u1ef3 \u00fd th\u00eam b\u1edbt c\u00e1c h\u00e0m c\u1ee7a class, t\u1ea3i l\u1ea1i trang web l\u00e0 \u0111\u00e3 th\u1ea5y ngay k\u1ebft qu\u1ea3 r\u1ed3i, sau \u0111\u00f3 l\u1ea1i s\u1eeda m\u1ed9t t\u00ed, t\u1ea3i l\u1ea1i trang, c\u1ee9 th\u1ebf l\u1eb7p l\u1ea1i, d\u1ec5 nh\u01b0 \u0103n k\u1eb9o.</p> <p>Th\u1ebf GLSL th\u00ec c\u00f3 g\u00ec kh\u00e1c JavaScript ch\u1ee9. Suy cho c\u00f9ng th\u00ec c\u1ea3 2 \u0111\u1ec1u ch\u1ea1y tr\u00ean tr\u00ecnh duy\u1ec7t m\u00e0, ch\u00fang \u0111\u1ec1u v\u1ebd m\u1ed9t v\u00e0i th\u1ee9 l\u00ean m\u00e0n h\u00ecnh \u0111\u00f3 th\u00f4i, m\u00e0 ri\u00eang v\u1ec1 kh\u00eda c\u1ea1nh \u0111\u00f3 th\u00ec d\u00f9ng JavaScript d\u1ec5 h\u01a1n.</p> <p>\u1eea th\u00ec, \u0111i\u1ec3m kh\u00e1c bi\u1ec7t ch\u00ednh n\u1eb1m \u1edf ch\u1ed7 Javascript l\u00e0 m\u1ed9t ng\u00f4n ng\u1eef th\u00f4ng d\u1ecbch (interpreted) c\u00f2n GLSL th\u00ec l\u00e0 m\u1ed9t ng\u00f4n ng\u1eef bi\u00ean d\u1ecbch (compiled). M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c th\u1ef1c thi tr\u1ef1c ti\u1ebfp b\u1edfi h\u1ec7 \u0111i\u1ec1u h\u00e0nh, l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh b\u1eadc th\u1ea5p v\u00e0 th\u01b0\u1eddng ch\u1ea1y r\u1ea5t nhanh. C\u00f2n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh th\u00f4ng d\u1ecbch th\u00ec l\u1ea1i c\u1ea7n m\u1ed9t M\u00e1y \u1ea3o (Virtual Machine / VM) \u0111\u1ec3 th\u1ef1c thi, n\u00f3 l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh b\u1eadc cao v\u00e0 th\u01b0\u1eddng ch\u1eadm h\u01a1n.</p> <p>Khi m\u1ed9t tr\u00ecnh duy\u1ec7t (ch\u00ednh x\u00e1c ph\u1ea3i l\u00e0 m\u00e1y \u1ea3o JavaScript m\u1edbi \u0111\u00fang) th\u1ef1c thi ho\u1eb7c th\u00f4ng d\u1ecbch m\u1ed9t \u0111o\u1ea1n m\u00e3, n\u00f3 ch\u1eb3ng bi\u1ebft bi\u1ebfn n\u00e0o c\u00f3 \u00fd ngh\u0129a g\u00ec hay h\u00e0m n\u00e0y s\u1ebd cho k\u1ebft qu\u1ea3 g\u00ec (ngo\u1ea1i tr\u1eeb TypedArrays). V\u00ec th\u1ebf n\u00f3 ch\u1eb3ng th\u1ec3 t\u1ed1i \u01b0u b\u1ea5t k\u1ef3 c\u00e1i g\u00ec tr\u01b0\u1edbc khi th\u1ef1c thi c\u1ea3, n\u00f3 c\u00f2n c\u1ea7n th\u1eddi gian \u0111\u1ec3 d\u1ecbch code c\u1ee7a b\u1ea1n n\u00e0y, r\u1ed3i th\u00ec \u0111o\u00e1n xem ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a c\u00e1c bi\u1ebfn l\u00e0 g\u00ec n\u00e0y v\u00e0 n\u1ebfu \u0111\u01b0\u1ee3c th\u00ec c\u1ed1 g\u1eafng chuy\u1ec3n m\u1ed9t ph\u1ea7n sang d\u1ea1ng m\u00e3 Assembly \u0111\u1ec3 code ch\u1ea1y nhanh h\u01a1n.</p> <p>\u0110\u00f3 l\u00e0 c\u1ea3 m\u1ed9t qu\u00e1 tr\u00ecnh c\u1ed3ng k\u1ec1nh, ph\u1ee9c t\u1ea1p v\u00e0 c\u00f3 ph\u1ea7n l\u1ec1 m\u1ec1, n\u1ebfu b\u1ea1n h\u1ee9ng th\u00fa \u0111i v\u00e0o chi ti\u1ebft th\u00ec t\u00f4i xin gi\u1edbi thi\u1ec7u t\u00ecm hi\u1ec3u c\u00e1ch m\u00e0 tr\u00ecnh th\u00f4ng d\u1ecbch V8 c\u1ee7a Chrome ho\u1ea1t \u0111\u1ed9ng. \u0110i\u1ec3m t\u1ec7 nh\u1ea5t \u0111\u00f3 l\u00e0, m\u1ed7i tr\u00ecnh duy\u1ec7t l\u1ea1i t\u1ef1 t\u1ed1i \u01b0u m\u00e3 JavaScript theo m\u1ed9t c\u00e1ch ri\u00eang m\u00e0 qu\u00e1 tr\u00ecnh n\u00e0y ho\u00e0n to\u00e0n n\u1eb1m ngo\u00e0i t\u1ea7m v\u1edbi c\u1ee7a b\u1ea1n.</p> <p>C\u00f2n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh bi\u00ean d\u1ecbch th\u00ec kh\u00f4ng nh\u01b0 th\u1ebf ; h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u1ef1c thi n\u00f3, n\u1ebfu ch\u01b0\u01a1ng tr\u00ecnh kh\u00f4ng c\u00f3 l\u1ed7i bi\u00ean d\u1ecbch th\u00ec c\u1ee9 th\u1ebf m\u00e0 ch\u1ea1y th\u00f4i. N\u1ebfu b\u1ea1n qu\u00ean m\u1ed9t d\u1ea5u ch\u1ea5m ph\u1ea9y cu\u1ed1i d\u00f2ng th\u00ec kh\u1ea3 n\u0103ng cao l\u00e0 b\u1ea1n s\u1ebd \u0111\u01b0\u1ee3c th\u00f4ng b\u00e1o c\u00f2n code c\u1ee7a b\u1ea1n th\u00ec th\u1eadm ch\u00ed c\u00f2n ch\u01b0a \u0111\u01b0\u1ee3c bi\u00ean d\u1ecbch th\u00e0nh ch\u01b0\u01a1ng tr\u00ecnh c\u01a1.</p> <p>H\u01a1i ph\u0169, nh\u01b0ng \u0111\u00f3 ch\u00ednh l\u00e0 c\u00e1ch m\u00e0 shader ho\u1ea1t \u0111\u1ed9ng: m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c bi\u00ean d\u1ecbch \u0111\u1ec3 th\u1ef1c thi tr\u00ean GPU. \u0110\u1eebng s\u1ee3! M\u1ed9t tr\u00ecnh bi\u00ean d\u1ecbch s\u1ebd l\u00e0 chi\u1ebfn h\u1eefu \u0111\u00e1ng tin c\u1eady nh\u1ea5t c\u1ee7a b\u1ea1n. C\u00e1c v\u00ed d\u1ee5 trong quy\u1ec3n s\u00e1ch n\u00e0y v\u00e0 ng\u01b0\u1eddi \u0111\u1ed3ng h\u00e0nh editor online r\u1ea5t th\u00e2n thi\u1ec7n. N\u00f3 s\u1ebd ch\u1ec9 ra cho b\u1ea1n th\u1ea5y t\u1ea1i sao code c\u1ee7a b\u1ea1n kh\u00f4ng bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c v\u00e0 b\u1ea1n ph\u1ea3i s\u1eeda ch\u1ed7 n\u00e0o, v\u00e0 n\u1ebfu b\u1ea1n l\u00e0m \u0111\u00fang th\u00ec k\u1ebft qu\u1ea3 hi\u1ec3n th\u1ecb ngay l\u1eadp t\u1ee9c lu\u00f4n. \u0110\u00f3 l\u00e0 m\u1ed9t c\u00e1ch tuy\u1ec7t v\u1eddi \u0111\u1ec3 h\u1ecdc v\u00ec n\u00f3 r\u1ea5t tr\u1ef1c quan v\u00e0 b\u1ea1n ch\u1eb3ng ph\u1ea3i s\u1ee3 s\u1ebd l\u00e0m h\u1ecfng c\u00e1i g\u00ec c\u1ea3.</p> <p>\u0110i\u1ec3m l\u01b0u \u00fd cu\u1ed1i c\u00f9ng, m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh shader \u0111\u01b0\u1ee3c t\u1ea1o n\u00ean b\u1edfi 2 ch\u01b0\u01a1ng tr\u00ecnh con, \u0111\u00f3 l\u00e0 vertex shader v\u00e0 fragment shader. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec vertex shader s\u1ebd nh\u1eadn tham s\u1ed1 \u0111\u1ea7u v\u00e0o l\u00e0 c\u00e1c kh\u1ed1i h\u00ecnh h\u1ecdc r\u1ed3i bi\u1ebfn ch\u00fang th\u00e0nh c\u00e1c \u0111i\u1ec3m \u1ea3nh (pixel) (ho\u1eb7c fragment) r\u1ed3i chuy\u1ec3n k\u1ebft qu\u1ea3 cho fragment shader x\u1eed l\u00fd ti\u1ebfp, v\u1ed1n c\u00f4ng vi\u1ec7c ch\u00ednh l\u00e0 t\u00f4 m\u00e0u t\u1eebng \u0111i\u1ec3m \u1ea3nh. Quy\u1ec3n s\u00e1ch n\u00e0y h\u1ea7u nh\u01b0 ch\u1ec9 t\u1eadp trung v\u00e0o ch\u01b0\u01a1ng tr\u00ecnh th\u1ee9 hai. Trong t\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5, kh\u1ed1i h\u00ecnh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u1ec9 l\u00e0 m\u1ed9t t\u1ee9 gi\u00e1c l\u1ea5p \u0111\u1ea7y c\u1ea3 m\u00e0n h\u00ecnh.</p> <p>V\u1eady! B\u1ea1n \u0111\u00e3 s\u1eb5n s\u00e0ng ch\u01b0a ? Ti\u1ebfp t\u1ee5c nh\u00e9!</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#quy-inh-kieu-du-lieu-mot-cach-chat-che","title":"Quy \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u m\u1ed9t c\u00e1ch ch\u1eb7t ch\u1ebd","text":"<p>Khi b\u1ea1n \u0111\u00e3 quen v\u1edbi JavaScript hay c\u00e1c ng\u00f4n ng\u1eef kh\u00f4ng quan tr\u1ecdng v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u, th\u00ec vi\u1ec7c ph\u1ea3i quy \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho m\u1ed7i bi\u1ebfn l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m xa l\u1ea1, c\u0169ng khi\u1ebfn cho n\u00f3 tr\u1edf th\u00e0nh r\u00e0o c\u1ea3n l\u1edbn nh\u1ea5t khi l\u00e0m quen v\u1edbi GLSL. Ki\u1ec3u d\u1eef li\u1ec7u, nh\u01b0 ch\u00ednh c\u00e1i t\u00ean c\u1ee7a n\u00f3, c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n ph\u1ea3i ch\u1ec9 \u0111\u1ecbnh m\u1ed7i bi\u1ebfn (v\u00e0 c\u1ea3 h\u00e0m n\u1eefa) s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u g\u00ec. V\u1ec1 c\u01a1 b\u1ea3n th\u00ec vi\u1ec7c d\u00f9ng chung m\u1ed9t t\u1eeb kho\u00e1 <code>var</code> cho t\u1ea5t c\u1ea3 c\u00e1c bi\u1ebfn \u0111\u00e3 kh\u00f4ng c\u00f2n n\u1eefa. GLSL kh\u00f4ng cho ph\u00e9p \u0111i\u1ec1u \u0111\u00f3 x\u1ea3y ra n\u00ean b\u1ea1n c\u00f3 mu\u1ed1n c\u0169ng kh\u00f4ng \u0111\u01b0\u1ee3c.</p> <p>Thay v\u00ec d\u00f9ng t\u1eeb kho\u00e1 <code>var</code> th\u1ea7n th\u00e1nh, b\u1ea1n s\u1ebd ph\u1ea3i ch\u1ec9 \u0111\u00edch danh ki\u1ec3u d\u1eef li\u1ec7u cho t\u1eebng bi\u1ebfn m\u1ed9t, sau \u0111\u00f3 th\u00ec tr\u00ecnh bi\u00ean d\u1ecbch s\u1ebd bi\u1ebft ch\u00ednh x\u00e1c \u0111ang ph\u1ea3i x\u1eed l\u00fd c\u00e1i g\u00ec v\u00e0 l\u00e0m th\u1ebf n\u00e0o th\u00ec hi\u1ec7u qu\u1ea3 nh\u1ea5t. Nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a vi\u1ec7c n\u00e0y l\u00e0 b\u1ea1n ph\u1ea3i hi\u1ec3u t\u1ea5t c\u1ea3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u, m\u00e0 l\u1ea1i c\u00f2n ph\u1ea3i hi\u1ec3u t\u01b0\u1eddng t\u1eadn n\u1eefa c\u01a1. May thay, ch\u1ec9 c\u00f3 m\u1ed9t v\u00e0i ki\u1ec3u d\u1eef li\u1ec7u th\u00f4i v\u00e0 c\u0169ng kh\u00e1 \u0111\u01a1n gi\u1ea3n n\u1eefa.</p> <p>Nghe th\u00ec \u0111\u00e1ng s\u1ee3 ch\u1ee9 th\u1ef1c ra n\u00f3 kh\u00f4ng qu\u00e1 kh\u00e1c v\u1edbi code JavaScript m\u00e0 b\u1ea1n v\u1eabn hay d\u00f9ng \u0111\u00e2u ; n\u1ebfu m\u1ed9t bi\u1ebfn c\u00f3 ki\u1ec3u <code>boolean</code> th\u00ec b\u1ea1n s\u1ebd tr\u00f4ng \u0111\u1ee3i n\u00f3 ch\u1ec9 l\u01b0u tr\u1eef m\u1ed9t trong hai gi\u00e1 tr\u1ecb <code>true</code> ho\u1eb7c <code>false</code> m\u00e0 th\u00f4i. N\u1ebfu m\u1ed9t bi\u1ebfn \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 <code>var uid = XXX;</code>, th\u00ec c\u00f3 kh\u1ea3 n\u0103ng \u0111\u00f3 l\u00e0 m\u1ed9t s\u1ed1 nguy\u00ean c\u00f2n n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 <code>var y = YYY;</code> c\u00f3 th\u1ec3 n\u00f3 tr\u1ecf t\u1edbi m\u1ed9t s\u1ed1 th\u1ef1c. C\u00f2n v\u1edbi ng\u00f4n ng\u1eef quy \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u (strong type), b\u1ea1n s\u1ebd kh\u00f4ng ph\u00ed th\u1eddi gian \u0111o\u00e1n xem 2 bi\u1ebfn \u0111\u00f3 c\u00f3 c\u00f9ng ki\u1ec3u kh\u00f4ng, b\u1eb1ng c\u00e1c bi\u1ec3u th\u1ee9c <code>X == Y</code> (hay <code>typeof X == typeof Y</code> ? .. ho\u1eb7c <code>typeof X !== null &amp;&amp; Y...</code> ...) ; b\u1ea1n s\u1ebd bi\u1ebft ch\u1eafc \u0111i\u1ec1u \u0111\u00f3 \u0111\u00fang hay sai m\u00e0 k\u1ec3 c\u1ea3 b\u1ea1n kh\u00f4ng \u0111\u1ec3 \u00fd th\u00ec tr\u00ecnh bi\u00ean d\u1ecbch s\u1ebd l\u00e0m thay vi\u1ec7c \u0111\u00f3.</p> <p>\u0110\u00e2y l\u00e0 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01a1n (scalar) trong GLSL: <code>bool</code> (\u0110\u00fang sai), <code>int</code>(S\u1ed1 nguy\u00ean), <code>float</code>(S\u1ed1 th\u1ef1c). C\u00f2n v\u00e0i ki\u1ec3u n\u1eefa nh\u01b0ng c\u1ee9 t\u1eeb t\u1eeb, \u0111o\u1ea1n code m\u1eabu d\u01b0\u1edbi \u0111\u00e2y khai b\u00e1o c\u00e1c bi\u1ebfn (\u0111\u1eebng qu\u00ean <code>var</code> kh\u00f4ng t\u1ed3n t\u1ea1i trong th\u1ebf gi\u1edbi GLSL nh\u00e9):</p> <pre><code>// Khai b\u00e1o m\u1ed9t bi\u1ebfn boolean\nJavaScript: var b = true;               GLSL: bool b = true;\n\n// Khai b\u00e1o m\u1ed9t s\u1ed1 nguy\u00ean\nJavaScript: var i = 1;                  GLSL: int i = 1;\n\n// Khai b\u00e1o m\u1ed9t s\u1ed1 th\u1ef1c\nJavaScript: var f = 3.14159;            GLSL: float f = 3.14159;\n</code></pre> <p>Kh\u00f4ng c\u00f3 g\u00ec kh\u00f3 ph\u1ea3i kh\u00f4ng ? Nh\u01b0 \u0111\u00e3 n\u00f3i \u1edf tr\u00ean, n\u00f3 th\u1eadm ch\u00ed c\u00f2n gi\u00fap b\u1ea1n \u0111\u1ee1 \u0111au \u0111\u1ea7u khi code \u1ea5y ch\u1ee9. N\u1ebfu c\u00f2n nghi ng\u1edd v\u1ec1 \u0111i\u1ec1u \u0111\u00f3 th\u00ec c\u1ee9 t\u1ea1m b\u1ecf qua, ch\u1ec9 c\u1ea7n bi\u1ebft n\u00f3 gi\u00fap ch\u01b0\u01a1ng tr\u00ecnh c\u1ee7a b\u1ea1n ch\u1ea1y nhanh h\u01a1n JavaScript nhi\u1ec1u l\u00e0 c\u0169ng \u0111\u1ee7 r\u1ed3i.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#void","title":"void","text":"<p>C\u00f3 ki\u1ec3u <code>void</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi  <code>null</code>, n\u00f3 \u0111\u01b0\u1ee3c d\u00f9ng khi h\u00e0m kh\u00f4ng tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 g\u00ec c\u1ea3. V\u00e0 b\u1ea1n kh\u00f4ng th\u1ec3 khai b\u00e1o bi\u1ebfn ki\u1ec3u n\u00e0y.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#boolean","title":"boolean","text":"<p>C\u00e1c bi\u1ebfn ki\u1ec3u boolean h\u1ea7u h\u1ebft \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00e1c c\u00e2u l\u1ec7nh \u0111i\u1ec1u ki\u1ec7n nh\u01b0 ; <code>if( myBoolean == true ){}else{}</code>. N\u1ebfu c\u00e1c nh\u00e1nh \u0111i\u1ec1u ki\u1ec7n r\u1ea5t hay g\u1eb7p \u1edf CPU, th\u00ec ki\u1ebfn tr\u00fac song song c\u1ee7a GPU l\u1ea1i h\u1ea1n ch\u1ebf \u0111\u1ea5t di\u1ec5n c\u1ee7a ch\u00fang. Th\u1eadm ch\u00ed vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c l\u1ec7nh \u0111i\u1ec1u ki\u1ec7n c\u00f2n kh\u00f4ng \u0111\u01b0\u1ee3c khuy\u1ebfn kh\u00edch \u1edf \u0111a ph\u1ea7n c\u00e1c tr\u01b0\u1eddng h\u1ee3p, trong quy\u1ec3n s\u00e1ch n\u00e0y c\u00f3 m\u1ed9t v\u00e0i k\u1ef9 thu\u1eadt \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#ep-kieu","title":"\u00c9p ki\u1ec3u","text":"<p>Nh\u01b0 Boromir \u0111\u00e3 n\u00f3i, \"One does not simply combine Typed primitives\". Kh\u00f4ng nh\u01b0 JavaScript, GLSL kh\u00f4ng cho ph\u00e9p th\u1ef1c hi\u1ec7n c\u00e1c ph\u00e9p to\u00e1n gi\u1eefa c\u00e1c to\u00e1n h\u1ea1ng kh\u00f4ng c\u00f9ng ki\u1ec3u.</p> <p>V\u00ed d\u1ee5 sau:</p> <pre><code>int     i = 2;\nfloat   f = 3.14159;\n\n// th\u1eed nh\u00e2n m\u1ed9t s\u1ed1 nguy\u00ean v\u1edbi m\u1ed9t s\u1ed1 th\u1ef1c\nfloat   r = i * f;\n</code></pre> <p>s\u1ebd kh\u00f4ng cho k\u1ebft qu\u1ea3 t\u1ed1t v\u00ec b\u1ea1n \u0111ang c\u1ed1 lai con m\u00e8o v\u1edbi con h\u01b0\u01a1u cao c\u1ed5. Gi\u1ea3i ph\u00e1p l\u00e0 \u00e9p ki\u1ec3u (type casting) ; \u0111o\u1ea1n code sau s\u1ebd gi\u00fap tr\u00ecnh bi\u00ean d\u1ecbch tin r\u1eb1ng <code>i</code> c\u0169ng c\u00f3 ki\u1ec3u <code>float</code> d\u00f9 <code>i</code> v\u1eabn gi\u1eef nguy\u00ean ki\u1ec3u v\u1ed1n c\u00f3:</p> <pre><code>// \u00e9p bi\u1ebfn `i` t\u1eeb ki\u1ec3u int sang float\nfloat   r = float( i ) * f;\n</code></pre> <p>\u0110i\u1ec1u n\u00e0y gi\u1ed1ng nh\u01b0 vi\u1ec7c cho con m\u00e8o m\u1eb7c \u0111\u1ed3 c\u1ee7a con h\u01b0\u01a1u cao c\u1ed5 v\u1eady, v\u00e0 n\u00f3 s\u1ebd c\u00f3 hi\u1ec7u qu\u1ea3 (<code>r</code> s\u1ebd k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p to\u00e1n <code>i</code> x <code>f</code>).</p> <p>B\u1ea1n c\u00f3 th\u1ec3 \u00e9p ki\u1ec3u qua l\u1ea1i gi\u1eefa t\u1ea5t c\u1ea3 c\u00e1c ki\u1ec3u ph\u00eda tr\u00ean, ch\u00fa \u00fd l\u00e0 khi chuy\u1ec3n t\u1eeb s\u1ed1 th\u1ef1c sang s\u1ed1 nguy\u00ean th\u00ec ph\u1ea7n th\u1eadp ph\u00e2n s\u1ebd bi\u1ebfn m\u1ea5t, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi vi\u1ec7c d\u00f9ng h\u00e0m <code>Math.floor()</code>. \u00c9p m\u1ed9t s\u1ed1 th\u1ef1c <code>float</code> ho\u1eb7c m\u1ed9t s\u1ed1 nguy\u00ean <code>int</code> sang ki\u1ec3u <code>bool</code> s\u1ebd cho k\u1ebft qu\u1ea3 <code>true</code> n\u1ebfu s\u1ed1 \u0111\u00f3 kh\u00e1c 0.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#ham-khoi-tao-constructor","title":"H\u00e0m kh\u1edfi t\u1ea1o (constructor)","text":"<p>Ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a bi\u1ebfn c\u0169ng ch\u00ednh l\u00e0 h\u00e0m kh\u1edfi t\u1ea1o c\u1ee7a class t\u01b0\u01a1ng \u1ee9ng ; th\u1ef1c t\u1ebf th\u00ec m\u1ed9t s\u1ed1 th\u1ef1c <code>float</code> c\u00f3 th\u1ec3 coi l\u00e0 1 <code>instance</code> c\u1ee7a class <code>Float</code>.</p> <p>C\u00e1c l\u1ec7nh sau \u0111\u00e2y \u0111\u1ec1u h\u1ee3p l\u1ec7 v\u00e0 cho k\u1ebft qu\u1ea3 gi\u1ed1ng nhau</p> <pre><code>int     i = 1;\nint     i = int( 1 );\nint     i = int( 1.9995 );\nint     i = int( true );\n</code></pre> <p>Tr\u00f4ng th\u00ec kh\u00f4ng gi\u1ed1ng ki\u1ec3u <code>scalar</code> l\u1eafm, v\u00e0 c\u0169ng na n\u00e1 \u00e9p ki\u1ec3u, nh\u01b0ng m\u1ecdi s\u1ef1 s\u1ebd s\u00e1ng t\u1ecf \u1edf ph\u1ea7n overload.</p> <p>OK, v\u1eady l\u00e0 ta \u0111\u00e3 bi\u1ebft v\u1ec1 ba <code>ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n</code>, nh\u1eefng th\u1ee9 m\u00e0 b\u1ea1n kh\u00f4ng th\u1ec3 s\u1ed1ng n\u1ebfu thi\u1ebfu \u0111\u01b0\u1ee3c v\u00e0 \u0111\u01b0\u01a1ng nhi\u00ean l\u00e0 GLSL c\u00f2n nhi\u1ec1u ki\u1ec3u kh\u00e1c.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#vector","title":"Vector","text":"<p>Trong c\u1ea3 JavaScript l\u1eabn GLSL, b\u1ea1n s\u1ebd c\u1ea7n nh\u1eefng c\u00e1ch tinh vi h\u01a1n \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u, v\u00e0 <code>vectors</code> khi \u0111\u00f3 r\u1ea5t h\u1eefu \u00edch. T\u00f4i cho r\u1eb1ng b\u1ea1n \u0111\u00e3 s\u1eed d\u1ee5ng class <code>Point</code> trong JavaScript \u0111\u1ec3 l\u01b0u 2 gi\u00e1 tr\u1ecb <code>x</code> v\u00e0 <code>y</code> c\u00f9ng l\u00fac r\u1ed3i, code s\u1ebd tr\u00f4ng th\u1ebf n\u00e0y:</p> <pre><code>// Khai b\u00e1o 'class':\nvar Point = function( x, y ){\n    this.x = x || 0;\n    this.y = y || 0;\n}\n\n// v\u00e0 b\u1ea1n s\u1ebd t\u1ea1o m\u1ed9t instance m\u1edbi nh\u01b0 sau\nvar p = new Point( 100,100 );\n</code></pre> <p>Nh\u01b0 ta th\u1ea5y, c\u00f3 qu\u00e1 nhi\u1ec1u \u0111i\u1ec3m kh\u00f4ng h\u1ee3p l\u00fd. T\u1eeb kho\u00e1 <code>var</code> v\u1ed3n d\u00f9ng cho bi\u1ebfn th\u00ec l\u1ea1i \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 khai b\u00e1o class r\u1ed3i th\u00ec <code>this</code> ch\u1ea3 hi\u1ec3u \u1edf \u0111\u00e2u ra, xong l\u1ea1i <code>x</code> v\u1edbi <code>y</code> ch\u1ea3 bi\u1ebft ki\u1ec3u d\u1eef li\u1ec7u g\u00ec ... Ki\u1ec3u n\u00e0y l\u00e0 kh\u00f4ng \u1ed5n v\u1edbi shader \u0111\u00e2u.</p> <p>Thay v\u00e0o \u0111\u00f3, GLSL c\u00f3 s\u1eb5n c\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 l\u01b0u tr\u1eef c\u00e1c bi\u1ebfn \u0111\u1ed3ng th\u1eddi, c\u00f3 th\u1ec3 k\u1ec3 ra:  * <code>bvec2</code>: Vector boolean 2 chi\u1ec1u, <code>bvec3</code>: Vector boolean 3 chi\u1ec1u, <code>bvec4</code>: Vector boolean 4 chi\u1ec1u  * <code>ivec2</code>: Vector s\u1ed1 nguy\u00ean 2 chi\u1ec1u, <code>ivec3</code>: Vector s\u1ed1 nguy\u00ean 3 chi\u1ec1u, <code>ivec4</code>: Vector s\u1ed1 nguy\u00ean 4 chi\u1ec1u  * <code>vec2</code>: Vector s\u1ed1 th\u1ef1c 2 chi\u1ec1u, <code>vec3</code>: Vector s\u1ed1 th\u1ef1c 3 chi\u1ec1u, <code>vec4</code>: Vector s\u1ed1 th\u1ef1c 4 chi\u1ec1u</p> <p>B\u1ea1n nh\u1eadn ra l\u00e0 c\u00f3 \u0111\u1ee7 c\u00e1c lo\u1ea1i vector cho m\u1ed7i ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n, tuy\u1ec7t v\u1eddi \u00f4ng m\u1eb7t gi\u1eddi. T\u1eeb gi\u1ea3i th\u00edch tr\u00ean \u0111\u00e2y, ta c\u00f3 th\u1ec3 suy lu\u1eadn \u0111\u01b0\u1ee3c r\u1eb1ng <code>bvec2</code> s\u1ebd g\u1ed3m 2 gi\u00e1 tr\u1ecb ki\u1ec3u <code>bool</code> c\u00f2n <code>vec4</code> s\u1ebd g\u1ed3m 4 s\u1ed1 th\u1ef1c ki\u1ec3u <code>float</code></p> <p>M\u1ed9t \u0111i\u1ec3m m\u1edbi n\u1eefa t\u1eeb vector l\u00e0 c\u00e1c chi\u1ec1u (dimension), kh\u00f4ng ph\u1ea3i b\u1ea1n d\u1ef1ng h\u00ecnh 2D th\u00ec d\u00f9ng vector 2 chi\u1ec1u c\u00f2n d\u1ef1ng h\u00ecnh 3D th\u00ec d\u00f9ng vector 3 chi\u1ec1u \u0111\u00e2u nh\u00e9. N\u1ebfu v\u1eady th\u00ec vector 4 chi\u1ec1u d\u00f9ng \u0111\u1ec3 d\u1ef1ng h\u00ecnh g\u00ec ? (Th\u1ef1c ra th\u00ec kh\u00f4ng gian 4 chi\u1ec1u c\u00f3 t\u00ean ri\u00eang \u0111\u1ea5y, l\u00e0 tesseract ho\u1eb7c kh\u1ed1i si\u00eau l\u1eadp ph\u01b0\u01a1ng - hypercube)</p> <p>Nh\u01b0ng kh\u00f4ng ph\u1ea3i th\u1ebf \u0111\u00e2u nh\u00e9, t\u1eeb chi\u1ec1u \u1edf \u0111\u00e2y ch\u1ec9 n\u00f3i v\u1ec1 s\u1ed1 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c l\u01b0u gi\u1eef trong m\u1ed7i vector th\u00f4i:</p> <pre><code>// t\u1ea1o m\u1ed9t vector boolean 2 chi\u1ec1u\nbvec2 b2 = bvec2 ( true, false );\n\n// t\u1ea1o m\u1ed9t vector s\u1ed1 nguy\u00ean 3 chi\u1ec1u\nivec3 i3 = ivec3( 0,0,1 );\n\n// t\u1ea1o m\u1ed9t vector s\u1ed1 th\u1ef1c 4 chi\u1ec1u\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 1. );\n</code></pre> <p><code>b2</code> g\u1ed3m 2 gi\u00e1 tr\u1ecb boolean, <code>i3</code> g\u1ed3m 3 s\u1ed1 nguy\u00ean <code>v4</code> g\u1ed3m 4 s\u1ed1 th\u1ef1c.</p> <p>L\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 s\u1eed d\u1ee5ng t\u1eebng gi\u00e1 tr\u1ecb trong vector? V\u1edbi ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01a1n th\u00ec qu\u00e1 \u0111\u01a1n gi\u1ea3n ; n\u1ebfu ta c\u00f3 <code>float f = 1.2;</code> th\u00ec bi\u1ebfn <code>f</code> s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb <code>1.2</code>. C\u00f2n v\u1edbi vector th\u00ec h\u01a1i kh\u00e1c v\u00e0 c\u0169ng k\u1ef3 di\u1ec7u h\u01a1n m\u1ed9t ch\u00fat.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#truy-cap","title":"Truy c\u1eadp","text":"<p>C\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 truy c\u1eadp c\u00e1c gi\u00e1 tr\u1ecb b\u00ean trong vector</p> <pre><code>// \u0110\u1ea7u ti\u00ean h\u00e3y t\u1ea1o m\u1ed9t vector s\u1ed1 th\u1ef1c 4 chi\u1ec1u\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n</code></pre> <p>\u0110\u1ec3 l\u1ea5y t\u1eebng gi\u00e1 tr\u1ecb trong vector, ta c\u00f3 th\u1ec3 vi\u1ebft:</p> <pre><code>float x = v4.x;     // x = 0.0\nfloat y = v4.y;     // y = 1.0\nfloat z = v4.z;     // z = 2.0\nfloat w = v4.w;     // w = 3.0\n</code></pre> <p>r\u1ea5t d\u1ec5 d\u00e0ng, nh\u01b0ng c\u00f2n nhi\u1ec1u c\u00e1ch kh\u00e1c c\u0169ng cho k\u1ebft qu\u1ea3 t\u01b0\u01a1ng t\u1ef1:</p> <pre><code>float x =   v4.x    =   v4.r    =   v4.s    =   v4[0];     // x = 0.0\nfloat y =   v4.y    =   v4.g    =   v4.t    =   v4[1];     // y = 1.0\nfloat z =   v4.z    =   v4.b    =   v4.p    =   v4[2];     // z = 2.0\nfloat w =   v4.w    =   v4.a    =   v4.q    =   v4[3];     // w = 3.0\n</code></pre> <p>N\u1ebfu b\u1ea1n tinh \u00fd th\u00ec s\u1ebd nh\u1eadn ra:    * <code>X</code>, <code>Y</code>, <code>Z</code> v\u00e0 <code>W</code> \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c vector trong \u0111\u1ed3 ho\u1ea1 3D    * <code>R</code>, <code>G</code>, <code>B</code> v\u00e0 <code>A</code> \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c k\u00eanh m\u00e0u v\u00e0 alpha    * <code>[0]</code>, <code>[1]</code>, <code>[2]</code> v\u00e0 <code>[3]</code> \u0111\u01b0\u1ee3c d\u00f9ng nh\u01b0 m\u1ed9t m\u1ea3ng c\u1ed1 \u0111\u1ecbnh</p> <p>V\u1eady n\u00ean tu\u1ef3 v\u00e0o vi\u1ec7c b\u1ea1n \u0111ang x\u1eed l\u00fd c\u00e1c to\u1ea1 \u0111\u1ed9 2D hay 3D, m\u00e0u k\u00e8m theo alpha ho\u1eb7c kh\u00f4ng, hay m\u1ed9t v\u00e0i con s\u1ed1 b\u1ea5t k\u1ef3, b\u1ea1n c\u00f3 th\u1ec3 tu\u1ef3 ch\u1ecdn c\u00e1ch d\u00f9ng vector b\u1ea1n mu\u1ed1n. Th\u01b0\u1eddng th\u00ec c\u00e1c to\u1ea1 \u0111\u1ed9 2 chi\u1ec1u v\u00e0 c\u00e1c vector s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u b\u1eb1ng c\u00e1c c\u1ea5u tr\u00fac <code>vec2</code>, <code>vec3</code> ho\u1eb7c <code>vec4</code>, m\u00e0u s\u1eafc th\u00ec \u0111\u01b0\u1ee3c l\u01b0u trong <code>vec3</code> ho\u1eb7c <code>vec4</code> n\u1ebfu b\u1ea1n mu\u1ed1n l\u01b0u th\u00eam k\u00eanh alpha n\u1eefa, kh\u00f4ng c\u00f3 r\u00e0ng bu\u1ed9c n\u00e0o c\u1ea3. Th\u1eadm ch\u00ed, n\u1ebfu b\u1ea1n d\u00f9ng c\u1ea3 m\u1ed9t vector <code>bvec4</code> ch\u1ec9 \u0111\u1ec3 l\u01b0u 1 gi\u00e1 tr\u1ecb boolean th\u00ec c\u0169ng \u0111\u01b0\u1ee3c n\u1ed1t, c\u00f3 \u0111i\u1ec1u h\u01a1i l\u00e3ng ph\u00ed b\u1ed9 nh\u1edb.</p> <p>Ch\u00fa \u00fd: Trong shader, c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c k\u00eanh (<code>R</code>, <code>G</code>, <code>B</code>, <code>A</code>) \u0111\u1ec1u \u0111\u01b0\u1ee3c chu\u1ea9n ho\u00e1 \u0111\u1ec3 n\u1eb1m trong kho\u1ea3ng [0-1] ch\u1ee9 kh\u00f4ng ph\u1ea3i [0x00-0xFF], v\u00ec th\u1ebf t\u1ed1t nh\u1ea5t l\u00e0 n\u00ean s\u1eed d\u1ee5ng vector s\u1ed1 th\u1ef1c 4 chi\u1ec1u <code>vec4</code> \u0111\u1ec3 l\u01b0u tr\u1eef gi\u00e1 tr\u1ecb m\u00e0u.</p> <p>Hay qu\u00e1 ph\u1ea3i kh\u00f4ng, ch\u01b0a h\u1ebft \u0111\u00e2u nh\u00e9!</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#trao-oi-swizzle","title":"Tr\u00e1o \u0111\u1ed5i (swizzle)","text":"<p>Ta c\u00f3 th\u1ec3 l\u1ea5y ra nhi\u1ec1u h\u01a1n m\u1ed9t gi\u00e1 tr\u1ecb n\u1eefa c\u01a1 ; gi\u1ea3 s\u1eed b\u1ea1n ch\u1ec9 c\u1ea7n 2 gi\u00e1 tr\u1ecb <code>X</code> v\u00e0 <code>Y</code> t\u1eeb m\u1ed9t <code>vec4</code>, th\u00ec trong JavaScript, b\u1ea1n s\u1ebd ph\u1ea3i l\u00e0m nh\u01b0 sau:</p> <pre><code>var needles = [0, 1]; // v\u1ecb tr\u00ed c\u1ee7a 'x' v\u00e0 'y' trong array d\u01b0\u1edbi \u0111\u00e2y\nvar a = [ 0,1,2,3 ]; // gi\u1ea3 l\u1eadp `vec4`\nvar b = a.filter( function( val, i, array ) {\nreturn needles.indexOf( array.indexOf( val ) ) != -1;\n});\n// b = [ 0, 1 ]\n\n// ho\u1eb7c tr\u1ef1c di\u1ec7n lu\u00f4n\nvar needles = [0, 1];\nvar a = [ 0,1,2,3 ]; // gi\u1ea3 l\u1eadp `vec4`\nvar b = [ a[ needles[ 0 ] ], a[ needles[ 1 ] ] ]; // b = [ 0, 1 ]\n</code></pre> <p>Qu\u00e1 c\u1ed3ng k\u1ec1nh. H\u00e3y xem trong GLSL l\u00e0m nh\u01b0 th\u1ebf n\u00e0o:</p> <pre><code>// T\u1ea1o m\u1ed9t `vec4`\nvec4 v4 = vec4( 0.0, 1.0, 2.0, 3.0 );\n\n// r\u1ed3i ch\u1ec9 l\u1ea5y m\u1ed7i x v\u00e0 y ra\nvec2 xy =   v4.xy; //   xy = vec2( 0.0, 1.0 );\n</code></pre> <p>\u1ee6a c\u00e1i g\u00ec v\u1eady ?! Khi b\u1ea1n truy c\u1eadp li\u00ean ti\u1ebfp (concatenate accessors), GLSL s\u1ebd tr\u1ea3 v\u1ec1 t\u1eadp con c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb b\u1ea1n mu\u1ed1n, g\u00f3i g\u1ecdn trong m\u1ed9t vector kh\u00e1c. Th\u1ef1c ra th\u00ec vector l\u00e0 m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u cho ph\u00e9p truy c\u1eadp ng\u1eabu nhi\u00ean, n\u1ebfu mu\u1ed1n b\u1ea1n c\u00f3 th\u1ec3 t\u01b0\u1ee3ng t\u01b0\u1ee3ng n\u00f3 gi\u1ed1ng array b\u00ean JavaScript v\u1eady. V\u00ec th\u1ebf, b\u1ea1n kh\u00f4ng ch\u1ec9 l\u1ea5y \u0111\u01b0\u1ee3c 1 t\u1eadp con m\u00e0 c\u00f2n c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh th\u1ee9 t\u1ef1 t\u1eebng ph\u1ea7n t\u1eed mu\u1ed1n l\u1ea5y n\u1eefa c\u01a1. \u0110o\u1ea1n code sau s\u1ebd tr\u00e1o \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c vector theo th\u1ee9 t\u1ef1 ng\u01b0\u1ee3c l\u1ea1i:</p> <pre><code>// T\u1ea1o m\u1ed9t vector R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n// Truy c\u1eadp c\u00e1c g\u00eda tr\u1ecb theo th\u1ee9 t\u1ef1 ng\u01b0\u1ee3c l\u1ea1i\nvec4 backwards = v4.abgr; // backwards = vec4( 1.0, 0.0, 0.8, 0.2 );\n</code></pre> <p>H\u01a1n th\u1ebf n\u1eefa, ch\u1eb3ng ai ng\u0103n b\u1ea1n l\u1ea5y m\u1ed9t ph\u1ea7n t\u1eed nhi\u1ec1u l\u1ea7n:</p> <pre><code>// T\u1ea1o m\u1ed9t vector R,G,B,A\nvec4 color = vec4( 0.2, 0.8, 0.0, 1.0 );\n\n// V\u00e0 t\u1ea1o m\u1ed9t vector m\u1edbi ch\u1ec9 d\u00f9ng gi\u00e1 tr\u1ecb c\u1ee7a k\u00eanh G (2 l\u1ea7n) v\u00e0 A\nvec3 GAG = v4.gag; // GAG = vec4( 0.8, 1.0, 0.8 );\n</code></pre> <p>Kh\u0103 n\u0103ng n\u00e0y qu\u00e1 ng\u1ea7u khi ph\u1ea3i x\u1eed l\u00fd vector, v\u00ed d\u1ee5 nh\u01b0 khi ch\u1ec9 mu\u1ed1n l\u1ea5y c\u00e1c k\u00eanh RGB c\u1ee7a m\u1ed9t m\u00e0u c\u00f3 \u0111\u1ee7 RGBA ch\u1eb3ng h\u1ea1n.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#overload-tat-ca","title":"Overload t\u1ea5t c\u1ea3","text":"<p>\u1ede ph\u1ea7n ki\u1ec3u d\u1eef li\u1ec7u, t\u00f4i \u0111\u00e3 nh\u1eafc t\u1edbi \u0111i\u1ec1u g\u00ec \u0111\u00f3 li\u00ean quan t\u1edbi h\u00e0m kh\u1edfi t\u1ea1o (constructor) v\u00e0 \u0111\u00e2y l\u1ea1i l\u00e0 1 t\u00ednh n\u0103ng tuy\u1ec7t v\u1eddi n\u1eefa c\u1ee7a GLSL ; overload. Cho ai ch\u01b0a bi\u1ebft, overload l\u00e0 m\u1ed9t to\u00e1n t\u1eed ho\u1eb7c h\u00e0m s\u1ed1 \u0111\u1ea1i lo\u1ea1i s\u1ebd 't\u1ef1 \u0111\u1ed9ng thay \u0111\u1ed5i c\u00e1ch th\u1ef1c thi sao cho kh\u1edbp v\u1edbi ki\u1ec3u d\u1eef li\u1ec7u'. JavaScript kh\u00f4ng c\u00f3 overload, n\u00ean b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y n\u00f3 h\u01a1i l\u1ea1 l\u00fac \u0111\u1ea7u, nh\u01b0ng khi \u0111\u00e3 quen r\u1ed3i th\u00ec b\u1ea1n s\u1ebd th\u1eafc m\u1eafc sao JavaScript l\u1ea1i kh\u00f4ng c\u00f3 t\u00ednh n\u0103ng n\u00e0y (ng\u1eafn g\u1ecdn l\u00e0 do kh\u00f4ng r\u00e0ng bu\u1ed9c ki\u1ec3u d\u1eef li\u1ec7u \u0111\u00f3).</p> <p>H\u00e3y xem v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 hi\u1ec3u overload l\u00e0 g\u00ec:</p> <pre><code>vec2 a = vec2( 1.0, 1.0 );\nvec2 b = vec2( 1.0, 1.0 );\n// overload ph\u00e9p c\u1ed9ng\nvec2 c = a + b;     // c = vec2( 2.0, 2.0 );\n</code></pre> <p>H\u1ea2 ? Hai gi\u00e1 tr\u1ecb kh\u00f4ng ph\u1ea3i s\u1ed1 \u0111\u01a1n thu\u1ea7n m\u00e0 c\u0169ng c\u1ed9ng \u0111\u01b0\u1ee3c ?!</p> <p>Ch\u00ednh x\u00e1c l\u00e0 th\u1ebf \u0111\u00f3. T\u1ea5t nhi\u00ean l\u00e0 \u00e1p d\u1ee5ng cho to\u00e0n b\u1ed9 c\u00e1c to\u00e1n t\u1eed kh\u00e1c (<code>+</code>, <code>-</code>, <code>*</code> &amp; <code>/</code>) n\u1eefa nh\u01b0ng \u0111\u00e2y m\u1edbi l\u00e0 m\u1edf \u0111\u1ea7u th\u00f4i. H\u00e3y xem \u0111o\u1ea1n code sau:</p> <pre><code>vec2 a = vec2( 0.0, 0.0 );\nvec2 b = vec2( 1.0, 1.0 );\n// overload h\u00e0m kh\u1edfi t\u1ea1o\nvec4 c = vec4( a , b );         // c = vec4( 0.0, 0.0, 1.0, 1.0 );\n</code></pre> <p>Ta v\u1eeba m\u1edbi t\u1ea1o n\u00ean m\u1ed9t <code>vec4</code> t\u1eeb 2 <code>vec2</code>, b\u1eb1ng c\u00e1ch g\u00e1n gi\u00e1 tr\u1ecb c\u1ee7a <code>a.x</code> v\u00e0 <code>a.y</code> cho <code>X</code>, <code>Y</code> c\u1ee7a <code>vec4</code>, r\u1ed3i l\u1ea1i g\u00e1n ti\u1ebfp <code>b.x</code> v\u00e0 <code>b.y</code> cho <code>Z</code>, <code>W</code> c\u1ee7a <code>vec4</code></p> <p>\u0110\u00e2y l\u00e0 \u0111i\u1ec1u s\u1ebd x\u1ea3y ra khi m\u1ed9t h\u00e0m \u0111\u01b0\u1ee3c overload \u0111\u1ec3 ch\u1ea5p nh\u1eadn c\u00e1c lo\u1ea1i tham s\u1ed1 kh\u00e1c nhau, c\u1ee5 th\u1ec3 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y l\u00e0 h\u00e0m kh\u1edfi t\u1ea1o c\u1ee7a <code>vec4</code>. \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 r\u1ea5t nhi\u1ec1u phi\u00ean b\u1ea3n kh\u00e1c nhau c\u1ee7a c\u00f9ng 1 h\u00e0m c\u00f3 th\u1ec3 c\u00f9ng t\u1ed3n t\u1ea1i, v\u00ed d\u1ee5 c\u00e1c l\u1ec7nh khai b\u00e1o sau ho\u00e0n to\u00e0n h\u1ee3p l\u1ec7:</p> <pre><code>vec4 a = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 a = vec4(1.0);// c\u1ea3 4 gi\u00e1 tr\u1ecb x, y, z, w \u0111\u1ec1u b\u1eb1ng 1.0\nvec4 a = vec4( v2, float, v4 );// vec4( v2.x, v2.y, float, v4.x );\nvec4 a = vec4( v3, float );// vec4( v3.x, v3.y, v3.z, float );\netc.\n</code></pre> <p>\u0110i\u1ec1u duy nh\u1ea5t b\u1ea1n c\u1ea7n b\u1eadn t\u00e2m l\u00e0 \u0111\u1ea3m b\u1ea3o h\u00e0m t\u1ea1o c\u00f3 \u0111\u1ee7 d\u1eef li\u1ec7u n\u00f3 c\u1ea7n m\u00e0 th\u00f4i.</p> <p>\u0110i\u1ec1u cu\u1ed1i c\u00f9ng, b\u1ea1n ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 overload m\u1ed9t h\u00e0m c\u00f3 s\u1eb5n b\u1ea5t k\u1ef3 sao cho n\u00f3 ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u c\u1ee7a b\u1ea1n (c\u0169ng kh\u00f4ng n\u00ean l\u1ea1m d\u1ee5ng qu\u00e1).</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#cac-kieu-du-lieu-khac","title":"C\u00e1c ki\u1ec3u d\u1eef li\u1ec7u kh\u00e1c","text":"<p>Vector th\u1eadt th\u00fa v\u1ecb, v\u00e0 l\u00e0 v\u0169 kh\u00ed ch\u00ednh trong code shader. C\u00f2n c\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u kh\u00e1c nh\u01b0 Ma tr\u1eadn v\u00e0 Texture sampler s\u1ebd \u0111\u01b0\u1ee3c b\u00e0n t\u1edbi \u1edf ph\u1ea7n sau c\u1ee7a quy\u1ec3n s\u00e1ch.</p> <p>B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 d\u00f9ng Array. T\u1ea5t nhi\u00ean l\u00e0 ph\u1ea3i quy \u0111\u1ecbnh ki\u1ec3u r\u1ed3i v\u00e0 sau \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i \u0111i\u1ec3m \u0111\u00e1ng l\u01b0u t\u00e2m:</p> <ul> <li>K\u00edch th\u01b0\u1edbc Array c\u1ed1 \u0111\u1ecbnh</li> <li>Kh\u00f4ng th\u1ec3 d\u00f9ng c\u00e1c h\u00e0m push(), pop(), splice() v\u00e2n v\u00e2n v\u00e0 c\u0169ng kh\u00f4ng c\u00f3 thu\u1ed9c t\u00ednh <code>length</code> lu\u00f4n nha</li> <li>Kh\u00f4ng th\u1ec3 g\u00e1n gi\u00e1 tr\u1ecb h\u00e0ng lo\u1ea1t khi kh\u1edfi t\u1ea1o m\u00e0 ph\u1ea3i g\u00e1n gi\u00e1 tr\u1ecb t\u1eebng ph\u1ea7n t\u1eed m\u1ed9t</li> </ul> <p>Code nh\u01b0 sau s\u1ebd kh\u00f4ng \u0111\u00fang:</p> <pre><code>int values[3] = [0,0,0];\n</code></pre> <p>ph\u1ea3i nh\u01b0 th\u1ebf n\u00e0y c\u01a1:</p> <pre><code>int values[3];\nvalues[0] = 0;\nvalues[1] = 0;\nvalues[2] = 0;\n</code></pre> <p>\u0110i\u1ec1u n\u00e0y c\u0169ng kh\u00f4ng qu\u00e1 t\u1ec7 n\u1ebfu b\u1ea1n th\u1eadt s\u1ef1 c\u1ea7n can thi\u1ec7p t\u1eebng ph\u1ea7n t\u1eed trong array. C\u00f2n n\u1ebfu mu\u1ed1n \u0111a d\u1ea1ng h\u01a1n th\u00ec c\u00f3 th\u1ec3 d\u00f9ng ki\u1ec3u <code>struct</code>. Ch\u00fang gi\u1ed1ng nh\u01b0 c\u00e1c object nh\u01b0ng kh\u00f4ng c\u00f3 h\u00e0m \u0111i k\u00e8m ; ch\u00fang ch\u1ec9 cho ph\u00e9p \u0111\u00f3ng g\u00f3i c\u00e1c bi\u1ebfn v\u00e0o b\u00ean trong th\u00f4i</p> <pre><code>struct ColorStruct {\n    vec3 color0;\n    vec3 color1;\n    vec3 color2;\n}\n</code></pre> <p>sau \u0111\u00f3 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng nh\u01b0 sau:</p> <pre><code>// Kh\u1edfi t\u1ea1o c\u1ea5u tr\u00fac v\u1edbi gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3\nColorStruct sandy = ColorStruct(    vec3(0.92,0.83,0.60),\n                                    vec3(1.,0.94,0.69),\n                                    vec3(0.95,0.86,0.69) );\n\n// Truy c\u1eadp bi\u1ebfn trong c\u1ea5u tr\u00fac\nsandy.color0 // vec3(0.92,0.83,0.60)\n</code></pre> <p>C\u00fa ph\u00e1p ki\u1ec3u n\u00e0y c\u00f3 th\u1ec3 h\u01a1i t\u1ef1 do ch\u00fat, nh\u01b0ng n\u00f3 s\u1ebd gi\u00fap b\u1ea1n vi\u1ebft code r\u00f5 r\u00e0ng h\u01a1n hay \u00edt nh\u1ea5t l\u00e0 nh\u00ecn d\u1ec5 hi\u1ec3u h\u01a1n.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#cac-lenh-ieu-khien","title":"C\u00e1c l\u1ec7nh \u0111i\u1ec1u khi\u1ec3n","text":"<p>C\u1ea5u tr\u00fac d\u1eef li\u1ec7u hay th\u1eadt \u0111\u1ea5y nh\u01b0ng t\u1edbi l\u00fac n\u00e0o \u0111\u00f3 ta v\u1eabn c\u00f3 th\u1ec3 ph\u1ea3i c\u1ea7n t\u1edbi c\u00e1c l\u1ec7nh \u0111i\u1ec1u khi\u1ec3n. May m\u00e1n l\u00e0 c\u00fa ph\u00e1p r\u1ea5t gi\u1ed1ng v\u1edbi JavaScript.</p> <p>V\u00ed d\u1ee5 v\u1ec1 l\u1ec7nh \u0111i\u1ec1u ki\u1ec7n:</p> <pre><code>if( condition ){\n    //true\n}else{\n    //false\n}\n</code></pre> <p>C\u00f2n m\u1ed9t v\u00f2ng l\u1eb7p th\u00ec th\u01b0\u1eddng gi\u1ed1ng nh\u01b0:</p> <pre><code>const int count = 10;\nfor( int i = 0; i &lt;= count; i++){\n    // l\u00e0m g\u00ec \u0111\u00f3\n}\n</code></pre> <p>ho\u1eb7c v\u1edbi iterator:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    // l\u00e0m g\u00ec \u0111\u00f3\n}\n</code></pre> <p>Ch\u00fa \u00fd l\u00e0 bi\u1ebfn <code>count</code> ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o l\u00e0 m\u1ed9t <code>h\u1eb1ng s\u1ed1 (constant)</code>. \u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 ta ph\u1ea3i \u0111\u1eb7t th\u00eam t\u1eeb kho\u00e1 <code>const</code> v\u00e0o tr\u01b0\u1edbc nh\u01b0 v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y.</p> <p>Ngo\u00e0i ra ta c\u0169ng c\u00f3 c\u00e1c l\u1ec7nh <code>break</code> v\u00e0 <code>continue</code>:</p> <pre><code>const float count = 10.;\nfor( float i = 0.0; i &lt;= count; i+= 1.0 ){\n    if( i &lt; 5. )continue;\n    if( i &gt;= 8. )break;\n}\n</code></pre> <p>Ch\u00fa \u00fd l\u00e0 tr\u00ean m\u1ed9t v\u00e0i n\u1ec1n t\u1ea3ng ph\u1ea7n c\u1ee9ng, l\u1ec7nh <code>break</code> kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng gi\u1ed1ng nhau n\u00ean v\u00f2ng l\u1eb7p v\u1eabn ch\u1ea1y.</p> <p>Nh\u00ecn chung th\u00ec b\u1ea1n n\u00ean gi\u1eef s\u1ed1 v\u00f2ng l\u1eb7p c\u00e0ng \u00edt c\u00e0ng t\u1ed1t v\u00e0 tr\u00e1nh s\u1eed d\u1ee5ng c\u00e1c l\u1ec7nh \u0111i\u1ec1u ki\u1ec7n c\u00e0ng nhi\u1ec1u c\u00e0ng t\u1ed1t.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#qualifiers","title":"qualifiers","text":"<p>Kh\u00f4ng ch\u1ec9 c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u m\u00e0 GLSL c\u00f2n d\u00f9ng qualifier \u0111\u1ec3 gi\u00fap tr\u00ecnh bi\u00ean d\u1ecbch bi\u1ebft m\u1ed7i bi\u1ebfn c\u00f3 g\u00ec \u0111\u1eb7c bi\u1ec7t. V\u00ed d\u1ee5 c\u00f3 nh\u1eefng d\u1eef li\u1ec7u ch\u1ec9 \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb CPU sang GPU g\u1ecdi l\u00e0 attribute v\u00e0 uniform. T\u1eeb kho\u00e1 attribute \u0111\u01b0\u1ee3c d\u00f9ng trong vertex shader, c\u00f2n uniform \u0111\u01b0\u1ee3c d\u00f9ng cho c\u1ea3 vertex shader v\u00e0 fragment shader. T\u1eeb kho\u00e1 <code>varying</code> \u0111\u1ec3 \u0111\u00e1nh d\u1ea5u c\u00e1c bi\u1ebfn lu\u00e2n chuy\u1ec3n gi\u1eefa vertex shader v\u00e0 fragment shader.</p> <p>T\u00f4i s\u1ebd kh\u00f4ng \u0111i v\u00e0o chi ti\u1ebft \u1edf \u0111\u00e2y v\u00ec ta ch\u1ee7 y\u1ebfu t\u1eadp trung v\u00e0o fragment shader nh\u01b0ng \u1edf ph\u1ea7n sau c\u1ee7a quy\u1ec3n s\u00e1ch, b\u1ea1n s\u1ebd th\u1ea5y code t\u01b0\u01a1ng t\u1ef1 nh\u01b0:</p> <pre><code>uniform vec2 u_resolution;\n</code></pre> <p>T\u00f4i m\u1edbi \u0111\u1eb7t t\u1eeb kho\u00e1 <code>uniform</code> v\u00e0o tr\u01b0\u1edbc ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a bi\u1ebfn khi khai b\u00e1o \u0111\u00f3. \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 CPU s\u1ebd g\u1eedi th\u00eam th\u00f4ng tin cho shader th\u00f4ng qua bi\u1ebfn n\u00e0y. C\u1ee5 th\u1ec3 \u0111\u00f3 l\u00e0 \u0111\u1ed9 ph\u00e2n gi\u1ea3i c\u1ee7a canvas, chi\u1ec1u r\u1ed9ng v\u00e0 chi\u1ec1u cao c\u1ee7a canvas s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o bi\u1ebfn x v\u00e0 y c\u1ee7a m\u1ed9t vector 2 chi\u1ec1u.</p> <p>Khi tr\u00ecnh bi\u00ean d\u1ecbch th\u1ea5y m\u1ed9t bi\u1ebfn c\u00f3 \u0111\u00e1nh d\u1ea5u qualifier n\u00e0y, n\u00f3 s\u1ebd \u0111\u1ea3m b\u1ea3o b\u1ea1n kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb trong shader.</p> <p>\u0110i\u1ec1u t\u01b0\u01a1ng t\u1ef1 c\u0169ng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho bi\u1ebfn <code>count</code> \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 gi\u1edbi h\u1ea1n s\u1ed1 v\u00f2ng l\u1eb7p <code>for</code>:</p> <pre><code>const float count = 10.;\nfor( ... )\n</code></pre> <p>Khi ta d\u00f9ng qualifier <code>const</code>, tr\u00ecnh bi\u00ean d\u1ecbch s\u1ebd \u0111\u1ea3m b\u1ea3o r\u1eb1ng gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn n\u00e0y ch\u1ec9 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o m\u1ed9t l\u1ea7n duy nh\u1ea5t, n\u1ebfu kh\u00f4ng th\u00ec n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 h\u1eb1ng s\u1ed1 n\u1eefa r\u1ed3i.</p> <p>C\u00f2n 3 qualifier hay \u0111\u01b0\u1ee3c d\u00f9ng n\u1eefa cho c\u00e1c tham s\u1ed1 c\u1ee7a h\u00e0m l\u00e0 : <code>in</code>, <code>out</code> v\u00e0 <code>inout</code>. Trong JavaScript, khi b\u1ea1n truy\u1ec1n gi\u00e1 tr\u1ecb v\u00e0o 1 h\u00e0m th\u00ec m\u1ecdi thay \u0111\u1ed5i v\u1edbi gi\u00e1 tr\u1ecb \u0111\u00f3 ch\u1ec9 c\u00f3 t\u00e1c d\u1ee5ng trong h\u00e0m ch\u1ee9 kh\u00f4ng \u1ea3nh h\u01b0\u1edfng g\u00ec t\u1edbi bi\u1ebfn b\u00ean ngo\u00e0i.</p> <pre><code>function banana( a ){\n    a += 1;\n}\nvar value = 0;\nbanana( value );\nconsole.log( value );// &gt; 0 ; ra kh\u1ecfi h\u00e0m th\u00ec value v\u1eabn gi\u1eef nguy\u00ean gi\u00e1 tr\u1ecb nh\u01b0 tr\u01b0\u1edbc khi g\u1ecdi h\u00e0m\n</code></pre> <p>\u00dd ngh\u0129a c\u1ee7a 3 qualifier tham s\u1ed1:   * <code>in</code> kh\u00f4ng thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn b\u00ean ngo\u00e0i (m\u1eb7c \u0111\u1ecbnh cho m\u1ecdi tham s\u1ed1)   * <code>out</code>  ch\u1ec9 d\u00f9ng \u0111\u1ec3 l\u01b0u gi\u00e1 tr\u1ecb m\u1edbi m\u00e0 v\u1eabn gi\u1eef nguy\u00ean khi \u0111\u00e3 ra kh\u1ecfi h\u00e0m   * <code>inout</code>  tu\u1ef3 \u00fd \u0111\u1ecdc ghi</p> <p>Vi\u1ebft l\u1ea1i h\u00e0m banana trong GLSL:</p> <pre><code>void banana( inout float a ){\n    a += 1.;\n}\nfloat A = 0.;\nbanana( A ); // l\u00fac n\u00e0y A = 1.;\n</code></pre> <p>\u0110i\u1ec1u n\u00e0y r\u1ea5t kh\u00e1c so v\u1edbi JavaScript v\u00e0 c\u0169ng r\u1ea5t ti\u1ec7n.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#khong-gian-va-toa-o","title":"Kh\u00f4ng gian v\u00e0 to\u1ea1 \u0111\u1ed9","text":"<p>Ch\u00fa \u00fd cu\u1ed1i c\u00f9ng, trong DOM v\u00e0 Canvas 2D, tr\u1ee5c Y h\u01b0\u1edbng xu\u1ed1ng d\u01b0\u1edbi. \u0110i\u1ec1u n\u00e0y c\u00f3 l\u00fd trong b\u1ed1i c\u1ea3nh DOM d\u1ef1ng trang web c\u00f3 th\u1ec3 scroll \u0111\u01b0\u1ee3c ; t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi. C\u00f2n trong canvas c\u1ee7a WebGL th\u00ec tr\u1ee5c Y h\u01b0\u1edbng l\u00ean tr\u00ean.</p> <p>\u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 g\u1ed1c t\u1ecda \u0111\u1ed9, \u0111i\u1ec3m (0, 0) n\u1eb1m \u1edf g\u00f3c d\u01b0\u1edbi c\u00f9ng b\u00ean tr\u00e1i c\u1ee7a WebGL canvas, ch\u1ee9 kh\u00f4ng ph\u1ea3i g\u00f3c tr\u00ean c\u00f9ng b\u00ean tr\u00e1i nh\u01b0 2D Canvas. To\u1ea1 \u0111\u1ed9 c\u1ee7a texture c\u0169ng v\u00ec th\u1ebf m\u00e0 c\u00f3 th\u1ec3 g\u00e2y l\u00fa m\u1ed9t ch\u00fat n\u1ebfu ch\u01b0a quen.</p>"},{"location":"Frontend/shader/appendix/04/README-vi/#va-the-la-het","title":"V\u00e0 th\u1ebf l\u00e0 h\u1ebft !","text":"<p>T\u1ea5t nhi\u00ean ta c\u00f3 th\u1ec3 \u0111i s\u00e2u h\u01a1n v\u00e0o r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m ph\u00eda tr\u00ean, nh\u01b0ng nh\u1edb r\u1eb1ng \u0111\u00e2y ch\u1ec9 l\u00e0 l\u1eddi ch\u00e0o d\u00e0nh cho ng\u01b0\u1eddi m\u1edbi. \u0110\u00fang l\u00e0 c\u00f3 r\u1ea5t nhi\u1ec1u th\u1ee9 ph\u1ea3i t\u00ecm hi\u1ec3u nh\u01b0ng v\u1edbi s\u1ef1 ki\u00ean tr\u00ec v\u00e0 ch\u0103m ch\u1ec9 th\u00ec s\u1ebd quen nhanh th\u00f4i.</p> <p>T\u00f4i hy v\u1ecdng b\u1ea1n th\u1ea5y m\u1ed9t v\u00e0i ph\u1ea7n h\u1eefu \u00edch \u1edf \u0111\u00e2y, gi\u1edd th\u00ec b\u1ea1n s\u1eb5n s\u00e0ng b\u1eaft \u0111\u1ea7u chuy\u1ec3n phi\u00eau l\u01b0u v\u00e0o quy\u1ec3n s\u00e1ch ch\u01b0a ?</p>"},{"location":"Frontend/shader/appendix/05/","title":"Index","text":""},{"location":"Frontend/shader/appendix/05/#an-introduction-for-vectors","title":"An introduction for vectors","text":"<p>by ...</p>"},{"location":"Frontend/shader/appendix/05/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/05/README-vi/#gioi-thieu-ve-vector","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 vector","text":"<p>\u0110ang ho\u00e0n thi\u1ec7n...</p>"},{"location":"Frontend/shader/appendix/06/","title":"Index","text":""},{"location":"Frontend/shader/appendix/06/#an-introduction-to-interpolation","title":"An introduction to interpolation","text":"<p>by ...</p>"},{"location":"Frontend/shader/appendix/06/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/appendix/06/README-vi/#gioi-thieu-ve-noi-suy","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 n\u1ed9i suy","text":"<p>\u0110ang ho\u00e0n thi\u1ec7n...</p>"},{"location":"Frontend/shader/examples/","title":"Examples Gallery","text":"<p>Created by kynd(@kyndinfo) and Patricio Gonzalez Vivo(@patriciogv)</p> <p>This is a collection of examples extracted from the chapters of this book together with shared shaders kindly donated by other readers using the on-line editor. Feel free to explore and tweak them bit by bit. Once you have something you are proud of, click the \"Export\" and then copy the \"URL to code...\". Send it to @bookofshaders or @kyndinfo. We are looking forward to see it!</p>"},{"location":"Frontend/shader/examples/FEATURED-de/","title":"FEATURED de","text":""},{"location":"Frontend/shader/examples/FEATURED-de/#ausgewahlte-beispiel-shader","title":"Ausgew\u00e4hlte Beispiel Shader","text":""},{"location":"Frontend/shader/examples/FEATURED/","title":"FEATURED","text":""},{"location":"Frontend/shader/examples/FEATURED/#featured-examples","title":"Featured examples","text":""},{"location":"Frontend/shader/examples/README-de/","title":"Galerie mit ausgew\u00e4hlten Shader Beispielen","text":"<p>Kuratiert von kynd(@kyndinfo) und Patricio Gonzalez Vivo(@patriciogv)</p> <p>Dies ist eine Sammlung von Shader Beispielen aus den verschiedenen Kapiteln dieses Buches. Sie wird erg\u00e4nzt durch weitere Shader, die von Lesern \u00fcber den Online-Editor zur Verf\u00fcgung gestellt wurden.</p> <p>Du bist herzlich eingeladen, die verschiedenen Shader auszuprobieren, zu erweitern und zu ver\u00e4ndern. Und nat\u00fcrlich kannst Du auch ganz neue Shader enwickeln.</p> <p>Wenn Du Deine Arbeiten anderen Lesern zur Verf\u00fcgung stellen m\u00f6chtest, klicke auf die \u201eExport\u201c-Schaltfl\u00e4che im Editor und kopiere anschlie\u00dfend den Inhalt des Feldes \u201eURL to code...\u201c. Sende diese URL an @bookofshaders oder an @kyndinfo. Wir freuen uns auf Deine Ergebnisse.</p>"},{"location":"Frontend/shader/examples/README-id/","title":"Galeri Contoh","text":"<p>Dibuat oleh kynd(@kyndinfo) dan Patricio Gonzalez Vivo(@patriciogv)</p> <p>Ini adalah kumpulan contoh yang diekstrak dari bab-bab buku ini bersama dengan shader bersama yang disumbangkan oleh pembaca lain menggunakan editor on-line. Jangan ragu untuk menjelajahi dan menyesuaikannya sedikit demi sedikit. Setelah Anda memiliki sesuatu yang Anda banggakan, klik \"Export\" dan kemudian salin \"URL ke kode ...\". Kirimkan ke @bookofshaders atau @kyndinfo. Kami sangat menantikan untuk melihatnya!</p>"},{"location":"Frontend/shader/examples/README-pl/","title":"Galeria przyk\u0142ad\u00f3w","text":"<p>Stworzone przez kynd(@kyndinfo) oraz Patricio Gonzalez Vivo (@patriciogv)</p> <p>To jest zbi\u00f3r przyk\u0142ad\u00f3w wyci\u0105gni\u0119tych z rozdzia\u0142\u00f3w tej ksi\u0105\u017cki, wraz z udost\u0119pnionymi shaderami hojnie przekazanymi przez innych czytelnik\u00f3w korzystaj\u0105cych z edytora online. Zach\u0119camy do eksplorowania i modyfikowania ich krok po kroku. Gdy stworzysz co\u015b, z czego b\u0119dziesz dumny, kliknij \"Export\", a nast\u0119pnie skopiuj \"URL do kodu...\". Prze\u015blij go do @bookofshaders lub @kyndinfo. Nie mo\u017cemy si\u0119 doczeka\u0107, aby to zobaczy\u0107!</p>"},{"location":"Frontend/shader/examples/README-ru/","title":"\u0413\u0430\u043b\u0435\u0440\u0435\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432","text":"<p>\u041a\u0443\u0440\u0430\u0442\u043e\u0440\u044b: kynd(@kyndinfo) \u0438 \u041f\u0430\u0442\u0440\u0438\u0446\u0438\u043e \u0413\u043e\u043d\u0437\u0430\u043b\u0435\u0441 \u0412\u0438\u0432\u043e(@patriciogv)</p> <p>\u042d\u0442\u043e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0433\u043b\u0430\u0432 \u043a\u043d\u0438\u0433\u0438, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u043b\u044e\u0431\u0435\u0437\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u0438 \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043d\u0435\u0447\u0442\u043e \u0434\u043e\u0441\u0442\u043e\u0439\u043d\u043e\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0448\u0438\u0440\u043e\u043a\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0438, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \"Export\" \u0438 \u0441\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 URL. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 @bookofshaders \u0438\u043b\u0438 @kyndinfo. \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0434\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0432\u0430\u0448\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b!</p>"},{"location":"Frontend/shader/examples/README-ua/","title":"\u0413\u0430\u043b\u0435\u0440\u0435\u044f \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432","text":"<p>\u0421\u0442\u0432\u043e\u0440\u0435\u043d\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0456 by kynd(@kyndinfo) \u0442\u0430 Patricio Gonzalez Vivo(@patriciogv)</p> <p>\u0426\u0435 \u043a\u043e\u043b\u0435\u043a\u0446\u0456\u044f \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432, \u0432\u0437\u044f\u0442\u0438\u0445 \u0456\u0437 \u0440\u043e\u0437\u0434\u0456\u043b\u0456\u0432 \u0446\u0456\u0454\u0457 \u043a\u043d\u0438\u0433\u0438 \u0440\u0430\u0437\u043e\u043c \u0456\u0437  \u0448\u0435\u0439\u0434\u0435\u0440\u0430\u043c\u0438, \u043b\u044e\u0431'\u044f\u0437\u043d\u043e \u043d\u0430\u0434\u0430\u043d\u0438\u043c\u0438 \u0456\u043d\u0448\u0438\u043c\u0438 \u0447\u0438\u0442\u0430\u0447\u0430\u043c\u0438 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043e\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430. \u041d\u0435 \u0441\u043e\u0440\u043e\u043c\u0442\u0435\u0441\u044f \u0434\u043e\u0441\u043b\u0456\u0434\u0436\u0443\u0432\u0430\u0442\u0438 \u0442\u0430 \u0437\u043c\u0456\u043d\u044e\u0432\u0430\u0442\u0438 \u0457\u0445. \u042f\u043a\u0449\u043e \u0443 \u0432\u0430\u0441 \u0432\u0438\u0439\u0434\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u044f\u043a\u0438\u043c \u0432\u0438 \u043f\u0438\u0448\u0430\u0454\u0442\u0435\u0441\u044f, \u0437\u0440\u043e\u0431\u0456\u0442\u044c \u0435\u043a\u0441\u043f\u043e\u0440\u0442 \u0441\u0432\u043e\u0457\u0445 \u0440\u043e\u0431\u043e\u0442\u0438 \u0442\u0430  \u043d\u0430\u0434\u0456\u0448\u043b\u0456\u0442\u044c \u0439\u043e\u0433\u043e \u043d\u0430 \u0430\u0434\u0440\u0435\u0441\u0443 @bookofshaders \u0430\u0431\u043e @kyndinfo. \u041c\u0438 \u0437 \u043d\u0435\u0442\u0435\u0440\u043f\u0456\u043d\u043d\u044f\u043c \u0447\u0435\u043a\u0430\u0442\u0438\u043c\u0435\u043c\u043e!</p>"},{"location":"Frontend/shader/examples/README-vi/","title":"Th\u01b0 vi\u1ec7n c\u00e1c v\u00ed d\u1ee5","text":"<p>Tuy\u1ec3n ch\u1ecdn b\u1edfi kynd(@kyndinfo) v\u00e0 Patricio Gonzalez Vivo(@patriciogv)</p> <p>\u0110\u00e2y l\u00e0 m\u1ed9t b\u1ed9 s\u01b0u t\u1eadp c\u00e1c v\u00ed d\u1ee5 \u0111\u01b0\u1ee3c tr\u00edch t\u1eeb c\u00e1c ch\u01b0\u01a1ng c\u1ee7a quy\u1ec3n s\u00e1ch k\u00e8m theo c\u00e1c shader \u0111\u01b0\u1ee3c nh\u1eefng \u0111\u1ed9 gi\u1ea3 kh\u00e1c \u0111\u00f3ng g\u00f3p tr\u00ean editor online. B\u1ea1n c\u00f3 th\u1ec3 t\u1ef1 do kh\u00e1m ph\u00e1 v\u00e0 s\u1eeda code tu\u1ef3 \u00fd. N\u1ebfu b\u1ea1n th\u1ea5y \u01b0ng \u00fd v\u1edbi b\u1ea5t k\u1ef3 t\u00e1c ph\u1ea9m n\u00e0o c\u1ee7a m\u00ecnh, b\u1ea1n c\u00f3 th\u1ec3 click n\u00fat \"Export\" v\u00e0 copy \"URL to code...\". Sau \u0111\u00f3 g\u1eedi t\u1edbi \u0111\u1ecba ch\u1ec9 @bookofshaders ho\u1eb7c @kyndinfo. Ch\u00fang t\u00f4i r\u1ea5t mong ch\u1edd \u0111\u01b0\u1ee3c b\u1ed5 sung c\u00e1c t\u00e1c ph\u1ea9m c\u1ee7a b\u1ea1n v\u00e0o th\u01b0 vi\u1ec7n.</p>"},{"location":"Frontend/shader/examples/featured_examples/","title":"Featured examples","text":""},{"location":"Frontend/shader/examples/tmp/","title":"Examples Gallery","text":"<p>Created by kynd(@kyndinfo) and Patricio Gonzalez Vivo(@patriciogv)</p> <p>This is a collection of examples extracted from the chapters of this book together with shared shaders kindly donated by other readers using the on-line editor. Feel free to explore and tweak them bit by bit. Once you have something you are proud of, click the \"Export\" and then copy the \"URL to code...\". Send it to @bookofshaders or @kyndinfo. We are looking forward to see it!</p>"},{"location":"Frontend/shader/glossary/","title":"Glossary","text":""},{"location":"Frontend/shader/glossary/#by-theme","title":"By theme","text":"<ul> <li>TYPES</li> </ul> <p>void bool int float bvec2 bvec3 bvec4 ivec2 ivec3 ivec4 vec2 vec3 vec4 mat2 mat3 mat4 sampler2D samplerCube struct</p> <ul> <li>QUALIFIERS</li> </ul> <p>attribute const uniform varying precision highp mediump lowp in out inout</p> <ul> <li>BUILT-IN VARIABLES</li> </ul> <p>gl_Position gl_PointSize gl_PointCoord gl_FrontFacing gl_FragCoord gl_FragColor</p> <ul> <li>BUILT-IN CONSTANTS</li> </ul> <p>gl_MaxVertexAttribs gl_MaxVaryingVectors gl_MaxVertexTextureImageUnits gl_MaxCombinedTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformVectors gl_MaxDrawBuffers</p> <ul> <li>ANGLE &amp; TRIGONOMETRY FUNCTIONS</li> </ul> <p>radians() degrees() sin() cos() tan() asin() acos() atan()</p> <ul> <li>EXPONENTIAL FUNCTIONS</li> </ul> <p>pow() exp() log() exp2() log2() sqrt() inversesqrt()</p> <ul> <li>COMMON FUNCTIONS</li> </ul> <p>abs() sign() floor() ceil() fract() mod() min() max() clamp() mix() step() smoothstep()</p> <ul> <li>GEOMETRIC FUNCTIONS</li> </ul> <p>length() distance() dot() cross() normalize() faceforward() reflect() refract()</p> <ul> <li>MATRIX FUNCTIONS</li> </ul> <p>matrixCompMult()</p> <ul> <li>VECTOR RELATIONAL FUNCTIONS</li> </ul> <p>lessThan() lessThanEqual() greaterThan() greaterThanEqual() equal() notEqual() any() all() not()</p> <ul> <li>TEXTURE LOOKUP FUNCTIONS</li> </ul> <p>texture2D() textureCube()</p>"},{"location":"Frontend/shader/glossary/#alphabetical","title":"Alphabetical","text":"<ul> <li>A</li> </ul> <p>abs() acos() all() any() asin() atan() attribute</p> <ul> <li>B</li> </ul> <p>bool bvec2 bvec3 bvec4</p> <ul> <li>C</li> </ul> <p>ceil() clamp() const cos() cross()</p> <ul> <li>D</li> </ul> <p>degrees() dFdx() dFdy() distance() dot()</p> <ul> <li>E</li> </ul> <p>equal() exp() exp2()</p> <ul> <li>F</li> </ul> <p>faceforward() float floor() fract()</p> <ul> <li>G</li> </ul> <p>greaterThan() greaterThanEqual() gl_FragColor gl_FragCoord gl_FrontFacing gl_PointCoord gl_PointSize gl_Position gl_MaxCombinedTextureImageUnits gl_MaxDrawBuffers gl_MaxFragmentUniformVectors gl_MaxVaryingVectors gl_MaxVertexAttribs gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits</p> <ul> <li>H</li> </ul> <p>highp</p> <ul> <li>I</li> </ul> <p>in inout int inversesqrt() ivec2 ivec3 ivec4</p> <ul> <li>L</li> </ul> <p>length() lessThan() lessThanEqual() log() log2() lowp</p> <ul> <li>M</li> </ul> <p>matrixCompMult() mat2 mat3 mat4 max() mediump min() mix() mod()</p> <ul> <li>N</li> </ul> <p>normalize() not() notEqual()</p> <ul> <li>O</li> </ul> <p>out</p> <ul> <li>P</li> </ul> <p>precision pow()</p> <ul> <li>R</li> </ul> <p>radians() reflect() refract()</p> <ul> <li>S</li> </ul> <p>sampler2D samplerCube sign() sin() smoothstep() sqrt() step() struct</p> <ul> <li>T</li> </ul> <p>tan() texture2D() textureCube()</p> <ul> <li>U</li> </ul> <p>uniform</p> <ul> <li>V</li> </ul> <p>varying vec2 vec3 vec4 void</p>"},{"location":"Frontend/shader/glossary/README-ua/","title":"\u0413\u043b\u043e\u0441\u0430\u0440\u0456\u0439","text":""},{"location":"Frontend/shader/glossary/README-ua/#_2","title":"\u0417\u0430 \u0442\u0435\u043c\u043e\u044e","text":"<ul> <li>\u0422\u0418\u041f\u0418</li> </ul> <p>void bool int float bvec2 bvec3 bvec4 ivec2 ivec3 ivec4 vec2 vec3 vec4 mat2 mat3 mat4 sampler2D samplerCube struct</p> <ul> <li>\u041a\u0412\u0410\u041b\u0406\u0424\u0406\u041a\u0410\u0422\u041e\u0420\u0418</li> </ul> <p>attribute const uniform varying precision highp mediump lowp in out inout</p> <ul> <li>\u0412\u0411\u0423\u0414\u041e\u0412\u0410\u041d\u0406 \u0417\u041c\u0406\u041d\u041d\u0406</li> </ul> <p>gl_Position gl_PointSize gl_PointCoord gl_FrontFacing gl_FragCoord gl_FragColor</p> <ul> <li>\u0412\u0411\u0423\u0414\u041e\u0412\u0410\u041d\u0406 \u041a\u041e\u041d\u0421\u0422\u0410\u041d\u0422\u0418</li> </ul> <p>gl_MaxVertexAttribs gl_MaxVaryingVectors gl_MaxVertexTextureImageUnits gl_MaxCombinedTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformVectors gl_MaxDrawBuffers</p> <ul> <li>\u0422\u0420\u0418\u0413\u041e\u041d\u041e\u041c\u0415\u0422\u0420\u0418\u0427\u041d\u0406 \u0422\u0410 \u041a\u0423\u0422\u041e\u0412\u0406 \u0424\u0423\u041d\u041a\u0426\u0406\u0407</li> </ul> <p>radians() degrees() sin() cos() tan() asin() acos() atan()</p> <ul> <li>\u0415\u041a\u0421\u041f\u041e\u041d\u0415\u041d\u0426\u0406\u0410\u041b\u042c\u041d\u0406 \u0424\u0423\u041d\u041a\u0426\u0406\u0407</li> </ul> <p>pow() exp() log() exp2() log2() sqrt() inversesqrt()</p> <ul> <li>\u0417\u0410\u0413\u0410\u041b\u042c\u041d\u0406 \u0424\u0423\u041d\u041a\u0426\u0406\u0407</li> </ul> <p>abs() sign() floor() ceil() fract() mod() min() max() clamp() mix() step() smoothstep()</p> <ul> <li>\u0413\u0415\u041e\u041c\u0415\u0422\u0420\u0418\u0427\u041d\u0406 \u0424\u0423\u041d\u041a\u0426\u0406\u0407</li> </ul> <p>length() distance() dot() cross() normalize() facefoward() reflect() refract()</p> <ul> <li>\u041c\u0410\u0422\u0420\u0418\u0427\u041d\u0406 \u0424\u0423\u041d\u041a\u0426\u0406\u0407</li> </ul> <p>matrixCompMult()</p> <ul> <li>\u0424\u0423\u041d\u041a\u0426\u0406\u0407 \u041f\u041e\u0412'\u042f\u0417\u0410\u041d\u0406 \u0417 \u0412\u0415\u041a\u0422\u041e\u0420\u0410\u041c\u0418</li> </ul> <p>lessThan() lessThanEqual() greaterThan() greaterThanEqual() equal() notEqual() any() all() not()</p> <ul> <li>\u0424\u0423\u041d\u041a\u0426\u0406\u0407 \u041f\u041e\u0412'\u042f\u0417\u0410\u041d\u0406 \u0417 \u0422\u0415\u041a\u0421\u0422\u0423\u0420\u0410\u041c\u0418</li> </ul> <p>texture2D() textureCube()</p>"},{"location":"Frontend/shader/glossary/README-ua/#_3","title":"\u0417\u0430 \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u043e\u043c","text":"<ul> <li>A</li> </ul> <p>abs() acos() all() any() asin() atan() attribute</p> <ul> <li>B</li> </ul> <p>bool bvec2 bvec3 bvec4</p> <ul> <li>C</li> </ul> <p>ceil() clamp() const cos() cross()</p> <ul> <li>D</li> </ul> <p>degrees() dFdx() dFdy() distance() dot()</p> <ul> <li>E</li> </ul> <p>equal() exp() exp2()</p> <ul> <li>F</li> </ul> <p>faceforward() float floor() fract()</p> <ul> <li>G</li> </ul> <p>greaterThan() greaterThanEqual() gl_FragColor gl_FragCoord gl_FrontFacing gl_PointCoord gl_PointSize gl_Position gl_MaxCombinedTextureImageUnits gl_MaxDrawBuffers gl_MaxFragmentUniformVectors gl_MaxVaryingVectors gl_MaxVertexAttribs gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits</p> <ul> <li>H</li> </ul> <p>highp</p> <ul> <li>I</li> </ul> <p>in inout int inversesqrt() ivec2 ivec3 ivec4</p> <ul> <li>L</li> </ul> <p>length() lessThan() lessThanEqual() log() log2() lowp</p> <ul> <li>M</li> </ul> <p>matrixCompMult() mat2 mat3 mat4 max() mediump min() mix() mod()</p> <ul> <li>N</li> </ul> <p>normalize() not() notEqual()</p> <ul> <li>O</li> </ul> <p>out</p> <ul> <li>P</li> </ul> <p>precision pow()</p> <ul> <li>R</li> </ul> <p>radians() reflect() refract() return</p> <ul> <li>S</li> </ul> <p>sampler2D samplerCube sign() sin() smoothstep() sqrt() step() struct</p> <ul> <li>T</li> </ul> <p>tan() texture2D() textureCube()</p> <ul> <li>U</li> </ul> <p>uniform</p> <ul> <li>V</li> </ul> <p>varying vec2 vec3 vec4 void</p>"},{"location":"Frontend/shader/glossary/README-vi/","title":"Ch\u00fa gi\u1ea3i","text":""},{"location":"Frontend/shader/glossary/README-vi/#xep-theo-nhom","title":"X\u1ebfp theo nh\u00f3m","text":"<ul> <li> <p>C\u00c1C KI\u1ec2U D\u1eee LI\u1ec6U</p> <p>void, bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4, sampler2D, samplerCube, struct</p> </li> <li> <p>C\u00c1C QUALIFIER</p> <p>attribute, const, uniform, varying, precision, highp, mediump, lowp, in, out, inout</p> </li> <li> <p>C\u00c1C BI\u1ebeN C\u00d3 S\u1eb4N</p> <p>gl_Position, gl_PointSize, gl_PointCoord, gl_FrontFacing, gl_FragCoord, gl_FragColor</p> </li> <li> <p>C\u00c1C H\u1eb0NG S\u1ed0 C\u00d3 S\u1eb4N</p> <p>gl_MaxVertexAttribs, gl_MaxVaryingVectors, gl_MaxVertexTextureImageUnits, gl_MaxCombinedTextureImageUnits, gl_MaxTextureImageUnits, gl_MaxFragmentUniformVectors, gl_MaxDrawBuffers</p> </li> <li> <p>C\u00c1C H\u00c0M L\u01af\u1ee2NG GI\u00c1C</p> <p>radians(), degrees(), sin(), cos(), tan(), asin(), acos(), atan()</p> </li> <li> <p>C\u00c1C H\u00c0M LU\u1ef8 TH\u1eeaA</p> <p>pow(), exp(), log(), exp2(), log2(), sqrt(), inversesqrt()</p> </li> <li> <p>C\u00c1C H\u00c0M TO\u00c1N H\u1eccC C\u01a0 B\u1ea2N</p> <p>abs(), sign(), floor(), ceil(), fract(), mod(), min(), max(), clamp(), mix(), step(), smoothstep()</p> </li> <li> <p>C\u00c1C H\u00c0M H\u00ccNH H\u1eccC</p> <p>length(), distance(), dot(), cross(), normalize(), facefoward(), reflect(), refract()</p> </li> <li> <p>C\u00c1C H\u00c0M MA TR\u1eacN</p> <p>matrixCompMult()</p> </li> <li> <p>C\u00c1C H\u00c0M VECTOR</p> <p>lessThan(), lessThanEqual(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p> </li> <li> <p>C\u00c1C H\u00c0M TEXTURE</p> <p>texture2D(), textureCube()</p> </li> </ul>"},{"location":"Frontend/shader/glossary/README-vi/#xep-theo-thu-tu-tu-ien","title":"X\u1ebfp theo th\u1ee9 t\u1ef1 t\u1eeb \u0111i\u1ec3n","text":"<ul> <li> <p>A</p> <p>abs(), acos(), all(), any(), asin(), atan(), attribute</p> </li> <li> <p>B</p> <p>bool, bvec2, bvec3, bvec4</p> </li> <li> <p>C</p> <p>ceil(), clamp(), const, cos(), cross()</p> </li> <li> <p>D</p> <p>degrees(), dFdx(), dFdy(), distance(), dot()</p> </li> <li> <p>E</p> <p>equal(), exp(), exp2()</p> </li> <li> <p>F</p> <p>faceforward(), float, floor(), fract()</p> </li> <li> <p>G</p> <p>greaterThan(), greaterThanEqual(), gl_FragColor, gl_FragCoord, gl_FrontFacing, gl_PointCoord, gl_PointSize, gl_Position, gl_MaxCombinedTextureImageUnits, gl_MaxDrawBuffers, gl_MaxFragmentUniformVectors, gl_MaxVaryingVectors, gl_MaxVertexAttribs, gl_MaxVertexTextureImageUnits, gl_MaxTextureImageUnits</p> </li> <li> <p>H</p> <p>highp</p> </li> <li> <p>I</p> <p>in, inout, int, inversesqrt(), ivec2, ivec3, ivec4</p> </li> <li> <p>L</p> <p>length(), lessThan(), lessThanEqual(), log(), log2(), lowp</p> </li> <li> <p>M</p> <p>matrixCompMult(), mat2, mat3, mat4, max(), mediump, min(), mix(), mod()</p> </li> <li> <p>N</p> <p>normalize(), not(), notEqual()</p> </li> <li> <p>O</p> <p>out</p> </li> <li> <p>P</p> <p>precision, pow()</p> </li> <li> <p>R</p> <p>radians(), reflect(), refract()</p> </li> <li> <p>S</p> <p>sampler2D, samplerCube, sign(), sin(), smoothstep(), sqrt(), step(), struct</p> </li> <li> <p>T</p> <p>tan(), texture2D(), textureCube()</p> </li> <li> <p>U</p> <p>uniform</p> </li> <li> <p>V</p> <p>varying, vec2, vec3, vec4, void</p> </li> </ul>"},{"location":"Frontend/shader/glossary/tmp/","title":"Glossary","text":""},{"location":"Frontend/shader/glossary/tmp/#by-theme","title":"By theme","text":"<ul> <li>TYPES</li> </ul> <p>void bool int float bvec2 bvec3 bvec4 ivec2 ivec3 ivec4 vec2 vec3 vec4 mat2 mat3 mat4 sampler2D samplerCube struct</p> <ul> <li>QUALIFIERS</li> </ul> <p>attribute const uniform varying precision highp mediump lowp in out inout</p> <ul> <li>BUILT-IN VARIABLES</li> </ul> <p>gl_Position gl_PointSize gl_PointCoord gl_FrontFacing gl_FragCoord gl_FragColor</p> <ul> <li>BUILT-IN CONSTANTS</li> </ul> <p>gl_MaxVertexAttribs gl_MaxVaryingVectors gl_MaxVertexTextureImageUnits gl_MaxCombinedTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformVectors gl_MaxDrawBuffers</p> <ul> <li>ANGLE &amp; TRIGONOMETRY FUNCTIONS</li> </ul> <p>radians() degrees() sin() cos() tan() asin() acos() atan()</p> <ul> <li>EXPONENTIAL FUNCTIONS</li> </ul> <p>pow() exp() log() exp2() log2() sqrt() inversesqrt()</p> <ul> <li>COMMON FUNCTIONS</li> </ul> <p>abs() sign() floor() ceil() fract() mod() min() max() clamp() mix() step() smoothstep()</p> <ul> <li>GEOMETRIC FUNCTIONS</li> </ul> <p>length() distance() dot() cross() normalize() faceforward() reflect() refract()</p> <ul> <li>MATRIX FUNCTIONS</li> </ul> <p>matrixCompMult()</p> <ul> <li>VECTOR RELATIONAL FUNCTIONS</li> </ul> <p>lessThan() lessThanEqual() greaterThan() greaterThanEqual() equal() notEqual() any() all() not()</p> <ul> <li>TEXTURE LOOKUP FUNCTIONS</li> </ul> <p>texture2D() textureCube()</p>"},{"location":"Frontend/shader/glossary/tmp/#alphabetical","title":"Alphabetical","text":"<ul> <li>A</li> </ul> <p>abs() acos() all() any() asin() atan() attribute</p> <ul> <li>B</li> </ul> <p>bool bvec2 bvec3 bvec4</p> <ul> <li>C</li> </ul> <p>ceil() clamp() const cos() cross()</p> <ul> <li>D</li> </ul> <p>degrees() dFdx() dFdy() distance() dot()</p> <ul> <li>E</li> </ul> <p>equal() exp() exp2()</p> <ul> <li>F</li> </ul> <p>faceforward() float floor() fract()</p> <ul> <li>G</li> </ul> <p>greaterThan() greaterThanEqual() gl_FragColor gl_FragCoord gl_FrontFacing gl_PointCoord gl_PointSize gl_Position gl_MaxCombinedTextureImageUnits gl_MaxDrawBuffers gl_MaxFragmentUniformVectors gl_MaxVaryingVectors gl_MaxVertexAttribs gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits</p> <ul> <li>H</li> </ul> <p>highp</p> <ul> <li>I</li> </ul> <p>in inout int inversesqrt() ivec2 ivec3 ivec4</p> <ul> <li>L</li> </ul> <p>length() lessThan() lessThanEqual() log() log2() lowp</p> <ul> <li>M</li> </ul> <p>matrixCompMult() mat2 mat3 mat4 max() mediump min() mix() mod()</p> <ul> <li>N</li> </ul> <p>normalize() not() notEqual()</p> <ul> <li>O</li> </ul> <p>out</p> <ul> <li>P</li> </ul> <p>precision pow()</p> <ul> <li>R</li> </ul> <p>radians() reflect() refract()</p> <ul> <li>S</li> </ul> <p>sampler2D samplerCube sign() sin() smoothstep() sqrt() step() struct</p> <ul> <li>T</li> </ul> <p>tan() texture2D() textureCube()</p> <ul> <li>U</li> </ul> <p>uniform</p> <ul> <li>V</li> </ul> <p>varying vec2 vec3 vec4 void</p>"},{"location":"Frontend/shader/glossary/GL_ES/","title":"Index","text":""},{"location":"Frontend/shader/glossary/GL_ES/#gl_es","title":"GL_ES","text":""},{"location":"Frontend/shader/glossary/GL_ES/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/GL_ES/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/GL_ES/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/GL_ES/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/GL_ES/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/GL_ES/README-vi/#gl_es","title":"GL_ES","text":""},{"location":"Frontend/shader/glossary/GL_ES/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/GL_ES/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/GL_ES/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/GL_ES/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/abs/","title":"Index","text":""},{"location":"Frontend/shader/glossary/abs/#abs","title":"Abs","text":"<p>Return the absolute value of the parameter.</p>"},{"location":"Frontend/shader/glossary/abs/#declaration","title":"Declaration","text":"<pre><code>float abs(float x)  \nvec2 abs(vec2 x)  \nvec3 abs(vec3 x)  \nvec4 abs(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/abs/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value of which to return the absolute.</p>"},{"location":"Frontend/shader/glossary/abs/#description","title":"Description","text":"<p><code>abs()</code> returns the absolute value of <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/abs/#see-also","title":"See Also","text":"<p>sign(), min(), max(), Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/abs/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/abs/README-pl/#abs","title":"abs","text":"<p>Zwraca warto\u015b\u0107 bezwzgl\u0119dn\u0105 z parametru.</p>"},{"location":"Frontend/shader/glossary/abs/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float abs(float x)  \nvec2 abs(vec2 x)  \nvec3 abs(vec3 x)  \nvec4 abs(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/abs/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla warto\u015b\u0107, z kt\u00f3rej ma zosta\u0107 zwr\u00f3cona warto\u015b\u0107 bezwzgl\u0119dna.</p>"},{"location":"Frontend/shader/glossary/abs/README-pl/#opis","title":"Opis","text":"<p><code>abs()</code> zwraca warto\u015b\u0107 bezwzgl\u0119dn\u0105 z x.</p>"},{"location":"Frontend/shader/glossary/abs/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>sign(), min(), max(), Rozdzia\u0142 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/abs/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/abs/README-ua/#abs","title":"abs","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.</p>"},{"location":"Frontend/shader/glossary/abs/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float abs(float x)  \nvec2 abs(vec2 x)  \nvec3 abs(vec3 x)  \nvec4 abs(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/abs/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438 \u0432 \u0430\u0431\u0441\u043e\u043b\u044e\u0442.</p>"},{"location":"Frontend/shader/glossary/abs/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>abs()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/abs/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>sign(), min(), max(), \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/abs/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/abs/README-vi/#abs","title":"Abs","text":"<p>T\u00ednh gi\u00e1 tr\u1ecb tuy\u1ec7t \u0111\u1ed1i c\u1ee7a m\u1ed9t ho\u1eb7c nhi\u1ec1u s\u1ed1.</p>"},{"location":"Frontend/shader/glossary/abs/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float abs(float x)  \nvec2 abs(vec2 x)  \nvec3 abs(vec3 x)  \nvec4 abs(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/abs/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 mu\u1ed1n t\u00ednh gi\u00e1 tr\u1ecb tuy\u1ec7t \u0111\u1ed1i</p>"},{"location":"Frontend/shader/glossary/abs/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>abs()</code> tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb tuy\u1ec7t \u0111\u1ed1i c\u1ee7a <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/abs/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>sign(), min(), max(), Ch\u01b0\u01a1ng 5: C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n</p>"},{"location":"Frontend/shader/glossary/acos/","title":"Index","text":""},{"location":"Frontend/shader/glossary/acos/#acos","title":"Acos","text":"<p>Return the arccosine of the parameter</p>"},{"location":"Frontend/shader/glossary/acos/#declaration","title":"Declaration","text":"<pre><code>float acos(float x)  \nvec2 acos(vec2 x)  \nvec3 acos(vec3 x)  \nvec4 acos(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/acos/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value whose arccosine to return.</p>"},{"location":"Frontend/shader/glossary/acos/#description","title":"Description","text":"<p><code>acos()</code> returns the angle whose trigonometric cosine is <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/acos/#see-also","title":"See Also","text":"<p>cos(), sin(), asin(), tan(), atan(), Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/acos/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/acos/README-pl/#acos","title":"acos","text":"<p>Zwraca arcus cosinus podanego argumentu</p>"},{"location":"Frontend/shader/glossary/acos/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float acos(float x)  \nvec2 acos(vec2 x)  \nvec3 acos(vec3 x)  \nvec4 acos(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/acos/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> warto\u015b\u0107, kt\u00f3rej arcus cosinus ma zosta\u0107 zwr\u00f3cony.</p>"},{"location":"Frontend/shader/glossary/acos/README-pl/#opis","title":"Opis","text":"<p><code>acos()</code> zwraca k\u0105t, kt\u00f3rego cosinus jest r\u00f3wny <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/acos/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>cos(), sin(), asin(), tan(), atan(), Rozdzia\u0142 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/acos/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/acos/README-ua/#acos","title":"acos","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0430\u0440\u043a\u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/acos/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float acos(float x)  \nvec2 acos(vec2 x)  \nvec3 acos(vec3 x)  \nvec4 acos(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/acos/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0430\u0440\u043a\u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/acos/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>acos()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043a\u0443\u0442, \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u044f\u043a\u043e\u0433\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/acos/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>cos(), sin(), asin(), tan(), atan(), \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/acos/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/acos/README-vi/#acos","title":"Acos","text":"<p>T\u00ednh g\u00f3c l\u01b0\u1ee3ng gi\u00e1c \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb cosine</p>"},{"location":"Frontend/shader/glossary/acos/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float acos(float x)  \nvec2 acos(vec2 x)  \nvec3 acos(vec3 x)  \nvec4 acos(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/acos/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> gi\u00e1 tr\u1ecb cosine c\u1ea7n t\u00ecm g\u00f3c l\u01b0\u1ee3ng gi\u00e1c t\u01b0\u01a1ng \u1ee9ng</p>"},{"location":"Frontend/shader/glossary/acos/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>acos()</code> g\u00f3c l\u01b0\u1ee3ng gi\u00e1c (\u0111\u01a1n v\u1ecb radian) \u1ee9ng v\u1edbi cosine b\u1eb1ng <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/acos/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>cos(), sin(), asin(), tan(), atan(), C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/all/","title":"Index","text":""},{"location":"Frontend/shader/glossary/all/#all","title":"All","text":"<p>Check whether all elements of a boolean vector are true</p>"},{"location":"Frontend/shader/glossary/all/#declaration","title":"Declaration","text":"<pre><code>bool any(bvec2 x)  \nbool any(bvec3 x)  \nbool any(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/all/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the vector to be tested for truth.</p>"},{"location":"Frontend/shader/glossary/all/#description","title":"Description","text":"<p><code>all()</code> returns true if all elements of <code>x</code> are <code>true</code> and <code>false</code> otherwise. It is functionally equivalent to:</p> <pre><code>bool all(bvec x){       // bvec can be bvec2, bvec3 or bvec4\n    bool result = true;\n    int i;\n    for (i = 0; i &lt; x.length(); ++i)\n    {\n        result &amp;= x[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/all/#see-also","title":"See Also","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/all/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/all/README-pl/#all","title":"all","text":"<p>Sprawdza, czy wszystkie elementy wektora logicznego s\u0105 prawdziwe</p>"},{"location":"Frontend/shader/glossary/all/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>bool all(bvec2 x)  \nbool all(bvec3 x)  \nbool all(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/all/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla wektor, kt\u00f3ry ma zosta\u0107 sprawdzony pod k\u0105tem prawdy.</p>"},{"location":"Frontend/shader/glossary/all/README-pl/#opis","title":"Opis","text":"<p><code>all()</code> zwraca <code>true</code>, je\u015bli wszystkie elementy <code>x</code> s\u0105 <code>true</code> i <code>false</code> w przeciwnym razie. Jest to funkcjonalnie r\u00f3wnowa\u017cne:</p> <pre><code>bool all(bvec x){       // bvec mo\u017ce by\u0107 bvec2, bvec3 lub bvec4\n    bool result = true;\n    int i;\n    for (i = 0; i &lt; x.length(); ++i)\n    {\n        result &amp;= x[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/all/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/all/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/all/README-ua/#all","title":"all","text":"<p>\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454 \u0447\u0438 \u0432\u0441\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043b\u043e\u0433\u0456\u0447\u043d\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0456\u0441\u0442\u0438\u043d\u043d\u0456</p>"},{"location":"Frontend/shader/glossary/all/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bool any(bvec2 x)  \nbool any(bvec3 x)  \nbool any(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/all/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440, \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0435\u043d\u043e \u043d\u0430 \u0456\u0441\u0442\u0438\u043d\u043d\u0456\u0441\u0442\u044c.</p>"},{"location":"Frontend/shader/glossary/all/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>all()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>true</code>, \u044f\u043a\u0449\u043e \u0432\u0441\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 <code>x</code> \u043c\u0430\u044e\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>true</code>, \u0456\u043d\u0430\u043a\u0448\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454\u0442\u044c\u0441\u044f <code>false</code>. \u0424\u0443\u043d\u043a\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0446\u0435 \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e \u0434\u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0443:</p> <pre><code>bool all(bvec x) {       // bvec \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 bvec2, bvec3 \u0430\u0431\u043e bvec4\n    bool result = true;\n    int i;\n\n    for (i = 0; i &lt; x.length(); ++i) {\n        result &amp;= x[i];\n    }\n\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/all/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/all/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/all/README-vi/#all","title":"All","text":"<p>Ki\u1ec3m tra xem to\u00e0n b\u1ed9 c\u00e1c th\u00e0nh ph\u1ea7n trong 1 vector boolean c\u00f3 c\u00f9ng b\u1eb1ng true kh\u00f4ng</p>"},{"location":"Frontend/shader/glossary/all/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bool any(bvec2 x)  \nbool any(bvec3 x)  \nbool any(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/all/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> vector boolean c\u1ea7n ki\u1ec3m tra</p>"},{"location":"Frontend/shader/glossary/all/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>all()</code> tr\u1ea3 v\u1ec1 <code>true</code> n\u1ebfu t\u1ea5t c\u1ea3 c\u00e1c th\u00e0nh ph\u1ea7n trong vector <code>x</code> \u0111\u1ec1u b\u1eb1ng <code>true</code> v\u00e0 tr\u1ea3 v\u1ec1 <code>false</code> n\u1ebfu ng\u01b0\u1ee3c l\u1ea1i. T\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi:</p> <pre><code>bool all(bvec x){       // bvec c\u00f3 th\u1ec3 thay b\u1eb1ng bvec2, bvec3 or bvec4\n    bool result = true;\n    int i;\n    for (i = 0; i &lt; x.length(); ++i)\n    {\n        result &amp;= x[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/all/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/any/","title":"Index","text":""},{"location":"Frontend/shader/glossary/any/#any","title":"Any","text":"<p>Check whether any element of a boolean vector is true</p>"},{"location":"Frontend/shader/glossary/any/#declaration","title":"Declaration","text":"<pre><code>bool all(bvec2 x)  \nbool all(bvec3 x)  \nbool all(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/any/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the vector to be tested for truth.</p>"},{"location":"Frontend/shader/glossary/any/#description","title":"Description","text":"<p><code>any()</code> returns true if any element of <code>x</code> is <code>true</code> and <code>false</code> otherwise. It is functionally equivalent to:</p> <pre><code>bool any(bvec x) {     // bvec can be bvec2, bvec3 or bvec4\n    bool result = false;\n    int i;\n    for (i = 0; i &lt; x.length(); ++i) {\n        result |= x[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/any/#see-also","title":"See Also","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/any/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/any/README-pl/#any","title":"any","text":"<p>Sprawdza, czy cho\u0107 jeden element wektora logicznego jest prawdziwy</p>"},{"location":"Frontend/shader/glossary/any/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>bool all(bvec2 x)\nbool all(bvec3 x)\nbool all(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/any/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla wektor, kt\u00f3ry ma zosta\u0107 sprawdzony pod k\u0105tem prawdy.</p>"},{"location":"Frontend/shader/glossary/any/README-pl/#opis","title":"Opis","text":"<p><code>all()</code> zwraca <code>true</code>, je\u015bli kt\u00f3rykolwiek element <code>x</code> jest <code>true</code> i <code>false</code> w przeciwnym razie. Jest to funkcjonalnie r\u00f3wnowa\u017cne:</p> <pre><code>bool any(bvec x) {     // bvec mo\u017ce by\u0107 bvec2, bvec3 lub bvec4\n    bool result = false;\n    int i;\n    for (i = 0; i &lt; x.length(); ++i) {\n        result |= x[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/any/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/any/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/any/README-ua/#any","title":"any","text":"<p>\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454 \u0447\u0438 \u0445\u043e\u0447\u0430 \u0431 \u043e\u0434\u0438\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u0443\u043b\u0435\u0432\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043c\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f true</p>"},{"location":"Frontend/shader/glossary/any/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bool all(bvec2 x)  \nbool all(bvec3 x)  \nbool all(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/any/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440, \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0435\u043d\u043e \u043d\u0430 \u0456\u0441\u0442\u0438\u043d\u043d\u0456\u0441\u0442\u044c.</p>"},{"location":"Frontend/shader/glossary/any/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>any()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>true</code>, \u044f\u043a\u0449\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0439 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>x</code> \u043c\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>true</code>, \u0456\u043d\u0430\u043a\u0448\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454\u0442\u044c\u0441\u044f <code>false</code>. \u0424\u0443\u043d\u043a\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0446\u0435 \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e \u0434\u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0443:</p> <pre><code>bool any(bvec x) {     // bvec \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 bvec2, bvec3 \u0430\u0431\u043e bvec4\n    bool result = false;\n    int i;\n\n    for (i = 0; i &lt; x.length(); ++i) {\n        result |= x[i];\n    }\n\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/any/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/any/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/any/README-vi/#any","title":"Any","text":"<p>Ki\u1ec3m tra xem c\u00f3 gi\u00e1 tr\u1ecb n\u00e0o trong 1 vector ki\u1ec3u boolean b\u1eb1ng true kh\u00f4ng</p>"},{"location":"Frontend/shader/glossary/any/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bool all(bvec2 x)  \nbool all(bvec3 x)  \nbool all(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/any/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> vector c\u1ea7n ki\u1ec3m tra</p>"},{"location":"Frontend/shader/glossary/any/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>any()</code> tr\u1ea3 v\u1ec1 <code>true</code> n\u1ebfu c\u00f3 b\u1ea5t k\u1ef3 m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o trong vector <code>x</code> b\u1eb1ng <code>true</code>, ng\u01b0\u1ee3c l\u1ea1i tr\u1ea3 v\u1ec1 <code>false</code>. H\u00e0m n\u00e0y t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi:</p> <pre><code>bool any(bvec x) {     // bvec can be bvec2, bvec3 or bvec4\n    bool result = false;\n    int i;\n    for (i = 0; i &lt; x.length(); ++i) {\n        result |= x[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/any/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>any(), not()</p>"},{"location":"Frontend/shader/glossary/asin/","title":"Index","text":""},{"location":"Frontend/shader/glossary/asin/#asin","title":"Asin","text":"<p>Return the arcsine of the parameter</p>"},{"location":"Frontend/shader/glossary/asin/#declaration","title":"Declaration","text":"<pre><code>float asin(float x)  \nvec2 asin(vec2 x)  \nvec3 asin(vec3 x)  \nvec4 asin(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/asin/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value whose arcsine to return.</p>"},{"location":"Frontend/shader/glossary/asin/#description","title":"Description","text":"<p><code>asin()</code> returns the angle whose trigonometric sine is <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/asin/#see-also","title":"See Also","text":"<p>cos, sin, acos, tan, atan, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/asin/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/asin/README-pl/#asin","title":"asin","text":"<p>Zwraca arcsin parametru</p>"},{"location":"Frontend/shader/glossary/asin/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float asin(float x)\nvec2 asin(vec2 x)\nvec3 asin(vec3 x)\nvec4 asin(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/asin/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla warto\u015b\u0107, kt\u00f3rej arcsin ma zosta\u0107 zwr\u00f3cony.</p>"},{"location":"Frontend/shader/glossary/asin/README-pl/#opis","title":"Opis","text":"<p><code>asin()</code> zwraca k\u0105t, kt\u00f3rego sinus trygonometryczny to <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/asin/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>cos, sin, acos, tan, atan, Rozdzia\u0142 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/asin/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/asin/README-ua/#asin","title":"asin","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0430\u0440\u043a\u0441\u0438\u043d\u0443\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/asin/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float asin(float x)  \nvec2 asin(vec2 x)  \nvec3 asin(vec3 x)  \nvec4 asin(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/asin/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0430\u0440\u043a\u0441\u0438\u043d\u0443\u0441 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/asin/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>asin()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043a\u0443\u0442, \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u0441\u0438\u043d\u0443\u0441 \u044f\u043a\u043e\u0433\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 <code>x</code></p>"},{"location":"Frontend/shader/glossary/asin/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>cos, sin, acos, tan, atan, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/asin/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/asin/README-vi/#asin","title":"Asin","text":"<p>T\u00ednh g\u00f3c l\u01b0\u1ee3ng gi\u00e1c \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb sine</p>"},{"location":"Frontend/shader/glossary/asin/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float asin(float x)  \nvec2 asin(vec2 x)  \nvec3 asin(vec3 x)  \nvec4 asin(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/asin/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> gi\u00e1 tr\u1ecb sine c\u1ea7n t\u00ecm g\u00f3c l\u01b0\u1ee3ng gi\u00e1c t\u01b0\u01a1ng \u1ee9ng</p>"},{"location":"Frontend/shader/glossary/asin/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>asin()</code> tr\u1ea3 v\u1ec1 g\u00f3c l\u01b0\u1ee3ng gi\u00e1c (\u0111\u01a1n v\u1ecb radian) t\u01b0\u01a1ng \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb sine b\u1eb1ng <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/asin/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>cos, sin, acos, tan, atan, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/atan/","title":"Index","text":""},{"location":"Frontend/shader/glossary/atan/#atan","title":"Atan","text":"<p>Return the arc-tangent of the parameters</p>"},{"location":"Frontend/shader/glossary/atan/#declaration","title":"Declaration","text":"<pre><code>float atan(float y, float x)  \nvec2 atan(vec2 y, vec2 x)  \nvec3 atan(vec3 y, vec3 x)  \nvec4 atan(vec4 y, vec4 x)\n\nfloat atan(float y_over_x)  \nvec2 atan(vec2 y_over_x)  \nvec3 atan(vec3 y_over_x)  \nvec4 atan(vec4 y_over_x)\n</code></pre>"},{"location":"Frontend/shader/glossary/atan/#parameters","title":"Parameters","text":"<p><code>y</code> specifies the numerator of the fraction whose arctangent to return.</p> <p><code>x</code> specifies the denominator of the fraction whose arctangent to return.</p> <p><code>y_over_x</code> specifies the fraction whose arctangent to return.</p>"},{"location":"Frontend/shader/glossary/atan/#description","title":"Description","text":"<p><code>atan()</code> returns the angle whose trigonometric arctangent is <code>y,x</code> or <code>y_over_x</code>, depending on which overload is invoked. In the first overload, the signs of <code>y</code> and <code>x</code> are used to determine the quadrant that the angle lies in. The values returned by <code>atan</code> in this case are in the range -PI and PI. Results are undefined if <code>x</code> is zero.</p> <p>For the second overload, <code>atan()</code> returns the angle whose tangent is <code>y_over_x</code>. Values returned in this case are in the range -PI to PI.</p>"},{"location":"Frontend/shader/glossary/atan/#see-also","title":"See Also","text":"<p>cos, acos, sin, asin, atan, Chapter 05: Shaping Functions, Chapter 06: Color</p>"},{"location":"Frontend/shader/glossary/atan/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/atan/README-pl/#atan","title":"atan","text":"<p>Zwraca arcus tangens parametr\u00f3w</p>"},{"location":"Frontend/shader/glossary/atan/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float atan(float y, float x)\nvec2 atan(vec2 y, vec2 x)\nvec3 atan(vec3 y, vec3 x)\nvec4 atan(vec4 y, vec4 x)\n\nfloat atan(float y_over_x)\nvec2 atan(vec2 y_over_x)\nvec3 atan(vec3 y_over_x)\nvec4 atan(vec4 y_over_x)\n</code></pre>"},{"location":"Frontend/shader/glossary/atan/README-pl/#parametry","title":"Parametry","text":"<p><code>y</code> okre\u015bla licznik u\u0142amka, kt\u00f3rego arcus tangens ma zosta\u0107 zwr\u00f3cony.</p> <p><code>x</code> okre\u015bla mianownik u\u0142amka, kt\u00f3rego arcus tangens ma zosta\u0107 zwr\u00f3cony.</p> <p><code>y_over_x</code> okre\u015bla u\u0142amek, kt\u00f3rego arcus tangens ma zosta\u0107 zwr\u00f3cony.</p>"},{"location":"Frontend/shader/glossary/atan/README-pl/#opis","title":"Opis","text":"<p><code>atan()</code> zwraca k\u0105t, kt\u00f3rego trygonometryczny arcus tangens jest r\u00f3wny <code>y,x</code> lub <code>y_over_x</code>, w zale\u017cno\u015bci od tego, kt\u00f3ry przeci\u0105\u017cenie jest wywo\u0142ywane. W pierwszym przeci\u0105\u017ceniu znaki <code>y</code> i <code>x</code> s\u0105 u\u017cywane do okre\u015blenia \u0107wiartki, w kt\u00f3rej znajduje si\u0119 k\u0105t. Warto\u015bci zwracane przez <code>atan</code> w tym przypadku mieszcz\u0105 si\u0119 w zakresie -PI i PI. Wyniki s\u0105 niezdefiniowane, je\u015bli <code>x</code> wynosi zero.</p> <p>Dla drugiego przeci\u0105\u017cenia, <code>atan()</code> zwraca k\u0105t, kt\u00f3rego tangens wynosi <code>y_over_x</code>. Warto\u015bci zwracane w tym przypadku mieszcz\u0105 si\u0119 w zakresie -PI do PI.</p>"},{"location":"Frontend/shader/glossary/atan/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>cos, acos, sin, asin, atan, Rozdzia\u0142 05: Shaping Functions, Rozdzia\u0142 06: Kolory</p>"},{"location":"Frontend/shader/glossary/atan/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/atan/README-ua/#atan","title":"atan","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432</p>"},{"location":"Frontend/shader/glossary/atan/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float atan(float y, float x)  \nvec2 atan(vec2 y, vec2 x)  \nvec3 atan(vec3 y, vec3 x)  \nvec4 atan(vec4 y, vec4 x)\n\nfloat atan(float y_over_x)  \nvec2 atan(vec2 y_over_x)  \nvec3 atan(vec3 y_over_x)  \nvec4 atan(vec4 y_over_x)\n</code></pre>"},{"location":"Frontend/shader/glossary/atan/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>y</code> \u2014 \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043a \u0434\u0440\u043e\u0431\u0443, \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p> <p><code>x</code> \u2014 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a \u0434\u0440\u043e\u0431\u0443, \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p> <p><code>y_over_x</code> \u2014 \u0434\u0440\u0456\u0431, \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/atan/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>atan()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043a\u0443\u0442, \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u044f\u043a\u043e\u0433\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 <code>y,x</code> \u0430\u0431\u043e <code>y_over_x</code>, \u0437\u0430\u043b\u0435\u0436\u043d\u043e \u0432\u0456\u0434 \u0442\u043e\u0433\u043e, \u044f\u043a\u0435 \u0441\u0430\u043c\u0435 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454\u0442\u044c\u0441\u044f.</p> <p>\u0423 \u043f\u0435\u0440\u0448\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u0456 \u0437\u043d\u0430\u043a\u0438 <code>y</code> \u0456 <code>x</code> \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u043d\u0442\u0430, \u0432 \u044f\u043a\u043e\u043c\u0443 \u043b\u0435\u0436\u0438\u0442\u044c \u043a\u0443\u0442. \u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0456 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>atan</code> \u0443 \u0446\u044c\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443, \u0437\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 \u0432\u0456\u0434 -PI \u0434\u043e PI. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u043d\u0435 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0456, \u044f\u043a\u0449\u043e <code>x</code> \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043d\u0443\u043b\u044e.</p> <p>\u0414\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f <code>atan()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043a\u0443\u0442, \u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u044f\u043a\u043e\u0433\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 <code>y_over_x</code>. \u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u044e\u0442\u044c\u0441\u044f \u0432 \u0446\u044c\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443, \u0437\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 \u0432\u0456\u0434 -PI \u0434\u043e PI.</p>"},{"location":"Frontend/shader/glossary/atan/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>cos, acos, sin, asin, atan, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457, \u0420\u043e\u0437\u0434\u0456\u043b 06: \u041a\u043e\u043b\u044c\u043e\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/atan/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/atan/README-vi/#atan","title":"Atan","text":"<p>T\u00ednh g\u00f3c l\u01b0\u1ee3ng gi\u00e1c t\u01b0\u01a1ng \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb tan</p>"},{"location":"Frontend/shader/glossary/atan/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float atan(float y, float x)  \nvec2 atan(vec2 y, vec2 x)  \nvec3 atan(vec3 y, vec3 x)  \nvec4 atan(vec4 y, vec4 x)\n\nfloat atan(float y_over_x)  \nvec2 atan(vec2 y_over_x)  \nvec3 atan(vec3 y_over_x)  \nvec4 atan(vec4 y_over_x)\n</code></pre>"},{"location":"Frontend/shader/glossary/atan/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>y</code> t\u1eed s\u1ed1 c\u1ee7a h\u00e0m tan</p> <p><code>x</code> m\u1eabu s\u1ed1 c\u1ee7a h\u00e0m tan</p> <p><code>y_over_x</code> gi\u00e1 tr\u1ecb tan d\u1ea1ng ph\u00e2n s\u1ed1 c\u1ea7n t\u00ecm g\u00f3c t\u01b0\u01a1ng \u1ee9ng</p>"},{"location":"Frontend/shader/glossary/atan/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>atan()</code> tr\u1ea3 v\u1ec1 g\u00f3c l\u01b0\u1ee3ng gi\u00e1c (\u0111\u01a1n v\u1ecb radian) \u1ee9ng v\u1edbi tan b\u1eb1ng <code>y,x</code> ho\u1eb7c <code>y_over_x</code>, tu\u1ef3 theo phi\u00ean b\u1ea3n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. \u1ede phi\u00ean b\u1ea3n \u0111\u1ea7u ti\u00ean th\u00ec d\u1ea5u c\u1ee7a <code>y</code> v\u00e0 <code>x</code> s\u1ebd \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh g\u00f3c ph\u1ea7n t\u01b0 c\u1ee7a g\u00f3c l\u01b0\u1ee3ng gi\u00e1c. K\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y s\u1ebd n\u1eb1m trong kho\u1ea3ng [-PI, PI]. N\u1ebfu <code>x</code> b\u1eb1ng kh\u00f4ng th\u00ec k\u1ebft qu\u1ea3 kh\u00f4ng x\u00e1c \u0111\u1ecbnh. \u1ede phi\u00ean b\u1ea3n th\u1ee9 hai, <code>atan()</code> tr\u1ea3 v\u1ec1 g\u00f3c l\u01b0\u1ee3ng gi\u00e1c (\u0111\u01a1n v\u1ecb radian) \u1ee9ng v\u1edbi tan b\u1eb1ng <code>y_over_x</code>. K\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y s\u1ebd n\u1eb1m trong kho\u1ea3ng [-PI/2, PI/2].</p>"},{"location":"Frontend/shader/glossary/atan/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>cos, acos, sin, asin, atan, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function), Ch\u01b0\u01a1ng 6: M\u00e0u s\u1eafc</p>"},{"location":"Frontend/shader/glossary/attribute/","title":"Index","text":""},{"location":"Frontend/shader/glossary/attribute/#attribute","title":"Attribute","text":"<p>Vertex attribute data.</p>"},{"location":"Frontend/shader/glossary/attribute/#example","title":"Example","text":"<pre><code>attribute vec4 v_color;\n</code></pre>"},{"location":"Frontend/shader/glossary/attribute/#description","title":"Description","text":"<p><code>attribute</code> read-only variables containing data shared from WebGL/OpenGL environment to the vertex shader.</p> <p>Because the vertex shader is executed one time for each vertex, attributes are specify per vertex data typically with information such as: space position, color, normal direction and texture coordinates of a vertex.</p>"},{"location":"Frontend/shader/glossary/attribute/#see-also","title":"See Also","text":"<p>const, uniform, varying, Chapter 03: Uniforms</p>"},{"location":"Frontend/shader/glossary/attribute/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/attribute/README-pl/#attribute","title":"attribute","text":"<p>Dane atrybut\u00f3w wierzcho\u0142ka.</p>"},{"location":"Frontend/shader/glossary/attribute/README-pl/#przykad","title":"Przyk\u0142ad","text":"<pre><code>attribute vec4 v_color;\n</code></pre>"},{"location":"Frontend/shader/glossary/attribute/README-pl/#opis","title":"Opis","text":"<p><code>attribute</code> to zmienne tylko do odczytu, zawieraj\u0105ce dane udost\u0119pniane z \u015brodowiska WebGL/OpenGL do vertex shadera.</p> <p>Poniewa\u017c vertex shader jest uruchamiany raz dla ka\u017cdego wierzcho\u0142ka, atrybuty okre\u015blaj\u0105 dane specyficzne dla poszczeg\u00f3lnych wierzcho\u0142k\u00f3w, takie jak: pozycja w przestrzeni, kolor, kierunek wektora normalnego czy wsp\u00f3\u0142rz\u0119dne tekstury.</p>"},{"location":"Frontend/shader/glossary/attribute/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>const, uniform, varying, Rozdzia\u0142 03: Uniformy</p>"},{"location":"Frontend/shader/glossary/attribute/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/attribute/README-ua/#attribute","title":"attribute","text":"<p>\u0414\u0430\u043d\u0456 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456\u0432 \u0432\u0435\u0440\u0448\u0438\u043d.</p>"},{"location":"Frontend/shader/glossary/attribute/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>attribute vec4 v_color;\n</code></pre>"},{"location":"Frontend/shader/glossary/attribute/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>attribute</code> \u2014 \u0437\u043c\u0456\u043d\u043d\u0456 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0456 \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u043d\u043d\u044f, \u0449\u043e \u043c\u0456\u0441\u0442\u044f\u0442\u044c \u0434\u0430\u043d\u0456, \u044f\u043a\u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0456\u0437 \u0441\u0435\u0440\u0435\u0434\u043e\u0432\u0438\u0449\u0430 WebGL/OpenGL \u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u0438\u0439 \u0448\u0435\u0439\u0434\u0435\u0440.</p> <p>\u041e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u0438\u0439 \u0448\u0435\u0439\u0434\u0435\u0440 \u0432\u0438\u043a\u043e\u043d\u0443\u0454\u0442\u044c\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0457 \u0432\u0435\u0440\u0448\u0438\u043d\u0438, \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0438 \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c \u0434\u0430\u043d\u0456 \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0457 \u0432\u0435\u0440\u0448\u0438\u043d\u0438, \u044f\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437 \u0442\u0430\u043a\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e, \u044f\u043a: \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044f \u0432 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0456, \u043a\u043e\u043b\u0456\u0440, \u043d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u043d\u043e\u0440\u043c\u0430\u043b\u0456 \u0442\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0438.</p>"},{"location":"Frontend/shader/glossary/attribute/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>const, uniform, varying, \u0420\u043e\u0437\u0434\u0456\u043b 03: Uniforms</p>"},{"location":"Frontend/shader/glossary/attribute/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/attribute/README-vi/#attribute","title":"Attribute","text":"<p>\u0110\u00e1nh d\u1ea5u d\u1eef li\u1ec7u v\u1ec1 c\u00e1c \u0111\u1ec9nh c\u1ee7a mesh.</p>"},{"location":"Frontend/shader/glossary/attribute/README-vi/#vi-du","title":"V\u00ed d\u1ee5","text":"<pre><code>attribute vec4 v_color;\n</code></pre>"},{"location":"Frontend/shader/glossary/attribute/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>attribute</code> \u0111\u00e1nh d\u1ea5u d\u1eef li\u1ec7u v\u1ec1 c\u00e1c \u0111\u1ec9nh c\u1ee7a mesh g\u1eedi t\u1eeb m\u00f4i tr\u01b0\u1eddng WebGL/OpenGL cho vertex shader.</p> <p>V\u00ec vertex shader ch\u1ec9 th\u1ef1c thi m\u1ed9t l\u1ea7n cho m\u1ed7i \u0111\u1ec9nh, n\u00ean c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed7i \u0111\u1ec9nh ph\u1ea3i \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u00edch danh: v\u1ecb tr\u00ed, m\u00e0u s\u1eafc, vector ph\u00e1p tuy\u1ebfn v\u00e0 to\u1ea1 \u0111\u1ed9 UV.</p>"},{"location":"Frontend/shader/glossary/attribute/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>const, uniform, varying, Ch\u01b0\u01a1ng 03: Uniform</p>"},{"location":"Frontend/shader/glossary/bool/","title":"Index","text":""},{"location":"Frontend/shader/glossary/bool/#bool","title":"Bool","text":"<p>Boolean variable type</p>"},{"location":"Frontend/shader/glossary/bool/#declaration","title":"Declaration","text":"<pre><code>bool aBool = true;\nbool bBool = bool(aInt);\nbool cBool = bool(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/bool/#description","title":"Description","text":"<p><code>bool</code> data type is either true or false.</p>"},{"location":"Frontend/shader/glossary/bool/#see-also","title":"See Also","text":"<p>void, bool, int, float, bvec2, bvec3, bvec4, struct</p>"},{"location":"Frontend/shader/glossary/bool/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/bool/README-pl/#bool","title":"bool","text":"<p>Typ zmiennej logicznej</p>"},{"location":"Frontend/shader/glossary/bool/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>bool aBool = true;\nbool bBool = bool(aInt);\nbool cBool = bool(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/bool/README-pl/#opis","title":"Opis","text":"<p><code>bool</code> mo\u017ce przyjmowa\u0107 dwie warto\u015bci: <code>true</code> lub <code>false</code>.</p>"},{"location":"Frontend/shader/glossary/bool/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>void, bool, int, float, bvec2, bvec3, bvec4, struct</p>"},{"location":"Frontend/shader/glossary/bool/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/bool/README-ua/#bool","title":"bool","text":"<p>\u041b\u043e\u0433\u0456\u0447\u043d\u0438\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u0438\u0445 (\u0442\u0430\u043a\u043e\u0436 \u0431\u0443\u043b\u0456\u0432, \u0431\u0443\u043b\u0435\u0432\u0438\u0439, \u0431\u0443\u043b\u0456\u0432\u0441\u044c\u043a\u0438\u0439)</p>"},{"location":"Frontend/shader/glossary/bool/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>bool aBool = true;\nbool bBool = bool(aInt);\nbool cBool = bool(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/bool/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>bool</code> \u2014 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043b\u043e\u0433\u0456\u0447\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443 \u0434\u0430\u043d\u0438\u0445. \u041f\u0440\u0438\u0439\u043c\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f true \u0430\u0431\u043e false. \u0422\u0430\u043a\u043e\u0436 \u0454 \u043e\u0434\u043d\u043e\u0456\u043c\u0435\u043d\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0434\u0430\u043d\u0438\u0445 \u0434\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443. </p>"},{"location":"Frontend/shader/glossary/bool/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>void, bool, int, float, bvec2, bvec3, bvec4, struct</p>"},{"location":"Frontend/shader/glossary/bool/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/bool/README-vi/#bool","title":"Bool","text":"<p>Ki\u1ec3u d\u1eef li\u1ec7u boolean</p>"},{"location":"Frontend/shader/glossary/bool/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bool aBool = true;\nbool bBool = bool(aInt);\nbool cBool = bool(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/bool/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>bool</code> ch\u1ec9 nh\u1eadn 1 trong 2 gi\u00e1 tr\u1ecb \u0111\u00fang ho\u1eb7c sai</p>"},{"location":"Frontend/shader/glossary/bool/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>void, bool, int, float, bvec2, bvec3, bvec4, struct</p>"},{"location":"Frontend/shader/glossary/bvec2/","title":"Index","text":""},{"location":"Frontend/shader/glossary/bvec2/#bvec2","title":"Bvec2","text":"<p>2 dimensional boolean vector</p>"},{"location":"Frontend/shader/glossary/bvec2/#declaration","title":"Declaration","text":"<pre><code>bvec2 aBvec2 = bvec2(true, true);\nbvec2 bBvec2 = bvec2(true);\n\nbvec2 cBvec2 = bvec2(aBvec3);\nbvec2 dBvec2 = bvec2(aBvec3.x, aBvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec2/#description","title":"Description","text":"<p><code>bvec2</code> is a boolean vector with two components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a vector of higher dimension. The respective values are used to initialize the components.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec2/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec2/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/bvec2/README-pl/#bvec2","title":"bvec2","text":"<p>2-wymiarowy wektor <code>bool</code>owski</p>"},{"location":"Frontend/shader/glossary/bvec2/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>bvec2 aBvec2 = bvec2(true, true);\nbvec2 bBvec2 = bvec2(true);\n\nbvec2 cBvec2 = bvec2(aBvec3);\nbvec2 dBvec2 = bvec2(aBvec3.x, aBvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec2/README-pl/#opis","title":"Opis","text":"<p><code>bvec2</code> to wektor <code>bool</code>owski z dwoma komponentami. Mo\u017cna go zainicjalizowa\u0107:</p> <ul> <li>Podaj\u0105c warto\u015b\u0107 skalarn\u0105 dla ka\u017cdego komponentu.</li> <li>Podaj\u0105c jedn\u0105 warto\u015b\u015b skalarn\u0105. Zostanie ona przypisana do wszystkich komponent\u00f3w.</li> <li>Podaj\u0105c wektor o wy\u017cszym wymiarze. Odpowiednie warto\u015bci zostan\u0105 u\u017cyte do inicjalizacji komponent\u00f3w.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec2/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec2/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/bvec2/README-ua/#bvec2","title":"bvec2","text":"<p>2-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/bvec2/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 aBvec2 = bvec2(true, true);\nbvec2 bBvec2 = bvec2(true);\n\nbvec2 cBvec2 = bvec2(aBvec3);\nbvec2 dBvec2 = bvec2(aBvec3.x, aBvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec2/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>bvec2</code> \u2014 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0434\u0432\u043e\u043c\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u0449\u043e\u0457 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0434\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u0456 \u0434\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> </ul>"},{"location":"Frontend/shader/glossary/bvec2/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec2/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/bvec2/README-vi/#bvec2","title":"Bvec2","text":"<p>Vector boolean 2 chi\u1ec1u</p>"},{"location":"Frontend/shader/glossary/bvec2/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 aBvec2 = bvec2(true, true);\nbvec2 bBvec2 = bvec2(true);\n\nbvec2 cBvec2 = bvec2(aBvec3);\nbvec2 dBvec2 = bvec2(aBvec3.x, aBvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec2/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>bvec2</code> vector boolean g\u1ed3m 2 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 2 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb 1 vector nhi\u1ec1u chi\u1ec1u h\u01a1n. C\u00e1c th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o theo th\u1ee9 t\u1ef1.</p>"},{"location":"Frontend/shader/glossary/bvec2/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec3/","title":"Index","text":""},{"location":"Frontend/shader/glossary/bvec3/#bvec3","title":"Bvec3","text":"<p>3 dimensional boolean vector</p>"},{"location":"Frontend/shader/glossary/bvec3/#declaration","title":"Declaration","text":"<pre><code>vec3 aBvec3 = bvec3(true, true, true);\nvec3 bBvec3 = bvec3(true);\n\nvec3 cBvec3 = bvec3(aBvec4);\nvec3 dBvec3 = bvec3(aBvec4.x, aBvec4.y, aBvec4.z);\n\nvec3 eBvec3 = bvec3(aBvec2, aBool);\nvec3 fBvec3 = bvec3(aBvec2.x, aBvec2.y, aBool);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec3/#description","title":"Description","text":"<p><code>bvec3</code> is a boolean vector with three components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a vector of higher dimension. The respective values are used to initialize the components.</li> <li>Providing a combination of vectors and/or scalars. The respective values are used to initialize the vector. The arguments of the constructor must have at least as many components as the vector that is initialized.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec3/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec3/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/bvec3/README-pl/#bvec3","title":"bvec3","text":"<p>3-wymiarowy wektor <code>bool</code>owski</p>"},{"location":"Frontend/shader/glossary/bvec3/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>vec3 aBvec3 = bvec3(true, true, true);\nvec3 bBvec3 = bvec3(true);\n\nvec3 cBvec3 = bvec3(aBvec4);\nvec3 dBvec3 = bvec3(aBvec4.x, aBvec4.y, aBvec4.z);\n\nvec3 eBvec3 = bvec3(aBvec2, aBool);\nvec3 fBvec3 = bvec3(aBvec2.x, aBvec2.y, aBool);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec3/README-pl/#opis","title":"Opis","text":"<p><code>bvec3</code> to wektor <code>bool</code>owski z trzema komponentami. Mo\u017cna go zainicjalizowa\u0107:</p> <ul> <li>Podaj\u0105c warto\u015b\u0107 skalarn\u0105 dla ka\u017cdego komponentu.</li> <li>Podaj\u0105c jedn\u0105 warto\u015b\u0107 skalarn\u0105 \u2013 zostanie ona przypisana do wszystkich komponent\u00f3w.</li> <li>Podaj\u0105c wektor o wy\u017cszym wymiarze \u2013 odpowiednie warto\u015bci zostan\u0105 u\u017cyte do inicjalizacji komponent\u00f3w.</li> <li>Podaj\u0105c kombinacj\u0119 wektor\u00f3w i/lub skalar\u00f3w \u2013 odpowiednie warto\u015bci zostan\u0105 u\u017cyte do inicjalizacji wektora. Argumenty konstruktora musz\u0105 zawiera\u0107 co najmniej tyle komponent\u00f3w, ile ma inicjalizowany wektor.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec3/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec3/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/bvec3/README-ua/#bvec3","title":"bvec3","text":"<p>3-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/bvec3/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec3 aBvec3 = bvec3(true, true, true);\nvec3 bBvec3 = bvec3(true);\n\nvec3 cBvec3 = bvec3(aBvec4);\nvec3 dBvec3 = bvec3(aBvec4.x, aBvec4.y, aBvec4.z);\n\nvec3 eBvec3 = bvec3(aBvec2, aBool);\nvec3 fBvec3 = bvec3(aBvec2.x, aBvec2.y, aBool);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec3/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>bvec3</code> \u2014 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0442\u0440\u044c\u043e\u043c\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u0449\u043e\u0457 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0434\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u0456 \u0434\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0442\u0430/\u0430\u0431\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432. \u0414\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec3/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec3/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/bvec3/README-vi/#bvec3","title":"Bvec3","text":"<p>Vector boolean 3 chi\u1ec1u</p>"},{"location":"Frontend/shader/glossary/bvec3/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec3 aBvec3 = bvec3(true, true, true);\nvec3 bBvec3 = bvec3(true);\n\nvec3 cBvec3 = bvec3(aBvec4);\nvec3 dBvec3 = bvec3(aBvec4.x, aBvec4.y, aBvec4.z);\n\nvec3 eBvec3 = bvec3(aBvec2, aBool);\nvec3 fBvec3 = bvec3(aBvec2.x, aBvec2.y, aBool);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec3/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>bvec3</code> vector boolean g\u1ed3m 3 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 3 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb 1 vector nhi\u1ec1u chi\u1ec1u h\u01a1n. C\u00e1c th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o theo th\u1ee9 t\u1ef1. - L\u1ea5y gi\u00e1 tr\u1ecb theo th\u1ee9 t\u1ef1 l\u1ea7n l\u01b0\u1ee3t t\u1eeb nhi\u1ec1u vector, mi\u1ec5n l\u00e0 \u0111\u1ee7 3 th\u00e0nh ph\u1ea7n.</p>"},{"location":"Frontend/shader/glossary/bvec3/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec4/","title":"Index","text":""},{"location":"Frontend/shader/glossary/bvec4/#bvec4","title":"Bvec4","text":"<p>4 dimensional boolean vector</p>"},{"location":"Frontend/shader/glossary/bvec4/#declaration","title":"Declaration","text":"<pre><code>vec4 aBvec4 = bvec4(true, true, true, true);\nvec4 bBvec4 = bvec4(true);\n\nvec4 cBvec4 = bvec4(aBvec2, aBool, aBvec3);\nvec4 dBvec4 = bvec4(aBvec2.x, aBvec2.y, aBool, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec4/#description","title":"Description","text":"<p><code>bvec4</code> is a boolean vector with four components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a combination of vectors and scalars. The respective values are used to initialize the components. The arguments of the constructor must have at least as many components as the vector that is initialized.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec4/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec4/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/bvec4/README-pl/#bvec4","title":"bvec4","text":"<p>4-wymiarowy wektor <code>bool</code>owski</p>"},{"location":"Frontend/shader/glossary/bvec4/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>vec4 aBvec4 = bvec4(true, true, true, true);\nvec4 bBvec4 = bvec4(true);\n\nvec4 cBvec4 = bvec4(aBvec2, aBool, aBvec3);\nvec4 dBvec4 = bvec4(aBvec2.x, aBvec2.y, aBool, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec4/README-pl/#opis","title":"Opis","text":"<p><code>bvec4</code> to wektor <code>bool</code>owski maj\u0105cy cztery sk\u0142adowe. Mo\u017cna go zainicjalizowa\u0107:</p> <ul> <li>Podaj\u0105c osobn\u0105 warto\u015b\u0107 skalarn\u0105 dla ka\u017cdej sk\u0142adowej.</li> <li>Podaj\u0105c jedn\u0105 warto\u015b\u0107 skalarn\u0105. Warto\u015b\u0107 ta zostanie u\u017cyta dla wszystkich sk\u0142adowych.</li> <li>Podaj\u0105c kombinacj\u0119 wektor\u00f3w i skalar\u00f3w. Odpowiednie warto\u015bci zostan\u0105 u\u017cyte do inicjalizacji sk\u0142adowych. Argumenty konstruktora musz\u0105 mie\u0107 przynajmniej tyle sk\u0142adowych, ile wynosi rozmiar inicjalizowanego wektora.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec4/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec4/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/bvec4/README-ua/#bvec4","title":"bvec4","text":"<p>4-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/bvec4/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec4 aBvec4 = bvec4(true, true, true, true);\nvec4 bBvec4 = bvec4(true);\n\nvec4 cBvec4 = bvec4(aBvec2, aBool, aBvec3);\nvec4 dBvec4 = bvec4(aBvec2.x, aBvec2.y, aBool, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec4/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>bvec4</code> \u2014 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0447\u043e\u0442\u0438\u0440\u043c\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0442\u0430/\u0430\u0431\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432. \u0414\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</li> </ul>"},{"location":"Frontend/shader/glossary/bvec4/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/bvec4/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/bvec4/README-vi/#bvec4","title":"Bvec4","text":"<p>Vector boolean 4 chi\u1ec1u</p>"},{"location":"Frontend/shader/glossary/bvec4/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec4 aBvec4 = bvec4(true, true, true, true);\nvec4 bBvec4 = bvec4(true);\n\nvec4 cBvec4 = bvec4(aBvec2, aBool, aBvec3);\nvec4 dBvec4 = bvec4(aBvec2.x, aBvec2.y, aBool, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/bvec4/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>bvec4</code> vector boolean g\u1ed3m 4 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 4 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb theo th\u1ee9 t\u1ef1 l\u1ea7n l\u01b0\u1ee3t t\u1eeb nhi\u1ec1u vector, mi\u1ec5n l\u00e0 \u0111\u1ee7 4 th\u00e0nh ph\u1ea7n.</p>"},{"location":"Frontend/shader/glossary/bvec4/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ceil/","title":"Index","text":""},{"location":"Frontend/shader/glossary/ceil/#ceil","title":"Ceil","text":"<p>Find the nearest integer that is greater than or equal to the parameter</p>"},{"location":"Frontend/shader/glossary/ceil/#declaration","title":"Declaration","text":"<pre><code>float ceil(float x)  \nvec2 ceil(vec2 x)  \nvec3 ceil(vec3 x)  \nvec4 ceil(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/ceil/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to evaluate.</p>"},{"location":"Frontend/shader/glossary/ceil/#description","title":"Description","text":"<p><code>ceil()</code>  returns a value equal to the nearest integer that is greater than or equal to <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/ceil/#see-also","title":"See Also","text":"<p>floor, fract, mod, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/ceil/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/ceil/README-pl/#ceil","title":"ceil","text":"<p>Znajduje najbli\u017csz\u0105 liczb\u0119 ca\u0142kowit\u0105, kt\u00f3ra jest wi\u0119ksza lub r\u00f3wna podanemu parametrowi</p>"},{"location":"Frontend/shader/glossary/ceil/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float ceil(float x)\nvec2 ceil(vec2 x)\nvec3 ceil(vec3 x)\nvec4 ceil(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/ceil/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla warto\u015b\u0107 do ewaluacji</p>"},{"location":"Frontend/shader/glossary/ceil/README-pl/#opis","title":"Opis","text":"<p><code>ceil()</code> zwraca warto\u015b\u0107 r\u00f3wn\u0105 najbli\u017cszej liczbie ca\u0142kowitej, kt\u00f3ra jest wi\u0119ksza b\u0105d\u017a r\u00f3wna <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/ceil/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>floor, fract, mod, Rozdzia\u0142 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/ceil/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/ceil/README-ua/#ceil","title":"ceil","text":"<p>\u0417\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0456 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u0430\u0439\u0431\u043b\u0438\u0436\u0447\u0435 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e, \u044f\u043a\u0435 \u0431\u0456\u043b\u044c\u0448\u0435 \u0430\u0431\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443</p>"},{"location":"Frontend/shader/glossary/ceil/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float ceil(float x)  \nvec2 ceil(vec2 x)  \nvec3 ceil(vec3 x)  \nvec4 ceil(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/ceil/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438.</p>"},{"location":"Frontend/shader/glossary/ceil/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>ceil()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043d\u0430\u0439\u0431\u043b\u0438\u0436\u0447\u043e\u043c\u0443 \u0446\u0456\u043b\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443, \u044f\u043a\u0435 \u0431\u0456\u043b\u044c\u0448\u0435 \u0430\u0431\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/ceil/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>floor, fract, mod, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/ceil/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/ceil/README-vi/#ceil","title":"Ceil","text":"<p>T\u00ecm s\u1ed1 nguy\u00ean l\u1edbn h\u01a1n ho\u1eb7c b\u1eb1ng g\u1ea7n nh\u1ea5t (l\u00e0m tr\u00f2n l\u00ean).</p>"},{"location":"Frontend/shader/glossary/ceil/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float ceil(float x)  \nvec2 ceil(vec2 x)  \nvec3 ceil(vec3 x)  \nvec4 ceil(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/ceil/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> gi\u00e1 tr\u1ecb c\u1ea7n l\u00e0m tr\u00f2n</p>"},{"location":"Frontend/shader/glossary/ceil/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>ceil()</code> l\u00e0m tr\u00f2n <code>x</code> th\u00e0nh s\u1ed1 l\u1edbn h\u01a1n ho\u1eb7c b\u1eb1ng.</p>"},{"location":"Frontend/shader/glossary/ceil/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>floor, fract, mod, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/clamp/","title":"Index","text":""},{"location":"Frontend/shader/glossary/clamp/#clamp","title":"Clamp","text":"<p>Constrain a value to lie between two further values</p>"},{"location":"Frontend/shader/glossary/clamp/#declaration","title":"Declaration","text":"<pre><code>float clamp(float x, float minVal, float maxVal)  \nvec2 clamp(vec2 x, vec2 minVal, vec2 maxVal)  \nvec3 clamp(vec3 x, vec3 minVal, vec3 maxVal)  \nvec4 clamp(vec4 x, vec4 minVal, vec4 maxVal)\n\nvec2 clamp(vec2 x, float minVal, float maxVal)  \nvec3 clamp(vec3 x, float minVal, float maxVal)  \nvec4 clamp(vec4 x, float minVal, float maxVal)\n</code></pre>"},{"location":"Frontend/shader/glossary/clamp/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to constrain.</p> <p><code>minVal</code> specifies the lower end of the range into which to constrain x.</p> <p><code>maxVal</code> specifies the upper end of the range into which to constrain x.</p>"},{"location":"Frontend/shader/glossary/clamp/#description","title":"Description","text":"<p><code>clamp()</code> returns the value of <code>x</code> constrained to the range <code>minVal</code> to <code>maxVal</code>. The returned value is computed as <code>min(max(x, minVal), maxVal)</code>.</p>"},{"location":"Frontend/shader/glossary/clamp/#see-also","title":"See Also","text":"<p>min, abs, max</p>"},{"location":"Frontend/shader/glossary/clamp/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/clamp/README-pl/#clamp","title":"clamp","text":"<p>Ogranicza warto\u015b\u0107, aby mie\u015bci\u0142a si\u0119 mi\u0119dzy dwoma skrajnymi warto\u015bciami</p>"},{"location":"Frontend/shader/glossary/clamp/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float clamp(float x, float minVal, float maxVal)\nvec2 clamp(vec2 x, vec2 minVal, vec2 maxVal)\nvec3 clamp(vec3 x, vec3 minVal, vec3 maxVal)\nvec4 clamp(vec4 x, vec4 minVal, vec4 maxVal)\n\nvec2 clamp(vec2 x, float minVal, float maxVal)\nvec3 clamp(vec3 x, float minVal, float maxVal)\nvec4 clamp(vec4 x, float minVal, float maxVal)\n</code></pre>"},{"location":"Frontend/shader/glossary/clamp/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla warto\u015b\u0107, kt\u00f3r\u0105 nale\u017cy ograniczy\u0107.</p> <p><code>minVal</code> okre\u015bla doln\u0105 granic\u0119 zakresu, w kt\u00f3rym b\u0119dzie ograniczana warto\u015b\u0107 x.</p> <p><code>maxVal</code> okre\u015bla g\u00f3rn\u0105 granic\u0119 zakresu, w kt\u00f3rym b\u0119dzie ograniczana warto\u015b\u0107 x.</p>"},{"location":"Frontend/shader/glossary/clamp/README-pl/#opis","title":"Opis","text":"<p><code>clamp()</code> zwraca warto\u015b\u0107 <code>x</code> ograniczon\u0105 do zakresu od <code>minVal</code> do <code>maxVal</code>. Zwr\u00f3cona warto\u015b\u0107 obliczana jest jako <code>min(max(x, minVal), maxVal)</code>.</p>"},{"location":"Frontend/shader/glossary/clamp/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>min, abs, max</p>"},{"location":"Frontend/shader/glossary/clamp/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/clamp/README-ua/#clamp","title":"clamp","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 \u043c\u0456\u0436 \u0434\u0432\u043e\u043c\u0430 \u043e\u0431\u043c\u0435\u0436\u0443\u0432\u0430\u0447\u0430\u043c\u0438</p>"},{"location":"Frontend/shader/glossary/clamp/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float clamp(float x, float minVal, float maxVal)  \nvec2 clamp(vec2 x, vec2 minVal, vec2 maxVal)  \nvec3 clamp(vec3 x, vec3 minVal, vec3 maxVal)  \nvec4 clamp(vec4 x, vec4 minVal, vec4 maxVal)\n\nvec2 clamp(vec2 x, float minVal, float maxVal)  \nvec3 clamp(vec3 x, float minVal, float maxVal)  \nvec4 clamp(vec4 x, float minVal, float maxVal)\n</code></pre>"},{"location":"Frontend/shader/glossary/clamp/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u043d\u044f.</p> <p><code>minVal</code> \u2014 \u043d\u0438\u0436\u043d\u044f \u043c\u0435\u0436\u0430 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0443.</p> <p><code>maxVal</code> \u2014 \u0432\u0435\u0440\u0445\u043d\u044f \u043c\u0435\u0436\u0430 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0443.</p>"},{"location":"Frontend/shader/glossary/clamp/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>clamp()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>x</code> \u043e\u0431\u043c\u0435\u0436\u0435\u043d\u0435 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u043c \u0432\u0456\u0434 <code>minVal</code> \u0434\u043e <code>maxVal</code>. \u041f\u043e\u0432\u0435\u0440\u043d\u0435\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a <code>min(max(x, minVal), maxVal)</code>.</p>"},{"location":"Frontend/shader/glossary/clamp/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>min, abs, max, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/clamp/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/clamp/README-vi/#clamp","title":"Clamp","text":"<p>Gi\u1edbi h\u1ea1n 1 gi\u00e1 tr\u1ecb n\u1eb1m trong 1 kho\u1ea3ng.</p>"},{"location":"Frontend/shader/glossary/clamp/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float clamp(float x, float minVal, float maxVal)  \nvec2 clamp(vec2 x, vec2 minVal, vec2 maxVal)  \nvec3 clamp(vec3 x, vec3 minVal, vec3 maxVal)  \nvec4 clamp(vec4 x, vec4 minVal, vec4 maxVal)\n\nvec2 clamp(vec2 x, float minVal, float maxVal)  \nvec3 clamp(vec3 x, float minVal, float maxVal)  \nvec4 clamp(vec4 x, float minVal, float maxVal)\n</code></pre>"},{"location":"Frontend/shader/glossary/clamp/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> gi\u00e1 tr\u1ecb c\u1ea7n gi\u1edbi h\u1ea1n.</p> <p><code>minVal</code> gi\u00e1 tr\u1ecb nh\u1ecf nh\u1ea5t trong kho\u1ea3ng gi\u1edbi h\u1ea1n</p> <p><code>maxVal</code> gi\u00e1 tr\u1ecb l\u1edbn nh\u1ea5t trong kho\u1ea3ng gi\u1edbi h\u1ea1n</p>"},{"location":"Frontend/shader/glossary/clamp/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>clamp()</code> tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb <code>x</code> sau khi \u0111\u00e3 \u0111\u1ea3m b\u1ea3o n\u00f3 n\u1eb1m trong kho\u1ea3ng t\u1eeb <code>minVal</code> t\u1edbi <code>maxVal</code>. C\u00e1ch t\u00ednh chi ti\u1ebft: <code>min(max(x, minVal), maxVal)</code>.</p>"},{"location":"Frontend/shader/glossary/clamp/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>min, abs, max</p>"},{"location":"Frontend/shader/glossary/const/","title":"Index","text":""},{"location":"Frontend/shader/glossary/const/#const","title":"Const","text":"<p>Constant qualifier</p>"},{"location":"Frontend/shader/glossary/const/#example","title":"Example","text":"<pre><code>const float PI = 3.14159265359;\n</code></pre>"},{"location":"Frontend/shader/glossary/const/#description","title":"Description","text":"<p><code>const</code> qualifier can be applied to the declaration of any variable to specify that its value will not be changed.</p>"},{"location":"Frontend/shader/glossary/const/#see-also","title":"See also","text":"<p>attribute, uniform, varying</p>"},{"location":"Frontend/shader/glossary/const/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/const/README-pl/#const","title":"const","text":"<p>Kwalifikator sta\u0142y</p>"},{"location":"Frontend/shader/glossary/const/README-pl/#przykad","title":"Przyk\u0142ad","text":"<pre><code>const float PI = 3.14159265359;\n</code></pre>"},{"location":"Frontend/shader/glossary/const/README-pl/#opis","title":"Opis","text":"<p>Kwalifikator <code>const</code> mo\u017ce by\u0107 zastosowany do deklaracji dowolnej zmiennej, aby okre\u015bli\u0107, \u017ce jej warto\u015b\u0107 nie ulegnie zmianie.</p>"},{"location":"Frontend/shader/glossary/const/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>attribute, uniform, varying</p>"},{"location":"Frontend/shader/glossary/const/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/const/README-ua/#const","title":"const","text":"<p>\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u0438\u0439 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/const/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>const float PI = 3.14159265359;\n</code></pre>"},{"location":"Frontend/shader/glossary/const/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>const</code> \u2014 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440, \u044f\u043a\u0438\u0439 \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f\u043c \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457, \u0449\u043e\u0431 \u0432\u043a\u0430\u0437\u0430\u0442\u0438, \u0449\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0446\u0456\u0454\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \u043d\u0435 \u0431\u0443\u0434\u0435 \u0456 \u043d\u0435 \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u0437\u043c\u0456\u043d\u0435\u043d\u043e.</p>"},{"location":"Frontend/shader/glossary/const/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>attribute, uniform, varying</p>"},{"location":"Frontend/shader/glossary/const/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/const/README-vi/#const","title":"Const","text":"<p>Qualifier \u0111\u00e1nh d\u1ea5u m\u1ed9t h\u1eb1ng s\u1ed1</p>"},{"location":"Frontend/shader/glossary/const/README-vi/#vi-du","title":"V\u00ed d\u1ee5","text":"<pre><code>const float PI = 3.14159265359;\n</code></pre>"},{"location":"Frontend/shader/glossary/const/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>const</code> khi\u1ebfn cho gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t bi\u1ebfn kh\u00f4ng th\u1ec3 b\u1ecb thay \u0111\u1ed5i</p>"},{"location":"Frontend/shader/glossary/const/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>attribute, uniform, varying</p>"},{"location":"Frontend/shader/glossary/cos/","title":"Index","text":""},{"location":"Frontend/shader/glossary/cos/#cos","title":"Cos","text":"<p>Return the cosine of the parameter</p>"},{"location":"Frontend/shader/glossary/cos/#declaration","title":"Declaration","text":"<pre><code>float cos(float angle)  \nvec2 cos(vec2 angle)  \nvec3 cos(vec3 angle)  \nvec4 cos(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/cos/#parameters","title":"Parameters","text":"<p><code>angle</code> specify the quantity, in radians, of which to return the cosine.</p>"},{"location":"Frontend/shader/glossary/cos/#description","title":"Description","text":"<p><code>cos()</code> returns the trigonometric cosine of angle.</p>"},{"location":"Frontend/shader/glossary/cos/#see-also","title":"See Also","text":"<p>acos, sin, asin, tan, atan, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/cos/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/cos/README-pl/#cos","title":"cos","text":"<p>Zwraca cosinus podanego parametru</p>"},{"location":"Frontend/shader/glossary/cos/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float cos(float angle)\nvec2 cos(vec2 angle)\nvec3 cos(vec3 angle)\nvec4 cos(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/cos/README-pl/#parametry","title":"Parametry","text":"<p><code>angle</code> okre\u015bla warto\u015b\u0107 (w radianach), dla kt\u00f3rej ma zosta\u0107 zwr\u00f3cony cosinus.</p>"},{"location":"Frontend/shader/glossary/cos/README-pl/#opis","title":"Opis","text":"<p><code>cos()</code> zwraca trygonometryczny cosinus podanego k\u0105ta.</p>"},{"location":"Frontend/shader/glossary/cos/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>acos, sin, asin, tan, atan, Rozdzia\u0142 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/cos/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/cos/README-ua/#cos","title":"cos","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/cos/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float cos(float angle)  \nvec2 cos(vec2 angle)  \nvec3 cos(vec3 angle)  \nvec4 cos(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/cos/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>angle</code> \u2014 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u0432 \u0440\u0430\u0434\u0456\u0430\u043d\u0430\u0445, \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u044f\u043a\u043e\u0457 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/cos/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>cos()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u043a\u0443\u0442\u0430.</p>"},{"location":"Frontend/shader/glossary/cos/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>acos, sin, asin, tan, atan, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/cos/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/cos/README-vi/#cos","title":"Cos","text":"<p>T\u00ednh h\u00e0m cosine c\u1ee7a 1 g\u00f3c l\u01b0\u1ee3ng gi\u00e1c</p>"},{"location":"Frontend/shader/glossary/cos/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float cos(float angle)  \nvec2 cos(vec2 angle)  \nvec3 cos(vec3 angle)  \nvec4 cos(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/cos/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>angle</code> g\u00f3c l\u01b0\u1ee3ng gi\u00e1c (\u0111\u01a1n v\u1ecb radian) c\u1ea7n t\u00ednh cosine</p>"},{"location":"Frontend/shader/glossary/cos/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>cos()</code> tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb cosine t\u01b0\u01a1ng \u1ee9ng v\u1edbi g\u00f3c <code>angle</code></p>"},{"location":"Frontend/shader/glossary/cos/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>acos, sin, asin, tan, atan, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/cross/","title":"Index","text":""},{"location":"Frontend/shader/glossary/cross/#cross","title":"Cross","text":"<p>Calculate the cross product of two vectors</p>"},{"location":"Frontend/shader/glossary/cross/#declaration","title":"Declaration","text":"<pre><code>vec3 cross(vec3 x, vec3 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/cross/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first of two vectors</p> <p><code>y</code> specifies the second of two vectors</p>"},{"location":"Frontend/shader/glossary/cross/#description","title":"Description","text":"<p><code>cross()</code> returns the cross product of two vectors, <code>x</code> and <code>y</code>. The input parameters can only be 3-component floating vectors. The cross product is equivalent to the product of the length of the vectors times the sinus of the(smaller) angle between <code>x</code> and <code>y</code>.</p>"},{"location":"Frontend/shader/glossary/cross/#see-also","title":"See Also","text":"<p>dot()</p>"},{"location":"Frontend/shader/glossary/cross/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/cross/README-pl/#cross","title":"cross","text":"<p>Oblicza iloczyn wektorowy dw\u00f3ch wektor\u00f3w</p>"},{"location":"Frontend/shader/glossary/cross/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>vec3 cross(vec3 x, vec3 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/cross/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla pierwszy z dw\u00f3ch wektor\u00f3w</p> <p><code>y</code> okre\u015bla drugi z dw\u00f3ch wektor\u00f3w</p>"},{"location":"Frontend/shader/glossary/cross/README-pl/#opis","title":"Opis","text":"<p><code>cross()</code> zwraca iloczyn wektorowy dw\u00f3ch wektor\u00f3w, <code>x</code> i <code>y</code>. Parametry wej\u015bciowe mog\u0105 by\u0107 wy\u0142\u0105cznie 3-sk\u0142adowymi wektorami zmiennoprzecinkowymi. Iloczyn wektorowy jest r\u00f3wnowa\u017cny iloczynowi d\u0142ugo\u015bci tych wektor\u00f3w pomno\u017conemu przez sinus (mniejszego) k\u0105ta mi\u0119dzy <code>x</code> i <code>y</code>.</p>"},{"location":"Frontend/shader/glossary/cross/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>dot</p>"},{"location":"Frontend/shader/glossary/cross/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/cross/README-ua/#cross","title":"cross","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u043f\u0435\u0440\u0435\u0445\u0440\u0435\u0441\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432</p>"},{"location":"Frontend/shader/glossary/cross/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec3 cross(vec3 x, vec3 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/cross/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</p>"},{"location":"Frontend/shader/glossary/cross/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>cross()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u0445\u0440\u0435\u0441\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432, <code>x</code> \u0442\u0430 <code>y</code>. \u0412\u0445\u0456\u0434\u043d\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u043b\u0438\u0448\u0435 3-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0456 \u0432\u0435\u043a\u0442\u043e\u0440\u0438 \u2014 <code>vec3</code>. \u041f\u0435\u0440\u0435\u0445\u0440\u0435\u0441\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043a\u0443 \u0434\u043e\u0432\u0436\u0438\u043d\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u0441\u0438\u043d\u0443\u0441 (\u043c\u0435\u043d\u0448\u043e\u0433\u043e) \u043a\u0443\u0442\u0430 \u043c\u0456\u0436 <code>x</code> \u0456 <code>y</code>.</p>"},{"location":"Frontend/shader/glossary/cross/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>dot()</p>"},{"location":"Frontend/shader/glossary/cross/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/cross/README-vi/#cross","title":"Cross","text":"<p>T\u00ednh t\u00edch c\u00f3 h\u01b0\u1edbng c\u1ee7a 2 vector</p>"},{"location":"Frontend/shader/glossary/cross/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec3 cross(vec3 x, vec3 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/cross/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t</p> <p><code>y</code> Vector th\u1ee9 hai</p>"},{"location":"Frontend/shader/glossary/cross/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>cross()</code> tr\u1ea3 v\u1ec1 t\u00edch c\u00f3 h\u01b0\u1edbng c\u1ee7a hai vector <code>x</code> v\u00e0 <code>y</code>. C\u00e1c tham s\u1ed1 \u0111\u1ea7u v\u00e0o ph\u1ea3i l\u00e0 c\u00e1c vector s\u1ed1 th\u1ef1c 3 chi\u1ec1u. </p>"},{"location":"Frontend/shader/glossary/cross/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>dot()</p>"},{"location":"Frontend/shader/glossary/dFdx/","title":"Index","text":""},{"location":"Frontend/shader/glossary/dFdx/#dfdx","title":"DFdx","text":"<p>Return the partial derivative of an argument with respect to x</p>"},{"location":"Frontend/shader/glossary/dFdx/#declaration","title":"Declaration","text":"<pre><code>genType dFdx(float x);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdx/#parameters","title":"Parameters","text":"<p><code>p</code> specifies the expression of which to take the partial derivative.</p>"},{"location":"Frontend/shader/glossary/dFdx/#description","title":"Description","text":"<p>Available only in the fragment shader, <code>dFdx</code> return the partial derivative of expression <code>p</code> in <code>x</code>. Derivatives are calculated using local differencing. Expressions that imply higher order derivatives such as <code>dFdx(dFdx(n))</code> have undefined results, as do mixed-order derivatives such as <code>dFdx(dFdy(n))</code>. It is assumed that the expression <code>p</code> is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.</p>"},{"location":"Frontend/shader/glossary/dFdx/#see-also","title":"See Also","text":"<p>dFdy()</p>"},{"location":"Frontend/shader/glossary/dFdx/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/dFdx/README-pl/#dfdx","title":"dFdx","text":"<p>Zwraca pochodn\u0105 cz\u0105stkow\u0105 podanego wyra\u017cenia wzgl\u0119dem x</p>"},{"location":"Frontend/shader/glossary/dFdx/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>genType dFdx(float x);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdx/README-pl/#parametry","title":"Parametry","text":"<p><code>p</code> okre\u015bla wyra\u017cenie, dla kt\u00f3rego chcemy obliczy\u0107 pochodn\u0105 cz\u0105stkow\u0105.</p>"},{"location":"Frontend/shader/glossary/dFdx/README-pl/#opis","title":"Opis","text":"<p>Dost\u0119pna wy\u0142\u0105cznie w fragment shaderze , <code>dFdx</code> zwraca pochodn\u0105 cz\u0105stkow\u0105 wyra\u017cenia <code>p</code> wzgl\u0119dem <code>x</code>. Pochodne obliczane s\u0105 poprzez lokalne r\u00f3\u017cnicowanie. Wyra\u017cenia oznaczaj\u0105ce pochodne wy\u017cszego rz\u0119du, takie jak <code>dFdx(dFdx(n))</code>, zwracaj\u0105 niezdefiniowane wyniki, podobnie jak mieszane pochodne, np. <code>dFdx(dFdy(n))</code>. Przyjmuje si\u0119, \u017ce wyra\u017cenie <code>p</code> jest ci\u0105g\u0142e, wi\u0119c wyra\u017cenia oceniane w warunkowym przep\u0142ywie sterowania (non-uniform control flow) mog\u0105 by\u0107 niezdefiniowane.</p>"},{"location":"Frontend/shader/glossary/dFdx/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>dFdy</p>"},{"location":"Frontend/shader/glossary/dFdx/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/dFdx/README-ua/#dfdx","title":"dFdx","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443 \u0432\u0456\u0434\u043d\u043e\u0441\u043d\u043e x</p>"},{"location":"Frontend/shader/glossary/dFdx/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>genType dFdx(float x);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdx/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>p</code> \u2014 \u0432\u0438\u0440\u0430\u0437, \u0432\u0456\u0434 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0437\u044f\u0442\u0438 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443.</p>"},{"location":"Frontend/shader/glossary/dFdx/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p>\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u043b\u0438\u0448\u0435 \u0443 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456, <code>dFdx</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0432\u0456\u0434 \u0432\u0438\u0440\u0430\u0437\u0443 <code>p</code> \u0443 <code>x</code>. \u041f\u043e\u0445\u0456\u0434\u043d\u0456 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u044e\u0442\u044c\u0441\u044f \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0457 \u0440\u0456\u0437\u043d\u0438\u0446\u0456. \u0412\u0438\u0440\u0430\u0437\u0438, \u044f\u043a\u0456 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0430\u044e\u0442\u044c \u043f\u043e\u0445\u0456\u0434\u043d\u0456 \u0432\u0438\u0449\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0442\u0430\u043a\u0456 \u044f\u043a <code>dFdx(dFdx(n))</code> \u043c\u0430\u044e\u0442\u044c \u043d\u0435\u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438, \u044f\u043a \u0456 \u043f\u043e\u0445\u0456\u0434\u043d\u0456 \u0437\u043c\u0456\u0448\u0430\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0442\u0430\u043a\u0456 \u044f\u043a <code>dFdx(dFdy(n))</code>. \u041f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f, \u0449\u043e \u0432\u0438\u0440\u0430\u0437 <code>p</code> \u0454 \u0431\u0435\u0437\u043f\u0435\u0440\u0435\u0440\u0432\u043d\u0438\u043c, \u0456 \u0442\u043e\u043c\u0443 \u0432\u0438\u0440\u0430\u0437\u0438, \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043d\u0435\u0440\u0456\u0432\u043d\u043e\u043c\u0456\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0443 \u043a\u0435\u0440\u0443\u0432\u0430\u043d\u043d\u044f, \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u043d\u0435\u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u043c\u0438.</p>"},{"location":"Frontend/shader/glossary/dFdx/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>dFdy()</p>"},{"location":"Frontend/shader/glossary/dFdx/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/dFdx/README-vi/#dfdx","title":"DFdx","text":"<p>T\u00ednh \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ee7a x</p>"},{"location":"Frontend/shader/glossary/dFdx/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>genType dFdx(   genType p);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdx/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>p</code> bi\u1ec3u th\u1ee9c c\u1ea7n t\u00ednh \u0111\u1ea1o h\u00e0m ri\u00eang</p>"},{"location":"Frontend/shader/glossary/dFdx/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>Ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong fragment shader, h\u00e0m  <code>dFdx</code> s\u1ebd tr\u1ea3 v\u1ec1 \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ee7a bi\u1ec3u th\u1ee9c <code>p</code> \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb<code>x</code>. \u0110\u1ea1o h\u00e0m \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p sai ph\u00e2n h\u1eefu h\u1ea1n. Kh\u00f4ng t\u00ednh \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 c\u1ee7a \u0111\u1ea1o h\u00e0m b\u1eadc cao nh\u01b0 <code>dFdx(dFdx(n))</code>. Gi\u1ea3 thi\u1ebft l\u00e0 bi\u1ec3u th\u1ee9c <code>p</code> l\u00e0 m\u1ed9t h\u00e0m li\u00ean t\u1ee5c.</p>"},{"location":"Frontend/shader/glossary/dFdx/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>dFdy()</p>"},{"location":"Frontend/shader/glossary/dFdy/","title":"Index","text":""},{"location":"Frontend/shader/glossary/dFdy/#dfdy","title":"DFdy","text":"<p>Return the partial derivative of an argument with respect to y</p>"},{"location":"Frontend/shader/glossary/dFdy/#declaration","title":"Declaration","text":"<pre><code>genType dFdy(float y);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdy/#parameters","title":"Parameters","text":"<p><code>p</code> specifies the expression of which to take the partial derivative.</p>"},{"location":"Frontend/shader/glossary/dFdy/#description","title":"Description","text":"<p>Available only in the fragment shader, <code>dFdy</code> return the partial derivative of expression <code>p</code> in <code>y</code>. Derivatives are calculated using local differencing. Expressions that imply higher order derivatives such as <code>dFdy(dFdy(n))</code> have undefined results, as do mixed-order derivatives such as <code>dFdy(dFdx(n))</code>. It is assumed that the expression <code>p</code> is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.</p>"},{"location":"Frontend/shader/glossary/dFdy/#see-also","title":"See Also","text":"<p>dFdx()</p>"},{"location":"Frontend/shader/glossary/dFdy/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/dFdy/README-pl/#dfdy","title":"dFdy","text":"<p>Zwraca pochodn\u0105 cz\u0105stkow\u0105 podanego wyra\u017cenia wzgl\u0119dem y</p>"},{"location":"Frontend/shader/glossary/dFdy/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>genType dFdy(float y);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdy/README-pl/#parametry","title":"Parametry","text":"<p><code>p</code> okre\u015bla wyra\u017cenie, dla kt\u00f3rego chcemy obliczy\u0107 pochodn\u0105 cz\u0105stkow\u0105.</p>"},{"location":"Frontend/shader/glossary/dFdy/README-pl/#opis","title":"Opis","text":"<p>Dost\u0119pna wy\u0142\u0105cznie w fragment shaderze, <code>dFdy</code> zwraca pochodn\u0105 cz\u0105stkow\u0105 wyra\u017cenia <code>p</code> wzgl\u0119dem <code>y</code>. Pochodne obliczane s\u0105 poprzez lokalne r\u00f3\u017cnicowanie. Wyra\u017cenia oznaczaj\u0105ce pochodne wy\u017cszego rz\u0119du, takie jak <code>dFdy(dFdy(n))</code>, zwracaj\u0105 niezdefiniowane wyniki, podobnie jak mieszane pochodne, np. <code>dFdy(dFdx(n))</code>. Przyjmuje si\u0119, \u017ce wyra\u017cenie <code>p</code> jest ci\u0105g\u0142e, wi\u0119c wyra\u017cenia oceniane w warunkowym przep\u0142ywie sterowania (non-uniform control flow) mog\u0105 by\u0107 niezdefiniowane.</p>"},{"location":"Frontend/shader/glossary/dFdy/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>dFdx</p>"},{"location":"Frontend/shader/glossary/dFdy/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/dFdy/README-ua/#dfdy","title":"dFdy","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443 \u0432\u0456\u0434\u043d\u043e\u0441\u043d\u043e y.</p>"},{"location":"Frontend/shader/glossary/dFdy/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>genType dFdy(float y);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdy/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>p</code> \u2014 \u0432\u0438\u0440\u0430\u0437, \u0432\u0456\u0434 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0437\u044f\u0442\u0438 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443.</p>"},{"location":"Frontend/shader/glossary/dFdy/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0442\u0456\u043b\u044c\u043a\u0438 \u0443 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456, <code>dFdy</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0432\u0438\u0440\u0430\u0437\u0443 <code>p</code> \u043f\u043e \u0432\u0456\u0441\u0456 <code>y</code>. \u041f\u043e\u0445\u0456\u0434\u043d\u0456 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u044e\u0442\u044c\u0441\u044f \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u044e\u0432\u0430\u043d\u043d\u044f. \u0412\u0438\u0440\u0430\u0437\u0438, \u044f\u043a\u0456 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0430\u044e\u0442\u044c \u043f\u043e\u0445\u0456\u0434\u043d\u0456 \u0432\u0438\u0449\u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0456\u0432, \u0442\u0430\u043a\u0456 \u044f\u043a <code>dFdy(dFdy(n))</code> \u043c\u0430\u044e\u0442\u044c \u043d\u0435\u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438, \u0442\u0430\u043a \u0441\u0430\u043c\u043e \u044f\u043a \u0456 \u043f\u043e\u0445\u0456\u0434\u043d\u0456 \u0437\u043c\u0456\u0448\u0430\u043d\u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0456\u0432, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434 <code>dFdy(dFdx(n))</code>. \u041f\u0440\u0438\u043f\u0443\u0441\u043a\u0430\u0454\u0442\u044c\u0441\u044f, \u0449\u043e \u0432\u0438\u0440\u0430\u0437 <code>p</code> \u0454 \u043d\u0435\u043f\u0435\u0440\u0435\u0440\u0432\u043d\u0438\u043c, \u0442\u043e\u043c\u0443 \u0432\u0438\u0440\u0430\u0437\u0438, \u044f\u043a\u0456 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u044e\u0442\u044c\u0441\u044f \u0437 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043d\u044f\u043c \u043d\u0435\u0440\u0456\u0432\u043d\u043e\u043c\u0456\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0443 \u043a\u0435\u0440\u0443\u0432\u0430\u043d\u043d\u044f, \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u043d\u0435\u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u043c\u0438.</p>"},{"location":"Frontend/shader/glossary/dFdy/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>dFdx()</p>"},{"location":"Frontend/shader/glossary/dFdy/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/dFdy/README-vi/#dfdy","title":"DFdy","text":"<p>T\u00ednh \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ee7a y</p>"},{"location":"Frontend/shader/glossary/dFdy/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>genType dFdx(   genType p);\n</code></pre>"},{"location":"Frontend/shader/glossary/dFdy/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>p</code> bi\u1ec3u th\u1ee9c c\u1ea7n t\u00ednh \u0111\u1ea1o h\u00e0m ri\u00eang</p>"},{"location":"Frontend/shader/glossary/dFdy/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>Ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong fragment shader, h\u00e0m  <code>dFdy</code> s\u1ebd tr\u1ea3 v\u1ec1 \u0111\u1ea1o h\u00e0m ri\u00eang c\u1ee7a bi\u1ec3u th\u1ee9c <code>p</code> \u1ee9ng v\u1edbi gi\u00e1 tr\u1ecb<code>x</code>. \u0110\u1ea1o h\u00e0m \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p sai ph\u00e2n h\u1eefu h\u1ea1n. Kh\u00f4ng t\u00ednh \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 c\u1ee7a \u0111\u1ea1o h\u00e0m b\u1eadc cao nh\u01b0 <code>dFdy(dFdy(n))</code>. Gi\u1ea3 thi\u1ebft l\u00e0 bi\u1ec3u th\u1ee9c <code>p</code> l\u00e0 m\u1ed9t h\u00e0m li\u00ean t\u1ee5c.</p>"},{"location":"Frontend/shader/glossary/dFdy/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>dFdx()</p>"},{"location":"Frontend/shader/glossary/degrees/","title":"Index","text":""},{"location":"Frontend/shader/glossary/degrees/#degrees","title":"Degrees","text":"<p>Convert a quantity in radians to degrees</p>"},{"location":"Frontend/shader/glossary/degrees/#declaration","title":"Declaration","text":"<pre><code>float degrees(float radians)  \nvec2 degrees(vec2 radians)  \nvec3 degrees(vec3 radians)  \nvec4 degrees(vec4 radians)\n</code></pre>"},{"location":"Frontend/shader/glossary/degrees/#parameters","title":"Parameters","text":"<p><code>radians</code> specifies the quantity, in radians, to be converted to degrees.</p>"},{"location":"Frontend/shader/glossary/degrees/#description","title":"Description","text":"<p><code>degrees()</code> converts a quantity, specified in radians into degrees. That is, the return value is <code>(180.0*radians)/PI</code></p>"},{"location":"Frontend/shader/glossary/degrees/#see-also","title":"See Also","text":"<p>radians</p>"},{"location":"Frontend/shader/glossary/degrees/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/degrees/README-pl/#degrees","title":"degrees","text":"<p>Konwertuje wielko\u015b\u0107 w radianach na stopnie</p>"},{"location":"Frontend/shader/glossary/degrees/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float degrees(float radians)\nvec2 degrees(vec2 radians)\nvec3 degrees(vec3 radians)\nvec4 degrees(vec4 radians)\n</code></pre>"},{"location":"Frontend/shader/glossary/degrees/README-pl/#parametry","title":"Parametry","text":"<p><code>radians</code> okre\u015bla wielko\u015b\u0107 (w radianach), kt\u00f3ra ma zosta\u0107 zamieniona na stopnie.</p>"},{"location":"Frontend/shader/glossary/degrees/README-pl/#opis","title":"Opis","text":"<p><code>degrees()</code> konwertuje wielko\u015b\u0107 wyra\u017con\u0105 w radianach na stopnie. Oznacza to, \u017ce warto\u015b\u0107 zwracana to <code>(180.0*radians)/PI</code>.</p>"},{"location":"Frontend/shader/glossary/degrees/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>radians</p>"},{"location":"Frontend/shader/glossary/degrees/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/degrees/README-ua/#degrees","title":"degrees","text":"<p>\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0443\u0454 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0443 \u0433\u0440\u0430\u0434\u0443\u0441\u0438</p>"},{"location":"Frontend/shader/glossary/degrees/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float degrees(float radians)  \nvec2 degrees(vec2 radians)  \nvec3 degrees(vec3 radians)  \nvec4 degrees(vec4 radians)\n</code></pre>"},{"location":"Frontend/shader/glossary/degrees/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>radians</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0443 \u0440\u0430\u0434\u0456\u0430\u043d\u0430\u0445, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0438 \u0432 \u0433\u0440\u0430\u0434\u0443\u0441\u0438.</p>"},{"location":"Frontend/shader/glossary/degrees/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>degrees()</code> \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u044e\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0435 \u0432 \u0440\u0430\u0434\u0456\u0430\u043d\u0430\u0445, \u0443 \u0433\u0440\u0430\u0434\u0443\u0441\u0438.</p> <p>\u041e\u0431\u0440\u0430\u0445\u0443\u043d\u043e\u043a \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0456: <code>(180.0 * radians) / PI</code></p>"},{"location":"Frontend/shader/glossary/degrees/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>radians</p>"},{"location":"Frontend/shader/glossary/degrees/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/degrees/README-vi/#degrees","title":"Degrees","text":"<p>Chuy\u1ec3n \u0111\u1ed5i g\u00f3c t\u1eeb \u0111\u01a1n v\u1ecb radian sang \u0111\u1ed9</p>"},{"location":"Frontend/shader/glossary/degrees/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float degrees(float radians)  \nvec2 degrees(vec2 radians)  \nvec3 degrees(vec3 radians)  \nvec4 degrees(vec4 radians)\n</code></pre>"},{"location":"Frontend/shader/glossary/degrees/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>radians</code> g\u00f3c theo \u0111\u01a1n v\u1ecb radian</p>"},{"location":"Frontend/shader/glossary/degrees/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>degrees()</code> tr\u1ea3 v\u1ec1 g\u00f3c t\u00ednh b\u1eb1ng \u0111\u1ed9 t\u01b0\u01a1ng \u1ee9ng, theo c\u00f4ng th\u1ee9c: <code>(180.0 * radians)/PI</code></p>"},{"location":"Frontend/shader/glossary/degrees/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>radians</p>"},{"location":"Frontend/shader/glossary/distance/","title":"Index","text":""},{"location":"Frontend/shader/glossary/distance/#distance","title":"Distance","text":"<p>Calculate the distance between two points</p>"},{"location":"Frontend/shader/glossary/distance/#declaration","title":"Declaration","text":"<pre><code>float distance(float p0, float p1)  \nfloat distance(vec2 p0, vec2 p1)  \nfloat distance(vec3 p0, vec3 p1)  \nfloat distance(vec4 p0, vec4 p1)\n</code></pre>"},{"location":"Frontend/shader/glossary/distance/#parameters","title":"Parameters","text":"<p><code>p0</code> specifies the first of two points</p> <p><code>p1</code> specifies the second of two points</p>"},{"location":"Frontend/shader/glossary/distance/#description","title":"Description","text":"<p><code>distance()</code> returns the distance between the two points <code>p0</code> and <code>p1</code>.</p>"},{"location":"Frontend/shader/glossary/distance/#see-also","title":"See Also","text":"<p>length(), normalize(), Chapter 07: Shapes</p>"},{"location":"Frontend/shader/glossary/distance/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/distance/README-pl/#distance","title":"distance","text":"<p>Oblicza odleg\u0142o\u015b\u0107 mi\u0119dzy dwoma punktami</p>"},{"location":"Frontend/shader/glossary/distance/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float distance(float p0, float p1)\nfloat distance(vec2 p0, vec2 p1)\nfloat distance(vec3 p0, vec3 p1)\nfloat distance(vec4 p0, vec4 p1)\n</code></pre>"},{"location":"Frontend/shader/glossary/distance/README-pl/#parametry","title":"Parametry","text":"<p><code>p0</code> okre\u015bla pierwszy z dw\u00f3ch punkt\u00f3w</p> <p><code>p1</code> okre\u015bla drugi z dw\u00f3ch punkt\u00f3w</p>"},{"location":"Frontend/shader/glossary/distance/README-pl/#opis","title":"Opis","text":"<p><code>distance()</code> zwraca odleg\u0142o\u015b\u0107 pomi\u0119dzy dwoma punktami <code>p0</code> i <code>p1</code>.</p>"},{"location":"Frontend/shader/glossary/distance/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>length, normalize, Rozdzia\u0142 07: Kszta\u0142ty</p>"},{"location":"Frontend/shader/glossary/distance/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/distance/README-ua/#distance","title":"distance","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u0432\u0456\u0434\u0441\u0442\u0430\u043d\u044c \u043c\u0456\u0436 \u0434\u0432\u043e\u043c\u0430 \u0442\u043e\u0447\u043a\u0430\u043c\u0438</p>"},{"location":"Frontend/shader/glossary/distance/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float distance(float p0, float p1)  \nfloat distance(vec2 p0, vec2 p1)  \nfloat distance(vec3 p0, vec3 p1)  \nfloat distance(vec4 p0, vec4 p1)\n</code></pre>"},{"location":"Frontend/shader/glossary/distance/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>p0</code> \u2014 \u043f\u0435\u0440\u0448\u0430 \u0442\u043e\u0447\u043a\u0430.</p> <p><code>p1</code> \u2014 \u0434\u0440\u0443\u0433\u0430 \u0442\u043e\u0447\u043a\u0430.</p>"},{"location":"Frontend/shader/glossary/distance/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>distance()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0456\u0434\u0441\u0442\u0430\u043d\u044c \u043c\u0456\u0436 \u0434\u0432\u043e\u043c\u0430 \u0442\u043e\u0447\u043a\u0430\u043c\u0438 <code>p0</code> \u0456 <code>p1</code>.</p>"},{"location":"Frontend/shader/glossary/distance/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>length(), normalize(), \u0420\u043e\u0437\u0434\u0456\u043b 07: \u0424\u0456\u0433\u0443\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/distance/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/distance/README-vi/#distance","title":"Distance","text":"<p>T\u00ednh kho\u1ea3ng c\u00e1ch gi\u1eefa hai \u0111i\u1ec3m</p>"},{"location":"Frontend/shader/glossary/distance/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float distance(float p0, float p1)  \nfloat distance(vec2 p0, vec2 p1)  \nfloat distance(vec3 p0, vec3 p1)  \nfloat distance(vec4 p0, vec4 p1)\n</code></pre>"},{"location":"Frontend/shader/glossary/distance/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>p0</code> \u0110i\u1ec3m th\u1ee9 nh\u1ea5t</p> <p><code>p1</code> \u0110i\u1ec3m th\u1ee9 hai</p>"},{"location":"Frontend/shader/glossary/distance/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>distance()</code> tr\u1ea3 v\u1ec1 kho\u1ea3ng c\u00e1ch gi\u1eefa hai \u0111i\u1ec3m <code>p0</code> v\u00e0 <code>p1</code>.</p>"},{"location":"Frontend/shader/glossary/distance/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>length(), normalize(), Ch\u01b0\u01a1ng 7: H\u00ecnh d\u1ea1ng</p>"},{"location":"Frontend/shader/glossary/dot/","title":"Index","text":""},{"location":"Frontend/shader/glossary/dot/#dot","title":"Dot","text":"<p>Calculate the dot product of two vectors</p>"},{"location":"Frontend/shader/glossary/dot/#declaration","title":"Declaration","text":"<pre><code>float dot(float x, float y)  \nfloat dot(vec2 x, vec2 y)  \nfloat dot(vec3 x, vec3 y)  \nfloat dot(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/dot/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first of two vectors</p> <p><code>y</code> specifies the second of two vectors</p>"},{"location":"Frontend/shader/glossary/dot/#description","title":"Description","text":"<p><code>dot()</code> returns the dot product of two vectors, <code>x</code> and <code>y</code>. i.e., <code>x[0]\u22c5y[0]+x[1]\u22c5y[1]+...</code> If <code>x</code> and <code>y</code> are the same the square root of the dot product is equivalent to the length of the vector. The input parameters can be floating scalars or float vectors. In case of floating scalars the dot function is trivial and returns the product of x and y.</p>"},{"location":"Frontend/shader/glossary/dot/#see-also","title":"See Also","text":"<p>cross(), Chapter 07: Shapes</p>"},{"location":"Frontend/shader/glossary/dot/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/dot/README-pl/#dot","title":"dot","text":"<p>Oblicza iloczyn skalarny (dot product) dw\u00f3ch wektor\u00f3w</p>"},{"location":"Frontend/shader/glossary/dot/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float dot(float x, float y)\nfloat dot(vec2 x, vec2 y)\nfloat dot(vec3 x, vec3 y)\nfloat dot(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/dot/README-pl/#parametry","title":"Parametry","text":"<p><code>x</code> okre\u015bla pierwszy z dw\u00f3ch wektor\u00f3w</p> <p><code>y</code> okre\u015bla drugi z dw\u00f3ch wektor\u00f3w</p>"},{"location":"Frontend/shader/glossary/dot/README-pl/#opis","title":"Opis","text":"<p><code>dot()</code> zwraca iloczyn skalarny dw\u00f3ch wektor\u00f3w, <code>x</code> i <code>y</code>, tzn. <code>x[0]\u22c5y[0] + x[1]\u22c5y[1] + ...</code> Je\u015bli <code>x</code> i <code>y</code> s\u0105 identyczne, w\u00f3wczas pierwiastek kwadratowy z iloczynu skalarnego jest r\u00f3wnowa\u017cny d\u0142ugo\u015bci wektora. Parametry wej\u015bciowe mog\u0105 by\u0107 skalarnymi warto\u015bciami zmiennoprzecinkowymi lub wektorami zmiennoprzecinkowymi. W przypadku skalar\u00f3w obliczenia sprowadzaj\u0105 si\u0119 do pomno\u017cenia <code>x</code> przez <code>y</code>.</p>"},{"location":"Frontend/shader/glossary/dot/README-pl/#zobacz-tez","title":"Zobacz te\u017c","text":"<p>cross, Rozdzia\u0142 07: Kszta\u0142ty</p>"},{"location":"Frontend/shader/glossary/dot/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/dot/README-ua/#dot","title":"dot","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432</p>"},{"location":"Frontend/shader/glossary/dot/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float dot(float x, float y)  \nfloat dot(vec2 x, vec2 y)  \nfloat dot(vec3 x, vec3 y)  \nfloat dot(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/dot/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</p>"},{"location":"Frontend/shader/glossary/dot/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>dot()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432, <code>x</code> \u0442\u0430 <code>y</code>. \u0422\u043e\u0431\u0442\u043e: \"<code>x[0] * y[0] + x[1] * y[1] +...</code>\" \u042f\u043a\u0449\u043e <code>x</code> \u0456 <code>y</code> \u043e\u0434\u043d\u0430\u043a\u043e\u0432\u0456, \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0438\u0439 \u043a\u043e\u0440\u0456\u043d\u044c \u0456\u0437 \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0434\u043e\u0431\u0443\u0442\u043a\u0443 \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0438\u0439 \u0434\u043e\u0432\u0436\u0438\u043d\u0456 \u0432\u0435\u043a\u0442\u043e\u0440\u0430. \u0412\u0445\u0456\u0434\u043d\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043c\u043e\u0436\u0443\u0442\u044c \u0431\u0443\u0442\u0438 \u0441\u043a\u0430\u043b\u044f\u0440\u0438 \u0437 \u0442\u0438\u043f\u043e\u043c <code>float</code> \u0430\u0431\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0432\u0435\u043a\u0442\u043e\u0440\u0438. \u0423 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432 \u0444\u0443\u043d\u043a\u0446\u0456\u044f <code>dot()</code> \u0454 \u0442\u0440\u0438\u0432\u0456\u0430\u043b\u044c\u043d\u043e\u044e \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u043e\u0431\u0443\u0442\u043e\u043a <code>x</code> \u0442\u0430 <code>y</code>.</p>"},{"location":"Frontend/shader/glossary/dot/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>cross(), \u0420\u043e\u0437\u0434\u0456\u043b 07: \u0424\u0456\u0433\u0443\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/dot/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/dot/README-vi/#dot","title":"Dot","text":"<p>T\u00ednh t\u00edch v\u00f4 h\u01b0\u1edbng c\u1ee7a hai vector</p>"},{"location":"Frontend/shader/glossary/dot/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float dot(float x, float y)  \nfloat dot(vec2 x, vec2 y)  \nfloat dot(vec3 x, vec3 y)  \nfloat dot(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/dot/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t</p> <p><code>y</code> Vector th\u1ee9 hai</p>"},{"location":"Frontend/shader/glossary/dot/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>dot()</code> tr\u1ea3 v\u1ec1 t\u00edch v\u00f4 h\u01b0\u1edbng c\u1ee7a hai vector <code>x</code> v\u00e0 <code>y</code> theo c\u00f4ng th\u1ee9c <code>x[0]\u22c5y[0]+x[1]\u22c5y[1]+...</code> N\u1ebfu <code>x</code> v\u00e0 <code>y</code> gi\u1ed1ng nhau th\u00ec c\u0103n b\u1eadc hai c\u1ee7a t\u00edch v\u00f4 h\u01b0\u1edbng s\u1ebd b\u1eb1ng \u0111\u00fang chi\u1ec1u d\u00e0i c\u1ee7a vector. </p> <p>are the same the square root of the dot product is equivalent to the length of the vector. The input parameters can be floating scalars or float vectors. In case of floating scalars the dot function is trivial and returns the product of x and y.</p>"},{"location":"Frontend/shader/glossary/dot/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>cross(), Chapter 07: Shapes</p>"},{"location":"Frontend/shader/glossary/equal/","title":"Index","text":""},{"location":"Frontend/shader/glossary/equal/#equal","title":"Equal","text":"<p>Perform a component-wise equal-to comparison of two vectors</p>"},{"location":"Frontend/shader/glossary/equal/#declaration","title":"Declaration","text":"<pre><code>bvec2 equal(vec2 x, vec2 y)  \nbvec3 equal(vec3 x, vec3 y)  \nbvec4 equal(vec4 x, vec4 y)  \n\nbvec2 equal(ivec2 x, ivec2 y)  \nbvec3 equal(ivec3 x, ivec3 y)  \nbvec4 equal(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/equal/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first vector to be used in the comparison operation.</p> <p><code>y</code> specifies the second vector to be used in the comparison operation.</p>"},{"location":"Frontend/shader/glossary/equal/#description","title":"Description","text":"<p><code>equal()</code> returns a boolean vector in which each element <code>i</code> is computed as <code>x[i] == y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/equal/#see-also","title":"See Also","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), greaterThan(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/equal/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/equal/README-ua/#equal","title":"equal","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432</p>"},{"location":"Frontend/shader/glossary/equal/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 equal(vec2 x, vec2 y)  \nbvec3 equal(vec3 x, vec3 y)  \nbvec4 equal(vec4 x, vec4 y)  \n\nbvec2 equal(ivec2 x, ivec2 y)  \nbvec3 equal(ivec3 x, ivec3 y)  \nbvec4 equal(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/equal/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/equal/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>equal()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0443 \u044f\u043a\u043e\u043c\u0443 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x[i] == y[i]</code>\".</p>"},{"location":"Frontend/shader/glossary/equal/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), greaterThan(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/equal/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/equal/README-vi/#equal","title":"Equal","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh b\u1eb1ng gi\u1eefa c\u00e1c c\u1eb7p gi\u00e1 tr\u1ecb c\u1ee7a 2 vector.</p>"},{"location":"Frontend/shader/glossary/equal/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 equal(vec2 x, vec2 y)  \nbvec3 equal(vec3 x, vec3 y)  \nbvec4 equal(vec4 x, vec4 y)  \n\nbvec2 equal(ivec2 x, ivec2 y)  \nbvec3 equal(ivec3 x, ivec3 y)  \nbvec4 equal(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/equal/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Vector th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/equal/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>equal()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p so s\u00e1nh <code>x[i] == y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/equal/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), greaterThan(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/exp/","title":"Index","text":""},{"location":"Frontend/shader/glossary/exp/#exp","title":"Exp","text":"<p>Return the natural exponentiation of the parameter</p>"},{"location":"Frontend/shader/glossary/exp/#declaration","title":"Declaration","text":"<pre><code>float exp(float x)  \nvec2 exp(vec2 x)  \nvec3 exp(vec3 x)  \nvec4 exp(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/exp/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to exponentiate.</p>"},{"location":"Frontend/shader/glossary/exp/#description","title":"Description","text":"<p><code>exp()</code> returns the natural exponentiation of <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/exp/#see-also","title":"See Also","text":"<p>log, log2, exp2, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/exp/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/exp/README-ua/#exp","title":"exp","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0435\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u2014 \u0447\u0438\u0441\u043b\u043e \u0415\u0439\u043b\u0435\u0440\u0430 \u043f\u0456\u0434\u043d\u0435\u0441\u0435\u043d\u0435 \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f. \u0427\u0438\u0441\u043b\u043e \u0415\u0439\u043b\u0435\u0440\u0430 \u0430\u0431\u043e <code>e</code> \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u043d\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 2.718281828</p>"},{"location":"Frontend/shader/glossary/exp/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float exp(float x)  \nvec2 exp(vec2 x)  \nvec3 exp(vec3 x)  \nvec4 exp(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/exp/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0441\u0442\u0435\u043f\u0456\u043d\u044c \u0434\u043e \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0456\u0434\u043d\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0415\u0439\u043b\u0435\u0440\u0430.</p>"},{"location":"Frontend/shader/glossary/exp/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>exp()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0438\u0441\u043b\u043e <code>e</code> \u043f\u0456\u0434\u043d\u0435\u0441\u0435\u043d\u0435 \u0434\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f  <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/exp/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>log, log2, exp2, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/exp/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/exp/README-vi/#exp","title":"Exp","text":"<p>T\u00ednh l\u0169y th\u1eeba t\u1ef1 nhi\u00ean c\u1ee7a m\u1ed9t s\u1ed1</p>"},{"location":"Frontend/shader/glossary/exp/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float exp(float x)  \nvec2 exp(vec2 x)  \nvec3 exp(vec3 x)  \nvec4 exp(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/exp/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 c\u1ea7n t\u00ednh l\u0169y th\u1eeba t\u1ef1 nhi\u00ean.</p>"},{"location":"Frontend/shader/glossary/exp/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>exp()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p t\u00ednh e m\u0169 <code>x</code> (e l\u00e0 c\u01a1 s\u1ed1 c\u1ee7a logarith t\u1ef1 nhi\u00ean, x\u1ea5p x\u1ec9 2.71828)</p>"},{"location":"Frontend/shader/glossary/exp/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>log, log2, exp2, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/exp2/","title":"Index","text":""},{"location":"Frontend/shader/glossary/exp2/#exp2","title":"Exp2","text":"<p>Return 2 raised to the power of the parameter</p>"},{"location":"Frontend/shader/glossary/exp2/#declaration","title":"Declaration","text":"<pre><code>float exp2(float x)  \nvec2 exp2(vec2 x)  \nvec3 exp2(vec3 x)  \nvec4 exp2(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/exp2/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value of the power to which 2 will be raised.</p>"},{"location":"Frontend/shader/glossary/exp2/#description","title":"Description","text":"<p><code>exp2()</code> returns 2 raised to the power of <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/exp2/#see-also","title":"See Also","text":"<p>log, log2, exp, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/exp2/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/exp2/README-ua/#exp2","title":"exp2","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0438\u0441\u043b\u043e 2 \u043f\u0456\u0434\u043d\u0435\u0441\u0435\u043d\u0435 \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/exp2/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float exp2(float x)  \nvec2 exp2(vec2 x)  \nvec3 exp2(vec3 x)  \nvec4 exp2(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/exp2/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044f, \u0434\u043e \u044f\u043a\u043e\u0433\u043e \u0431\u0443\u0434\u0435 \u043f\u0456\u0434\u043d\u0435\u0441\u0435\u043d\u043e \u0447\u0438\u0441\u043b\u043e 2.</p>"},{"location":"Frontend/shader/glossary/exp2/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>exp2()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0447\u0438\u0441\u043b\u043e 2 \u0443 \u0441\u0442\u0435\u043f\u0435\u043d\u0456 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/exp2/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>log, log2, exp, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/exp2/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/exp2/README-vi/#exp2","title":"Exp2","text":"<p>H\u00e0m 2 m\u0169 x.</p>"},{"location":"Frontend/shader/glossary/exp2/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float exp2(float x)  \nvec2 exp2(vec2 x)  \nvec3 exp2(vec3 x)  \nvec4 exp2(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/exp2/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 m\u0169.</p>"},{"location":"Frontend/shader/glossary/exp2/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>exp2()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p t\u00ednh 2 m\u0169 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/exp2/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>log, log2, exp, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/faceforward/","title":"Index","text":""},{"location":"Frontend/shader/glossary/faceforward/#faceforward","title":"Faceforward","text":"<p>Return a vector pointing in the same direction as another</p>"},{"location":"Frontend/shader/glossary/faceforward/#declaration","title":"Declaration","text":"<pre><code>float faceforward(float N, float I, float Nref)  \nvec2 faceforward(vec2 N, vec2 I, vec2 Nref)  \nvec3 faceforward(vec3 N, vec3 I, vec3 Nref)  \nvec4 faceforward(vec4 N, vec4 I, vec4 Nref)\n</code></pre>"},{"location":"Frontend/shader/glossary/faceforward/#parameters","title":"Parameters","text":"<p><code>N</code> specifies the vector to orient.</p> <p><code>I</code> specifies the incident vector.</p> <p><code>Nref</code> specifies the reference vector.</p>"},{"location":"Frontend/shader/glossary/faceforward/#description","title":"Description","text":"<p><code>faceforward()</code> orients a vector to point away from a surface as defined by its normal. <code>If dot(Nref, I) &lt; 0</code> faceforward returns <code>N</code>, otherwise it returns <code>-N</code>.</p>"},{"location":"Frontend/shader/glossary/faceforward/#see-also","title":"See Also","text":"<p>reflect(), refract()</p>"},{"location":"Frontend/shader/glossary/faceforward/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/faceforward/README-ua/#faceforward","title":"faceforward","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0435\u043a\u0442\u043e\u0440, \u0449\u043e \u0432\u043a\u0430\u0437\u0443\u0454 \u0432 \u0442\u043e\u043c\u0443 \u0436 \u043d\u0430\u043f\u0440\u044f\u043c\u043a\u0443, \u0449\u043e \u0439 \u0456\u043d\u0448\u0438\u0439</p>"},{"location":"Frontend/shader/glossary/faceforward/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float faceforward(float N, float I, float Nref)  \nvec2 faceforward(vec2 N, vec2 I, vec2 Nref)  \nvec3 faceforward(vec3 N, vec3 I, vec3 Nref)  \nvec4 faceforward(vec4 N, vec4 I, vec4 Nref)\n</code></pre>"},{"location":"Frontend/shader/glossary/faceforward/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>N</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043e\u0440\u0456\u0454\u043d\u0442\u0430\u0446\u0456\u0457.</p> <p><code>I</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u043d\u0446\u0438\u0434\u0435\u043d\u0442\u0443.</p> <p><code>Nref</code> \u2014 \u043e\u043f\u043e\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</p>"},{"location":"Frontend/shader/glossary/faceforward/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>faceforward()</code> \u043e\u0440\u0456\u0454\u043d\u0442\u0443\u0454 \u0432\u0435\u043a\u0442\u043e\u0440 \u0442\u0430\u043a, \u0449\u043e\u0431 \u0432\u0456\u043d \u0431\u0443\u0432 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0432\u0456\u0434 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u0456, \u044f\u043a\u0430 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0457\u0457 \u043d\u043e\u0440\u043c\u0430\u043b\u043b\u044e. \u042f\u043a\u0449\u043e <code>If dot(Nref, I) &lt; 0</code> \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>N</code>, \u0456\u043d\u0430\u043a\u0448\u0435 <code>-N</code>.</p>"},{"location":"Frontend/shader/glossary/faceforward/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>reflect(), refract()</p>"},{"location":"Frontend/shader/glossary/faceforward/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/faceforward/README-vi/#faceforward","title":"Faceforward","text":"<p>T\u00ecm vector ph\u00e1p tuy\u1ebfn c\u00f9ng ph\u00eda v\u1edbi vector t\u1edbi so v\u1edbi m\u1ed9t b\u1ec1 m\u1eb7t.</p>"},{"location":"Frontend/shader/glossary/faceforward/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float faceforward(float N, float I, float Nref)  \nvec2 faceforward(vec2 N, vec2 I, vec2 Nref)  \nvec3 faceforward(vec3 N, vec3 I, vec3 Nref)  \nvec4 faceforward(vec4 N, vec4 I, vec4 Nref)\n</code></pre>"},{"location":"Frontend/shader/glossary/faceforward/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>N</code> vector ph\u00e1p tuy\u1ebfn c\u1ee7a b\u1ec1 m\u1eb7t s\u1ebd va ch\u1ea1m (h\u01b0\u1edbng tr\u1ea3 v\u1ec1 s\u1ebd tr\u00f9ng h\u01b0\u1edbng n\u00e0y ho\u1eb7c h\u01b0\u1edbng ng\u01b0\u1ee3c l\u1ea1i)</p> <p><code>I</code> vector t\u1edbi (h\u01b0\u1edbng t\u1edbi v\u1ecb tr\u00ed va ch\u1ea1m v\u1edbi b\u1ec1 m\u1eb7t).</p> <p><code>Nref</code> vector ph\u00e1p tuy\u1ebfn c\u1ee7a b\u1ec1 m\u1eb7t c\u1ea7n ki\u1ec3m tra.</p>"},{"location":"Frontend/shader/glossary/faceforward/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>faceforward()</code> tr\u1ea3 v\u1ec1 h\u01b0\u1edbng c\u1ee7a b\u1ec1 m\u1eb7t (vector ph\u00e1p tuy\u1ebfn) t\u1ea1i v\u1ecb tr\u00ed va ch\u1ea1m v\u1edbi tia t\u1edbi. N\u1ebfu <code>dot(Nref, I) &lt; 0</code> tr\u1ea3 v\u1ec1 <code>N</code>, ng\u01b0\u1ee3c l\u1ea1i tr\u1ea3 v\u1ec1 <code>-N</code>.</p>"},{"location":"Frontend/shader/glossary/faceforward/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>reflect(), refract()</p>"},{"location":"Frontend/shader/glossary/float/","title":"Index","text":""},{"location":"Frontend/shader/glossary/float/#float","title":"Float","text":"<p>Floating-point variable type</p>"},{"location":"Frontend/shader/glossary/float/#declaration","title":"Declaration","text":"<pre><code>float aFloat = 1.0;\nfloat bFloat = float(aBool);\nfloat cFloat = float(aInt);\n</code></pre>"},{"location":"Frontend/shader/glossary/float/#description","title":"Description","text":"<p><code>float</code> is used for floating point values.</p>"},{"location":"Frontend/shader/glossary/float/#see-also","title":"See Also","text":"<p>void, bool, int, float, bvec2, bvec3, bvec4, struct</p>"},{"location":"Frontend/shader/glossary/float/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/float/README-ua/#float","title":"float","text":"<p>\u0422\u0438\u043f \u0434\u0430\u043d\u0438\u0445 \u0434\u043b\u044f \u0447\u0438\u0441\u0435\u043b \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u0440\u0430\u043f\u043a\u043e\u044e</p>"},{"location":"Frontend/shader/glossary/float/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>float aFloat = 1.0;\nfloat bFloat = float(aBool);\nfloat cFloat = float(aInt);\n</code></pre>"},{"location":"Frontend/shader/glossary/float/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>float</code> \u2014 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0456\u0437 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0437 \u0440\u0443\u0445\u043e\u043c\u043e\u044e \u043a\u0440\u0430\u043f\u043a\u043e\u044e. \u0422\u0430\u043a\u043e\u0436 \u0454 \u043e\u0434\u043d\u043e\u0456\u043c\u0435\u043d\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0434\u0430\u043d\u0438\u0445 \u0434\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443.</p>"},{"location":"Frontend/shader/glossary/float/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>void, bool, int, float, vec2, vec3, vec4, struct</p>"},{"location":"Frontend/shader/glossary/float/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/float/README-vi/#float","title":"Float","text":"<p>Ki\u1ec3u d\u1eef li\u1ec7u s\u1ed1 th\u1ef1c.</p>"},{"location":"Frontend/shader/glossary/float/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float aFloat = 1.0;\nfloat bFloat = float(aBool);\nfloat cFloat = float(aInt);\n</code></pre>"},{"location":"Frontend/shader/glossary/float/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>float</code> l\u01b0u gi\u00e1 tr\u1ecb c\u1ee7a s\u1ed1 th\u1ef1c, bao g\u1ed3m c\u1ea3 ph\u1ea7n nguy\u00ean l\u1eabn ph\u1ea7n th\u1eadp ph\u00e2n.</p>"},{"location":"Frontend/shader/glossary/float/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>void, bool, int, float, bvec2, bvec3, bvec4, struct</p>"},{"location":"Frontend/shader/glossary/floor/","title":"Index","text":""},{"location":"Frontend/shader/glossary/floor/#floor","title":"Floor","text":"<p>Find the nearest integer less than or equal to the parameter</p>"},{"location":"Frontend/shader/glossary/floor/#declaration","title":"Declaration","text":"<pre><code>float floor(float x)  \nvec2 floor(vec2 x)  \nvec3 floor(vec3 x)  \nvec4 floor(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/floor/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to evaluate.</p>"},{"location":"Frontend/shader/glossary/floor/#description","title":"Description","text":"<p><code>floor()</code> returns a value equal to the nearest integer that is less than or equal to <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/floor/#see-also","title":"See Also","text":"<p>ceil, fract, mod, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/floor/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/floor/README-ua/#floor","title":"floor","text":"<p>\u0417\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0456 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u0430\u0439\u0431\u043b\u0438\u0436\u0447\u0435 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e, \u044f\u043a\u0435 \u043c\u0435\u043d\u0448\u0435 \u0430\u0431\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443</p>"},{"location":"Frontend/shader/glossary/floor/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float floor(float x)  \nvec2 floor(vec2 x)  \nvec3 floor(vec3 x)  \nvec4 floor(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/floor/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438.</p>"},{"location":"Frontend/shader/glossary/floor/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>floor()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043d\u0430\u0439\u0431\u043b\u0438\u0436\u0447\u043e\u043c\u0443 \u0446\u0456\u043b\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443, \u044f\u043a\u0435 \u043c\u0435\u043d\u0448\u0435 \u0430\u0431\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/floor/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>ceil, fract, mod, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/floor/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/floor/README-vi/#floor","title":"Floor","text":"<p>T\u00ecm s\u1ed1 nguy\u00ean g\u1ea7n nh\u1ea5t nh\u1ecf h\u01a1n ho\u1eb7c b\u1eb1ng (L\u00e0m tr\u00f2n xu\u1ed1ng).</p>"},{"location":"Frontend/shader/glossary/floor/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float floor(float x)  \nvec2 floor(vec2 x)  \nvec3 floor(vec3 x)  \nvec4 floor(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/floor/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 c\u1ea7n l\u00e0m tr\u00f2n xu\u1ed1ng</p>"},{"location":"Frontend/shader/glossary/floor/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>floor()</code> tr\u1ea3 v\u1ec1 s\u1ed1 nguy\u00ean g\u1ea7n nh\u1ea5t nh\u1ecf h\u01a1n ho\u1eb7c b\u1eb1ng v\u1edbi <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/floor/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>ceil, fract, mod, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/fract/","title":"Index","text":""},{"location":"Frontend/shader/glossary/fract/#fract","title":"Fract","text":"<p>Compute the fractional part of the argument</p>"},{"location":"Frontend/shader/glossary/fract/#declaration","title":"Declaration","text":"<pre><code>float fract(float x)  \nvec2 fract(vec2 x)  \nvec3 fract(vec3 x)  \nvec4 fract(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/fract/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to evaluate.</p>"},{"location":"Frontend/shader/glossary/fract/#description","title":"Description","text":"<p><code>fract()</code> returns the fractional part of <code>x</code>. This is calculated as <code>x - floor(x)</code>.</p>"},{"location":"Frontend/shader/glossary/fract/#see-also","title":"See Also","text":"<p>floor, ceil, mod, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/fract/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/fract/README-ua/#fract","title":"fract","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u0440\u043e\u0431\u043e\u0432\u0443 \u0447\u0430\u0441\u0442\u0438\u043d\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443</p>"},{"location":"Frontend/shader/glossary/fract/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float fract(float x)  \nvec2 fract(vec2 x)  \nvec3 fract(vec3 x)  \nvec4 fract(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/fract/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438.</p>"},{"location":"Frontend/shader/glossary/fract/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>fract()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u0440\u043e\u0431\u043e\u0432\u0443 \u0447\u0430\u0441\u0442\u0438\u043d\u0443 \u0432\u0456\u0434 <code>x</code>. \u0426\u0435 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a <code>x - floor(x)</code>.</p>"},{"location":"Frontend/shader/glossary/fract/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>floor, ceil, mod, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/fract/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/fract/README-vi/#fract","title":"Fract","text":"<p>T\u00e1ch ph\u1ea7n th\u1eadp ph\u00e2n c\u1ee7a s\u1ed1 th\u1ef1c.</p>"},{"location":"Frontend/shader/glossary/fract/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float fract(float x)  \nvec2 fract(vec2 x)  \nvec3 fract(vec3 x)  \nvec4 fract(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/fract/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 th\u1ef1c c\u1ea7n t\u00e1ch ph\u1ea7n th\u1eadp ph\u00e2n.</p>"},{"location":"Frontend/shader/glossary/fract/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>fract()</code> tr\u1ea3 v\u1ec1 ph\u1ea7n th\u1eadp ph\u00e2n c\u1ee7a <code>x</code> theo c\u00f4ng th\u1ee9c <code>x - floor(x)</code>.</p>"},{"location":"Frontend/shader/glossary/fract/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>floor, ceil, mod, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/gl_FragColor/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/#gl_fragcolor","title":"Gl_FragColor","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-ua/#gl_fragcolor","title":"gl_FragColor","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-vi/#gl_fragcolor","title":"Gl_FragColor","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_FragColor/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/#gl_fragcoord","title":"Gl_FragCoord","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-ua/#gl_fragcoord","title":"gl_FragCoord","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-vi/#g_fragcoord","title":"G_FragCoord","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_FragCoord/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/#gl_frontfacing","title":"Gl_FrontFacing","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-ua/#gl_frontfacing","title":"gl_FrontFacing","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-vi/#gl_frontfacing","title":"Gl_FrontFacing","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_FrontFacing/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/#gl_maxcombinedtextureimages","title":"Gl_MaxCombinedTextureImages","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-ua/#gl_maxcombinedtextureimages","title":"gl_MaxCombinedTextureImages","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-vi/#gl_maxcombinedtextureimages","title":"Gl_MaxCombinedTextureImages","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxCombinedTextureImageUnits/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/#gl_maxdrawbuffers","title":"Gl_MaxDrawBuffers","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-ua/#gl_maxdrawbuffers","title":"gl_MaxDrawBuffers","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-vi/#gl_maxdrawbuffers","title":"Gl_MaxDrawBuffers","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxDrawBuffers/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/#gl_maxfragmentuniformvectors","title":"Gl_MaxFragmentUniformVectors","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-ua/#gl_maxfragmentuniformvectors","title":"gl_MaxFragmentUniformVectors","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-vi/#gl_maxfragmentuniformvectors","title":"Gl_MaxFragmentUniformVectors","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxFragmentUniformVectors/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/#gl_maxtextureimageunits","title":"Gl_MaxTextureImageUnits","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-ua/#gl_maxtextureimageunits","title":"gl_MaxTextureImageUnits","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-vi/#gl_maxtextureimageunits","title":"Gl_MaxTextureImageUnits","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxTextureImageUnits/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/#gl_maxvaryingvectors","title":"Gl_MaxVaryingVectors","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-ua/#gl_maxvaryingvectors","title":"gl_MaxVaryingVectors","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-vi/#gl_maxvaryingvectors","title":"Gl_MaxVaryingVectors","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxVaryingVectors/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/#gl_maxvertexattrbis","title":"Gl_MaxVertexAttrbis","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-ua/#gl_maxvertexattribs","title":"gl_MaxVertexAttribs","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-vi/#gl_maxvertexattrbis","title":"Gl_MaxVertexAttrbis","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexAttribs/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/#gl_maxvertextextureimageunits","title":"Gl_MaxVertexTextureImageUnits","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-ua/#gl_maxvertextextureimageunits","title":"gl_MaxVertexTextureImageUnits","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-vi/#gl_maxvertextextureimageunits","title":"Gl_MaxVertexTextureImageUnits","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_MaxVertexTextureImageUnits/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/#gl_pointcoord","title":"Gl_PointCoord","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-ua/#gl_pointcoord","title":"gl_PointCoord","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-vi/#gl_pointcoord","title":"Gl_PointCoord","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_PointCoord/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/#gl_pointsize","title":"Gl_PointSize","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-ua/#gl_pointsize","title":"gl_PointSize","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-vi/#gl_pointsize","title":"Gl_PointSize","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_PointSize/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/gl_Position/","title":"Index","text":""},{"location":"Frontend/shader/glossary/gl_Position/#gl_position","title":"Gl_Position","text":""},{"location":"Frontend/shader/glossary/gl_Position/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/gl_Position/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/gl_Position/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/gl_Position/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-ua/#gl_position","title":"gl_Position","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-vi/#gl_position","title":"Gl_Position","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/gl_Position/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/greaterThan/","title":"Index","text":""},{"location":"Frontend/shader/glossary/greaterThan/#greaterthan","title":"GreaterThan","text":"<p>Perform a component-wise greater-than comparison of two vectors</p>"},{"location":"Frontend/shader/glossary/greaterThan/#declaration","title":"Declaration","text":"<pre><code>bvec2 greaterThan(vec2 x, vec2 y)  \nbvec3 greaterThan(vec3 x, vec3 y)  \nbvec4 greaterThan(vec4 x, vec4 y)  \n\nbvec2 greaterThan(ivec2 x, ivec2 y)  \nbvec3 greaterThan(ivec3 x, ivec3 y)  \nbvec4 greaterThan(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/greaterThan/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first vector to be used in the comparison operation.</p> <p><code>y</code> specifies the second vector to be used in the comparison operation.</p>"},{"location":"Frontend/shader/glossary/greaterThan/#description","title":"Description","text":"<p><code>greaterThan()</code> returns a boolean vector in which each element <code>i</code> is computed as <code>x[i] &gt; y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/greaterThan/#see-also","title":"See Also","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/greaterThan/README-ua/#greaterthan","title":"greaterThan","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u0431\u0456\u043b\u044c\u0448\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e \u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044e \u0434\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 greaterThan(vec2 x, vec2 y)  \nbvec3 greaterThan(vec3 x, vec3 y)  \nbvec4 greaterThan(vec4 x, vec4 y)  \n\nbvec2 greaterThan(ivec2 x, ivec2 y)  \nbvec3 greaterThan(ivec3 x, ivec3 y)  \nbvec4 greaterThan(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/greaterThan/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>greaterThan()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0443 \u044f\u043a\u043e\u043c\u0443 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x[i] &gt; y[i]</code>\".</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/greaterThan/README-vi/#greaterthan","title":"GreaterThan","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh l\u1edbn h\u01a1n v\u1edbi t\u1eebng c\u1eb7p gi\u00e1 tr\u1ecb trong 2 vector</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 greaterThan(vec2 x, vec2 y)  \nbvec3 greaterThan(vec3 x, vec3 y)  \nbvec4 greaterThan(vec4 x, vec4 y)  \n\nbvec2 greaterThan(ivec2 x, ivec2 y)  \nbvec3 greaterThan(ivec3 x, ivec3 y)  \nbvec4 greaterThan(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/greaterThan/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t</p> <p><code>y</code> Vector th\u1ee9 hai</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>greaterThan()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p so s\u00e1nh <code>x[i] &gt; y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/greaterThan/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/","title":"Index","text":""},{"location":"Frontend/shader/glossary/greaterThanEqual/#greaterthanequal","title":"GreaterThanEqual","text":"<p>Perform a component-wise greater-than-or-equal comparison of two vectors</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/#declaration","title":"Declaration","text":"<pre><code>bvec2 greaterThanEqual(vec2 x, vec2 y)  \nbvec3 greaterThanEqual(vec3 x, vec3 y)  \nbvec4 greaterThanEqual(vec4 x, vec4 y)  \n\nbvec2 greaterThanEqual(ivec2 x, ivec2 y)  \nbvec3 greaterThanEqual(ivec3 x, ivec3 y)  \nbvec4 greaterThanEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/greaterThanEqual/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first vector to be used in the comparison operation.</p> <p><code>y</code> specifies the second vector to be used in the comparison operation.</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/#description","title":"Description","text":"<p><code>greaterThanEqual()</code> returns a boolean vector in which each element <code>i</code> is computed as <code>x[i] \u2265 y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/#see-also","title":"See Also","text":"<p>lessThanEqual(), lessThan(), greaterThan(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/greaterThanEqual/README-ua/#greaterthanequal","title":"greaterThanEqual","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u0431\u0456\u043b\u044c\u0448\u0456\u0441\u0442\u044c \u0430\u0431\u043e \u0440\u0456\u0432\u043d\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e \u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044e \u0434\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 greaterThanEqual(vec2 x, vec2 y)  \nbvec3 greaterThanEqual(vec3 x, vec3 y)  \nbvec4 greaterThanEqual(vec4 x, vec4 y)  \n\nbvec2 greaterThanEqual(ivec2 x, ivec2 y)  \nbvec3 greaterThanEqual(ivec3 x, ivec3 y)  \nbvec4 greaterThanEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>greaterThanEqual()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0443 \u044f\u043a\u043e\u043c\u0443 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x[i] \u2265 y[i]</code>\".</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lessThanEqual(), lessThan(), greaterThan(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/greaterThanEqual/README-vi/#greaterthanequal","title":"GreaterThanEqual","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh l\u1edbn-h\u01a1n-ho\u1eb7c-b\u1eb1ng cho t\u1eebng c\u1eb7p gi\u00e1 tr\u1ecb gi\u1eefa hai vector.</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 greaterThanEqual(vec2 x, vec2 y)  \nbvec3 greaterThanEqual(vec3 x, vec3 y)  \nbvec4 greaterThanEqual(vec4 x, vec4 y)  \n\nbvec2 greaterThanEqual(ivec2 x, ivec2 y)  \nbvec3 greaterThanEqual(ivec3 x, ivec3 y)  \nbvec4 greaterThanEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Vector th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>greaterThanEqual()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p so s\u00e1nh <code>x[i] \u2265 y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/greaterThanEqual/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>lessThanEqual(), lessThan(), greaterThan(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/highp/","title":"Index","text":""},{"location":"Frontend/shader/glossary/highp/#highp","title":"Highp","text":""},{"location":"Frontend/shader/glossary/highp/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/highp/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/highp/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/highp/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/highp/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/highp/README-ua/#highp","title":"highp","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456, \u0437\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/highp/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>precision highp float;\nprecision highp int;  \n</code></pre>"},{"location":"Frontend/shader/glossary/highp/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456 \u043e\u0433\u043e\u043b\u043e\u0448\u0443\u0454 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0438\u0439 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0456 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c, \u044f\u043a\u0456 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u043f\u0456\u0434 \u0447\u0430\u0441 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443.</p> <p><code>highp</code> \u2014 32+ \u0431\u0456\u0442, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>float</code> \u0432\u0456\u0434 -2^62 to +2^62, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>int</code> \u0432\u0456\u0434 -2^16 \u0434\u043e 2^16</p>"},{"location":"Frontend/shader/glossary/highp/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lowp, mediump, precision</p>"},{"location":"Frontend/shader/glossary/highp/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/highp/README-vi/#highp","title":"Highp","text":""},{"location":"Frontend/shader/glossary/highp/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/highp/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/highp/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/highp/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/in/","title":"Index","text":""},{"location":"Frontend/shader/glossary/in/#in","title":"In","text":""},{"location":"Frontend/shader/glossary/in/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/in/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/in/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/in/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/in/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/in/README-ua/#in","title":"in","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432. \u041f\u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043b\u0438\u0448\u0435 \u043d\u0430 \u0447\u0438\u0442\u0430\u043d\u043d\u044f. \u0417\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u043e \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044e.</p>"},{"location":"Frontend/shader/glossary/in/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>// \u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \"in\" \u043c\u043e\u0436\u043d\u0430 \u043d\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u0443\u0432\u0430\u0442\u0438 \u044f\u0432\u043d\u043e, \u0431\u043e \u0432\u0456\u043d \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u043f\u043e \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044e\nfloat updateValue(in float x) {\n    // \u0446\u0456 \u0437\u043c\u0456\u043d\u0438 \u0434\u043b\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \"\u0445\" \u0432\u0456\u0434\u0431\u0443\u0434\u0443\u0442\u044c\u0441\u044f \u043b\u0438\u0448\u0435 \u0443\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457\n    x = x + x; // x = (0.5 + 0.5) = 1.0\n\n    return x;  // 1.0\n}\n\nvoid main() {\n    float x = 0.5;\n    float totalSum = updateValue(x); // totalSum == 1.0\n\n    // x == 0.5, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0438\u0439 \u043b\u0438\u0448\u0435 \u043d\u0430 \u0447\u0438\u0442\u0430\u043d\u043d\u044f, \u0442\u043e \u043f\u0456\u0441\u043b\u044f \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0439\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0430\u043b\u0438\u0448\u0430\u0454\u0442\u044c\u0441\u044f \u044f\u043a \u0456 \u0431\u0443\u043b\u043e\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/in/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>in</code> \u2014 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432, \u044f\u043a\u0438\u0439 \u0434\u043e\u0437\u0432\u043e\u043b\u044f\u0454 \u043b\u0438\u0448\u0435 \u0447\u0438\u0442\u0430\u0442\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0443 \u0437\u043c\u0456\u043d\u043d\u0443. \u0417\u043c\u0456\u043d\u0438 \u0432\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u043d\u0435 \u0432\u043f\u043b\u0438\u043d\u0443\u0442\u044c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \u043f\u043e\u0437\u0430 \u0457\u0457 \u043c\u0435\u0436\u0430\u043c\u0438.</p>"},{"location":"Frontend/shader/glossary/in/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>out, inout</p>"},{"location":"Frontend/shader/glossary/in/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/in/README-vi/#in","title":"In","text":""},{"location":"Frontend/shader/glossary/in/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/in/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/in/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/in/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/inout/","title":"Index","text":""},{"location":"Frontend/shader/glossary/inout/#inout","title":"Inout","text":""},{"location":"Frontend/shader/glossary/inout/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/inout/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/inout/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/inout/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/inout/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/inout/README-ua/#inout","title":"inout","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432. \u0417\u0430\u0434\u0430\u0454 \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u044f\u043a \u0447\u0438\u0442\u0430\u0442\u0438 \u0442\u0430\u043a \u0456 \u0437\u043c\u0456\u043d\u044e\u0432\u0430\u0442\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442. \u041d\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \u0431\u0443\u0434\u0435 \u0442\u0430\u043a\u043e\u0436 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0435 \u0439 \u0437\u0430 \u043c\u0435\u0436\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0434\u0435 \u0432\u0456\u0434\u0431\u0443\u043b\u0430\u0441\u044f \u0446\u044f \u0437\u043c\u0456\u043d\u0430.</p>"},{"location":"Frontend/shader/glossary/inout/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>void increment(inout int x) {\n    x = x + 1;\n}\n\nvoid main() {\n    int count = 1;\n\n    increment(count);\n\n    // \u0442\u0435\u043f\u0435\u0440 count == 2, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0437\u043c\u0456\u043d\u043d\u0430 \u0431\u0443\u043b\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0430 \u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u044e \u0456\u0437 inout \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u0442\u0430 \u0431\u0443\u043b\u0430 \u043e\u043d\u043e\u0432\u043b\u0435\u043d\u0430\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/inout/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>inout</code> \u2014 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432, \u044f\u043a\u0438\u0439 \u0434\u043e\u0437\u0432\u043e\u043b\u044f\u0454 \u044f\u043a \u0447\u0438\u0442\u0430\u0442\u0438 \u0442\u0430\u043a \u0456 \u0437\u043c\u0456\u043d\u044e\u0432\u0430\u0442\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0443 \u0437\u043c\u0456\u043d\u043d\u0443. \u0417\u043c\u0456\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0435 \u043b\u0438\u0448\u0435 \u0432\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457, \u0430\u043b\u0435 \u0456 \u043f\u043e\u0437\u0430 \u0457\u0457 \u043c\u0435\u0436\u0430\u043c\u0438, \u044f\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456.</p>"},{"location":"Frontend/shader/glossary/inout/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>in, out</p>"},{"location":"Frontend/shader/glossary/inout/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/inout/README-vi/#inout","title":"Inout","text":""},{"location":"Frontend/shader/glossary/inout/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/inout/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/inout/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/inout/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/int/","title":"Index","text":""},{"location":"Frontend/shader/glossary/int/#int","title":"Int","text":"<p>Integer data type</p>"},{"location":"Frontend/shader/glossary/int/#declaration","title":"Declaration","text":"<pre><code>int aInt = 42;\nint bInt = int(aBool);\nint cInt = int(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/int/#description","title":"Description","text":"<p><code>int</code> is used for integer values.</p>"},{"location":"Frontend/shader/glossary/int/#see-also","title":"See Also","text":"<p>void, bool, int, float, ivec2, ivec3, ivec4</p>"},{"location":"Frontend/shader/glossary/int/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/int/README-ua/#int","title":"int","text":"<p>\u0426\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u0438\u0445</p>"},{"location":"Frontend/shader/glossary/int/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>int aInt = 42;\nint bInt = int(aBool);\nint cInt = int(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/int/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>int</code> \u2014 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0456\u0437 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438. \u0422\u0430\u043a\u043e\u0436 \u0454 \u043e\u0434\u043d\u043e\u0456\u043c\u0435\u043d\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0434\u0430\u043d\u0438\u0445 \u0434\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443.</p>"},{"location":"Frontend/shader/glossary/int/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>void, bool, int, float, ivec2, ivec3, ivec4</p>"},{"location":"Frontend/shader/glossary/int/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/int/README-vi/#int","title":"Int","text":"<p>Ki\u1ec3u d\u1eef li\u1ec7u s\u1ed1 nguy\u00ean.</p>"},{"location":"Frontend/shader/glossary/int/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>int aInt = 42;\nint bInt = int(aBool);\nint cInt = int(aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/int/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>int</code> l\u01b0u gi\u00e1 tr\u1ecb c\u1ee7a m\u1ed9t s\u1ed1 nguy\u00ean.</p>"},{"location":"Frontend/shader/glossary/int/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>void, bool, int, float, ivec2, ivec3, ivec4</p>"},{"location":"Frontend/shader/glossary/inversesqrt/","title":"Index","text":""},{"location":"Frontend/shader/glossary/inversesqrt/#inversesqrt","title":"Inversesqrt","text":"<p>Return the inverse of the square root of the parameter</p>"},{"location":"Frontend/shader/glossary/inversesqrt/#declaration","title":"Declaration","text":"<pre><code>float inversesqrt(float x)  \nvec2 inversesqrt(vec2 x)  \nvec3 inversesqrt(vec3 x)  \nvec4 inversesqrt(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/inversesqrt/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value of which to take the inverse of the square root.</p>"},{"location":"Frontend/shader/glossary/inversesqrt/#description","title":"Description","text":"<p><code>inversesqrt()</code> returns the inverse of the square root of  <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/inversesqrt/#see-also","title":"See Also","text":"<p>pow, sqrt, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/inversesqrt/README-ua/#inversesqrt","title":"inversesqrt","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u043e\u0431\u0435\u0440\u043d\u0435\u043d\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0440\u0435\u043d\u044e \u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float inversesqrt(float x)  \nvec2 inversesqrt(vec2 x)  \nvec3 inversesqrt(vec3 x)  \nvec4 inversesqrt(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/inversesqrt/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0437 \u044f\u043a\u043e\u0433\u043e \u0442\u0440\u0435\u0431\u0430 \u0432\u0437\u044f\u0442\u0438 \u043e\u0431\u0435\u0440\u043d\u0435\u043d\u0438\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0438\u0439 \u043a\u043e\u0440\u0456\u043d\u044c</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>inversesqrt()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u043e\u0431\u0435\u0440\u043d\u0435\u043d\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0440\u0435\u043d\u044e \u0437 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>pow, sqrt, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/inversesqrt/README-vi/#inversesqrt","title":"Inversesqrt","text":"<p>Ph\u00e9p ngh\u1ecbch \u0111\u1ea3o c\u0103n b\u1eadc 2.</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float inversesqrt(float x)  \nvec2 inversesqrt(vec2 x)  \nvec3 inversesqrt(vec3 x)  \nvec4 inversesqrt(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/inversesqrt/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 c\u1ea7n t\u00ednh ngh\u1ecbch \u0111\u1ea3o c\u0103n b\u1eadc 2.</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>inversesqrt()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c <code>1 / sqrt(x)</code>.</p>"},{"location":"Frontend/shader/glossary/inversesqrt/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>pow, sqrt, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/ivec2/","title":"Index","text":""},{"location":"Frontend/shader/glossary/ivec2/#ivec2","title":"Ivec2","text":"<p>2 dimensional integer vector</p>"},{"location":"Frontend/shader/glossary/ivec2/#declaration","title":"Declaration","text":"<pre><code>bvec2 aIvec2 = ivec2(1, 1);\nbvec2 bIvec2 = ivec2(1);\n\nbvec2 cIvec2 = ivec2(aIvec3);\nbvec2 dIvec2 = ivec2(aIvec3.x, aIvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec2/#description","title":"Description","text":"<p><code>ivec2</code> is an integer vector with two components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a vector of higher dimension. The respective values are used to initialize the components.</li> </ul>"},{"location":"Frontend/shader/glossary/ivec2/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec2/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/ivec2/README-ua/#ivec2","title":"ivec2","text":"<p>2-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/ivec2/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 aIvec2 = ivec2(1, 1);\nbvec2 bIvec2 = ivec2(1);\n\nbvec2 cIvec2 = ivec2(aIvec3);\nbvec2 dIvec2 = ivec2(aIvec3.x, aIvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec2/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>ivec2</code> \u2014 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 \u0434\u0432\u043e\u043c\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u0449\u043e\u0457 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0434\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u0456 \u0434\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> </ul>"},{"location":"Frontend/shader/glossary/ivec2/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec2/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/ivec2/README-vi/#ivec2","title":"Ivec2","text":"<p>Vector s\u1ed1 nguy\u00ean 2 chi\u1ec1u.</p>"},{"location":"Frontend/shader/glossary/ivec2/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 aIvec2 = ivec2(1, 1);\nbvec2 bIvec2 = ivec2(1);\n\nbvec2 cIvec2 = ivec2(aIvec3);\nbvec2 dIvec2 = ivec2(aIvec3.x, aIvec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec2/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>ivec2</code> vector s\u1ed1 nguy\u00ean g\u1ed3m 2 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 2 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb 1 vector nhi\u1ec1u chi\u1ec1u h\u01a1n. C\u00e1c th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o theo th\u1ee9 t\u1ef1.</p>"},{"location":"Frontend/shader/glossary/ivec2/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec3/","title":"Index","text":""},{"location":"Frontend/shader/glossary/ivec3/#ivec3","title":"Ivec3","text":"<p>3 dimensional integer vector</p>"},{"location":"Frontend/shader/glossary/ivec3/#declaration","title":"Declaration","text":"<pre><code>vec3 aIvec3 = ivec3(1, 1, 1);\nvec3 bIvec3 = ivec3(1);\n\nvec3 cIvec3 = ivec3(aIvec4);\nvec3 dIvec3 = ivec3(aIvec4.x, aIvec4.y, aIvec4.z);\n\nvec3 eIvec3 = ivec3(aIvec2, aInt);\nvec3 fIvec3 = ivec3(aIvec2.x, aIvec2.y, aInt);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec3/#description","title":"Description","text":"<p><code>ivec3</code> is an integer vector with three components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a vector of higher dimension. The respective values are used to initialize the components.</li> <li>Providing a combination of vectors and/or scalars. The respective values are used to initialize the vector. The arguments of the constructor must have at least as many components as the vector that is initialized.</li> </ul>"},{"location":"Frontend/shader/glossary/ivec3/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec3/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/ivec3/README-ua/#ivec3","title":"ivec3","text":"<p>3-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/ivec3/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec3 aIvec3 = ivec3(1, 1, 1);\nvec3 bIvec3 = ivec3(1);\n\nvec3 cIvec3 = ivec3(aIvec4);\nvec3 dIvec3 = ivec3(aIvec4.x, aIvec4.y, aIvec4.z);\n\nvec3 eIvec3 = ivec3(aIvec2, aInt);\nvec3 fIvec3 = ivec3(aIvec2.x, aIvec2.y, aInt);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec3/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>ivec3</code> \u2014 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 \u0442\u0440\u044c\u043e\u043c\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u0449\u043e\u0457 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0434\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u0456 \u0434\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0442\u0430/\u0430\u0431\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432. \u0414\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</li> </ul>"},{"location":"Frontend/shader/glossary/ivec3/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec3/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/ivec3/README-vi/#ivec3","title":"Ivec3","text":"<p>Vector s\u1ed1 nguy\u00ean 3 chi\u1ec1u.</p>"},{"location":"Frontend/shader/glossary/ivec3/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec3 aIvec3 = ivec3(1, 1, 1);\nvec3 bIvec3 = ivec3(1);\n\nvec3 cIvec3 = ivec3(aIvec4);\nvec3 dIvec3 = ivec3(aIvec4.x, aIvec4.y, aIvec4.z);\n\nvec3 eIvec3 = ivec3(aIvec2, aInt);\nvec3 fIvec3 = ivec3(aIvec2.x, aIvec2.y, aInt);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec3/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>ivec3</code> vector s\u1ed1 nguy\u00ean g\u1ed3m 3 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 3 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb 1 vector nhi\u1ec1u chi\u1ec1u h\u01a1n. C\u00e1c th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o theo th\u1ee9 t\u1ef1. - L\u1ea5y gi\u00e1 tr\u1ecb theo th\u1ee9 t\u1ef1 l\u1ea7n l\u01b0\u1ee3t t\u1eeb nhi\u1ec1u vector, mi\u1ec5n l\u00e0 \u0111\u1ee7 3 th\u00e0nh ph\u1ea7n.</p>"},{"location":"Frontend/shader/glossary/ivec3/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec4/","title":"Index","text":""},{"location":"Frontend/shader/glossary/ivec4/#ivec4","title":"Ivec4","text":"<p>4 dimensional integer vector</p>"},{"location":"Frontend/shader/glossary/ivec4/#declaration","title":"Declaration","text":"<pre><code>vec4 aIvec4 = ivec4(1, 1, 1, 1);\nvec4 bIvec4 = ivec4(1);\n\nvec4 cIvec4 = ivec4(aIvec2, aInteger, aIvec3);\nvec4 dIvec4 = ivec4(aIvec2.x, aIvec2.y, aInt, aIvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec4/#description","title":"Description","text":"<p><code>ivec4</code> is an integer vector with four components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a combination of vectors and/or scalars. The respective values are used to initialize the vector. The arguments of the constructor must have at least as many components as the vector that is initialized.</li> </ul>"},{"location":"Frontend/shader/glossary/ivec4/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec4/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/ivec4/README-ua/#ivec4","title":"ivec4","text":"<p>4-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/ivec4/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec4 aIvec4 = ivec4(1, 1, 1, 1);\nvec4 bIvec4 = ivec4(1);\n\nvec4 cIvec4 = ivec4(aIvec2, aInteger, aIvec3);\nvec4 dIvec4 = ivec4(aIvec2.x, aIvec2.y, aInt, aIvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec4/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>ivec4</code> \u2014 \u0446\u0456\u043b\u043e\u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 \u0447\u043e\u0442\u0438\u0440\u043c\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0442\u0430/\u0430\u0431\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432. \u0414\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</li> </ul>"},{"location":"Frontend/shader/glossary/ivec4/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/ivec4/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/ivec4/README-vi/#ivec4","title":"Ivec4","text":"<p>Vector s\u1ed1 nguy\u00ean 4 chi\u1ec1u</p>"},{"location":"Frontend/shader/glossary/ivec4/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec4 aIvec4 = ivec4(1, 1, 1, 1);\nvec4 bIvec4 = ivec4(1);\n\nvec4 cIvec4 = ivec4(aIvec2, aInteger, aIvec3);\nvec4 dIvec4 = ivec4(aIvec2.x, aIvec2.y, aInt, aIvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/ivec4/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>ivec4</code> l\u00e0 m\u1ed9t vector s\u1ed1 nguy\u00ean g\u1ed3m 4 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch:</p> <ul> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n</li> <li>Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 4 th\u00e0nh ph\u1ea7n</li> <li>L\u1ea5y gi\u00e1 tr\u1ecb theo th\u1ee9 t\u1ef1 l\u1ea7n l\u01b0\u1ee3t t\u1eeb nhi\u1ec1u vector, mi\u1ec5n l\u00e0 \u0111\u1ee7 4 th\u00e0nh ph\u1ea7n.</li> </ul>"},{"location":"Frontend/shader/glossary/ivec4/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/length/","title":"Index","text":""},{"location":"Frontend/shader/glossary/length/#length","title":"Length","text":"<p>Calculate the length of a vector</p>"},{"location":"Frontend/shader/glossary/length/#declaration","title":"Declaration","text":"<pre><code>float length(float x)  \nfloat length(vec2 x)  \nfloat length(vec3 x)  \nfloat length(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/length/#parameters","title":"Parameters","text":"<p><code>x</code> specifies a vector of which to calculate the length.</p>"},{"location":"Frontend/shader/glossary/length/#description","title":"Description","text":"<p><code>length()</code> returns the length of the vector.</p>"},{"location":"Frontend/shader/glossary/length/#see-also","title":"See Also","text":"<p>distance(), normalize(), Chapter 07: Shapes</p>"},{"location":"Frontend/shader/glossary/length/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/length/README-ua/#length","title":"length","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/length/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float length(float x)  \nfloat length(vec2 x)  \nfloat length(vec3 x)  \nfloat length(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/length/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440, \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043e\u0431\u0447\u0438\u0441\u043b\u0438\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/length/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>length()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u0430.</p>"},{"location":"Frontend/shader/glossary/length/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>distance(), normalize(), \u0420\u043e\u0437\u0434\u0456\u043b 07: \u0424\u0456\u0433\u0443\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/length/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/length/README-vi/#length","title":"Length","text":"<p>T\u00ednh \u0111\u1ed9 d\u00e0i cuuar vector.</p>"},{"location":"Frontend/shader/glossary/length/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float length(float x)  \nfloat length(vec2 x)  \nfloat length(vec3 x)  \nfloat length(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/length/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> vector c\u1ea7n t\u00ednh \u0111\u1ed9 d\u00e0i</p>"},{"location":"Frontend/shader/glossary/length/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>length()</code> tr\u1ea3 v\u1ec1 \u0111\u1ed9 d\u00e0i c\u1ee7a vector.</p>"},{"location":"Frontend/shader/glossary/length/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>distance(), normalize(), Ch\u01b0\u01a1ng 07: H\u00ecnh d\u1ea1ng</p>"},{"location":"Frontend/shader/glossary/lessThan/","title":"Index","text":""},{"location":"Frontend/shader/glossary/lessThan/#lessthan","title":"LessThan","text":"<p>Perform a component-wise less-than comparison of two vectors</p>"},{"location":"Frontend/shader/glossary/lessThan/#declaration","title":"Declaration","text":"<pre><code>bvec2 lessThan(vec2 x, vec2 y)  \nbvec3 lessThan(vec3 x, vec3 y)    \nbvec4 lessThan(vec4 x, vec4 y)  \n\nbvec2 lessThan(ivec2 x, ivec2 y)  \nbvec3 lessThan(ivec3 x, ivec3 y)  \nbvec4 lessThan(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/lessThan/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first vector to be used in the comparison operation.</p> <p><code>y</code> specifies the second vector to be used in the comparison operation.</p>"},{"location":"Frontend/shader/glossary/lessThan/#description","title":"Description","text":"<p><code>lessThan()</code> returns a boolean vector in which each element <code>i</code> is computed as <code>x[i] &lt; y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/lessThan/#see-also","title":"See Also","text":"<p>lessThanEqual(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/lessThan/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/lessThan/README-ua/#lessthan","title":"lessThan","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u043c\u0435\u043d\u0448\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e \u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044e \u0434\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e</p>"},{"location":"Frontend/shader/glossary/lessThan/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 lessThan(vec2 x, vec2 y)  \nbvec3 lessThan(vec3 x, vec3 y)    \nbvec4 lessThan(vec4 x, vec4 y)  \n\nbvec2 lessThan(ivec2 x, ivec2 y)  \nbvec3 lessThan(ivec3 x, ivec3 y)  \nbvec4 lessThan(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/lessThan/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/lessThan/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>lessThan()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0443 \u044f\u043a\u043e\u043c\u0443 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x[i] &lt; y[i]</code>\".</p>"},{"location":"Frontend/shader/glossary/lessThan/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lessThanEqual(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/lessThan/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/lessThan/README-vi/#lessthan","title":"LessThan","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh nh\u1ecf-h\u01a1n gi\u1eefa c\u00e1c c\u1eb7p gi\u00e1 tr\u1ecb c\u1ee7a 2 vector.</p>"},{"location":"Frontend/shader/glossary/lessThan/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 lessThan(vec2 x, vec2 y)  \nbvec3 lessThan(vec3 x, vec3 y)    \nbvec4 lessThan(vec4 x, vec4 y)  \n\nbvec2 lessThan(ivec2 x, ivec2 y)  \nbvec3 lessThan(ivec3 x, ivec3 y)  \nbvec4 lessThan(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/lessThan/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Vector th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/lessThan/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>lessThan()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p so s\u00e1nh <code>x[i] &lt; y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/lessThan/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>lessThanEqual(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/","title":"Index","text":""},{"location":"Frontend/shader/glossary/lessThanEqual/#lessthanequal","title":"LessThanEqual","text":"<p>Perform a component-wise less-than-or-equal comparison of two vectors</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/#declaration","title":"Declaration","text":"<pre><code>bvec2 lessThanEqual(vec2 x, vec2 y)  \nbvec3 lessThanEqual(vec3 x, vec3 y)  \nbvec4 lessThanEqual(vec4 x, vec4 y)  \n\nbvec2 lessThanEqual(ivec2 x, ivec2 y)  \nbvec3 lessThanEqual(ivec3 x, ivec3 y)  \nbvec4 lessThanEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/lessThanEqual/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first vector to be used in the comparison operation.</p> <p><code>y</code> specifies the second vector to be used in the comparison operation.</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/#description","title":"Description","text":"<p><code>lessThanEqual()</code> returns a boolean vector in which each element <code>i</code> is computed as <code>x[i] \u2264 y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/#see-also","title":"See Also","text":"<p>lessThan(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/lessThanEqual/README-ua/#lessthanequal","title":"lessThanEqual","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u043c\u0435\u043d\u0448\u0456\u0441\u0442\u044c \u0430\u0431\u043e \u0440\u0456\u0432\u043d\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e \u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044e \u0434\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 lessThanEqual(vec2 x, vec2 y)  \nbvec3 lessThanEqual(vec3 x, vec3 y)  \nbvec4 lessThanEqual(vec4 x, vec4 y)  \n\nbvec2 lessThanEqual(ivec2 x, ivec2 y)  \nbvec3 lessThanEqual(ivec3 x, ivec3 y)  \nbvec4 lessThanEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>lessThanEqual()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0443 \u044f\u043a\u043e\u043c\u0443 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x[i] \u2264 y[i]</code>\".</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lessThan(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/lessThanEqual/README-vi/#lessthanequal","title":"LessThanEqual","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh nh\u1ecf-h\u01a1n-ho\u1eb7c-b\u1eb1ng gi\u1eefa c\u00e1c c\u1eb7p gi\u00e1 tr\u1ecb c\u1ee7a 2 vector.</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 lessThanEqual(vec2 x, vec2 y)  \nbvec3 lessThanEqual(vec3 x, vec3 y)  \nbvec4 lessThanEqual(vec4 x, vec4 y)  \n\nbvec2 lessThanEqual(ivec2 x, ivec2 y)  \nbvec3 lessThanEqual(ivec3 x, ivec3 y)  \nbvec4 lessThanEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Vector th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>lessThanEqual()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p so s\u00e1nh <code>x[i] \u2264 y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/lessThanEqual/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>lessThan(), greaterThan(), greaterThanEqual(), equal(), notEqual(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/log/","title":"Index","text":""},{"location":"Frontend/shader/glossary/log/#log","title":"Log","text":"<p>Return the natural logarithm of the parameter</p>"},{"location":"Frontend/shader/glossary/log/#declaration","title":"Declaration","text":"<pre><code>float log(float x)  \nvec2 log(vec2 x)  \nvec3 log(vec3 x)  \nvec4 log(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/log/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value of which to take the natural logarithm.</p>"},{"location":"Frontend/shader/glossary/log/#description","title":"Description","text":"<p><code>log()</code> returns the natural logarithm of <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/log/#see-also","title":"See Also","text":"<p>log2, exp, exp2, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/log/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/log/README-ua/#log","title":"log","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430. \u0422\u043e\u0431\u0442\u043e \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043e \u044f\u043a\u043e\u0433\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f \u0441\u043b\u0456\u0434 \u043f\u0456\u0434\u043d\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0415\u0439\u043b\u0435\u0440\u0430, \u0449\u043e\u0431 \u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0438 \u0432\u043a\u0430\u0437\u0430\u043d\u0435 \u0447\u0438\u0441\u043b\u043e. \u0427\u0438\u0441\u043b\u043e \u0415\u0439\u043b\u0435\u0440\u0430 \u0430\u0431\u043e <code>e</code> \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u043d\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 2.718281828.</p>"},{"location":"Frontend/shader/glossary/log/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float log(float x)  \nvec2 log(vec2 x)  \nvec3 log(vec3 x)  \nvec4 log(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/log/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0437\u044f\u0442\u0438 \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c.</p>"},{"location":"Frontend/shader/glossary/log/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>log()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0447\u0438\u0441\u043b\u0430 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/log/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>log2, exp, exp2, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/log/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/log/README-vi/#log","title":"Log","text":"<p>T\u00ednh logarith t\u1ef1 nhi\u00ean c\u1ee7a m\u1ed9t s\u1ed1</p>"},{"location":"Frontend/shader/glossary/log/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float log(float x)  \nvec2 log(vec2 x)  \nvec3 log(vec3 x)  \nvec4 log(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/log/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 c\u1ea7n t\u00ednh logarith</p>"},{"location":"Frontend/shader/glossary/log/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>log()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p t\u00ednh <code>log(x)</code>.</p>"},{"location":"Frontend/shader/glossary/log/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>log2, exp, exp2, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/log2/","title":"Index","text":""},{"location":"Frontend/shader/glossary/log2/#log2","title":"Log2","text":"<p>Return the base 2 logarithm of the parameter</p>"},{"location":"Frontend/shader/glossary/log2/#declaration","title":"Declaration","text":"<pre><code>float log2(float x)  \nvec2 log2(vec2 x)  \nvec3 log2(vec3 x)  \nvec4 log2(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/log2/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value of which to take the base 2 logarithm.</p>"},{"location":"Frontend/shader/glossary/log2/#description","title":"Description","text":"<p><code>log2()</code> returns the base 2 logarithm of <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/log2/#see-also","title":"See Also","text":"<p>log, exp, exp2, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/log2/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/log2/README-ua/#log2","title":"log2","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0447\u0438\u0441\u043b\u0430 \u0437\u0430 \u043e\u0441\u043d\u043e\u0432\u043e\u044e 2. \u0422\u043e\u0431\u0442\u043e \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0442\u0435\u043f\u0456\u043d\u044c \u044f\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0430 \u0434\u043b\u044f \u0434\u0432\u0456\u0439\u043a\u0438, \u0449\u043e\u0431 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0435 \u0447\u0438\u0441\u043b\u043e.</p>"},{"location":"Frontend/shader/glossary/log2/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float log2(float x)  \nvec2 log2(vec2 x)  \nvec3 log2(vec3 x)  \nvec4 log2(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/log2/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0437\u044f\u0442\u0438 \u0437\u0430 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u043e\u043c \u0437 \u043e\u0441\u043d\u043e\u0432\u043e\u044e 2.</p>"},{"location":"Frontend/shader/glossary/log2/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>log2()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0447\u0438\u0441\u043b\u0430 <code>x</code> \u0437 \u043e\u0441\u043d\u043e\u0432\u043e\u044e 2.</p>"},{"location":"Frontend/shader/glossary/log2/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>log, exp, exp2, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/log2/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/log2/README-vi/#log2","title":"Log2","text":"<p>T\u00ednh logarith c\u01a1 s\u1ed1 2.</p>"},{"location":"Frontend/shader/glossary/log2/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float log2(float x)  \nvec2 log2(vec2 x)  \nvec3 log2(vec3 x)  \nvec4 log2(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/log2/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> gi\u00e1 tr\u1ecb c\u1ea7n t\u00ednh logarith c\u01a1 s\u1ed1 2.</p>"},{"location":"Frontend/shader/glossary/log2/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>log2()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a h\u00e0m s\u1ed1 logarith c\u01a1 s\u1ed1 2 c\u1ee7a <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/log2/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>log, exp, exp2, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/lowp/","title":"Index","text":""},{"location":"Frontend/shader/glossary/lowp/#lowp","title":"Lowp","text":""},{"location":"Frontend/shader/glossary/lowp/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/lowp/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/lowp/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/lowp/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/lowp/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/lowp/README-ua/#lowp","title":"lowp","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456, \u0437\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/lowp/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>precision lowp float;\nprecision lowp int;  \n</code></pre>"},{"location":"Frontend/shader/glossary/lowp/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456 \u043e\u0433\u043e\u043b\u043e\u0448\u0443\u0454 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0438\u0439 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0456 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c, \u044f\u043a\u0456 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u043f\u0456\u0434 \u0447\u0430\u0441 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443.</p> <p><code>lowp</code> \u2014 8+ \u0431\u0456\u0442, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>float</code> \u0432\u0456\u0434 -2 \u0434\u043e 2, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>int</code> \u0432\u0456\u0434 -2^8 \u0434\u043e 2^8</p>"},{"location":"Frontend/shader/glossary/lowp/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mediump, highp, precision</p>"},{"location":"Frontend/shader/glossary/lowp/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/lowp/README-vi/#lowp","title":"Lowp","text":""},{"location":"Frontend/shader/glossary/lowp/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/lowp/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/lowp/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/lowp/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/main/","title":"Index","text":""},{"location":"Frontend/shader/glossary/main/#main","title":"Main","text":""},{"location":"Frontend/shader/glossary/main/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/main/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/main/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/main/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/main/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/main/README-ua/#main","title":"main","text":""},{"location":"Frontend/shader/glossary/main/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/main/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/main/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/main/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/main/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/main/README-vi/#main","title":"Main","text":""},{"location":"Frontend/shader/glossary/main/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/main/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/main/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/main/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/mat2/","title":"Index","text":""},{"location":"Frontend/shader/glossary/mat2/#mat2","title":"Mat2","text":"<p>2x2 floating point matrix</p>"},{"location":"Frontend/shader/glossary/mat2/#declaration","title":"Declaration","text":"<pre><code>mat2 aMat2 = mat2(1.0, 0.0,  // 1. column\n                  0.0, 1.0); // 2. column\nmat2 bMat2 = mat2(1.0);\nmat2 cMat2 = mat2(aVec2, bVec2);\nmat2 dMat2 = mat2(aVec3, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat2/#description","title":"Description","text":"<p><code>mat2</code> data type is compose for a 2x2 matrix of floating point. As you can see above, can be initialize in different ways:</p> <ul> <li> <p>Providing a value for each component column by column.</p> </li> <li> <p>Providing one value that is used for the components on the main diagonal.</p> </li> <li> <p>Providing a combination of vectors and scalars.</p> </li> </ul> <p>In the same way data can be accessed component-wise or column by column:</p> <pre><code>mat2 aMat2;\naMat2[1][1] = 1.0;\nfloat aFloat = aMat2[1][1];\n\naMat2[0] = vec2(1.0);\nvec2 aVec2 = aMat2[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat2/#see-also","title":"See Also","text":"<p>mat3, mat4, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat2/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/mat2/README-ua/#mat2","title":"mat2","text":"<p>\u041c\u0430\u0442\u0440\u0438\u0446\u044f \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 2x2 \u0437\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0438\u043f\u0443 float</p>"},{"location":"Frontend/shader/glossary/mat2/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>mat2 aMat2 = mat2(\n    1.0, 0.0,  // 1. column\n    0.0, 1.0   // 2. column\n);\nmat2 bMat2 = mat2(1.0);\n\nmat2 cMat2 = mat2(aVec2, bVec2);\nmat2 dMat2 = mat2(aVec3, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat2/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>mat2</code> \u2014 \u0442\u0438\u043f \u0434\u0430\u043d\u0438\u0445, \u0449\u043e \u0454 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u044e \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 2x2 \u0456\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0438\u043f\u0443 <code>float</code>. \u042f\u043a \u0432\u0438\u0434\u043d\u043e \u0456\u0437 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443 \u0432\u0438\u0449\u0435, \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u043c\u043e\u0436\u043d\u0430 \u0440\u0456\u0437\u043d\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438:</p> <ul> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u0437\u0430 \u0441\u0442\u043e\u0432\u043f\u0446\u0435\u043c;</p> </li> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u0456\u0439 \u0434\u0456\u0430\u0433\u043e\u043d\u0430\u043b\u0456;</p> </li> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0456 \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432;</p> </li> </ul> <p>\u0422\u0430\u043a \u0441\u0430\u043c\u043e \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u0434\u0430\u043d\u0438\u0445 \u043f\u043e\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u043e \u0430\u0431\u043e \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u0437\u0430 \u0441\u0442\u043e\u0432\u043f\u0446\u0435\u043c:</p> <pre><code>mat2 aMat2;\naMat2[1][1] = 1.0;\nfloat aFloat = aMat2[1][1];\n\naMat2[0] = vec2(1.0);\nvec2 aVec2 = aMat2[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat2/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mat3, mat4, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat2/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/mat2/README-vi/#mat2","title":"Mat2","text":"<p>Ma tr\u1eadn s\u1ed1 th\u1ef1c 2x2</p>"},{"location":"Frontend/shader/glossary/mat2/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>mat2 aMat2 = mat2(1.0, 0.0,  // C\u1ed9t th\u1ee9 nh\u1ea5t\n                  0.0, 1.0); // C\u1ed9t th\u1ee9 hai\nmat2 bMat2 = mat2(1.0);\nmat2 cMat2 = mat2(aVec2, bVec2);\nmat2 dMat2 = mat2(aVec3, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat2/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>mat2</code> l\u00e0 ma tr\u1eadn s\u1ed1 th\u1ef1c g\u1ed3m 2 h\u00e0ng v\u00e0 2 c\u1ed9t. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch:</p> <ul> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n</li> <li>Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u00e1c th\u00e0nh ph\u1ea7n tr\u00ean \u0111\u01b0\u1eddng ch\u00e9o ch\u00ednh</li> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb t\u1eebng c\u1ed9t, m\u1ed7i c\u1ed9t coi nh\u01b0 m\u1ed9t <code>vec2</code></li> </ul> <p>C\u00f3 th\u1ec3 l\u1ea5y gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n trong ma tr\u1eadn ho\u1eb7c l\u1ea5y t\u1eebng c\u1ed9t:</p> <pre><code>mat2 aMat2;\naMat2[1][1] = 1.0;\nfloat aFloat = aMat2[1][1];\n\naMat2[0] = vec2(1.0);\nvec2 aVec2 = aMat2[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat2/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>mat3, mat4, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat3/","title":"Index","text":""},{"location":"Frontend/shader/glossary/mat3/#mat3","title":"Mat3","text":"<p>3x3 floating point matrix</p>"},{"location":"Frontend/shader/glossary/mat3/#declaration","title":"Declaration","text":"<pre><code>mat3 aMat3 = mat3(1.0, 0.0, 0.0,  // 1. column\n                  0.0, 1.0, 0.0,  // 2. column\n                  0.0, 0.0, 1.0); // 3. column\nmat3 bMat3 = mat3(1.0);\n\nmat3 cMat3 = mat3(aVec3, bVec3, cVec3);\nmat3 dMat3 = mat3(aVec4, aVec3, bVec4, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat3/#description","title":"Description","text":"<p><code>mat3</code> data type is compose for a 3x3 matrix of floating point. As you can see above, can be initialize in different ways:</p> <ul> <li> <p>Providing a value for each component column by column.</p> </li> <li> <p>Providing one value that is used for the components on the main diagonal.</p> </li> <li> <p>Providing a combination of vectors and scalars.</p> </li> </ul> <p>In the same way data can be accessed component-wise or column by column:</p> <pre><code>mat3 aMat3;\naMat3[2][2] = 1.0;\nfloat aFloat = aMat3[2][2];\n\naMat3[0] = vec3(1.0);\nvec3 aVec3 = aMat3[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat3/#see-also","title":"See Also","text":"<p>mat2, mat4, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat3/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/mat3/README-ua/#mat3","title":"mat3","text":"<p>\u041c\u0430\u0442\u0440\u0438\u0446\u044f \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 3x3 \u0437\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0438\u043f\u0443 float</p>"},{"location":"Frontend/shader/glossary/mat3/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>mat3 aMat3 = mat3(\n    1.0, 0.0, 0.0,  // 1. column\n    0.0, 1.0, 0.0,  // 2. column\n    0.0, 0.0, 1.0   // 3. column\n);\nmat3 bMat3 = mat3(1.0);\n\nmat3 cMat3 = mat3(aVec3, bVec3, cVec3);\nmat3 dMat3 = mat3(aVec4, aVec3, bVec4, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat3/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>mat3</code> \u2014 \u0442\u0438\u043f \u0434\u0430\u043d\u0438\u0445, \u0449\u043e \u0454 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u044e \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 3x3 \u0456\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0438\u043f\u0443 <code>float</code>. \u042f\u043a \u0432\u0438\u0434\u043d\u043e \u0456\u0437 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443 \u0432\u0438\u0449\u0435, \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u043c\u043e\u0436\u043d\u0430 \u0440\u0456\u0437\u043d\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438:</p> <ul> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u0437\u0430 \u0441\u0442\u043e\u0432\u043f\u0446\u0435\u043c;</p> </li> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u0456\u0439 \u0434\u0456\u0430\u0433\u043e\u043d\u0430\u043b\u0456;</p> </li> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0456 \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432;</p> </li> </ul> <p>\u0422\u0430\u043a \u0441\u0430\u043c\u043e \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u0434\u0430\u043d\u0438\u0445 \u043f\u043e\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u043e \u0430\u0431\u043e \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u0437\u0430 \u0441\u0442\u043e\u0432\u043f\u0446\u0435\u043c:</p> <pre><code>mat3 aMat3;\naMat3[2][2] = 1.0;\nfloat aFloat = aMat3[2][2];\n\naMat3[0] = vec3(1.0);\nvec3 aVec3 = aMat3[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat3/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mat2, mat4, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat3/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/mat3/README-vi/#mat3","title":"Mat3","text":"<p>Ma tr\u1eadn s\u1ed1 th\u1ef1c 3x3</p>"},{"location":"Frontend/shader/glossary/mat3/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>mat3 aMat3 = mat3(1.0, 0.0, 0.0,  // C\u1ed9t th\u1ee9 1\n                  0.0, 1.0, 0.0,  // C\u1ed9t th\u1ee9 2\n                  0.0, 0.0, 1.0); // C\u1ed9t th\u1ee9 3\nmat3 bMat3 = mat3(1.0);\n\nmat3 cMat3 = mat3(aVec3, bVec3, cVec3);\nmat3 dMat3 = mat3(aVec4, aVec3, bVec4, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat3/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>mat3</code> l\u00e0 ma tr\u1eadn s\u1ed1 th\u1ef1c g\u1ed3m 3 h\u00e0ng v\u00e0 3 c\u1ed9t. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch:</p> <ul> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n</li> <li>Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u00e1c th\u00e0nh ph\u1ea7n tr\u00ean \u0111\u01b0\u1eddng ch\u00e9o ch\u00ednh</li> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb t\u1eebng c\u1ed9t, m\u1ed7i c\u1ed9t coi nh\u01b0 m\u1ed9t <code>vec3</code></li> </ul> <p>C\u00f3 th\u1ec3 l\u1ea5y gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n trong ma tr\u1eadn ho\u1eb7c l\u1ea5y t\u1eebng c\u1ed9t:</p> <pre><code>mat3 aMat3;\naMat3[2][2] = 1.0;\nfloat aFloat = aMat3[2][2];\n\naMat3[0] = vec3(1.0);\nvec3 aVec3 = aMat3[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat3/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>mat2, mat4, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat4/","title":"Index","text":""},{"location":"Frontend/shader/glossary/mat4/#mat4","title":"Mat4","text":"<p>4x4 floating point matrix</p>"},{"location":"Frontend/shader/glossary/mat4/#declaration","title":"Declaration","text":"<pre><code>mat4 aMat4 = mat4(1.0, 0.0, 0.0, 0.0,  // 1. column\n                  0.0, 1.0, 0.0, 0.0,  // 2. column\n                  0.0, 0.0, 1.0, 0.0,  // 3. column\n                  0.0, 0.0, 0.0, 1.0); // 4. column\nmat4 bMat4 = mat4(1.0);\n\nmat4 cMat4 = mat4(aVec4, bVec4, cVec4, dVec4);\nmat4 dMat4 = mat4(aVec4, aVec3, bVec4, cVec4, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat4/#description","title":"Description","text":"<p><code>mat4</code> data type is compose for a 4x4 matrix of floating point. As you can see above, can be initialize in different ways:</p> <ul> <li> <p>Providing a value for each component column by column.</p> </li> <li> <p>Providing one value that is used for the components on the main diagonal.</p> </li> <li> <p>Providing a combination of vectors and scalars.</p> </li> </ul> <p>In the same way data can be accessed component-wise or column by column:</p> <pre><code>aMat4[3][3] = 1.0;\nfloat aFloat = aMat4[3][3];\n\naMat4[0] = vec4(1.0);\nvec4 aVec4 = aMat4[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat4/#see-also","title":"See Also","text":"<p>mat2, mat3, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat4/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/mat4/README-ua/#mat4","title":"mat4","text":"<p>\u041c\u0430\u0442\u0440\u0438\u0446\u044f \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 4x4 \u0437\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0438\u043f\u0443 float</p>"},{"location":"Frontend/shader/glossary/mat4/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>mat4 aMat4 = mat4(\n    1.0, 0.0, 0.0, 0.0,  // 1. column\n    0.0, 1.0, 0.0, 0.0,  // 2. column\n    0.0, 0.0, 1.0, 0.0,  // 3. column\n    0.0, 0.0, 0.0, 1.0   // 4. column\n);\nmat4 bMat4 = mat4(1.0);\n\nmat4 cMat4 = mat4(aVec4, bVec4, cVec4, dVec4);\nmat4 dMat4 = mat4(aVec4, aVec3, bVec4, cVec4, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat4/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>mat4</code> \u2014 \u0442\u0438\u043f \u0434\u0430\u043d\u0438\u0445, \u0449\u043e \u0454 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u044e \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 4x4 \u0456\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0442\u0438\u043f\u0443 <code>float</code>. \u042f\u043a \u0432\u0438\u0434\u043d\u043e \u0456\u0437 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443 \u0432\u0438\u0449\u0435, \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u043c\u043e\u0436\u043d\u0430 \u0440\u0456\u0437\u043d\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438:</p> <ul> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u0437\u0430 \u0441\u0442\u043e\u0432\u043f\u0446\u0435\u043c;</p> </li> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u0456\u0439 \u0434\u0456\u0430\u0433\u043e\u043d\u0430\u043b\u0456;</p> </li> <li> <p>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0456 \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432;</p> </li> </ul> <p>\u0422\u0430\u043a \u0441\u0430\u043c\u043e \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u0434\u0430\u043d\u0438\u0445 \u043f\u043e\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u043e \u0430\u0431\u043e \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u0437\u0430 \u0441\u0442\u043e\u0432\u043f\u0446\u0435\u043c:</p> <pre><code>aMat4[3][3] = 1.0;\nfloat aFloat = aMat4[3][3];\n\naMat4[0] = vec4(1.0);\nvec4 aVec4 = aMat4[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat4/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mat2, mat3, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/mat4/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/mat4/README-vi/#mat4","title":"Mat4","text":"<p>Ma tr\u1eadn s\u1ed1 th\u1ef1c 4x4</p>"},{"location":"Frontend/shader/glossary/mat4/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>mat4 aMat4 = mat4(1.0, 0.0, 0.0, 0.0,  // C\u1ed9t th\u1ee9 1\n                  0.0, 1.0, 0.0, 0.0,  // C\u1ed9t th\u1ee9 2\n                  0.0, 0.0, 1.0, 0.0,  // C\u1ed9t th\u1ee9 3\n                  0.0, 0.0, 0.0, 1.0); // C\u1ed9t th\u1ee9 4\nmat4 bMat4 = mat4(1.0);\n\nmat4 cMat4 = mat4(aVec4, bVec4, cVec4, dVec4);\nmat4 dMat4 = mat4(aVec4, aVec3, bVec4, cVec4, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/mat4/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>mat4</code> l\u00e0 ma tr\u1eadn s\u1ed1 th\u1ef1c g\u1ed3m 4 h\u00e0ng v\u00e0 4 c\u1ed9t. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch:</p> <ul> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n</li> <li>Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u00e1c th\u00e0nh ph\u1ea7n tr\u00ean \u0111\u01b0\u1eddng ch\u00e9o ch\u00ednh</li> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb t\u1eebng c\u1ed9t, m\u1ed7i c\u1ed9t coi nh\u01b0 m\u1ed9t <code>vec4</code></li> </ul> <p>C\u00f3 th\u1ec3 l\u1ea5y gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n trong ma tr\u1eadn ho\u1eb7c l\u1ea5y t\u1eebng c\u1ed9t:</p> <pre><code>aMat4[3][3] = 1.0;\nfloat aFloat = aMat4[3][3];\n\naMat4[0] = vec4(1.0);\nvec4 aVec4 = aMat4[0];\n</code></pre>"},{"location":"Frontend/shader/glossary/mat4/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>mat2, mat3, matrixCompMult()</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/","title":"Index","text":""},{"location":"Frontend/shader/glossary/matrixCompMult/#matrixcompmult","title":"MatrixCompMult","text":"<p>Perform a component-wise multiplication of two matrices</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/#declaration","title":"Declaration","text":"<pre><code>mat2 matrixCompMult(mat2 x, mat2 y)  \nmat3 matrixCompMult(mat3 x, mat3 y)  \nmat4 matrixCompMult(mat4 x, mat4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/matrixCompMult/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first matrix multiplicand.</p> <p><code>y</code> specifies the second matrix multiplicand.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/#description","title":"Description","text":"<p><code>matrixCompMult()</code> performs a component-wise multiplication of two matrices, yielding a result matrix where each component, <code>result[i][j]</code> is computed as the scalar product of <code>x[i][j]</code> and <code>y[i][j]</code>.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/#see-also","title":"See Also","text":"<p>Chapter 08: Matrix</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/matrixCompMult/README-ua/#matrixcompmult","title":"matrixCompMult","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043c\u043d\u043e\u0436\u0435\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u043c\u0430\u0442\u0440\u0438\u0446\u044c</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>mat2 matrixCompMult(mat2 x, mat2 y)  \nmat3 matrixCompMult(mat3 x, mat3 y)  \nmat4 matrixCompMult(mat4 x, mat4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u043c\u043d\u043e\u0436\u043d\u0438\u043a.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u043c\u043d\u043e\u0436\u043d\u0438\u043a.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>matrixCompMult()</code> \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043c\u043d\u043e\u0436\u0435\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u043c\u0430\u0442\u0440\u0438\u0446\u044c, \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u044e\u0447\u0438 \u043d\u043e\u0432\u0443 \u043c\u0430\u0442\u0440\u0438\u0446\u044e, \u0434\u0435 \u043a\u043e\u0436\u0435\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 <code>result[i][j]</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a <code>x[i][j]</code> \u0442\u0430 <code>y[i][j]</code>.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mat2, mat3, mat4, \u0420\u043e\u0437\u0434\u0456\u043b 08: \u041c\u0430\u0442\u0440\u0438\u0446\u0456</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/matrixCompMult/README-vi/#matrixcompmult","title":"MatrixCompMult","text":"<p>Nh\u00e2n t\u1eebng c\u1eb7p gi\u00e1 tr\u1ecb t\u01b0\u01a1ng \u1ee9ng gi\u1eefa 2 ma tr\u1eadn.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>mat2 matrixCompMult(mat2 x, mat2 y)  \nmat3 matrixCompMult(mat3 x, mat3 y)  \nmat4 matrixCompMult(mat4 x, mat4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Ma tr\u1eadn th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Ma tr\u1eadn th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>matrixCompMult()</code> tr\u1ea3 v\u1ec1 ma tr\u1eadn k\u1ebft qu\u1ea3, v\u1edbi t\u1eebng th\u00e0nh ph\u1ea7n <code>result[i][j]</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p t\u00ednh <code>x[i][j] * y[i][j]</code>.</p>"},{"location":"Frontend/shader/glossary/matrixCompMult/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>Ch\u01b0\u01a1ng 08: Ma tr\u1eadn</p>"},{"location":"Frontend/shader/glossary/max/","title":"Index","text":""},{"location":"Frontend/shader/glossary/max/#max","title":"Max","text":"<p>Return the greater of two values</p>"},{"location":"Frontend/shader/glossary/max/#declaration","title":"Declaration","text":"<pre><code>float max(float x, float y)  \nvec2 max(vec2 x, vec2 y)  \nvec3 max(vec3 x, vec3 y)  \nvec4 max(vec4 x, vec4 y)\n\nvec2 max(vec2 x, float y)  \nvec3 max(vec3 x, float y)  \nvec4 max(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/max/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first value to compare.</p> <p><code>y</code> specifies the second value to compare.</p>"},{"location":"Frontend/shader/glossary/max/#description","title":"Description","text":"<p><code>max()</code> returns the maximum of the two parameters. It returns <code>y</code> if <code>y</code> is greater than <code>x</code>, otherwise it returns <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/max/#see-also","title":"See Also","text":"<p>min, abs, clamp, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/max/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/max/README-ua/#max","title":"max","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0456\u043b\u044c\u0448\u0435 \u0437 \u0434\u0432\u043e\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c</p>"},{"location":"Frontend/shader/glossary/max/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float max(float x, float y)  \nvec2 max(vec2 x, vec2 y)  \nvec3 max(vec3 x, vec3 y)  \nvec4 max(vec4 x, vec4 y)\n\nvec2 max(vec2 x, float y)  \nvec3 max(vec3 x, float y)  \nvec4 max(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/max/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/max/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>max()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0456\u0437 \u0434\u0432\u043e\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432. \u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>y</code>, \u044f\u043a\u0449\u043e \u0432\u0456\u043d \u0431\u0456\u043b\u044c\u0448\u0435 \u0437\u0430 <code>x</code>, \u0456\u043d\u0430\u043a\u0448\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/max/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>min, abs, clamp, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/max/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/max/README-vi/#max","title":"Max","text":"<p>T\u00ecm gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n gi\u1eefa 2 gi\u00e1 tr\u1ecb.</p>"},{"location":"Frontend/shader/glossary/max/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float max(float x, float y)  \nvec2 max(vec2 x, vec2 y)  \nvec3 max(vec3 x, vec3 y)  \nvec4 max(vec4 x, vec4 y)\n\nvec2 max(vec2 x, float y)  \nvec3 max(vec3 x, float y)  \nvec4 max(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/max/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Gi\u00e1 tr\u1ecb th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Gi\u00e1 tr\u1ecb th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/max/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>max()</code> th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh gi\u1eefa t\u1eebng c\u1eb7p gi\u00e1 tr\u1ecb trong hai vector <code>x</code> v\u00e0 <code>y</code> \u0111\u1ec3 ch\u1ecdn ra c\u00e1c s\u1ed1 l\u1edbn h\u01a1n \u1edf m\u1ed7i c\u1eb7p gi\u00e1 tr\u1ecb.</p>"},{"location":"Frontend/shader/glossary/max/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>min, abs, clamp, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/mediump/","title":"Index","text":""},{"location":"Frontend/shader/glossary/mediump/#mediump","title":"Mediump","text":""},{"location":"Frontend/shader/glossary/mediump/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/mediump/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/mediump/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/mediump/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/mediump/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/mediump/README-ua/#mediump","title":"mediump","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456, \u0437\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/mediump/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>precision mediump float;\nprecision mediump int;  \n</code></pre>"},{"location":"Frontend/shader/glossary/mediump/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456 \u043e\u0433\u043e\u043b\u043e\u0448\u0443\u0454 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0438\u0439 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0456 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c, \u044f\u043a\u0456 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u043f\u0456\u0434 \u0447\u0430\u0441 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443.</p> <p><code>mediump</code> \u2014 16+ \u0431\u0456\u0442, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>float</code> \u0432\u0456\u0434 -2^14 to +2^14, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>int</code> \u0432\u0456\u0434 -2^10 \u0434\u043e 2^10</p>"},{"location":"Frontend/shader/glossary/mediump/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lowp, highp, precision</p>"},{"location":"Frontend/shader/glossary/mediump/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/mediump/README-vi/#mediump","title":"Mediump","text":""},{"location":"Frontend/shader/glossary/mediump/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/mediump/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/mediump/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/mediump/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/min/","title":"Index","text":""},{"location":"Frontend/shader/glossary/min/#min","title":"Min","text":"<p>Return the lesser of two values</p>"},{"location":"Frontend/shader/glossary/min/#declaration","title":"Declaration","text":"<pre><code>float min(float x, float y)  \nvec2 min(vec2 x, vec2 y)  \nvec3 min(vec3 x, vec3 y)  \nvec4 min(vec4 x, vec4 y)\n\nvec2 min(vec2 x, float y)  \nvec3 min(vec3 x, float y)  \nvec4 min(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/min/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first value to compare.</p> <p><code>y</code> specifies the second value to compare.</p>"},{"location":"Frontend/shader/glossary/min/#description","title":"Description","text":"<p><code>min()</code> returns the minimum of the two parameters. It returns <code>y</code> if <code>y</code> is less than <code>x</code>, otherwise it returns <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/min/#see-also","title":"See Also","text":"<p>max, abs, clamp, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/min/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/min/README-ua/#min","title":"min","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043c\u0435\u043d\u0448\u0435 \u0437 \u0434\u0432\u043e\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c</p>"},{"location":"Frontend/shader/glossary/min/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float min(float x, float y)  \nvec2 min(vec2 x, vec2 y)  \nvec3 min(vec3 x, vec3 y)  \nvec4 min(vec4 x, vec4 y)\n\nvec2 min(vec2 x, float y)  \nvec3 min(vec3 x, float y)  \nvec4 min(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/min/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/min/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>min()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0456\u0437 \u0434\u0432\u043e\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432. \u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>y</code>, \u044f\u043a\u0449\u043e \u0432\u0456\u043d \u043c\u0435\u043d\u0448\u0435 \u0437\u0430 <code>x</code>, \u0456\u043d\u0430\u043a\u0448\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/min/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>max, abs, clamp, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/min/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/min/README-vi/#min","title":"Min","text":"<p>T\u00ecm gi\u00e1 tr\u1ecb nh\u1ecf h\u01a1n gi\u1eefa 2 gi\u00e1 tr\u1ecb.</p>"},{"location":"Frontend/shader/glossary/min/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float min(float x, float y)  \nvec2 min(vec2 x, vec2 y)  \nvec3 min(vec3 x, vec3 y)  \nvec4 min(vec4 x, vec4 y)\n\nvec2 min(vec2 x, float y)  \nvec3 min(vec3 x, float y)  \nvec4 min(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/min/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Gi\u00e1 tr\u1ecb th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Gi\u00e1 tr\u1ecb th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/min/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>min()</code> th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh gi\u1eefa t\u1eebng c\u1eb7p gi\u00e1 tr\u1ecb trong hai vector <code>x</code> v\u00e0 <code>y</code> \u0111\u1ec3 ch\u1ecdn ra c\u00e1c s\u1ed1 nh\u1ecf h\u01a1n \u1edf m\u1ed7i c\u1eb7p gi\u00e1 tr\u1ecb.</p>"},{"location":"Frontend/shader/glossary/min/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>max, abs, clamp, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/mix/","title":"Index","text":""},{"location":"Frontend/shader/glossary/mix/#mix","title":"Mix","text":"<p>Constrain a value to lie between two further values</p>"},{"location":"Frontend/shader/glossary/mix/#declaration","title":"Declaration","text":"<pre><code>float mix(float x, float y, float a)  \nvec2 mix(vec2 x, vec2 y, vec2 a)  \nvec3 mix(vec3 x, vec3 y, vec3 a)  \nvec4 mix(vec4 x, vec4 y, vec4 a)\n\nvec2 mix(vec2 x, vec2 y, float a)  \nvec3 mix(vec3 x, vec3 y, float a)  \nvec4 mix(vec4 x, vec4 y, float a)\n</code></pre>"},{"location":"Frontend/shader/glossary/mix/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the start of the range in which to interpolate.</p> <p><code>y</code> specifies the end of the range in which to interpolate.</p> <p><code>a</code> specifies the value to use to interpolate between x and y.</p>"},{"location":"Frontend/shader/glossary/mix/#description","title":"Description","text":"<p><code>mix()</code> performs a linear interpolation between <code>x</code> and <code>y</code> using <code>a</code> to weight between them. The return value is computed as <code>x\u00d7(1\u2212a)+y\u00d7a</code>.</p>"},{"location":"Frontend/shader/glossary/mix/#see-also","title":"See Also","text":"<p>min, max, Chapter 06: Color</p>"},{"location":"Frontend/shader/glossary/mix/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/mix/README-ua/#mix","title":"mix","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043b\u0456\u043d\u0456\u0439\u043d\u0443 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u044e \u043c\u0456\u0436 \u0434\u0432\u043e\u043c\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438.</p>"},{"location":"Frontend/shader/glossary/mix/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float mix(float x, float y, float a)  \nvec2 mix(vec2 x, vec2 y, vec2 a)  \nvec3 mix(vec3 x, vec3 y, vec3 a)  \nvec4 mix(vec4 x, vec4 y, vec4 a)\n\nvec2 mix(vec2 x, vec2 y, float a)  \nvec3 mix(vec3 x, vec3 y, float a)  \nvec4 mix(vec4 x, vec4 y, float a)\n</code></pre>"},{"location":"Frontend/shader/glossary/mix/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u043e\u0447\u0430\u0442\u043e\u043a \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u0457.</p> <p><code>y</code> \u2014 \u043a\u0456\u043d\u0435\u0446\u044c \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u0457.</p> <p><code>a</code> \u2014 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0430\u0433\u0438 \u0434\u043b\u044f \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u0457, \u0432\u0456\u0434 0.0 \u0434\u043e 1.0.</p>"},{"location":"Frontend/shader/glossary/mix/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>mix()</code> \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u043b\u0456\u043d\u0456\u0439\u043d\u0443 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u044e \u043c\u0456\u0436 <code>x</code> \u0442\u0430 <code>y</code> \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0447\u0438 <code>a</code> \u0434\u043b\u044f \u0437\u0432\u0430\u0436\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u0456\u0436 \u043d\u0438\u043c\u0438. \u041f\u043e\u0432\u0435\u0440\u043d\u0435\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x * (1 \u2212 a) + y * a</code>\".</p>"},{"location":"Frontend/shader/glossary/mix/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>min, max, \u0420\u043e\u0437\u0434\u0456\u043b 06: \u041a\u043e\u043b\u044c\u043e\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/mix/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/mix/README-vi/#mix","title":"Mix","text":"<p>N\u1ed9i suy tuy\u1ebfn t\u00ednh gi\u1eefa 2 gi\u00e1 tr\u1ecb</p>"},{"location":"Frontend/shader/glossary/mix/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float mix(float x, float y, float a)  \nvec2 mix(vec2 x, vec2 y, vec2 a)  \nvec3 mix(vec3 x, vec3 y, vec3 a)  \nvec4 mix(vec4 x, vec4 y, vec4 a)\n\nvec2 mix(vec2 x, vec2 y, float a)  \nvec3 mix(vec3 x, vec3 y, float a)  \nvec4 mix(vec4 x, vec4 y, float a)\n</code></pre>"},{"location":"Frontend/shader/glossary/mix/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Gi\u00e1 tr\u1ecb nh\u1ecf h\u01a1n trong kho\u1ea3ng c\u1ea7n n\u1ed9i suy.</p> <p><code>y</code> Gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n trong kho\u1ea3ng c\u1ea7n n\u1ed9i suy.</p> <p><code>a</code> T\u1ec9 l\u1ec7 n\u1ed9i suy. </p>"},{"location":"Frontend/shader/glossary/mix/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>mix()</code> n\u1ed9i suy gi\u00e1 tr\u1ecb gi\u1eefa <code>x</code> v\u00e0 <code>y</code> s\u1eed d\u1ee5ng <code>a</code> l\u00e0m t\u1ec9 l\u1ec7 n\u1ed9i suy / tr\u1ecdng s\u1ed1. K\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p t\u00ednh <code>x\u00d7(1\u2212a)+y\u00d7a</code>.</p>"},{"location":"Frontend/shader/glossary/mix/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>min, max, Ch\u01b0\u01a1ng 6: M\u00e0u s\u1eafc</p>"},{"location":"Frontend/shader/glossary/mod/","title":"Index","text":""},{"location":"Frontend/shader/glossary/mod/#mod","title":"Mod","text":"<p>Compute value of one parameter modulo another</p>"},{"location":"Frontend/shader/glossary/mod/#declaration","title":"Declaration","text":"<pre><code>float mod(float x, float y)  \nvec2 mod(vec2 x, vec2 y)  \nvec3 mod(vec3 x, vec3 y)  \nvec4 mod(vec4 x, vec4 y)\n\nvec2 mod(vec2 x, float y)  \nvec3 mod(vec3 x, float y)  \nvec4 mod(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/mod/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to evaluate. <code>y</code> specifies the value to obtain the modulo of.</p>"},{"location":"Frontend/shader/glossary/mod/#description","title":"Description","text":"<p><code>mod()</code> returns the value of <code>x</code> modulo <code>y</code>. This is computed as <code>x - y * floor(x/y)</code>.</p>"},{"location":"Frontend/shader/glossary/mod/#see-also","title":"See Also","text":"<p>floor, fract, ceil, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/mod/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/mod/README-ua/#mod","title":"mod","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u0430\u043b\u0438\u0448\u043e\u043a \u0432\u0456\u0434 \u0434\u0456\u043b\u0435\u043d\u043d\u044f \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0439. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u0430\u0454 \u0442\u0430\u043a\u0438\u0439 \u0441\u0430\u043c\u0438\u0439 \u0437\u043d\u0430\u043a, \u044f\u043a \u0456 \u0434\u0456\u043b\u044c\u043d\u0438\u043a.</p>"},{"location":"Frontend/shader/glossary/mod/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float mod(float x, float y)  \nvec2 mod(vec2 x, vec2 y)  \nvec3 mod(vec3 x, vec3 y)  \nvec4 mod(vec4 x, vec4 y)\n\nvec2 mod(vec2 x, float y)  \nvec3 mod(vec3 x, float y)  \nvec4 mod(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/mod/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0447\u0438\u0441\u043b\u043e, \u0434\u043b\u044f \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0437\u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u043b\u0438\u0448\u043e\u043a.</p> <p><code>y</code> \u2014 \u0447\u0438\u0441\u043b\u043e, \u043d\u0430 \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u0434\u0456\u043b\u0435\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/mod/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>mod()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u043c\u043e\u0434\u0443\u043b\u044f <code>x</code> \u043d\u0430 <code>y</code>. \u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x - y \u22c5 floor(x / y)</code>\".</p>"},{"location":"Frontend/shader/glossary/mod/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>floor, fract, ceil, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/mod/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/mod/README-vi/#mod","title":"Mod","text":"<p>Ph\u00e9p t\u00ednh ph\u1ea7n d\u01b0</p>"},{"location":"Frontend/shader/glossary/mod/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float mod(float x, float y)  \nvec2 mod(vec2 x, vec2 y)  \nvec3 mod(vec3 x, vec3 y)  \nvec4 mod(vec4 x, vec4 y)\n\nvec2 mod(vec2 x, float y)  \nvec3 mod(vec3 x, float y)  \nvec4 mod(vec4 x, float y)\n</code></pre>"},{"location":"Frontend/shader/glossary/mod/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 b\u1ecb chia. <code>y</code> s\u1ed1 chia.</p>"},{"location":"Frontend/shader/glossary/mod/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>mod()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 ph\u1ea7n d\u01b0 c\u1ee7a ph\u00e9p chia <code>x</code> cho <code>y</code>, theo c\u00f4ng th\u1ee9c <code>x - y * floor(x/y)</code>.</p>"},{"location":"Frontend/shader/glossary/mod/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>floor, fract, ceil, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/normalize/","title":"Index","text":""},{"location":"Frontend/shader/glossary/normalize/#normalize","title":"Normalize","text":"<p>Calculate the unit vector in the same direction as the input vector</p>"},{"location":"Frontend/shader/glossary/normalize/#declaration","title":"Declaration","text":"<pre><code>float normalize(float x)  \nvec2 normalize(vec2 x)  \nvec3 normalize(vec3 x)  \nvec4 normalize(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/normalize/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the vector to normalize.</p>"},{"location":"Frontend/shader/glossary/normalize/#description","title":"Description","text":"<p><code>normalize()</code> returns a vector with the same direction as its parameter, <code>x</code>, but with length 1.</p>"},{"location":"Frontend/shader/glossary/normalize/#see-also","title":"See Also","text":"<p>length()</p>"},{"location":"Frontend/shader/glossary/normalize/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/normalize/README-ua/#normalize","title":"normalize","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u043e\u0434\u0438\u043d\u0438\u0447\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0443 \u0442\u043e\u043c\u0443 \u0436 \u043d\u0430\u043f\u0440\u044f\u043c\u043a\u0443, \u0449\u043e \u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/normalize/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float normalize(float x)  \nvec2 normalize(vec2 x)  \nvec3 normalize(vec3 x)  \nvec4 normalize(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/normalize/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u044f\u043a\u0438\u0439 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/normalize/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>normalize()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 \u0442\u0438\u043c \u0436\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u043a\u043e\u043c, \u0449\u043e \u0456 \u0439\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>x</code>, \u0430\u043b\u0435 \u0437 \u0434\u043e\u0432\u0436\u0438\u043d\u043e\u044e 1.</p>"},{"location":"Frontend/shader/glossary/normalize/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>length()</p>"},{"location":"Frontend/shader/glossary/normalize/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/normalize/README-vi/#normalize","title":"Normalize","text":"<p>Chu\u1ea9n h\u00f3a vector.</p>"},{"location":"Frontend/shader/glossary/normalize/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float normalize(float x)  \nvec2 normalize(vec2 x)  \nvec3 normalize(vec3 x)  \nvec4 normalize(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/normalize/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector c\u1ea7n chu\u1ea9n h\u00f3a.</p>"},{"location":"Frontend/shader/glossary/normalize/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>normalize()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector c\u00f9ng chi\u1ec1u v\u1edbi <code>x</code> v\u00e0 c\u00f3 \u0111\u1ed9 d\u00e0i b\u1eb1ng 1.</p>"},{"location":"Frontend/shader/glossary/normalize/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>length()</p>"},{"location":"Frontend/shader/glossary/not/","title":"Index","text":""},{"location":"Frontend/shader/glossary/not/#not","title":"Not","text":"<p>Logically invert a boolean vector</p>"},{"location":"Frontend/shader/glossary/not/#declaration","title":"Declaration","text":"<pre><code>bvec2 not(bvec2 x)  \nbvec3 not(bvec3 x)  \nbvec4 not(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/not/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the vector to be inverted.</p>"},{"location":"Frontend/shader/glossary/not/#description","title":"Description","text":"<p><code>not()</code> logically inverts the boolean vector <code>x</code>. It returns a new boolean vector for which each element <code>i</code> is computed as <code>!x[i]</code>.</p>"},{"location":"Frontend/shader/glossary/not/#see-also","title":"See Also","text":"<p>any(), all()</p>"},{"location":"Frontend/shader/glossary/not/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/not/README-ua/#not","title":"not","text":"<p>\u041b\u043e\u0433\u0456\u0447\u043d\u043e \u0456\u043d\u0432\u0435\u0440\u0442\u0443\u0454 \u0431\u0443\u043b\u0435\u0432\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440</p>"},{"location":"Frontend/shader/glossary/not/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 not(bvec2 x)  \nbvec3 not(bvec3 x)  \nbvec4 not(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/not/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440, \u044f\u043a\u0438\u0439 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0456\u043d\u0432\u0435\u0440\u0442\u0443\u0432\u0430\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/not/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>not()</code> \u043b\u043e\u0433\u0456\u0447\u043d\u043e \u0456\u043d\u0432\u0435\u0440\u0442\u0443\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440 <code>x</code>. \u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u043e\u0432\u0438\u0439 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0434\u043b\u044f \u044f\u043a\u043e\u0433\u043e \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043e \u044f\u043a <code>!x[i]</code>.</p>"},{"location":"Frontend/shader/glossary/not/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>any(), all()</p>"},{"location":"Frontend/shader/glossary/not/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/not/README-vi/#not","title":"Not","text":"<p>Ph\u00e9p logic ngh\u1ecbch \u0111\u1ea3o.</p>"},{"location":"Frontend/shader/glossary/not/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 not(bvec2 x)  \nbvec3 not(bvec3 x)  \nbvec4 not(bvec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/not/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> gi\u00e1 tr\u1ecb boolean c\u1ea7n \u0111\u1ea3o ng\u01b0\u1ee3c.</p>"},{"location":"Frontend/shader/glossary/not/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>not()</code> \u0111\u1ea3o ng\u01b0\u1ee3c <code>x</code>. K\u1ebft qu\u1ea3 l\u00e0 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p logic <code>!x[i]</code>.</p>"},{"location":"Frontend/shader/glossary/not/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>any(), all()</p>"},{"location":"Frontend/shader/glossary/notEqual/","title":"Index","text":""},{"location":"Frontend/shader/glossary/notEqual/#notequal","title":"NotEqual","text":"<p>Perform a component-wise not-equal-to comparison of two vectors</p>"},{"location":"Frontend/shader/glossary/notEqual/#declaration","title":"Declaration","text":"<pre><code>bvec2 notEqual(vec2 x, vec2 y)  \nbvec3 notEqual(vec3 x, vec3 y)  \nbvec4 notEqual(vec4 x, vec4 y)  \n\nbvec2 notEqual(ivec2 x, ivec2 y)  \nbvec3 notEqual(ivec3 x, ivec3 y)  \nbvec4 notEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/notEqual/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the first vector to be used in the comparison operation.</p> <p><code>y</code> specifies the second vector to be used in the comparison operation.</p>"},{"location":"Frontend/shader/glossary/notEqual/#description","title":"Description","text":"<p><code>notEqual()</code> returns a boolean vector in which each element <code>i</code> is computed as <code>x[i] != y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/notEqual/#see-also","title":"See Also","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), greaterThan(), equal(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/notEqual/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/notEqual/README-ua/#notequal","title":"notEqual","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043e-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0434\u0432\u043e\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u043d\u0435\u0440\u0456\u0432\u043d\u0456\u0441\u0442\u044c</p>"},{"location":"Frontend/shader/glossary/notEqual/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>bvec2 notEqual(vec2 x, vec2 y)  \nbvec3 notEqual(vec3 x, vec3 y)  \nbvec4 notEqual(vec4 x, vec4 y)  \n\nbvec2 notEqual(ivec2 x, ivec2 y)  \nbvec3 notEqual(ivec3 x, ivec3 y)  \nbvec4 notEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/notEqual/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p> <p><code>y</code> \u2014 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/notEqual/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>notEqual()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0431\u0443\u043b\u0456\u0432 \u0432\u0435\u043a\u0442\u043e\u0440, \u0443 \u044f\u043a\u043e\u043c\u0443 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 <code>i</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a \"<code>x[i] != y[i]</code>\".</p>"},{"location":"Frontend/shader/glossary/notEqual/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), greaterThan(), equal(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/notEqual/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/notEqual/README-vi/#notequal","title":"NotEqual","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p so s\u00e1nh kh\u00f4ng-b\u1eb1ng gi\u1eefa c\u00e1c c\u1eb7p gi\u00e1 tr\u1ecb c\u1ee7a 2 vector.</p>"},{"location":"Frontend/shader/glossary/notEqual/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>bvec2 notEqual(vec2 x, vec2 y)  \nbvec3 notEqual(vec3 x, vec3 y)  \nbvec4 notEqual(vec4 x, vec4 y)  \n\nbvec2 notEqual(ivec2 x, ivec2 y)  \nbvec3 notEqual(ivec3 x, ivec3 y)  \nbvec4 notEqual(ivec4 x, ivec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/notEqual/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> Vector th\u1ee9 nh\u1ea5t.</p> <p><code>y</code> Vector th\u1ee9 hai.</p>"},{"location":"Frontend/shader/glossary/notEqual/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>notEqual()</code> tr\u1ea3 v\u1ec1 m\u1ed9t vector boolean m\u00e0 th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p so s\u00e1nh <code>x[i] != y[i]</code>.</p>"},{"location":"Frontend/shader/glossary/notEqual/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>lessThanEqual(), lessThan(), greaterThanEqual(), greaterThan(), equal(), any(), all(), not()</p>"},{"location":"Frontend/shader/glossary/out/","title":"Index","text":""},{"location":"Frontend/shader/glossary/out/#out","title":"Out","text":""},{"location":"Frontend/shader/glossary/out/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/out/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/out/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/out/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/out/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/out/README-ua/#out","title":"out","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432. \u041f\u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043b\u0438\u0448\u0435 \u043d\u0430 \u0437\u0430\u043f\u0438\u0441.</p>"},{"location":"Frontend/shader/glossary/out/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>void increment(out float x) {\n    // x = x; // \u043e\u0441\u043a\u0456\u043b\u043a\u0438 \u0437\u043c\u0456\u043d\u043d\u0443 x \u043d\u0435 \u043c\u043e\u0436\u043d\u0430 \u0447\u0438\u0442\u0430\u0442\u0438, \u0442\u043e \u044f\u043a \u0432\u0430\u0440\u0456\u0430\u043d\u0442 \u0437\u0430\u043c\u0456\u0441\u0442\u044c \u0457\u0457 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0435 0, \u0442\u043e\u043c\u0443 \u0442\u0430\u043a \u043a\u0440\u0430\u0449\u0435 \u043d\u0435 \u0440\u043e\u0431\u0438\u0442\u0438\n\n    x = 1.0; // \u0444\u0430\u043a\u0442\u0438\u0447\u043d\u043e \u043c\u0438 \u0437\u043d\u043c\u0456\u043d\u044e\u0454\u043c\u043e \u0437\u043c\u0456\u043d\u043d\u0443 \u0437\u0430 \u043c\u0435\u0436\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u0457\n}\n\nvoid main() {\n    float count = 0.5;\n\n    increment(count);\n\n    // \u0442\u0435\u043f\u0435\u0440 count == 1.0, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0437\u043c\u0456\u043d\u043d\u0430 \u0431\u0443\u043b\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0430 \u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u044e \u0456\u0437 out \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u0456 \u0431\u0443\u043b\u0430 \u043e\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0442\u0430\u043c\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/out/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>out</code> \u2014 \u043a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0456\u0432, \u044f\u043a\u0438\u0439 \u0434\u043e\u0437\u0432\u043e\u043b\u044f\u0454 \u043b\u0438\u0448\u0435 \u0437\u043c\u0456\u043d\u044e\u0432\u0430\u0442\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0443 \u0437\u043c\u0456\u043d\u043d\u0443, \u0430\u043b\u0435 \u043d\u0435 \u0434\u043e\u0437\u0432\u043e\u043b\u044f\u0454 \u0447\u0438\u0442\u0430\u0442\u0438 \u0457\u0457 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0417\u043c\u0456\u043d\u0430 \u0431\u0443\u0434\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0442\u0430\u043a \u0441\u0430\u043c\u043e \u0456 \u0437\u0430 \u043c\u0435\u0436\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u0457.</p>"},{"location":"Frontend/shader/glossary/out/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>in, inout</p>"},{"location":"Frontend/shader/glossary/out/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/out/README-vi/#out","title":"Out","text":""},{"location":"Frontend/shader/glossary/out/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/out/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/out/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/out/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/pow/","title":"Index","text":""},{"location":"Frontend/shader/glossary/pow/#pow","title":"Pow","text":"<p>Return the value of the first parameter raised to the power of the second.</p>"},{"location":"Frontend/shader/glossary/pow/#declaration","title":"Declaration","text":"<pre><code>float pow(float x, float y)  \nvec2 pow(vec2 x, vec2 y)  \nvec3 pow(vec3 x, vec3 y)  \nvec4 pow(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/pow/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value to raise to the power <code>y</code>.</p> <p><code>y</code> specifies the power to which to raise <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/pow/#description","title":"Description","text":"<p><code>pow()</code> returns the value of <code>x</code> raised to the <code>y</code> power.</p>"},{"location":"Frontend/shader/glossary/pow/#see-also","title":"See Also","text":"<p>inversesqrt, sqrt, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/pow/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/pow/README-ua/#pow","title":"pow","text":"<p>\u041f\u0456\u0434\u043d\u043e\u0441\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043e\u043c\u0443 \u0441\u0442\u0435\u043f\u0435\u043d\u0456 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.</p>"},{"location":"Frontend/shader/glossary/pow/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float pow(float x, float y)  \nvec2 pow(vec2 x, vec2 y)  \nvec3 pow(vec3 x, vec3 y)  \nvec4 pow(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/pow/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0456\u0434\u043d\u0435\u0441\u0442\u0438 \u0434\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f <code>y</code>.</p> <p><code>y</code> \u2014 \u0441\u0442\u0435\u043f\u0456\u043d\u044c, \u0434\u043e \u044f\u043a\u043e\u0457 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0456\u0434\u043d\u0435\u0441\u0442\u0438 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/pow/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>pow()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>x</code>, \u0437\u0432\u0435\u0434\u0435\u043d\u0435 \u0434\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f <code>y</code>.</p>"},{"location":"Frontend/shader/glossary/pow/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>inversesqrt, sqrt, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/pow/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/pow/README-vi/#pow","title":"Pow","text":"<p>L\u0169y th\u1eeba.</p>"},{"location":"Frontend/shader/glossary/pow/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float pow(float x, float y)  \nvec2 pow(vec2 x, vec2 y)  \nvec3 pow(vec3 x, vec3 y)  \nvec4 pow(vec4 x, vec4 y)\n</code></pre>"},{"location":"Frontend/shader/glossary/pow/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> c\u01a1 s\u1ed1.</p> <p><code>y</code> s\u1ed1 m\u0169.</p>"},{"location":"Frontend/shader/glossary/pow/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>pow()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p to\u00e1n <code>x</code> m\u0169 <code>y</code></p>"},{"location":"Frontend/shader/glossary/pow/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>inversesqrt, sqrt, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/precision/","title":"Index","text":""},{"location":"Frontend/shader/glossary/precision/#precision","title":"Precision","text":""},{"location":"Frontend/shader/glossary/precision/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/precision/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/precision/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/precision/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/precision/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/precision/README-ua/#precision","title":"precision","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456 \u043e\u0433\u043e\u043b\u043e\u0448\u0443\u0454 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0438\u0439 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0456 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c, \u044f\u043a\u0456 \u0431\u0430\u0437\u043e\u0432\u0430 \u0440\u0435\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u044f \u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043f\u0456\u0434 \u0447\u0430\u0441 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u0445 \u0437\u043c\u0456\u043d\u043d\u0438\u0445.</p>"},{"location":"Frontend/shader/glossary/precision/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>precision lowp float;\nprecision mediump float;\nprecision highp float;\nprecision lowp int;  \nprecision mediump int;  \nprecision highp int;  \n</code></pre>"},{"location":"Frontend/shader/glossary/precision/README-ua/#_2","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f","text":"<p><code>lowp</code> \u2014 8+ \u0431\u0456\u0442, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>float</code> \u0432\u0456\u0434 -2 \u0434\u043e 2, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>int</code> \u0432\u0456\u0434 -2^8 \u0434\u043e 2^8</p> <p><code>mediump</code> \u2014 16+ \u0431\u0456\u0442, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>float</code> \u0432\u0456\u0434 -2^14 to +2^14, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>int</code> \u0432\u0456\u0434 -2^10 \u0434\u043e 2^10</p> <p><code>highp</code> \u2014 32+ \u0431\u0456\u0442, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>float</code> \u0432\u0456\u0434 -2^62 to +2^62, \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u044f <code>int</code> \u0432\u0456\u0434 -2^16 \u0434\u043e 2^16</p>"},{"location":"Frontend/shader/glossary/precision/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>lowp, mediump, highp</p>"},{"location":"Frontend/shader/glossary/precision/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/precision/README-vi/#precision","title":"Precision","text":""},{"location":"Frontend/shader/glossary/precision/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/precision/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/precision/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/precision/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/radians/","title":"Index","text":""},{"location":"Frontend/shader/glossary/radians/#radians","title":"Radians","text":"<p>Convert a quantity in degrees to radians</p>"},{"location":"Frontend/shader/glossary/radians/#declaration","title":"Declaration","text":"<pre><code>float radians(float degrees)  \nvec2 radians(vec2 degrees)  \nvec3 radians(vec3 degrees)  \nvec4 radians(vec4 degrees)\n</code></pre>"},{"location":"Frontend/shader/glossary/radians/#parameters","title":"Parameters","text":"<p><code>degrees</code> specifies the quantity, in degrees, to be converted to radians.</p>"},{"location":"Frontend/shader/glossary/radians/#description","title":"Description","text":"<p><code>radians()</code> converts a quantity, specified in degrees into radians. That is, the return value is <code>(PI * degrees)/180</code>.</p>"},{"location":"Frontend/shader/glossary/radians/#see-also","title":"See Also","text":"<p>degrees</p>"},{"location":"Frontend/shader/glossary/radians/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/radians/README-ua/#radians","title":"radians","text":"<p>\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0443\u0454 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0443 \u0440\u0430\u0434\u0456\u0430\u043d\u0438</p>"},{"location":"Frontend/shader/glossary/radians/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float radians(float degrees)  \nvec2 radians(vec2 degrees)  \nvec3 radians(vec3 degrees)  \nvec4 radians(vec4 degrees)\n</code></pre>"},{"location":"Frontend/shader/glossary/radians/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>degrees</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0443 \u0433\u0440\u0430\u0434\u0443\u0441\u0430\u0445, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0438 \u0432 \u0440\u0430\u0434\u0456\u0430\u043d\u0438.</p>"},{"location":"Frontend/shader/glossary/radians/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>radians()</code> \u043f\u0435\u0440\u0435\u0442\u0432\u043e\u0440\u044e\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0435 \u0432 \u0433\u0440\u0430\u0434\u0443\u0441\u0430\u0445, \u0443 \u0440\u0430\u0434\u0456\u0430\u043d\u0438.</p> <p>\u041e\u0431\u0440\u0430\u0445\u0443\u043d\u043e\u043a \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0456: <code>(PI * degrees) / 180.0</code></p>"},{"location":"Frontend/shader/glossary/radians/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>degrees</p>"},{"location":"Frontend/shader/glossary/radians/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/radians/README-vi/#radians","title":"Radians","text":"<p>Chuy\u1ec3n \u0111\u1ed5i g\u00f3c t\u1eeb \u0111\u01a1n v\u1ecb \u0111\u1ed9 sang radian.</p>"},{"location":"Frontend/shader/glossary/radians/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float radians(float degrees)  \nvec2 radians(vec2 degrees)  \nvec3 radians(vec3 degrees)  \nvec4 radians(vec4 degrees)\n</code></pre>"},{"location":"Frontend/shader/glossary/radians/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>degrees</code> g\u00f3c t\u00ednh b\u1eb1ng \u0111\u1ed9, c\u1ea7n quy \u0111\u1ed5i.</p>"},{"location":"Frontend/shader/glossary/radians/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>radians()</code> tr\u1ea3 v\u1ec1 g\u00f3c (t\u00ednh b\u1eb1ng radian) theo c\u00f4ng th\u1ee9c <code>(PI * degrees)/180</code>.</p>"},{"location":"Frontend/shader/glossary/radians/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>degrees</p>"},{"location":"Frontend/shader/glossary/reflect/","title":"Index","text":""},{"location":"Frontend/shader/glossary/reflect/#reflect","title":"Reflect","text":"<p>Calculate the reflection direction for an incident vector</p>"},{"location":"Frontend/shader/glossary/reflect/#declaration","title":"Declaration","text":"<pre><code>float reflect(float I, float N)  \nvec2 reflect(vec2 I, vec2 N)  \nvec3 reflect(vec3 I, vec3 N)  \nvec4 reflect(vec4 I, vec4 N)\n</code></pre>"},{"location":"Frontend/shader/glossary/reflect/#parameters","title":"Parameters","text":"<p><code>I</code> specifies the incident vector.</p> <p><code>N</code> specifies the normal vector.</p>"},{"location":"Frontend/shader/glossary/reflect/#description","title":"Description","text":"<p>For a given incident vector <code>I</code> and surface normal <code>N</code> reflect returns the reflection direction calculated as <code>I - 2.0 * dot(N, I) * N</code>.</p> <p><code>N</code> should be normalized in order to achieve the desired result.</p>"},{"location":"Frontend/shader/glossary/reflect/#see-also","title":"See Also","text":"<p>dot(), refract()</p>"},{"location":"Frontend/shader/glossary/reflect/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/reflect/README-ua/#reflect","title":"reflect","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u043d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0432\u0456\u0434\u0431\u0438\u0442\u0442\u044f \u0434\u043b\u044f \u043f\u0430\u0434\u0430\u044e\u0447\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/reflect/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float reflect(float I, float N)  \nvec2 reflect(vec2 I, vec2 N)  \nvec3 reflect(vec3 I, vec3 N)  \nvec4 reflect(vec4 I, vec4 N)\n</code></pre>"},{"location":"Frontend/shader/glossary/reflect/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>I</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u043d\u0446\u0438\u0434\u0435\u043d\u0442\u0443 (\u043f\u0430\u0434\u0430\u044e\u0447\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440).</p> <p><code>N</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u043d\u043e\u0440\u043c\u0430\u043b\u0456.</p>"},{"location":"Frontend/shader/glossary/reflect/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p>\u0414\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0430\u0434\u0456\u043d\u043d\u044f <code>I</code> \u0456 \u043d\u043e\u0440\u043c\u0430\u043b\u0456 \u0434\u043e \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u0456 <code>N</code>, <code>reflect</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0432\u0456\u0434\u0431\u0438\u0442\u0442\u044f, \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u044f\u043a \"<code>I - 2.0 * dot(N, I) * N</code>\".</p> <p><code>N</code> \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u043c, \u0449\u043e\u0431 \u0434\u043e\u0441\u044f\u0433\u0442\u0438 \u0431\u0430\u0436\u0430\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443.</p>"},{"location":"Frontend/shader/glossary/reflect/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>dot(), refract()</p>"},{"location":"Frontend/shader/glossary/reflect/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/reflect/README-vi/#reflect","title":"Reflect","text":"<p>T\u00ednh vector ph\u1ea3n x\u1ea1 khi tia t\u1edbi va ch\u1ea1m v\u1edbi m\u1ed9t b\u1ec1 m\u1eb7t.</p>"},{"location":"Frontend/shader/glossary/reflect/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float reflect(float I, float N)  \nvec2 reflect(vec2 I, vec2 N)  \nvec3 reflect(vec3 I, vec3 N)  \nvec4 reflect(vec4 I, vec4 N)\n</code></pre>"},{"location":"Frontend/shader/glossary/reflect/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>I</code> Vector t\u1edbi (incident vector), l\u00e0 vector ch\u1ec9 h\u01b0\u1edbng tia va ch\u1ea1m v\u1edbi b\u1ec1 m\u1eb7t.</p> <p><code>N</code> Vector ph\u00e1p tuy\u1ebfn c\u1ee7a b\u1ec1 m\u1eb7t t\u1ea1i \u0111i\u1ec3m va ch\u1ea1m, l\u00e0 vector vu\u00f4ng g\u00f3c v\u1edbi b\u1ec1 m\u1eb7t.</p>"},{"location":"Frontend/shader/glossary/reflect/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>Cho vector t\u1edbi <code>I</code> v\u00e0 vector ph\u00e1p tuy\u1ebfn c\u1ee7a b\u1ec1 m\u1eb7t va ch\u1ea1m <code>N</code>, vector ph\u1ea3n x\u1ea1 ch\u1ec9 h\u01b0\u1edbng ph\u1ea3n x\u1ea1 \u0111\u01b0\u1ee3c t\u00ednh theo c\u00f4ng th\u1ee9c <code>I - 2.0 * dot(N, I) * N</code>.</p> <p><code>N</code> n\u00ean \u0111\u01b0\u1ee3c chu\u1ea9n h\u00f3a (normalize) \u0111\u1ec3 c\u00f3 k\u1ebft qu\u1ea3 ch\u00ednh x\u00e1c nh\u1ea5t.</p>"},{"location":"Frontend/shader/glossary/reflect/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>dot(), refract()</p>"},{"location":"Frontend/shader/glossary/refract/","title":"Index","text":""},{"location":"Frontend/shader/glossary/refract/#refract","title":"Refract","text":"<p>Calculate the refraction direction for an incident vector</p>"},{"location":"Frontend/shader/glossary/refract/#declaration","title":"Declaration","text":"<pre><code>float refract(float I, float N, float eta)  \nvec2 refract(vec2 I, vec2 N, float eta)  \nvec3 refract(vec3 I, vec3 N, float eta)  \nvec4 refract(vec4 I, vec4 N, float eta)\n</code></pre>"},{"location":"Frontend/shader/glossary/refract/#parameters","title":"Parameters","text":"<p><code>I</code> specifies the incident vector.</p> <p><code>N</code> specifies the normal vector.</p> <p><code>eta</code> specifies the ratio of indices of refraction.</p>"},{"location":"Frontend/shader/glossary/refract/#description","title":"Description","text":"<p>For a given incident vector <code>I</code>, surface normal <code>N</code> and ratio of indices of refraction, <code>eta</code>, refract returns the refraction vector, <code>R</code>.</p> <p><code>R</code> is calculated as:</p> <pre><code>k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\nif (k &lt; 0.0)\n    R = genType(0.0);       // or genDType(0.0)\nelse\n    R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n</code></pre> <p>The input parameters <code>I</code> and <code>N</code> should be normalized in order to achieve the desired result.</p>"},{"location":"Frontend/shader/glossary/refract/#see-also","title":"See Also","text":"<p>dot(), reflect()</p>"},{"location":"Frontend/shader/glossary/refract/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/refract/README-ua/#refract","title":"refract","text":"<p>\u041e\u0431\u0447\u0438\u0441\u043b\u044e\u0454 \u043d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0437\u0430\u043b\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043f\u0430\u0434\u0430\u044e\u0447\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/refract/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float refract(float I, float N, float eta)  \nvec2 refract(vec2 I, vec2 N, float eta)  \nvec3 refract(vec3 I, vec3 N, float eta)  \nvec4 refract(vec4 I, vec4 N, float eta)\n</code></pre>"},{"location":"Frontend/shader/glossary/refract/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>I</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u043d\u0446\u0438\u0434\u0435\u043d\u0442\u0443 (\u043f\u0430\u0434\u0430\u044e\u0447\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440).</p> <p><code>N</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u043d\u043e\u0440\u043c\u0430\u043b\u0456.</p> <p><code>eta</code> \u2014 \u0441\u043f\u0456\u0432\u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044f \u043f\u043e\u043a\u0430\u0437\u043d\u0438\u043a\u0456\u0432 \u0437\u0430\u043b\u043e\u043c\u043b\u0435\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/refract/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p>\u0414\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0430\u0434\u0456\u043d\u043d\u044f <code>I</code>, \u043d\u043e\u0440\u043c\u0430\u043b\u0456 \u0434\u043e \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u0456 <code>N</code> \u0442\u0430 \u0441\u043f\u0456\u0432\u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044f \u043f\u043e\u043a\u0430\u0437\u043d\u0438\u043a\u0456\u0432 \u0437\u0430\u043b\u043e\u043c\u043b\u0435\u043d\u043d\u044f <code>eta</code>, <code>refract</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437\u0430\u043b\u043e\u043c\u043b\u0435\u043d\u043d\u044f <code>R</code>.</p> <p><code>R</code> \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u044f\u043a:</p> <pre><code>k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\nif (k &lt; 0.0)\n    R = genType(0.0);     // or genDType(0.0)\nelse\n    R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n</code></pre> <p>\u0412\u0445\u0456\u0434\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 <code>I</code> \u0442\u0430 <code>N</code> \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0431\u0443\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u0434\u043b\u044f \u0434\u043e\u0441\u044f\u0433\u043d\u0435\u043d\u043d\u044f \u0431\u0430\u0436\u0430\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443.</p>"},{"location":"Frontend/shader/glossary/refract/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>dot(), reflect()</p>"},{"location":"Frontend/shader/glossary/refract/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/refract/README-vi/#refract","title":"Refract","text":"<p>T\u00ednh vector kh\u00fac x\u1ea1 khi tia t\u1edbi va ch\u1ea1m v\u1edbi m\u1ed9t b\u1ec1 m\u1eb7t.</p>"},{"location":"Frontend/shader/glossary/refract/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float refract(float I, float N, float eta)  \nvec2 refract(vec2 I, vec2 N, float eta)  \nvec3 refract(vec3 I, vec3 N, float eta)  \nvec4 refract(vec4 I, vec4 N, float eta)\n</code></pre>"},{"location":"Frontend/shader/glossary/refract/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>I</code> Vector t\u1edbi (incident vector), l\u00e0 vector ch\u1ec9 h\u01b0\u1edbng tia va ch\u1ea1m v\u1edbi b\u1ec1 m\u1eb7t.</p> <p><code>N</code> Vector ph\u00e1p tuy\u1ebfn c\u1ee7a b\u1ec1 m\u1eb7t t\u1ea1i \u0111i\u1ec3m va ch\u1ea1m, l\u00e0 vector vu\u00f4ng g\u00f3c v\u1edbi b\u1ec1 m\u1eb7t.</p> <p><code>eta</code> T\u1ec9 l\u1ec7 chi\u1ebft su\u1ea5t gi\u1eefa hai m\u00f4i tr\u01b0\u1eddng.</p>"},{"location":"Frontend/shader/glossary/refract/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>Cho vector t\u1edbi <code>I</code>, vector ph\u00e1p tuy\u1ebfn c\u1ee7a b\u1ec1 m\u1eb7t va ch\u1ea1m <code>N</code> v\u00e0 , vector kh\u00fac x\u1ea1 ch\u1ec9 h\u01b0\u1edbng kh\u00fac x\u1ea1 s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh theo c\u00f4ng th\u1ee9c d\u01b0\u1edbi \u0111\u00e2y v\u00e0 tr\u1ea3 v\u1ec1:</p> <pre><code>k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\nif (k &lt; 0.0)\n    R = genType(0.0);       // ho\u1eb7c genDType(0.0)\nelse\n    R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n</code></pre> <p><code>I</code> v\u00e0 <code>N</code> n\u00ean \u0111\u01b0\u1ee3c chu\u1ea9n h\u00f3a (normalize) \u0111\u1ec3 c\u00f3 k\u1ebft qu\u1ea3 ch\u00ednh x\u00e1c nh\u1ea5t.</p>"},{"location":"Frontend/shader/glossary/refract/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>dot(), reflect()</p>"},{"location":"Frontend/shader/glossary/return/","title":"Index","text":""},{"location":"Frontend/shader/glossary/return/#return","title":"Return","text":""},{"location":"Frontend/shader/glossary/return/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/return/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/return/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/return/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/return/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/return/README-ua/#return","title":"return","text":"<p>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0443\u043f\u0438\u043d\u044f\u0454 \u0440\u043e\u0431\u043e\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u043a\u0430\u0437\u0430\u043d\u0435 \u043f\u0456\u0441\u043b\u044f \u043d\u044c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f</p>"},{"location":"Frontend/shader/glossary/return/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>float getSum(float a, float b) {\n    return a + b;\n}\n</code></pre>"},{"location":"Frontend/shader/glossary/return/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>return</code> \u0437\u0443\u043f\u0438\u043d\u044f\u0454 \u0440\u043e\u0431\u043e\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u043a\u0430\u0437\u0430\u043d\u0435 \u043f\u0456\u0441\u043b\u044f \u043d\u044c\u043e\u0433\u043e \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0442\u043e\u0433\u043e \u0442\u0438\u043f\u0443, \u044f\u043a\u0438\u0439 \u043c\u0430\u0454 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u044f</p>"},{"location":"Frontend/shader/glossary/return/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/return/README-vi/#return","title":"Return","text":""},{"location":"Frontend/shader/glossary/return/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/return/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/return/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/return/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/sampler2D/","title":"Index","text":""},{"location":"Frontend/shader/glossary/sampler2D/#sampler2d","title":"Sampler2D","text":""},{"location":"Frontend/shader/glossary/sampler2D/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/sampler2D/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/sampler2D/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/sampler2D/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-ua/#sampler2d","title":"sampler2D","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-vi/#sampler2d","title":"Sampler2D","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/sampler2D/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/samplerCube/","title":"Index","text":""},{"location":"Frontend/shader/glossary/samplerCube/#samplercube","title":"SamplerCube","text":""},{"location":"Frontend/shader/glossary/samplerCube/#declaration-example","title":"Declaration / Example","text":""},{"location":"Frontend/shader/glossary/samplerCube/#parameters","title":"Parameters","text":""},{"location":"Frontend/shader/glossary/samplerCube/#description","title":"Description","text":""},{"location":"Frontend/shader/glossary/samplerCube/#see-also","title":"See Also","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-ua/#samplercube","title":"samplerCube","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f / \u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-vi/#samplercube","title":"SamplerCube","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-vi/#cac-phien-ban-example","title":"C\u00e1c phi\u00ean b\u1ea3n / Example","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":""},{"location":"Frontend/shader/glossary/samplerCube/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":""},{"location":"Frontend/shader/glossary/sign/","title":"Index","text":""},{"location":"Frontend/shader/glossary/sign/#sign","title":"Sign","text":"<p>Extract the sign of the parameter</p>"},{"location":"Frontend/shader/glossary/sign/#declaration","title":"Declaration","text":"<pre><code>float sign(float x)  \nvec2 sign(vec2 x)  \nvec3 sign(vec3 x)  \nvec4 sign(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/sign/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value from which to extract the sign.</p>"},{"location":"Frontend/shader/glossary/sign/#description","title":"Description","text":"<p><code>sign()</code> returns -1.0 if x is less than 0.0, 0.0 if x is equal to 0.0, and +1.0 if x is greater than 0.0.</p>"},{"location":"Frontend/shader/glossary/sign/#see-also","title":"See Also","text":"<p>abs, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/sign/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/sign/README-ua/#sign","title":"sign","text":"<p>\u0412\u0438\u0434\u0456\u043b\u044f\u0454 \u0437\u043d\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/sign/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float sign(float x)  \nvec2 sign(vec2 x)  \nvec3 sign(vec3 x)  \nvec4 sign(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/sign/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0437 \u044f\u043a\u043e\u0433\u043e \u0441\u043b\u0456\u0434 \u0432\u0438\u0442\u044f\u0433\u0442\u0438 \u0437\u043d\u0430\u043a.</p>"},{"location":"Frontend/shader/glossary/sign/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>sign()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454: -1.0, \u044f\u043a\u0449\u043e x \u043c\u0435\u043d\u0448\u0435 0.0; 0.0, \u044f\u043a\u0449\u043e x \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 0.0; +1.0, \u044f\u043a\u0449\u043e x \u0431\u0456\u043b\u044c\u0448\u0435 0.0.</p>"},{"location":"Frontend/shader/glossary/sign/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>abs, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/sign/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/sign/README-vi/#sign","title":"Sign","text":"<p>Tr\u1ea3 v\u1ec1 d\u1ea5u c\u1ee7a m\u1ed9t s\u1ed1.</p>"},{"location":"Frontend/shader/glossary/sign/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float sign(float x)  \nvec2 sign(vec2 x)  \nvec3 sign(vec3 x)  \nvec4 sign(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/sign/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> s\u1ed1 c\u1ea7n ki\u1ec3m tra d\u1ea5u \u00e2m d\u01b0\u01a1ng.</p>"},{"location":"Frontend/shader/glossary/sign/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>sign()</code> tr\u1ea3 v\u1ec1 -1.0 n\u1ebfu x &lt; 0.0, 0.0 n\u1ebfu x = 0.0, v\u00e0 +1.0 n\u1ebfu x &gt; 0.0.</p>"},{"location":"Frontend/shader/glossary/sign/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>abs, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/sin/","title":"Index","text":""},{"location":"Frontend/shader/glossary/sin/#sin","title":"Sin","text":"<p>Return the sine of the parameter</p>"},{"location":"Frontend/shader/glossary/sin/#declaration","title":"Declaration","text":"<pre><code>float sin(float angle)  \nvec2 sin(vec2 angle)  \nvec3 sin(vec3 angle)  \nvec4 sin(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/sin/#parameters","title":"Parameters","text":"<p><code>angle</code> specifies the quantity, in radians, of which to return the sine.</p>"},{"location":"Frontend/shader/glossary/sin/#description","title":"Description","text":"<p><code>sin()</code> returns the trigonometric sine of angle.</p>"},{"location":"Frontend/shader/glossary/sin/#see-also","title":"See Also","text":"<p>acos, cos, asin, tan, atan, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/sin/README-pl/","title":"README pl","text":""},{"location":"Frontend/shader/glossary/sin/README-pl/#sin","title":"Sin","text":"<p>Zwraca sinus podanego argumentu</p>"},{"location":"Frontend/shader/glossary/sin/README-pl/#deklaracja","title":"Deklaracja","text":"<pre><code>float sin(float angle)  \nvec2 sin(vec2 angle)  \nvec3 sin(vec3 angle)  \nvec4 sin(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/sin/README-pl/#parametry","title":"Parametry","text":"<p><code>angle</code> okre\u015bla warto\u015b\u0107 k\u0105ta (w radianach), dla kt\u00f3rego ma zosta\u0107 obliczony sinus.</p>"},{"location":"Frontend/shader/glossary/sin/README-pl/#opis","title":"Opis","text":"<p><code>sin()</code> zwraca trygonometryczny sinus podanego k\u0105ta.</p>"},{"location":"Frontend/shader/glossary/sin/README-pl/#zobacz-takze","title":"Zobacz tak\u017ce","text":"<p>acos, cos, asin, tan, atan, Rozdzia\u0142 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/sin/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/sin/README-ua/#sin","title":"sin","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0438\u043d\u0443\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"Frontend/shader/glossary/sin/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float sin(float angle)  \nvec2 sin(vec2 angle)  \nvec3 sin(vec3 angle)  \nvec4 sin(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/sin/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>angle</code> \u2014 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u0432 \u0440\u0430\u0434\u0456\u0430\u043d\u0430\u0445, \u0441\u0438\u043d\u0443\u0441 \u044f\u043a\u043e\u0457 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/sin/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>sin()</code> \u2014 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u0441\u0438\u043d\u0443\u0441 \u043a\u0443\u0442\u0430.</p>"},{"location":"Frontend/shader/glossary/sin/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>acos, cos, asin, tan, atan, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/sin/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/sin/README-vi/#sin","title":"Sin","text":"<p>H\u00e0m sin</p>"},{"location":"Frontend/shader/glossary/sin/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float sin(float angle)  \nvec2 sin(vec2 angle)  \nvec3 sin(vec3 angle)  \nvec4 sin(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/sin/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>angle</code> g\u00f3c c\u1ea7n t\u00ednh sin (theo \u0111\u01a1n v\u1ecb radian)</p>"},{"location":"Frontend/shader/glossary/sin/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>sin()</code> tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a bi\u1ec3u th\u1ee9c <code>sin( angle )</code></p>"},{"location":"Frontend/shader/glossary/sin/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>acos, cos, asin, tan, atan, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/smoothstep/","title":"Index","text":""},{"location":"Frontend/shader/glossary/smoothstep/#smoothstep","title":"Smoothstep","text":"<p>Perform Hermite interpolation between two values</p>"},{"location":"Frontend/shader/glossary/smoothstep/#declaration","title":"Declaration","text":"<pre><code>float smoothstep(float edge0, float edge1, float x)  \nvec2 smoothstep(vec2 edge0, vec2 edge1, vec2 x)  \nvec3 smoothstep(vec3 edge0, vec3 edge1, vec3 x)  \nvec4 smoothstep(vec4 edge0, vec4 edge1, vec4 x)\n\nvec2 smoothstep(float edge0, float edge1, vec2 x)  \nvec3 smoothstep(float edge0, float edge1, vec3 x)  \nvec4 smoothstep(float edge0, float edge1, vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/smoothstep/#parameters","title":"Parameters","text":"<p><code>edge0</code> specifies the value of the lower edge of the Hermite function.</p> <p><code>edge1</code> specifies the value of the upper edge of the Hermite function.</p> <p><code>x</code> specifies the source value for interpolation.</p>"},{"location":"Frontend/shader/glossary/smoothstep/#description","title":"Description","text":"<p><code>smoothstep()</code> performs smooth Hermite interpolation between <code>0</code> and <code>1</code> when <code>edge0 &lt; x &lt; edge1</code>. This is useful in cases where a threshold function with a smooth transition is desired. <code>smoothstep()</code> is equivalent to:</p> <pre><code>    genType t;  /* Or genDType t; */\n    t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n</code></pre> <p>Results are undefined <code>if edge0 \u2265 edge1</code>.</p>"},{"location":"Frontend/shader/glossary/smoothstep/#see-also","title":"See Also","text":"<p>mix, step, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/smoothstep/README-ua/#smoothstep","title":"smoothstep","text":"<p>\u0412\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043b\u0430\u0432\u043d\u0443 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u044e \u0415\u0440\u043c\u0456\u0442\u0430 \u043c\u0456\u0436 \u0434\u0432\u043e\u043c\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float smoothstep(float edge0, float edge1, float x)  \nvec2 smoothstep(vec2 edge0, vec2 edge1, vec2 x)  \nvec3 smoothstep(vec3 edge0, vec3 edge1, vec3 x)  \nvec4 smoothstep(vec4 edge0, vec4 edge1, vec4 x)\n\nvec2 smoothstep(float edge0, float edge1, vec2 x)  \nvec3 smoothstep(float edge0, float edge1, vec3 x)  \nvec4 smoothstep(float edge0, float edge1, vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/smoothstep/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>edge0</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043d\u0438\u0436\u043d\u044c\u043e\u0433\u043e \u043a\u0440\u0430\u044e \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0415\u0440\u043c\u0456\u0442\u0430.</p> <p><code>edge1</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u0433\u043e \u043a\u0440\u0430\u044e \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0415\u0440\u043c\u0456\u0442\u0430.</p> <p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u0457.</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>smoothstep()</code> \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u043f\u043b\u0430\u0432\u043d\u0443 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u044e \u0415\u0440\u043c\u0456\u0442\u0430 \u043c\u0456\u0436 <code>0</code> \u0456 <code>1</code>, \u043a\u043e\u043b\u0438 <code>edge0 &lt; x &lt; edge1</code>. \u0426\u0435 \u043a\u043e\u0440\u0438\u0441\u043d\u043e \u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0430\u0445, \u043a\u043e\u043b\u0438 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0430 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0437 \u043f\u043b\u0430\u0432\u043d\u0438\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u043c. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 <code>smoothstep()</code> \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0438\u0439 \u0434\u043e:</p> <pre><code>    genType t;  /* Or genDType t; */\n    t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043e, \u044f\u043a\u0449\u043e <code>edge0 \u2265 edge1</code>.</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mix, step, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/smoothstep/README-vi/#smoothstep","title":"Smoothstep","text":"<p>Th\u1ef1c hi\u1ec7n ph\u00e9p n\u1ed9i suy Hermitte gi\u1eefa 0 v\u00e0 1 theo t\u1ec9 l\u1ec7.</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float smoothstep(float edge0, float edge1, float x)  \nvec2 smoothstep(vec2 edge0, vec2 edge1, vec2 x)  \nvec3 smoothstep(vec3 edge0, vec3 edge1, vec3 x)  \nvec4 smoothstep(vec4 edge0, vec4 edge1, vec4 x)\n\nvec2 smoothstep(float edge0, float edge1, vec2 x)  \nvec3 smoothstep(float edge0, float edge1, vec3 x)  \nvec4 smoothstep(float edge0, float edge1, vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/smoothstep/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>edge0</code> c\u1eadn d\u01b0\u1edbi tr\u00ean tr\u1ee5c ho\u00e0nh c\u1ee7a h\u00e0m Hermitte</p> <p><code>edge1</code> c\u1eadn tr\u00ean tr\u00ean tr\u1ee5c ho\u00e0nh c\u1ee7a h\u00e0m Hermitte</p> <p><code>x</code> gi\u00e1 tr\u1ecb tr\u00ean tr\u1ee5c ho\u00e0nh</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>smoothstep()</code> th\u1ef1c hi\u1ec7n ph\u00e9p n\u1ed9i suy gi\u1eefa <code>0</code> v\u00e0 <code>1</code> n\u1ebfu <code>edge0 &lt; x &lt; edge1</code>. N\u1ebfu <code>x &lt; edge0</code> th\u00ec tr\u1ea3 v\u1ec1 <code>0</code>, c\u00f2n n\u1ebfu <code>x &gt; edge1</code> th\u00ec tr\u1ea3 v\u1ec1 <code>1</code>. H\u00e0m n\u00e0y hay d\u00f9ng khi c\u1ea7n chuy\u1ec3n ti\u1ebfp gi\u1eefa 2 v\u00f9ng m\u00e0 kh\u00f4ng mu\u1ed1n \u0111\u1ed9t ng\u1ed9t thay \u0111\u1ed5i gi\u00e1 tr\u1ecb. H\u00e0m <code>smoothstep()</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi:</p> <pre><code>    genType t;  /* Ho\u1eb7c genDType t; */\n    t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n</code></pre> <p>N\u1ebfu <code>edge0 \u2265 edge1</code> th\u00ec k\u1ebft qu\u1ea3 kh\u00f4ng x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c.</p>"},{"location":"Frontend/shader/glossary/smoothstep/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>mix, step, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/sqrt/","title":"Index","text":""},{"location":"Frontend/shader/glossary/sqrt/#sqrt","title":"Sqrt","text":"<p>Return the square root of the parameter</p>"},{"location":"Frontend/shader/glossary/sqrt/#declaration","title":"Declaration","text":"<pre><code>float sqrt(float x)  \nvec2 sqrt(vec2 x)  \nvec3 sqrt(vec3 x)  \nvec4 sqrt(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/sqrt/#parameters","title":"Parameters","text":"<p><code>x</code> specifies the value of which to take the square root.</p>"},{"location":"Frontend/shader/glossary/sqrt/#description","title":"Description","text":"<p><code>sqrt()</code> returns the square root of <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/sqrt/#see-also","title":"See Also","text":"<p>inversesqrt, pow, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/sqrt/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/sqrt/README-ua/#sqrt","title":"sqrt","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u0435\u043d\u044f</p>"},{"location":"Frontend/shader/glossary/sqrt/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float sqrt(float x)  \nvec2 sqrt(vec2 x)  \nvec3 sqrt(vec3 x)  \nvec4 sqrt(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/sqrt/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0437 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0437\u044f\u0442\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0438\u0439 \u043a\u043e\u0440\u0456\u043d\u044c.</p>"},{"location":"Frontend/shader/glossary/sqrt/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>sqrt()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0438\u0439 \u043a\u043e\u0440\u0456\u043d\u044c \u0437 <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/sqrt/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>inversesqrt, pow, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/sqrt/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/sqrt/README-vi/#sqrt","title":"Sqrt","text":"<p>T\u00ednh c\u0103n b\u1eadc hai c\u1ee7a m\u1ed9t s\u1ed1.</p>"},{"location":"Frontend/shader/glossary/sqrt/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float sqrt(float x)  \nvec2 sqrt(vec2 x)  \nvec3 sqrt(vec3 x)  \nvec4 sqrt(vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/sqrt/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>x</code> S\u1ed1 c\u1ea7n t\u00ednh c\u0103n b\u1eadc 2.</p>"},{"location":"Frontend/shader/glossary/sqrt/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>sqrt()</code> tr\u1ea3 v\u1ec1 c\u0103n b\u1eadc 2 c\u1ee7a <code>x</code>.</p>"},{"location":"Frontend/shader/glossary/sqrt/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>inversesqrt, pow, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/step/","title":"Index","text":""},{"location":"Frontend/shader/glossary/step/#step","title":"Step","text":"<p>Generate a step function by comparing two values</p>"},{"location":"Frontend/shader/glossary/step/#declaration","title":"Declaration","text":"<pre><code>float step(float edge, float x)  \nvec2 step(vec2 edge, vec2 x)  \nvec3 step(vec3 edge, vec3 x)  \nvec4 step(vec4 edge, vec4 x)\n\nvec2 step(float edge, vec2 x)  \nvec3 step(float edge, vec3 x)  \nvec4 step(float edge, vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/step/#parameters","title":"Parameters","text":"<p><code>edge</code> specifies the location of the edge of the step function.</p> <p><code>x</code> specifies the value to be used to generate the step function.</p>"},{"location":"Frontend/shader/glossary/step/#description","title":"Description","text":"<p><code>step()</code> generates a step function by comparing <code>x</code> to <code>edge</code>.</p> <p>For element <code>i</code> of the return value, <code>0.0</code> is returned <code>if x[i] &lt; edge[i]</code>, and <code>1.0</code> is returned otherwise.</p>"},{"location":"Frontend/shader/glossary/step/#see-also","title":"See Also","text":"<p>mix, smoothstep, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/step/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/step/README-ua/#step","title":"step","text":"<p>\u0413\u0435\u043d\u0435\u0440\u0443\u0454 \u0441\u0445\u0456\u0434\u0447\u0430\u0441\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u044e, \u043f\u043e\u0440\u0456\u0432\u043d\u044e\u044e\u0447\u0438 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f</p>"},{"location":"Frontend/shader/glossary/step/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float step(float edge, float x)  \nvec2 step(vec2 edge, vec2 x)  \nvec3 step(vec3 edge, vec3 x)  \nvec4 step(vec4 edge, vec4 x)\n\nvec2 step(float edge, vec2 x)  \nvec3 step(float edge, vec3 x)  \nvec4 step(float edge, vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/step/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>edge</code> \u2014 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f.</p> <p><code>x</code> \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0456\u0457 \u0441\u0445\u0456\u0434\u0447\u0430\u0441\u0442\u043e\u0457 \u0444\u0443\u043d\u043a\u0446\u0456\u0457.</p>"},{"location":"Frontend/shader/glossary/step/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>step()</code> \u0433\u0435\u043d\u0435\u0440\u0443\u0454 \u0441\u0445\u0456\u0434\u0447\u0430\u0441\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u044e \u0448\u043b\u044f\u0445\u043e\u043c \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f <code>x</code> \u0456\u0437 <code>edge</code>.</p> <p>\u042f\u043a\u0449\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f <code>x</code> \u043c\u0435\u043d\u0448\u0435 \u0437\u0430 <code>edge</code>, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 <code>0.0</code>, \u0456\u043d\u0430\u043a\u0448\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454\u0442\u044c\u0441\u044f <code>1.0</code>.</p>"},{"location":"Frontend/shader/glossary/step/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>mix, smoothstep, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/step/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/step/README-vi/#step","title":"Step","text":"<p>Ki\u1ec3m tra m\u1ed9t bi\u1ebfn c\u00f3 nh\u1ecf h\u01a1n ng\u01b0\u1ee1ng nh\u1ea5t \u0111\u1ecbnh kh\u00f4ng.</p>"},{"location":"Frontend/shader/glossary/step/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float step(float edge, float x)  \nvec2 step(vec2 edge, vec2 x)  \nvec3 step(vec3 edge, vec3 x)  \nvec4 step(vec4 edge, vec4 x)\n\nvec2 step(float edge, vec2 x)  \nvec3 step(float edge, vec3 x)  \nvec4 step(float edge, vec4 x)\n</code></pre>"},{"location":"Frontend/shader/glossary/step/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>edge</code> ng\u01b0\u1ee1ng c\u1eadn bi\u00ean.</p> <p><code>x</code> gi\u00e1 tr\u1ecb c\u1ea7n ki\u1ec3m tra xem c\u00f3 n\u1eb1m trong ng\u01b0\u1ee1ng c\u1eadn bi\u00ean kh\u00f4ng.</p>"},{"location":"Frontend/shader/glossary/step/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>step()</code> so s\u00e1nh <code>x</code> v\u1edbi <code>edge</code>.</p> <p>V\u1edbi m\u1ed7i th\u00e0nh ph\u1ea7n th\u1ee9 <code>i</code> trong vector k\u1ebft qu\u1ea3, n\u00f3 s\u1ebd nh\u1eadn gi\u00e1 tr\u1ecb <code>0.0</code> n\u1ebfu <code>x[i] &lt; edge[i]</code>, v\u00e0 ng\u01b0\u1ee3c l\u1ea1i nh\u1eadn gi\u00e1 tr\u1ecb <code>1.0</code>.</p>"},{"location":"Frontend/shader/glossary/step/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>mix, smoothstep, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/struct/","title":"Index","text":""},{"location":"Frontend/shader/glossary/struct/#struct","title":"Struct","text":"<p>Structure variable type</p>"},{"location":"Frontend/shader/glossary/struct/#example","title":"Example","text":"<pre><code>struct matStruct {\n    vec4 ambientColor;\n    vec4 diffuseColor;\n    vec4 specularColor;\n    float specularExponent;\n} newMaterial;\n\nnewMaterial = matStruct(vec4(0.1, 0.1, 0.1, 1.0),\n                        vec4(1.0, 0.0, 0.0, 1.0),\n                        vec4(0.7, 0.7, 0.7, 1.0),\n                        50.0);\n</code></pre>"},{"location":"Frontend/shader/glossary/struct/#description","title":"Description","text":"<p><code>struct</code> declares a custom data structure based on standard types. A constructor for the structure with the same name is created automatically. The declaration of a variable (in this case \"newMaterial\") is optional.</p>"},{"location":"Frontend/shader/glossary/struct/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/struct/README-ua/#struct","title":"struct","text":"<p>\u0412\u0438\u0437\u043d\u0430\u0447\u0430\u0454 \u0442\u0438\u043f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044c\u043a\u043e\u0457 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438.</p>"},{"location":"Frontend/shader/glossary/struct/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>struct matStruct {\n    vec4 ambientColor;\n    vec4 diffuseColor;\n    vec4 specularColor;\n    float specularExponent;\n} newMaterialOne, newMaterialTwo; // \u043e\u0434\u043d\u043e\u0447\u0430\u0441\u043d\u0435 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 newMaterialOne \u0442\u0430 newMaterialTwo \u0437 \u0442\u0438\u043f\u043e\u043c matStruct \n\n// \u043f\u0435\u0440\u0435\u0434 \u0437\u043c\u0456\u043d\u043d\u043e\u044e newMaterialOne \u0432\u0436\u0435 \u043d\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u043a\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u0442\u0438\u043f matStruct, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u043e\u043d\u0430 \u0432\u0436\u0435 \u0431\u0443\u043b\u0430 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u0430 \u0440\u0430\u043d\u0456\u0448\u0435\nnewMaterialOne = matStruct(\n    vec4(0.1, 0.1, 0.1, 1.0),\n    vec4(1.0, 0.0, 0.0, 1.0),\n    vec4(0.7, 0.7, 0.7, 1.0),\n    50.0\n);\n\n// matStruct \u0442\u0435\u043f\u0435\u0440 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0443\nmatStruct anotherNewMaterial = matStruct(...);\n\n</code></pre>"},{"location":"Frontend/shader/glossary/struct/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>struct</code> \u043e\u0433\u043e\u043b\u043e\u0448\u0443\u0454 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044c\u043a\u0443 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u0438\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0438\u0445 \u0442\u0438\u043f\u0456\u0432. \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0457 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438 \u0441\u0442\u0432\u043e\u0440\u044e\u0454\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e. \u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457, \u0432 \u0434\u0430\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \"newMaterialOne\", \u0454 \u043d\u0435\u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u0438\u043c, \u044f\u043a\u0449\u043e \u0457\u0457 \u043d\u0430\u0437\u0432\u0430 \u0431\u0443\u043b\u0430 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0430 \u043e\u0434\u0440\u0430\u0437\u0443 \u043f\u0456\u0441\u043b\u044f \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438.</p>"},{"location":"Frontend/shader/glossary/struct/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/struct/README-vi/#struct","title":"Struct","text":"<p>Ki\u1ec3u d\u1eef li\u1ec7u c\u1ea5u tr\u00fac - struct.</p>"},{"location":"Frontend/shader/glossary/struct/README-vi/#vi-du","title":"V\u00ed d\u1ee5","text":"<pre><code>struct matStruct {\n    vec4 ambientColor;\n    vec4 diffuseColor;\n    vec4 specularColor;\n    float specularExponent;\n} newMaterial;\n\nnewMaterial = matStruct(vec4(0.1, 0.1, 0.1, 1.0),\n                        vec4(1.0, 0.0, 0.0, 1.0),\n                        vec4(0.7, 0.7, 0.7, 1.0),\n                        50.0);\n</code></pre>"},{"location":"Frontend/shader/glossary/struct/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>struct</code> l\u00e0 m\u1ed9t ki\u1ec3u d\u1eef li\u1ec7u t\u1ef1 do \u0111\u01b0\u1ee3c t\u1ea1o n\u00ean t\u1eeb c\u00e1c bi\u1ebfn d\u1eef li\u1ec7u c\u00f3 ki\u1ec3u c\u01a1 b\u1ea3n. V\u1edbi m\u1ed7i struct, m\u1ed9t h\u00e0m t\u1ea1o c\u00f9ng t\u00ean s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o t\u1ef1 \u0111\u1ed9ng. Kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb khi d\u00f9ng h\u00e0m t\u1ea1o.</p>"},{"location":"Frontend/shader/glossary/tan/","title":"Index","text":""},{"location":"Frontend/shader/glossary/tan/#tan","title":"Tan","text":"<p>Return the tangent of the parameter</p>"},{"location":"Frontend/shader/glossary/tan/#declaration","title":"Declaration","text":"<pre><code>float tan(float angle)  \nvec2 tan(vec2 angle)  \nvec3 tan(vec3 angle)  \nvec4 tan(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/tan/#parameters","title":"Parameters","text":"<p><code>angle</code> specifies the quantity, in radians, of which to return the tangent.</p>"},{"location":"Frontend/shader/glossary/tan/#description","title":"Description","text":"<p><code>tan()</code> returns the trigonometric tangent of angle.</p>"},{"location":"Frontend/shader/glossary/tan/#see-also","title":"See Also","text":"<p>cos, acos, sin, asin, atan, Chapter 05: Shaping Functions</p>"},{"location":"Frontend/shader/glossary/tan/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/tan/README-ua/#tan","title":"tan","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e\u0433\u043e \u043a\u0443\u0442\u0430</p>"},{"location":"Frontend/shader/glossary/tan/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>float tan(float angle)  \nvec2 tan(vec2 angle)  \nvec3 tan(vec3 angle)  \nvec4 tan(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/tan/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>angle</code> \u2014 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u043a\u0443\u0442\u0430 \u0432 \u0440\u0430\u0434\u0456\u0430\u043d\u0430\u0445, \u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u044f\u043a\u043e\u0433\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438.</p>"},{"location":"Frontend/shader/glossary/tan/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p><code>tan()</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0438\u0439 \u0442\u0430\u043d\u0433\u0435\u043d\u0441 \u043a\u0443\u0442\u0430.</p>"},{"location":"Frontend/shader/glossary/tan/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>cos, acos, sin, asin, atan, \u0420\u043e\u0437\u0434\u0456\u043b 05: \u0424\u043e\u0440\u043c\u043e\u0442\u0432\u043e\u0440\u0447\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457</p>"},{"location":"Frontend/shader/glossary/tan/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/tan/README-vi/#tan","title":"Tan","text":"<p>T\u00ednh tan c\u1ee7a m\u1ed9t g\u00f3c l\u01b0\u1ee3ng gi\u00e1c (\u0111\u01a1n v\u1ecb radian)</p>"},{"location":"Frontend/shader/glossary/tan/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>float tan(float angle)  \nvec2 tan(vec2 angle)  \nvec3 tan(vec3 angle)  \nvec4 tan(vec4 angle)\n</code></pre>"},{"location":"Frontend/shader/glossary/tan/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>angle</code> g\u00f3c c\u1ea7n t\u00ednh tan (\u0111\u01a1n v\u1ecb radian)</p>"},{"location":"Frontend/shader/glossary/tan/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>tan()</code> t\u00ednh tan c\u1ee7a g\u00f3c <code>angle</code></p>"},{"location":"Frontend/shader/glossary/tan/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>cos, acos, sin, asin, atan, C\u00e1c h\u00e0m s\u1ed1 c\u01a1 b\u1ea3n (H\u00e0m h\u00ecnh d\u1ea1ng - Shape function)</p>"},{"location":"Frontend/shader/glossary/texture2D/","title":"Index","text":""},{"location":"Frontend/shader/glossary/texture2D/#texture2d","title":"Texture2D","text":"<p>Retrieves texels from a texture</p>"},{"location":"Frontend/shader/glossary/texture2D/#declaration","title":"Declaration","text":"<pre><code>vec4 texture2D(sampler2D sampler, vec2 coord)  \nvec4 texture2D(sampler2D sampler, vec2 coord, float bias)\n</code></pre>"},{"location":"Frontend/shader/glossary/texture2D/#parameters","title":"Parameters","text":"<p><code>sampler</code> specifies the sampler to which the texture from which texels will be retrieved is bound.</p> <p><code>coord</code> specifies the texture coordinates at which texture will be sampled.</p> <p><code>bias</code> specifies an optional bias to be applied during level-of-detail computation.</p>"},{"location":"Frontend/shader/glossary/texture2D/#description","title":"Description","text":"<p>The texture2D function returns a texel, i.e. the (color) value of the texture for the given coordinates. The function has one input parameter of the type sampler2D and one input parameter of the type <code>vec2</code> : sampler, the uniform the texture is bound to, and coord, the 2-dimensional coordinates of the texel to look up.</p> <p>There is an optional third input parameter of the type float: bias. After calculating the appropriate level of detail for a texture with mipmaps the bias is added before the actual texture lookup operation is executed.</p> <p>Side note: On iOS devices texture lookup functionality is only available in the fragment shader.</p>"},{"location":"Frontend/shader/glossary/texture2D/#see-also","title":"See Also","text":"<p>textureCube</p>"},{"location":"Frontend/shader/glossary/texture2D/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/texture2D/README-ua/#texture2d","title":"texture2D","text":"<p>\u041e\u0442\u0440\u0438\u043c\u0443\u0454 \u0442\u0435\u043a\u0441\u0435\u043b\u0456 (texels) \u0437 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/texture2D/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec4 texture2D(sampler2D sampler, vec2 coord)  \nvec4 texture2D(sampler2D sampler, vec2 coord, float bias)\n</code></pre>"},{"location":"Frontend/shader/glossary/texture2D/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>sampler</code> \u2014 \u0441\u0435\u043c\u043f\u043b\u0435\u0440, \u0434\u043e \u044f\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0432'\u044f\u0437\u0430\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430, \u0437 \u044f\u043a\u043e\u0457 \u0431\u0443\u0434\u0443\u0442\u044c \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u0456 \u0442\u0435\u043a\u0441\u0435\u043b\u0456.</p> <p><code>coord</code> \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438, \u0437\u0430 \u044f\u043a\u0438\u043c\u0438 \u0431\u0443\u0434\u0435 \u0432\u0437\u044f\u0442\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430.</p> <p><code>bias</code> \u2014 \u043d\u0435\u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u0435 \u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u0431\u0443\u0434\u0435 \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u0430\u043d\u043e \u043f\u0456\u0434 \u0447\u0430\u0441 \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0440\u0456\u0432\u043d\u044f \u0434\u0435\u0442\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457.</p>"},{"location":"Frontend/shader/glossary/texture2D/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0456\u044f <code>texture2D</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0435\u043a\u0441\u0435\u043b\u044c, \u0442\u043e\u0431\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f (\u043a\u043e\u043b\u044c\u043e\u0440\u0443) \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442. \u0424\u0443\u043d\u043a\u0446\u0456\u044f \u043c\u0430\u0454 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0442\u0438\u043f\u0443 <code>sampler2D</code> \u0456 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0442\u0438\u043f\u0443 <code>vec2</code>: \u0441\u0435\u043c\u043f\u043b\u0435\u0440, \u0434\u043e \u044f\u043a\u043e\u0457 \u043f\u0440\u0438\u0432'\u044f\u0437\u0430\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430, \u0456 \u0434\u0432\u043e\u0432\u0438\u043c\u0456\u0440\u043d\u0456 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0435\u043b\u044f.</p> <p>\u0406\u0441\u043d\u0443\u0454 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0439 \u0442\u0440\u0435\u0442\u0456\u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0442\u0438\u043f\u0443 <code>float</code>. \u041f\u0456\u0441\u043b\u044f \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f \u0434\u0435\u0442\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0437 MIP-\u043a\u0430\u0440\u0442\u0430\u043c\u0438 \u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u0434\u043e\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f\u043c \u0444\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0457 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u043f\u043e\u0448\u0443\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438.</p> <p>\u0414\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0430 \u043f\u0440\u0438\u043c\u0456\u0442\u043a\u0430: \u043d\u0430 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044f\u0445 iOS \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0448\u0443\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043b\u0438\u0448\u0435 \u0443 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456.</p>"},{"location":"Frontend/shader/glossary/texture2D/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>textureCube</p>"},{"location":"Frontend/shader/glossary/texture2D/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/texture2D/README-vi/#texture2d","title":"Texture2D","text":"<p>L\u1ea5y m\u00e0u c\u1ee7a m\u1ed9t v\u1ecb tr\u00ed b\u1ea5t k\u1ef3 tr\u00ean texture c\u00f3 \u0111\u1ecbnh d\u1ea1ng cube (6 m\u1eb7t c\u1ee7a kh\u1ed1i l\u1eadp ph\u01b0\u01a1ng).</p>"},{"location":"Frontend/shader/glossary/texture2D/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec4 texture2D(sampler2D sampler, vec2 coord)  \nvec4 texture2D(sampler2D sampler, vec2 coord, float bias)\n</code></pre>"},{"location":"Frontend/shader/glossary/texture2D/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>sampler</code> l\u00e0 sampler \u0111\u00e3 kh\u1edfi t\u1ea1o v\u1edbi texture, s\u1ebd gi\u00fap ta l\u1ea5y \u0111\u01b0\u1ee3c m\u00e0u t\u1ea1i t\u1ecda \u0111\u1ed9 mong mu\u1ed1n.</p> <p><code>coord</code> t\u1ecda \u0111\u1ed9 v\u1ecb tr\u00ed c\u1ea7n l\u1ea5y m\u00e0u tr\u00ean texture.</p> <p><code>bias</code> sai s\u1ed1 cho ph\u00e9p n\u1ebfu \u00e1p d\u1ee5ng c\u01a1 ch\u1ebf Level-Of-Detail.</p>"},{"location":"Frontend/shader/glossary/texture2D/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>K\u1ebft qu\u1ea3 c\u1ee7a h\u00e0m l\u00e0 1 texel, t\u1ee9c m\u00e0u t\u1ea1i v\u1ecb tr\u00ed ch\u1ec9 \u0111\u1ecbnh tr\u00ean texture. </p> <p>Tham s\u1ed1 th\u1ee9 ba kh\u00f4ng b\u1eaft bu\u1ed9c. Sau khi t\u00ednh to\u00e1n xong Level-Of-Detail ph\u00f9 h\u1ee3p d\u1ef1a tr\u00ean c\u00e1c c\u1ea5p mipmap, <code>bias</code> s\u1ebd \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 t\u00ecm t\u1ecda \u0111\u1ed9 tr\u00ean texture.</p> <p>Ch\u00fa \u00fd: Tr\u00ean c\u00e1c thi\u1ebft b\u1ecb iOS, h\u00e0m n\u00e0y ch\u1ec9 c\u00f3 th\u1ec3 d\u00f9ng trong fragment shader.</p>"},{"location":"Frontend/shader/glossary/texture2D/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>textureCube</p>"},{"location":"Frontend/shader/glossary/textureCube/","title":"Index","text":""},{"location":"Frontend/shader/glossary/textureCube/#texturecube","title":"TextureCube","text":"<p>Retrieves texels from a texture</p>"},{"location":"Frontend/shader/glossary/textureCube/#declaration","title":"Declaration","text":"<pre><code>vec4 textureCube(samplerCube sampler, vec3 coord)  \nvec4 textureCube(samplerCube sampler, vec3 coord, float bias)\n</code></pre>"},{"location":"Frontend/shader/glossary/textureCube/#parameters","title":"Parameters","text":"<p><code>sampler</code> specifies the sampler to which the texture from which texels will be retrieved is bound.</p> <p><code>coord</code> specifies the texture coordinates at which texture will be sampled.</p> <p><code>bias</code> specifies an optional bias to be applied during level-of-detail computation.</p>"},{"location":"Frontend/shader/glossary/textureCube/#description","title":"Description","text":"<p>The textureCube function returns a texel, i.e. the (color) value of the texture for the given coordinates. The function has one input parameter of the type samplerCube and one input parameter of the type vec3 : sampler, the uniform the texture is bound to, and coord, the 3-dimensional coordinates of the texel to look up.</p> <p>There is an optional third input parameter of the type float: bias. After calculating the appropriate level of detail for a texture with mipmaps the bias is added before the actual texture lookup operation is executed.</p> <p>Side note: On iOS devices texture lookup functionality is only available in the fragment shader.</p>"},{"location":"Frontend/shader/glossary/textureCube/#see-also","title":"See Also","text":"<p>texture2D</p>"},{"location":"Frontend/shader/glossary/textureCube/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/textureCube/README-ua/#texturecube","title":"textureCube","text":"<p>\u041e\u0442\u0440\u0438\u043c\u0443\u0454 \u0442\u0435\u043a\u0441\u0435\u043b\u0456 (texels) \u0437 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438</p>"},{"location":"Frontend/shader/glossary/textureCube/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec4 textureCube(samplerCube sampler, vec3 coord)  \nvec4 textureCube(samplerCube sampler, vec3 coord, float bias)\n</code></pre>"},{"location":"Frontend/shader/glossary/textureCube/README-ua/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438","text":"<p><code>sampler</code> \u2014 \u0441\u0435\u043c\u043f\u043b\u0435\u0440, \u0434\u043e \u044f\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0432'\u044f\u0437\u0430\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430, \u0437 \u044f\u043a\u043e\u0457 \u0431\u0443\u0434\u0443\u0442\u044c \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u0456 \u0442\u0435\u043a\u0441\u0435\u043b\u0456.</p> <p><code>coord</code> \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438, \u0437\u0430 \u044f\u043a\u0438\u043c\u0438 \u0431\u0443\u0434\u0435 \u0432\u0437\u044f\u0442\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430.</p> <p><code>bias</code> \u2014 \u043d\u0435\u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u0435 \u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f, \u044f\u043a\u0435 \u0431\u0443\u0434\u0435 \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u0430\u043d\u043e \u043f\u0456\u0434 \u0447\u0430\u0441 \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0440\u0456\u0432\u043d\u044f \u0434\u0435\u0442\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457.</p>"},{"location":"Frontend/shader/glossary/textureCube/README-ua/#_3","title":"\u041e\u043f\u0438\u0441","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0456\u044f <code>textureCube</code> \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0435\u043a\u0441\u0435\u043b\u044c, \u0442\u043e\u0431\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f (\u043a\u043e\u043b\u044c\u043e\u0440\u0443) \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442. \u0424\u0443\u043d\u043a\u0446\u0456\u044f \u043c\u0430\u0454 \u043f\u0435\u0440\u0448\u0438\u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0442\u0438\u043f\u0443 <code>samplerCube</code> \u0456 \u0434\u0440\u0443\u0433\u0438\u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0442\u0438\u043f\u0443 <code>vec3</code>: \u0441\u0435\u043c\u043f\u043b\u0435\u0440, \u0434\u043e \u044f\u043a\u043e\u0457 \u043f\u0440\u0438\u0432'\u044f\u0437\u0430\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430, \u0456 \u0442\u0440\u0438\u0432\u0438\u043c\u0456\u0440\u043d\u0456 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0435\u043b\u044f.</p> <p>\u0406\u0441\u043d\u0443\u0454 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0439 \u0442\u0440\u0435\u0442\u0456\u0439 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0442\u0438\u043f\u0443 <code>float</code>. \u041f\u0456\u0441\u043b\u044f \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f \u0434\u0435\u0442\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0437 MIP-\u043a\u0430\u0440\u0442\u0430\u043c\u0438 \u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u0434\u043e\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f\u043c \u0444\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0457 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u043f\u043e\u0448\u0443\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438.</p> <p>\u0414\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0430 \u043f\u0440\u0438\u043c\u0456\u0442\u043a\u0430: \u043d\u0430 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u044f\u0445 iOS \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0448\u0443\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043b\u0438\u0448\u0435 \u0443 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456.</p>"},{"location":"Frontend/shader/glossary/textureCube/README-ua/#_4","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>texture2D</p>"},{"location":"Frontend/shader/glossary/textureCube/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/textureCube/README-vi/#texturecube","title":"TextureCube","text":"<p>L\u1ea5y m\u00e0u c\u1ee7a m\u1ed9t v\u1ecb tr\u00ed b\u1ea5t k\u1ef3 tr\u00ean texture c\u00f3 \u0111\u1ecbnh d\u1ea1ng cube (6 m\u1eb7t c\u1ee7a kh\u1ed1i l\u1eadp ph\u01b0\u01a1ng).</p>"},{"location":"Frontend/shader/glossary/textureCube/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec4 textureCube(samplerCube sampler, vec3 coord)  \nvec4 textureCube(samplerCube sampler, vec3 coord, float bias)\n</code></pre>"},{"location":"Frontend/shader/glossary/textureCube/README-vi/#cac-tham-so","title":"C\u00e1c tham s\u1ed1","text":"<p><code>sampler</code> l\u00e0 sampler \u0111\u00e3 kh\u1edfi t\u1ea1o v\u1edbi texture, s\u1ebd gi\u00fap ta l\u1ea5y \u0111\u01b0\u1ee3c m\u00e0u t\u1ea1i t\u1ecda \u0111\u1ed9 mong mu\u1ed1n.</p> <p><code>coord</code> t\u1ecda \u0111\u1ed9 v\u1ecb tr\u00ed c\u1ea7n l\u1ea5y m\u00e0u tr\u00ean texture.</p> <p><code>bias</code> sai s\u1ed1 cho ph\u00e9p n\u1ebfu \u00e1p d\u1ee5ng c\u01a1 ch\u1ebf Level-Of-Detail.</p>"},{"location":"Frontend/shader/glossary/textureCube/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>K\u1ebft qu\u1ea3 c\u1ee7a h\u00e0m l\u00e0 1 texel, t\u1ee9c m\u00e0u t\u1ea1i v\u1ecb tr\u00ed ch\u1ec9 \u0111\u1ecbnh tr\u00ean texture. </p> <p>Tham s\u1ed1 th\u1ee9 ba kh\u00f4ng b\u1eaft bu\u1ed9c. Sau khi t\u00ednh to\u00e1n xong Level-Of-Detail ph\u00f9 h\u1ee3p d\u1ef1a tr\u00ean c\u00e1c c\u1ea5p mipmap, <code>bias</code> s\u1ebd \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 t\u00ecm t\u1ecda \u0111\u1ed9 tr\u00ean texture.</p> <p>Ch\u00fa \u00fd: Tr\u00ean c\u00e1c thi\u1ebft b\u1ecb iOS, h\u00e0m n\u00e0y ch\u1ec9 c\u00f3 th\u1ec3 d\u00f9ng trong fragment shader.</p>"},{"location":"Frontend/shader/glossary/textureCube/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>texture2D</p>"},{"location":"Frontend/shader/glossary/uniform/","title":"Index","text":""},{"location":"Frontend/shader/glossary/uniform/#uniform","title":"Uniform","text":"<p>Uniform variable qualifier.</p>"},{"location":"Frontend/shader/glossary/uniform/#example","title":"Example","text":"<pre><code>uniform vec4 direction;\n</code></pre>"},{"location":"Frontend/shader/glossary/uniform/#description","title":"Description","text":"<p><code>uniform</code> variables contain read-only data shared from WebGL/OpenGL environment to a vertex or fragment shader.</p> <p>The value is per primitive, so is useful for variables which remain constant along a primitive, frame or scene.</p>"},{"location":"Frontend/shader/glossary/uniform/#see-also","title":"See Also","text":"<p>attribute, const, varying, Chapter 03: Uniforms</p>"},{"location":"Frontend/shader/glossary/uniform/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/uniform/README-ua/#uniform","title":"uniform","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0443\u043d\u0456\u0444\u0456\u043a\u043e\u0432\u0430\u043d\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457.</p>"},{"location":"Frontend/shader/glossary/uniform/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>uniform vec4 direction;\n</code></pre>"},{"location":"Frontend/shader/glossary/uniform/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>uniform</code>-\u0437\u043c\u0456\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u044f\u0442\u044c \u0434\u0430\u043d\u0456 \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u043d\u043d\u044f, \u044f\u043a\u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0456\u0437 \u0441\u0435\u0440\u0435\u0434\u043e\u0432\u0438\u0449\u0430 WebGL/OpenGL \u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u0438\u0439 \u0430\u0431\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u0438\u0439 \u0448\u0435\u0439\u0434\u0435\u0440.</p> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043d\u0430 \u0440\u0456\u0432\u043d\u0456 \u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u0456\u0432, \u0442\u043e\u043c\u0443 \u0432\u043e\u043d\u0438 \u043a\u043e\u0440\u0438\u0441\u043d\u0456 \u0434\u043b\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445, \u044f\u043a\u0456 \u0437\u0430\u043b\u0438\u0448\u0430\u044e\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u0442\u0456\u0439\u043d\u0438\u043c\u0438 \u0432\u0437\u0434\u043e\u0432\u0436 \u043f\u0440\u0438\u043c\u0456\u0442\u0438\u0432\u0430, \u043a\u0430\u0434\u0440\u0443 \u0430\u0431\u043e \u0441\u0446\u0435\u043d\u0438.</p>"},{"location":"Frontend/shader/glossary/uniform/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>attribute, const, varying, \u0420\u043e\u0437\u0434\u0456\u043b 03: Uniforms</p>"},{"location":"Frontend/shader/glossary/uniform/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/uniform/README-vi/#uniform","title":"Uniform","text":"<p>Qualifier \u0111\u00e1nh d\u1ea5u bi\u1ebfn ch\u1ee9a d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb CPU sang GPU.</p>"},{"location":"Frontend/shader/glossary/uniform/README-vi/#vi-du","title":"V\u00ed d\u1ee5","text":"<pre><code>uniform vec4 direction;\n</code></pre>"},{"location":"Frontend/shader/glossary/uniform/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p>C\u00e1c bi\u1ebfn <code>uniform</code> \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb CPU sang c\u1ea3 2 ch\u01b0\u01a1ng tr\u00ecnh vertex shader v\u00e0 fragment shader ch\u1ea1y tr\u00ean GPU. Gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c bi\u1ebfn n\u00e0y kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i.</p> <p>The value is per primitive, so is useful for variables which remain constant along a primitive, frame or scene.</p>"},{"location":"Frontend/shader/glossary/uniform/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>attribute, const, varying, Ch\u01b0\u01a1ng 03: Uniform</p>"},{"location":"Frontend/shader/glossary/varying/","title":"Index","text":""},{"location":"Frontend/shader/glossary/varying/#varying","title":"Varying","text":"<p>Varying variable qualifier.</p>"},{"location":"Frontend/shader/glossary/varying/#example","title":"Example","text":"<pre><code>varying vec3 position;\n</code></pre>"},{"location":"Frontend/shader/glossary/varying/#description","title":"Description","text":"<p><code>varying</code> variables contain data shared from a vertex shader to a fragment shader.</p> <p>The variable must be written in the vertex shader and the read-only value in the fragment shader is then interpolated from the vertices which make up the fragment.</p>"},{"location":"Frontend/shader/glossary/varying/#see-also","title":"See Also","text":"<p>attribute, const, uniform, Chapter 03: Uniforms</p>"},{"location":"Frontend/shader/glossary/varying/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/varying/README-ua/#varying","title":"varying","text":"<p>\u041a\u0432\u0430\u043b\u0456\u0444\u0456\u043a\u0430\u0442\u043e\u0440 varying \u0437\u043c\u0456\u043d\u043d\u043e\u0457.</p>"},{"location":"Frontend/shader/glossary/varying/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>varying vec3 position;\n</code></pre>"},{"location":"Frontend/shader/glossary/varying/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>varying</code>-\u0437\u043c\u0456\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u044f\u0442\u044c \u0434\u0430\u043d\u0456, \u044f\u043a\u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0448\u0435\u0439\u0434\u0435\u0440\u0430 \u0443 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u0438\u0439.</p> <p>\u0417\u043c\u0456\u043d\u043d\u0430 \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u0430 \u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456. \u0423 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0435\u0439\u0434\u0435\u0440\u0456 \u0457\u0457 \u0434\u0430\u043d\u0456 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0456 \u043b\u0438\u0448\u0435 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u043d\u043d\u044f \u0456 \u0454 \u0456\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0456\u0454\u044e \u0437 \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u043a\u0456 \u0441\u043a\u043b\u0430\u0434\u0430\u044e\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442.</p>"},{"location":"Frontend/shader/glossary/varying/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>attribute, const, uniform, \u0420\u043e\u0437\u0434\u0456\u043b 03: Uniforms</p>"},{"location":"Frontend/shader/glossary/varying/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/varying/README-vi/#varying","title":"Varying","text":"<p>Qualifier \u0111\u00e1nh d\u1ea5u bi\u1ebfn ch\u1ee9a d\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c vertex shader x\u1eed l\u00fd v\u00e0 chuy\u1ec3n ti\u1ebfp sang cho fragment shader x\u1eed l\u00fd ti\u1ebfp.</p>"},{"location":"Frontend/shader/glossary/varying/README-vi/#vi-du","title":"V\u00ed d\u1ee5","text":"<pre><code>varying vec3 position;\n</code></pre>"},{"location":"Frontend/shader/glossary/varying/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>varying</code> \u0111\u00e1nh d\u1ea5u bi\u1ebfn ch\u1ee9a d\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c vertex shader x\u1eed l\u00fd v\u00e0 chuy\u1ec3n ti\u1ebfp sang cho fragment shader x\u1eed l\u00fd ti\u1ebfp.</p> <p>Bi\u1ebfn n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda b\u1edfi vertex shader, nh\u01b0ng ph\u1ea3i l\u00e0 bi\u1ebfn read-only \u0111\u1ed1i v\u1edbi fragment shader.</p>"},{"location":"Frontend/shader/glossary/varying/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>attribute, const, uniform, Ch\u01b0\u01a1ng 03: Uniform</p>"},{"location":"Frontend/shader/glossary/vec2/","title":"Index","text":""},{"location":"Frontend/shader/glossary/vec2/#vec2","title":"Vec2","text":"<p>2 dimensional floating point vector</p>"},{"location":"Frontend/shader/glossary/vec2/#declaration","title":"Declaration","text":"<pre><code>vec2 aVec2 = vec2(1.0, 1.0);\nvec2 bVec2 = vec2(1.0);\n\nvec2 cVec2 = vec2(aVec3);\nvec2 dVec2 = vec2(aVec3.x, aVec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec2/#description","title":"Description","text":"<p><code>vec2</code> is a floating point vector with two components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a vector of higher dimension. The respective values are used to initialize the components.</li> </ul>"},{"location":"Frontend/shader/glossary/vec2/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec2/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/vec2/README-ua/#vec2","title":"vec2","text":"<p>2-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 float-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438</p>"},{"location":"Frontend/shader/glossary/vec2/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec2 aVec2 = vec2(1.0, 1.0);\nvec2 bVec2 = vec2(1.0);\n\nvec2 cVec2 = vec2(aVec3);\nvec2 dVec2 = vec2(aVec3.x, aVec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec2/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>vec2</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0434\u0432\u043e\u043c\u0430 float-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u043e\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u0449\u043e\u0457 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0434\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u0456 \u0434\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> </ul>"},{"location":"Frontend/shader/glossary/vec2/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec2/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/vec2/README-vi/#vec2","title":"Vec2","text":"<p>Vector s\u1ed1 nguy\u00ean 2 chi\u1ec1u.</p>"},{"location":"Frontend/shader/glossary/vec2/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec2 aVec2 = vec2(1.0, 1.0);\nvec2 bVec2 = vec2(1.0);\n\nvec2 cVec2 = vec2(aVec3);\nvec2 dVec2 = vec2(aVec3.x, aVec3.y);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec2/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>vec2</code> vector s\u1ed1 nguy\u00ean g\u1ed3m 2 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 2 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb 1 vector nhi\u1ec1u chi\u1ec1u h\u01a1n. C\u00e1c th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o theo th\u1ee9 t\u1ef1.</p>"},{"location":"Frontend/shader/glossary/vec2/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec3/","title":"Index","text":""},{"location":"Frontend/shader/glossary/vec3/#vec3","title":"Vec3","text":"<p>3 dimensional floating point vector</p>"},{"location":"Frontend/shader/glossary/vec3/#declaration","title":"Declaration","text":"<pre><code>vec3 aVec3 = vec3(1.0, 1.0, 1.0);\nvec3 bVec3 = vec3(1.0);\n\nvec3 cVec3 = vec3(aVec4);\nvec3 dVec3 = vec3(aVec4.x, aVec4.y, aVec4.z);\n\nvec3 eVec3 = vec3(aVec2, aFloat);\nvec3 fVec3 = vec3(aVec2.x, aVec2.y, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec3/#description","title":"Description","text":"<p><code>vec3</code> is a floating point vector with three components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a vector of higher dimension. The respective values are used to initialize the components.</li> <li>Providing a combination of vectors and/or scalars. The respective values are used to initialize the vector. The arguments of the constructor must have at least as many components as the vector that is initialized.</li> </ul>"},{"location":"Frontend/shader/glossary/vec3/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec3/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/vec3/README-ua/#vec3","title":"vec3","text":"<p>3-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 float-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438</p>"},{"location":"Frontend/shader/glossary/vec3/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec3 aVec3 = vec3(1.0, 1.0, 1.0);\nvec3 bVec3 = vec3(1.0);\n\nvec3 cVec3 = vec3(aVec4);\nvec3 dVec3 = vec3(aVec4.x, aVec4.y, aVec4.z);\n\nvec3 eVec3 = vec3(aVec2, aFloat);\nvec3 fVec3 = vec3(aVec2.x, aVec2.y, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec3/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>vec3</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0442\u0440\u044c\u043e\u043c\u0430 float-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u0449\u043e\u0457 \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0434\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u0456 \u0434\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0442\u0430/\u0430\u0431\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432. \u0414\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</li> </ul>"},{"location":"Frontend/shader/glossary/vec3/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec3/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/vec3/README-vi/#vec3","title":"Vec3","text":"<p>Vector s\u1ed1 th\u1ef1c 3 chi\u1ec1u.</p>"},{"location":"Frontend/shader/glossary/vec3/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec3 aVec3 = vec3(1.0, 1.0, 1.0);\nvec3 bVec3 = vec3(1.0);\n\nvec3 cVec3 = vec3(aVec4);\nvec3 dVec3 = vec3(aVec4.x, aVec4.y, aVec4.z);\n\nvec3 eVec3 = vec3(aVec2, aFloat);\nvec3 fVec3 = vec3(aVec2.x, aVec2.y, aFloat);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec3/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>vec3</code> vector s\u1ed1 th\u1ef1c g\u1ed3m 3 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch: - Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n - Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 3 th\u00e0nh ph\u1ea7n - L\u1ea5y gi\u00e1 tr\u1ecb t\u1eeb 1 vector nhi\u1ec1u chi\u1ec1u h\u01a1n. C\u00e1c th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o theo th\u1ee9 t\u1ef1. - L\u1ea5y gi\u00e1 tr\u1ecb theo th\u1ee9 t\u1ef1 l\u1ea7n l\u01b0\u1ee3t t\u1eeb nhi\u1ec1u vector, mi\u1ec5n l\u00e0 \u0111\u1ee7 3 th\u00e0nh ph\u1ea7n.</p>"},{"location":"Frontend/shader/glossary/vec3/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec4/","title":"Index","text":""},{"location":"Frontend/shader/glossary/vec4/#vec4","title":"Vec4","text":"<p>4 dimensional floating point vector</p>"},{"location":"Frontend/shader/glossary/vec4/#declaration","title":"Declaration","text":"<pre><code>vec4 aVec4 = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 bVec4 = vec4(1.0);\n\nvec4 cVec4 = vec4(aVec2, aFloat, aVec3);\nvec4 dVec4 = vec4(aBvec2.x, aBvec2.y, aFloat, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec4/#description","title":"Description","text":"<p><code>vec4</code> is a floating point vector with four components. It can be initialized by:</p> <ul> <li>Providing a scalar value for each component.</li> <li>Providing one scalar value. This value is used for all components.</li> <li>Providing a combination of vectors and scalars. The respective values are used to initialize the components. The arguments of the constructor must have at least as many components as the vector that is initialized.</li> </ul>"},{"location":"Frontend/shader/glossary/vec4/#see-also","title":"See Also","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec4/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/vec4/README-ua/#vec4","title":"vec4","text":"<p>4-\u0432\u0438\u043c\u0456\u0440\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0456\u0437 float-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438</p>"},{"location":"Frontend/shader/glossary/vec4/README-ua/#_1","title":"\u041e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u043d\u044f","text":"<pre><code>vec4 aVec4 = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 bVec4 = vec4(1.0);\n\nvec4 cVec4 = vec4(aVec2, aFloat, aVec3);\nvec4 dVec4 = vec4(aBvec2.x, aBvec2.y, aFloat, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec4/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>vec4</code> \u2014 \u0432\u0435\u043a\u0442\u043e\u0440 \u0437 \u0447\u043e\u0442\u0438\u0440\u043c\u0430 float-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u0421\u043f\u043e\u0441\u043e\u0431\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457:</p> <ul> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432;</li> <li>\u043d\u0430\u0434\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0456\u0432 \u0442\u0430/\u0430\u0431\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u0456\u0432. \u0414\u043b\u044f \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0439\u043c\u043d\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432\u0435\u043a\u0442\u043e\u0440.</li> </ul>"},{"location":"Frontend/shader/glossary/vec4/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/vec4/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/vec4/README-vi/#vec4","title":"Vec4","text":"<p>Vector s\u1ed1 th\u1ef1c 4 chi\u1ec1u</p>"},{"location":"Frontend/shader/glossary/vec4/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>vec4 aVec4 = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 bVec4 = vec4(1.0);\n\nvec4 cVec4 = vec4(aVec2, aFloat, aVec3);\nvec4 dVec4 = vec4(aBvec2.x, aBvec2.y, aFloat, aBvec3.x);\n</code></pre>"},{"location":"Frontend/shader/glossary/vec4/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>vec4</code> l\u00e0 vector s\u1ed1 th\u1ef1c g\u1ed3m 4 th\u00e0nh ph\u1ea7n. N\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1eb1ng c\u00e1c c\u00e1ch:</p> <ul> <li>Ch\u1ec9 \u0111\u1ecbnh gi\u00e1 tr\u1ecb c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n</li> <li>Ch\u1ec9 \u0111\u1ecbnh 1 gi\u00e1 tr\u1ecb chung cho c\u1ea3 4 th\u00e0nh ph\u1ea7n</li> <li>L\u1ea5y gi\u00e1 tr\u1ecb theo th\u1ee9 t\u1ef1 l\u1ea7n l\u01b0\u1ee3t t\u1eeb nhi\u1ec1u vector, mi\u1ec5n l\u00e0 \u0111\u1ee7 4 th\u00e0nh ph\u1ea7n.</li> </ul>"},{"location":"Frontend/shader/glossary/vec4/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>bool, int, float, bvec2, bvec3, bvec4, ivec2, ivec3, ivec4, vec2, vec3, vec4, mat2, mat3, mat4</p>"},{"location":"Frontend/shader/glossary/void/","title":"Index","text":""},{"location":"Frontend/shader/glossary/void/#void","title":"Void","text":""},{"location":"Frontend/shader/glossary/void/#declaration","title":"Declaration","text":"<pre><code>void main(void);\nint aFunction(void);\nvoid bFunction(float);\n</code></pre>"},{"location":"Frontend/shader/glossary/void/#description","title":"Description","text":"<p><code>void</code> is used when a function has no parameters or when a function does not return a value.</p>"},{"location":"Frontend/shader/glossary/void/#see-also","title":"See Also","text":"<p>void, bool, int, float</p>"},{"location":"Frontend/shader/glossary/void/README-ua/","title":"README ua","text":""},{"location":"Frontend/shader/glossary/void/README-ua/#void","title":"void","text":""},{"location":"Frontend/shader/glossary/void/README-ua/#_1","title":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434","text":"<pre><code>void main(void);\nint aFunction(void);\nvoid bFunction(float);\n</code></pre>"},{"location":"Frontend/shader/glossary/void/README-ua/#_2","title":"\u041e\u043f\u0438\u0441","text":"<p><code>void</code> \u2014 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0431\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432 \u0430\u0431\u043e \u043a\u043e\u043b\u0438 \u0432\u043e\u043d\u0430 \u043d\u0435 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f.</p>"},{"location":"Frontend/shader/glossary/void/README-ua/#_3","title":"\u0414\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0436","text":"<p>void, bool, int, float</p>"},{"location":"Frontend/shader/glossary/void/README-vi/","title":"README vi","text":""},{"location":"Frontend/shader/glossary/void/README-vi/#void","title":"Void","text":""},{"location":"Frontend/shader/glossary/void/README-vi/#cac-phien-ban","title":"C\u00e1c phi\u00ean b\u1ea3n","text":"<pre><code>void main(void);\nint aFunction(void);\nvoid bFunction(float);\n</code></pre>"},{"location":"Frontend/shader/glossary/void/README-vi/#mo-ta","title":"M\u00f4 t\u1ea3","text":"<p><code>void</code> is used when a function has no parameters or when a function does not return a value.</p>"},{"location":"Frontend/shader/glossary/void/README-vi/#tham-khao-them","title":"Tham kh\u1ea3o th\u00eam","text":"<p>void, bool, int, float</p>"},{"location":"Frontend/shader/motionToolKit/SHORT_SUMMARY/","title":"SHORT SUMMARY","text":"<p>kynd Sep 9, 2016</p> <p>Designing motion in a fragment shader is not straight forward and can be a bit tedious since it is not an animation tool after all. Here are some convenient tools and examples for controlling easing and timing, drawing shapes, and combining all these to create a nice sequence of motion. The first five examples introduce many useful functions that you can use as building blocks for your design. Following examples demonstrate how you can combine these tool to design complex animations.</p>"},{"location":"Frontend/shader/motionToolKit/SUMMARY/","title":"SUMMARY","text":"<p>kynd Sep 9, 2016</p> <p>Designing motion in a fragment shader is not straight forward and can be a bit tedious since it is not an animation tool after all. Here are some convenient tools and examples for controlling easing and timing, drawing shapes, and combining all these to create a nice sequence of motion. The first five examples introduce many useful functions that you can use as building blocks for your design. Following examples demonstrate how you can combine these tool to design complex animations.</p> <p>Exercises:</p> <ul> <li> <p>Can you draw different waves using different easing functions, then animate circles following the waves?</p> </li> <li> <p>Animate two circles. Can you express difference between different materials through motion? How a metal ball and a plastic ball behave differently?</p> </li> <li> <p>Design your character (an animal, monster, spaceship, etc.) by combining shapes and animate it.</p> </li> <li> <p>Speed up or down your character animation. Can you make it five times faster or slower than the original?</p> </li> <li> <p>Add a new scene to the \"wipes\" example. How can you make it easy so that you don't have to adjust the timing of all subsequent parts manually?</p> </li> <li> <p>The examples here are not necessarily optimized, especially the last one. Try reducing the number of calculation as much as possible. Many functions are running even when the elements they draw are not on-screen. How can you avoid this?</p> </li> </ul>"},{"location":"Frontend/shader/motionToolKit/TITLE/","title":"MotionToolKit","text":""},{"location":"Frontend/shader/proceduralTexture/SUMMARY/","title":"SUMMARY","text":"<p>kynd Nov 20, 2016</p> <p>Shaders are often used to create realistic surfaces of natural or artificial material such as wood, marble, granite, metal, stone, etc. without using photographs or pre-rendered images. Here are demonstrations of some basic techniques. All the examples are based on a number of random and noise functions from Random, Noise, Cellular Noise and Fractal Brownian Motion chapters. Once you get the basic ideas, try tweaking and adding more details to make them more realistic, coming up with new textures and optimizing the performance.</p> <p>Note that the terrain examples at the bottom use normal map and lighting which are techniques not yet introduced in this book. In short, what they do is to generate a map of the directions of the surface and shade the pixels accordingly. We will cover these ideas in future chapters. Stay tuned.</p>"},{"location":"Frontend/shader/proceduralTexture/TITLE/","title":"Procedural Textures","text":""},{"location":"Frontend/vue/Upgrade_Vue2_To_Vue3/","title":"Vue2\u5347\u7ea7Vue3","text":"<ul> <li> <p>\u5b89\u88c5\uff1a</p> </li> <li> <p><code>npm install -g @vue/cli</code></p> </li> <li></li> <li> <p>\u521b\u5efa\uff1a</p> </li> <li> <p><code>vue create projectname</code></p> </li> <li> <p>\u914d\u7f6e\uff1a</p> </li> <li> <p>1\uff0ci18n</p> <ul> <li> <p><code>npm install vue-i18n@next --save-dev</code></p> </li> <li> <p>main.js\u4e2d\u5f15\u5165\uff1a</p> </li> <li> <p><code>import {createI18n} from \"vue-i18n\";     const i18n = createI18n({         locale: 'zh-CN',         messages: message //\u5b9a\u4e49\u597d\u7684message     })</code></p> </li> </ul> </li> <li> <p>2\uff0cVuex\uff1a</p> <ul> <li> <p><code>npm install vuex@next --save-dev</code></p> </li> <li> <p>\u5728index\u4e2d\u5b9a\u4e49\uff1a</p> </li> <li> <p><code>import Vuex from 'vuex'   const store = Vuex.createStore({     state : {       isPhone : true,       noticeMessage : null     }   })   export default store;</code></p> </li> </ul> </li> <li> <p>3\uff0c\u521b\u5efaapp\uff1a</p> </li> <li> <p><code>const app = createApp(App)     app.use(i18n)     app.mount('#app')</code></p> </li> <li></li> </ul>"},{"location":"Marks/quick_sort_Time/","title":"\u5feb\u901f\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790","text":""},{"location":"Marks/quick_sort_Time/#_1","title":"\u5feb\u901f\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li>\u5feb\u901f\u6392\u5e8f\u5c5e\u4e8e\u9012\u5f52\u65b9\u6cd5\uff0c\u6bcf\u8f6e\u9700\u8981\u6307\u5b9a\u4e00\u4e2a<code>pivot</code> (\u4e00\u822c\u9ed8\u8ba4\u5f53\u524d\u7684\u7b2c\u4e00\u4e2a)\uff0c\u4e14\u6570\u7ec4\u7684\u539f\u59cb\u7279\u6027\u76f4\u63a5\u5f71\u54cd\u5feb\u6392\u7684\u6548\u7387\uff0c\u6700\u597d\u60c5\u51b5\u662f\u6bcf\u8f6e<code>pivot</code>\u90fd\u80fd\u5c06\u6570\u7ec4\u5206\u4e3a55\u5f00\u7684\u4e24\u7ec4\u3002</li> </ul>"},{"location":"Marks/quick_sort_Time/#_2","title":"\u5206\u6790","text":"<ul> <li> <p>\u6700\u4f18\u60c5\u51b5\uff1a</p> <p><code>pivot</code> \u6b63\u597d\u4f4d\u4e8e\u4e2d\u95f4.</p> </li> <li> <p>1, \u6bd4\u8f83\u6b21\u6570</p> <p>\u6bcf\u6b21\u90fd55\u5f00\uff0c\u6bcf\u6b21\u90fd\u6bd4\u8f83n\u6b21\uff0c\u5171\u6bd4\u8f83<code>logn</code>\u8f6e\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>nlogn</code></p> </li> <li> <p>2, \u9012\u5f52\u63a8\u5bfc   </p> </li> </ul> <pre><code>    T(n) = 2 T(n/2) + n    //n\u4e3a\u6bcf\u8f6e\u90fd\u9700\u8981\u6bd4\u8f83n\u6b21\n    (1/n) T(n) = (2/n) T(n/2) + 1\n    (2/n) T(n/2) = (4/n) T(n/4) + 1\n    ...\n    (1/2) T(1) = 1 + T(1)\n    \u7d2f\u52a0\uff1a\n    T(n) = O(nlogn)\n</code></pre> <ul> <li>\u6700\u574f\u60c5\u51b5:</li> </ul> <p>\u6570\u7ec4\u5df2\u6392\u5e8f\uff0c\u5219\u4e3a\u6700\u574f\u60c5\u51b5.</p> <ul> <li> <p>1, \u6bd4\u8f83\u6b21\u6570:</p> <p>\u6bcf\u6b21\u90fd\u5206\u4e3a1\u3001n-1\u4e24\u7ec4\uff0c\u6bd4\u8f83\u8f6e\u6570\uff1a(n-1) + (n-2) + ... + 1 ~= pow(n,2), \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\sqrt[n]{2}</p> </li> <li> <p>2, \u63a8\u5bfc\uff1a</p> </li> </ul> <pre><code>    T(n) = T(n-1) + n //\u6bcf\u8f6e\u6bd4\u8f83\u5269\u4f59n\u4e2a\u5143\u7d20\n    T(n-1) = T(n-2) + n-1\n    ...\n    T(2) = T(1) + n-2\n    \u7d2f\u52a0\uff1a\n    T(n) ~= O(pow(n,2))\n</code></pre> <ul> <li>\u5e73\u5747\u60c5\u51b5</li> <li>\u516c\u5f0f\u63a8\u5bfc</li> </ul> <pre><code>    T(n) = T(i) + T(n-i-1)\n    \u5bf9\u4e8e\u5e73\u5747\u60c5\u51b5\uff0cT(i)\u5e94\u8be5\u53bb\u5e73\u5747\u503c\uff0c\u5373\u6240\u6709\u60c5\u51b5\u7684\u5e73\u5747\u503c\uff0c\u5373\uff1a\n    T(i) = (1/n)\n</code></pre> <ul> <li>\u63a8\u5bfc\u8fc7\u7a0b: )</li> </ul>"},{"location":"Marks/quick_sort_Time/#python","title":"\u5feb\u6392python\u4ee3\u7801","text":"<pre><code>def quick(arr, l, r):\n    guard = arr[l]\n    while l &lt; r:\n        while l &lt; r and arr[r] &gt;= guard:\n            r -= 1\n        if l &lt; r:\n            arr[l] = arr[r]\n        while l &lt; r and arr[l] &lt;= guard:\n            l += 1\n        if l &lt; r:\n            arr[r] = arr[l]\n    arr[l] = guard\n    return l\n\ndef part(arr, l, r):\n    if l &lt; r:\n        index = quick(arr, l, r)\n        part(arr, l, index - 1)\n        part(arr, index + 1, r)\n\nnum = [3,1,2,5,4,6,3]\nl = 0\nr = len(num) - 1\npart(num, l, r)\nprint(num)\n</code></pre>"},{"location":"Marks/rotate_arc_svg/","title":"\u65cb\u8f6c\u5706\u73afSVG","text":""},{"location":"Marks/rotate_arc_svg/#svg","title":"\u65cb\u8f6c\u5706\u73afsvg","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;svg width=\"500\" height=\"400\" viewBox=\"0 0 500 400\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n&lt;circle r=\"100\" cx=\"150\" cy=\"150\" stroke-linecap=\"round\"\n          style=\"stroke: #00ff00; fill: none; stroke-width:10px;stroke-dasharray:400 628;stroke-dashoffset:0\" &gt;\n        &lt;animate\n            repeatCount='indefinite'\n            attributeName=\"stroke-dasharray\" \n            dur=\"2s\" \n            values=\"440 628; 300 628; 100 628\" \n            keyTimes=\"0; .5; 1\" \n            calcMode=\"spline\"  \n            keySplines=\".5 0 .5 1; 0 0 1 1\" \n        /&gt;\n        &lt;animateTransform\n            attributeName=\"transform\"\n            begin=\"0s\"\n            dur=\"2s\"\n            type=\"rotate\"\n            values=\"0 150 150; 360 150 150\"\n            repeatCount=\"indefinite\"\n         &gt;&lt;/animateTransform&gt;\n&lt;/circle&gt;\n&lt;circle r=\"60\" cx=\"150\" cy=\"150\" stroke-linecap=\"round\"\n          style=\"stroke: #00ff00; fill: none; stroke-width:10px;stroke-dasharray:263 377;stroke-dashoffset:10\" &gt;\n        &lt;animate\n            repeatCount='indefinite'\n            attributeName=\"stroke-dasharray\" \n            dur=\"2s\" \n            values=\"263 377; 180 377; 50 377\" \n            keyTimes=\"0; .5; 1\" \n            calcMode=\"spline\"  \n            keySplines=\".5 0 .5 1; 0 0 1 1\" \n        /&gt;\n        &lt;animateTransform\n            attributeName=\"transform\"\n            begin=\"0s\"\n            dur=\"2s\"\n            type=\"rotate\"\n            from=\"0 150 150\"\n            to=\"-360 150 150\"\n            repeatCount=\"indefinite\"\n         &gt;&lt;/animateTransform&gt;\n&lt;/circle&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"Nginx/Load_balance/","title":"\u8d1f\u8f7d\u5747\u8861","text":"<ul> <li>windows\u548clinux\u914d\u7f6e\u8d1f\u8f7d\u5747\u8861\u6ca1\u6709\u4e0d\u540c;</li> <li>\u914d\u7f6enginx.conf\u6587\u4ef6\uff0c\u4e3b\u8981\u5728http\u6a21\u5757\uff1a</li> </ul> <pre><code>http {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    #gzip  on;\n    #\u5b9a\u4e49\u8d1f\u8f7d\u670d\u52a1\u5668\u5730\u5740\uff0c\u8d77\u540dmyserser\n    upstream myserver{\n        server 127.0.0.1:8000;\n        server 127.0.0.1:8001;\n    }\n    server {\n        listen       8888;\n        server_name  127.0.0.1;\n        location / {\n            root   html;\n            proxy_pass http://myserver;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n\n</code></pre> <p>\u9700\u8981\u786e\u4fdd\u7aef\u53e38888\u662f\u5f00\u542f\u72b6\u6001\uff1b \u8d1f\u8f7d\u7b56\u7565\u9ed8\u8ba4\u8f6e\u8bad\u65b9\u5f0f\uff0c\u8fd8\u6709ip_hash\u3001\u6743\u91cd\u7b49\u65b9\u5f0f\uff0c\u6309\u9700\u8bbe\u7f6e\u3002</p> <ul> <li>windows\u542f\u52a8nginx\u540e\u7a97\u53e3\u662f\u4e00\u95ea\u800c\u8fc7\uff0c\u9700\u8981\u67e5\u770blog\u786e\u8ba4\u662f\u5426\u6210\u529for\u5931\u8d25\uff1b</li> </ul>"},{"location":"Nginx/NginxOnWindows/","title":"Windows\u5b89\u88c5Nginx","text":""},{"location":"Nginx/NginxOnWindows/#windowsnginx","title":"windows\u4e0b\u914d\u7f6enginx\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u4e5f\u6bd4\u8f83\u70e6\u4eba","text":"<ul> <li>\u4e0b\u8f7dnginx\u5b89\u88c5\u5305\u89e3\u538b\u5230\u672c\u5730\uff0c\u4f1a\u6709\u4e00\u4e2anginx.exe\u542f\u52a8\u7a0b\u5e8f\uff0c\u914d\u7f6e\u6587\u4ef6\u5728conf\u6587\u4ef6\u5939\u5185\uff0c\u914d\u7f6e\u540clinux\uff1b</li> <li>\u53cc\u51fbnginx.exe\u5373\u53ef\u542f\u52a8nginx\uff0c\u7a97\u53e3\u4e00\u95ea\u800c\u8fc7\uff0c\u901a\u8fc7logs\u6587\u4ef6\u5939\u5185\u7684errorlog\u67e5\u770b\u662f\u5426\u542f\u52a8\u6210\u529f\u3002</li> <li>\u6ce8\u610f\uff1a <p>windows\u4e0b\u6bcf\u542f\u52a8\u4e00\u6b21nginx\uff0c\u90fd\u4f1a\u5728\u540e\u53f0\u542f\u52a8\u4e24\u4e2a\u8fdb\u7a0b\uff0c\u5728\u4e0d\u6740\u6389\u65e7\u8fdb\u7a0b\u7684\u524d\u63d0\u4e0b\uff0c\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u540e\u518d\u6b21\u542f\u52a8nginx.exe\u4f1a\u540c\u65f6\u5b58\u5728\u591a\u4e2a\u76f8\u540c\u8fdb\u7a0b\u5bfc\u81f4\u914d\u7f6e\u672a\u751f\u6548\uff0c\u9700\u8981\u6740\u6389\u65e7\u7684nginx\u8fdb\u7a0b\u518d\u542f\u52a8. \u8c8c\u4f3cwindow\u65e0\u6cd5\u50cflinux\u90a3\u6837\u70ed\u66f4\u65b0\uff0cnginx -s reload\u63d0\u793a\u65e0\u8be5\u547d\u4ee4\u3002\u3002</p> </li> </ul>"},{"location":"Nginx/Nginx_reverse_proxy/","title":"Nginx\u53cd\u5411\u4ee3\u7406","text":""},{"location":"Nginx/Nginx_reverse_proxy/#20191221crazyxt","title":"\u4e8e2019\u5e7412\u670821\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"Nginx/Nginx_reverse_proxy/#nginx_1","title":"\u7528Nginx\u505a\u53cd\u5411\u4ee3\u7406\uff1a","text":"<p>\u7528\u4ee3\u7406\u8c37\u6b4c\u4e3a\u4f8b\uff0c\u5c06\u56fa\u5b9a\u57df\u540d\u8bbf\u95ee\u4ee3\u7406\u5230\u8c37\u6b4c\u3002 \u2013 \u9996\u5148\u7ed9\u57df\u540d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u4e8c\u7ea7\u57df\u540d\u4f5c\u4e3a\u4e13\u95e8\u7684\u57df\u540d\uff0c\u6211\u7684\u7f51\u7ad9\u7528\u7684<code>cloudflare</code>\u505a\u7684CDN\u8f6c\u53d1\uff0c\u6240\u4ee5\u4e5f\u5728<code>cloudflare</code>\u91cc\u6dfb\u52a0\u4e86\u4e8c\u7ea7\u57df\u540d\uff1a<code>gl.crazyxt.com</code>. \u2013 \u6253\u5f00<code>nginx</code>\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u4e3a\u5355\u72ec\u7528\u8fd9\u4e2a\u4e8c\u7ea7\u57df\u540d\u505a\u53cd\u4ee3\uff0c\u6240\u4ee5\u5355\u72ec\u8d77\u4e00\u4e2a<code>server</code>\u6765\u5b9e\u73b0\uff1a</p> <pre><code>server{ #\u53cd\u5411\u4ee3\u7406\u8c37\u6b4c\n    listen 80 ; #\u76d1\u542c80\u7aef\u53e3\u8bbf\u95ee\uff0c\u6ca1\u6709\u7528443\u7aef\u53e3\u3002\n    server_name gl.crazyxt.com; #\u76d1\u542c\u8fd9\u4e2a\u57df\u540d\u6765\u505a\u53cd\u4ee3\u3002\n    location / {\n    proxy_redirect off;\n    proxy_cookie_domain google.com &lt;domain.name&gt;;\n    proxy_pass https://www.google.com; #Nginx\u7684\u53cd\u5411\u4ee3\u7406\u57df\u540d\n    proxy_connect_timeout 60s;\n    proxy_read_timeout 5400s;\n    proxy_send_timeout 5400s;\n    proxy_set_header Host \"www.google.com\";\n    proxy_set_header User-Agent $http_user_agent;\n    proxy_set_header Referer https://www.google.com;\n    proxy_set_header Accept-Encoding \"\";\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_set_header Accept-Language \"zh-CN\";\n    proxy_set_header Cookie \"PREF=ID=047808f19f6de346:U=0f62f33dd8549d11:FF=2:LD=en-US:NW=1:TM=1325338577:LM=1332142444:GM=1:SG=2:S=rE0SyJh2W1IQ-Maw\";\n    }\n}\n</code></pre> <ul> <li>\u91cd\u542fNginx\uff1a</li> </ul> <pre><code>nginx -s reload\n</code></pre> <ul> <li> <p>\u6253\u5f00 <code>gl.crazyxt.com</code>\uff0c\u5c31\u4f1a\u51fa\u73b0google\u7684\u9875\u9762\uff0c\u4e5f\u53ef\u4ee5\u641c\u7d22\uff0c\u4f46\u662f\u518d\u70b9\u51fb\u88ab\u5899\u7684\u94fe\u63a5\u65f6\uff0c\u4f9d\u65e7\u6253\u4e0d\u5f00\u3001\u3001\u3001\u54c8\u54c8\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u53cd\u4ee3\u7684\u4f8b\u5b50\u5427\u3002</p> </li> <li> <p>\u901a\u8fc7\u914d\u7f6e\u4e0d\u540c\u7684\u7aef\u53e3\u6765\u8bbf\u95ee\u4e0d\u540c\u7684\u5e94\u7528\uff1a</p> </li> <li> <p>```     #\u8bbf\u95ee\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b\uff1a     server {             listen 7070 default_server;             listen [::]:7070;             root /var/www/html/mdresolver/;             index index.php index.html index.htm index.nginx-debian.html;             location  / {                     try_files $uri $uri/ =404;                     }             location ~ .php$ {                     include snippets/fastcgi-php.conf;                     fastcgi_pass unix:/run/php/php7.0-fpm.sock;             }</p> <p>} ```</p> </li> <li> <p>\u6ce8\uff1a\u4e00\u822c\u7684\u5e94\u7528\u8bbf\u95ee\uff0c\u8c8c\u4f3cnginx\u9ed8\u8ba4\u7528\u6237\u662froot\uff0c\u5728/etc/nginx/nginx.conf\u4e2d\u914d\u7f6e\uff0c\u5b57\u6bb5\u4e3auser\uff0c\u82e5\u6539\u4e3a\u975eroot\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0404 not found\u3002</p> </li> </ul>"},{"location":"Nginx/document/","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"Nginx/document/#nginx","title":"nginx \u4f7f\u7528\u793a\u4f8b\uff0c\u6258\u7ba1\u9759\u6001\u7f51\u5740","text":"<p>/etc/nginx/nginx.conf\u4e3anginx\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u53ef\u4ee5\u53e6\u5916\u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\uff0c\u6216\u8005\u76f4\u63a5\u4fee\u6539\u8be5\u6587\u4ef6</p> <p>\u76d1\u542c\u7aef\u53e3</p> <pre><code>server {\n\n    listen 8089; # \u76d1\u542c\u7aef\u53e3\n    server_name 127.0.0.1; # \u5730\u5740\n\n    root /var/www; # \u8d44\u6e90\u6240\u5728\u8ddf\u76ee\u5f55\n    # \u8bbf\u95eelocalhost:8089/test\u4f1a\u5b9a\u5411\u5230/var/www/\u91cc\u627etest\u76ee\u5f55\u4e0b\u7684index.html\n    # \u524d\u7aef\u6253\u5305\u65f6\uff0c\u9700\u8981\u6307\u5b9aPUBLIC_URL=/test\uff0c\u8fd9\u6837\u9759\u6001\u8d44\u6e90\u52a0\u8f7d\u65f6\u624d\u4f1a\u8def\u5f84\u6b63\u786e\n    location /test { \n        index index.html;\n    }\n\n    # \u8bbf\u95eelocalhost:8089/path1/path2\u4f1a\u5b9a\u5411\u5230/var/www/\u91cc\u627e/path1/path2\u76ee\u5f55\u4e0b\u7684index.html\n    # \u524d\u7aef\u6253\u5305\u65f6\uff0c\u9700\u8981\u6307\u5b9aPUBLIC_URL=/path1/path2\uff0c\u8fd9\u6837\u9759\u6001\u8d44\u6e90\u52a0\u8f7d\u65f6\u624d\u4f1a\u8def\u5f84\u6b63\u786e\n    # react\u914d\u7f6e\u7684\u8def\u7531\uff0c\u6bd4\u5982hashRouter\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u4e8c\u7ea7\u8def\u7531\uff0c\u6bd4\u5982/route1/route2, \u8bbf\u95eelocalhost:8089/path1/path2/route1/route2\u4e5f\u80fd\u6b63\u5e38\u8bbf\u95ee\n    location /path1/path2 { \n        index index.html;\n    }\n}\n</code></pre> <p>\u4fee\u6539\u914d\u7f6e\u540e\uff0c\u91cd\u542fnginx:</p> <pre><code>sudo systemctl reload nginx\n</code></pre>"},{"location":"Python/Change_python_version/","title":"\u66f4\u6362python\u7248\u672c","text":""},{"location":"Python/Change_python_version/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"Python/Change_python_version/#2735","title":"\u524d\u63d0\uff1a\u7535\u8111\u5df2\u7ecf\u5b89\u88c52.7\u548c3.5\u7248\u672c","text":""},{"location":"Python/Change_python_version/#1mac","title":"1\uff0cMAC\uff1a","text":"<ul> <li>\u7ec8\u7aef\u8f93\u5165\uff1a</li> </ul> <pre><code>sudo vi ~/.bashrc\n</code></pre> <ul> <li>\u7f16\u8f91\u8f93\u5165\uff1a</li> </ul> <pre><code>alias python2='/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7'\nalias python3='/Library/Frameworks/Python.framework/Versions/3.5/bin/python3'\n</code></pre> <p>\u4f46\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\uff0c\u6bcf\u6b21\u9700\u8981\u8f93\u5165python2\u624d\u80fd\u8c03\u7528python2\u7684\u73af\u5883\uff0c3\u540c\u6837\u3002 \u4e3a\u4e86\u8fbe\u5230\u8f93\u5165python\u5373\u53ef\u4f7f\u7528python3\uff0c\u4fee\u6539\u5982\u4e0b\uff1a</p> <pre><code>python='/Library/Frameworks/Python.framework/Versions/3.5/bin/python3'\n</code></pre> <p>\u8fd9\u6837\u8f93\u5165python\u8c03\u7528\u7684\u5373\u4f7fpython3.5\u73af\u5883\uff0c\u9700\u8981\u5207\u6362\u56de2.7\u65f6\u540c\u6837\u65b9\u6cd5\u4fee\u6539\u3002 PS:\u4e0d\u77e5\u9053python\u8def\u5f84\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\uff1awhere python3\u67e5\u8be2\u3002</p>"},{"location":"Python/Change_python_version/#2ubuntu","title":"2\uff0cubuntu\uff1a","text":"<p>\u7ec8\u7aef\u8f93\u5165\uff1a</p> <pre><code> update-alternatives --install /usr/bin/python python /usr/bin/python3.5 1\n  update-alternatives --install /usr/bin/python python /usr/bin/python2 2\n #\u5c063.5\u8bbe\u4e3a1\uff0c2.7\u4e3a2\n update-alternatives --list python #\u67e5\u770bpython\u7248\u672clist\n update-alternatives --config python #\u8bbe\u7f6e\u9ed8\u8ba4\u9009\u9879\uff1a\n\n #\u663e\u793a\u4e0b\u9762\u7684\u9009\u9879\uff0c\u6839\u636e\u9700\u8981\uff0c\u8f93\u51651\u5219\u9ed8\u8ba4\u8bbe\u4e3a3.5\uff0c\u8f93\u51652\uff0c\u5219\u9ed8\u8ba4\u8bbe\u4e3a2.7\n  Selection    Path                Priority   Status\n------------------------------------------------------------\n* 0            /usr/bin/python3.5   1         auto mode\n  1            /usr/bin/python2     1         manual mode\n  2            /usr/bin/python3.5   1         manual mode\n</code></pre>"},{"location":"Python/Change_python_version/#3pip","title":"3\uff0c\u6279\u91cf\u66f4\u65b0pip\u5305\uff1a","text":"<pre><code>import pip\nfrom subprocess import call\n\nfor dist in pip.get_installed_distributions():\n    call(\"pip install --upgrade \" + dist.project_name, shell=True)\n</code></pre>"},{"location":"Python/Change_python_version/#4pythonpip","title":"4\uff0c\u66f4\u6362python\u7248\u672c\u540e\uff0c\u53d1\u73b0pip\u4e0d\u53ef\u7528\uff0c\u6ca1\u6709\u8be5\u547d\u4ee4\uff0c\u91cd\u65b0\u5b89\u88c5\uff1a","text":"<pre><code>sudo apt install python3-pip #\u5b89\u88c5\nsudo pip3 install --upgrade pip #\u66f4\u65b0\n</code></pre>"},{"location":"Python/IgraphOnMac/","title":"MAC \u5b89\u88c5igraph","text":""},{"location":"Python/IgraphOnMac/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>MAC python\u5b89\u88c5igraph:</p> <ul> <li>\u8981\u6c42\uff1apython\u7248\u672c&gt;2.6</li> <li>\u4f9d\u8d56\uff1a</li> <li>cairo&gt;1.10.0</li> <li>pixman</li> <li>xcode command line tool</li> <li>py2cairo</li> <li>opencv</li> </ul> <p>\u8fc7\u7a0b\uff1a</p> <p>1 \u5b89\u88c5cairo\u65f6\u65e0\u6cd5\u5b89\u88c5\uff0c\u63d0\u793acann\u2019t find C compiler. 2 \u5b89\u88c5cairocffi\u66ff\u4ee3cairo\uff0c\u547d\u4ee4\uff1abrew install cairocffi\u3002 3 \u5b89\u88c5Xcode command line tool\uff0c\u4f46\u662f\u6700\u540e\u8fd8\u662f\u5b89\u88c5\u4e86Xcode\u624d\u6ca1\u62a5\u9519\u3002 4 \u5b89\u88c5pixman\u3002 5 \u5b89\u88c5opencv\uff0c\u5426\u5219\u65e0\u6cd5\u51fa\u56fe\uff0c\u547d\u4ee4\uff1apip install opencv-python\u3002 \u7f16\u5199\u4ee3\u7801\u6210\u529f\u51fa\u56fe\uff1a</p> <p></p>"},{"location":"Python/Init_django_project/","title":"\u521b\u5efaDjango\u9879\u76ee","text":""},{"location":"Python/Init_django_project/#django","title":"\u521b\u5efadjango\u9879\u76ee\u6b65\u9aa4\uff1a","text":"<ul> <li>1\uff0c\u521b\u5efa\u9879\u76ee\uff1a     <code>django-admin startproject django_demo</code></li> <li>2,\u521b\u5efa\u6570\u636e\u5e93 <p>mysql\u4e2d\u521b\u5efa\u6570\u636e\u5e93(\u7528\u4e0d\u5230\u6570\u636e\u5e93\u53ef\u5ffd\u7565\u8be5\u6b65\u9aa4)</p> </li> </ul>"},{"location":"Python/Init_django_project/#-3settingspydatabasemodelspy","title":"- 3\uff0csettings.py\u4e2d\u5b9a\u4e49database\u4fe1\u606f\uff0c\u7a81\u7136models.py\u4e2d\u5b9a\u4e49\u6570\u636e\u8868\u4fe1\u606f(\u7528\u4e0d\u5230\u6570\u636e\u5e93\u53ef\u5ffd\u7565\u8be5\u6b65\u9aa4)","text":"<ul> <li>4\uff0c\u8fdb\u5165\u76ee\u5f55\uff0c\u6267\u884cmigration     <code>python manage.py migrate</code></li> <li>5\uff0c\u542f\u52a8server\uff1a     <code>python manage.py runserver 0.0.0.0:8000\uff08\u9ed8\u8ba48000\u7aef\u53e3\uff09</code></li> </ul>"},{"location":"Python/Init_django_project/#_1","title":"\u95ee\u9898\u70b9","text":"<ul> <li>\u5982\u679crunserver\u65f6\u9047\u5230api_view\u76f8\u5173\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u628adjangorestframework\u5168\u90e8uninstall\u7136\u540e\u518d\u5b89\u88c5\uff0c\u95ee\u9898\u53ef\u80fd\u662f \u7248\u672c\u95ee\u9898\u5bfc\u81f4\u3002</li> </ul>"},{"location":"Python/Init_django_project/#_2","title":"\u8d1f\u8f7d\u5747\u8861\uff1a","text":"<p>\u5982\u679c\u9700\u8981\u7528<code>nginx</code>\u914d\u7f6e\u8d1f\u8f7d\u5747\u8861\uff0c\u9700\u8981\u5728<code>setting.py</code>\u6587\u4ef6\u4e2d\u6307\u5b9a<code>ALLOWED_HOSTS</code>\uff0c\u5c06nginx\u914d\u7f6e\u4e2d\u7684<code>upstream</code>\u7684server\u540d\u79f0\u6dfb\u52a0\u8fdb\u6765\uff0c\u5426\u5219\u8bf7\u6c42\u65f6\u4f1a\u63d0\u793a<code>Invalid HTTP_HOST header: 'myserver'. You may need to add 'myserver' to ALLOWED_HOSTS.</code> <code>ALLOWED_HOSTS = [\"myserver\"]</code></p>"},{"location":"Python/MNIST%2Btensorflow_CNN_Tensorboard/","title":"MNIST+tensorflow\u5377\u79ef\u795e\u7ecf\u7f51\u7edc+tensorboard\u521d\u6b21\u4f7f\u7528","text":""},{"location":"Python/MNIST%2Btensorflow_CNN_Tensorboard/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<pre><code>#coding:utf8\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nmnist=input_data.read_data_sets('MNIST_data/',one_hot=True) #\u4e00\u4e2aone-hot\u5411\u91cf\u9664\u4e86\u67d0\u4e00\u4f4d\u7684\u6570\u5b57\u662f1\u4ee5\u5916\u5176\u4f59\u5404\u7ef4\u5ea6\u6570\u5b57\u90fd\u662f0\n\n\n#\u4ee5\u4e0b\u4e3a\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u4ee3\u7801\uff1a\n'''\nx=tf.placeholder(tf.float32,[None,784])\nw=tf.Variable(tf.zeros([784,10]))\nb=tf.Variable(tf.zeros([10]))\ny=tf.nn.softmax(tf.matmul(x,w)+b)\ny_=tf.placeholder(\"float\",[None,10])\ncross_entropy=-tf.reduce_sum(y_*tf.log(y)) #\u7528\u4ea4\u53c9\u71b5\u6765\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\ntrain_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\ninit=tf.global_variables_initializer()\nsess=tf.Session()\nsess.run(init)\n# for i in range(1000):\n#     print i\n#     batch_xs,batch_ys=mnist.train.next_batch(100) #\u968f\u673a\u6293\u53d6100\u4e2a\u6570\u636e\u4f5c\u4e3a\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6570\u636e\u96c6\n#     sess.run(train_step,{x:batch_xs,y_:batch_ys})\n#     print sess.run(b)\n# correct_prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\n# accuracy=tf.reduce_mean(tf.cast(correct_prediction,\"float\"))\n# print sess.run(accuracy,{x:mnist.test.images,y_:mnist.test.labels})\n'''\n\n#\u4ee5\u4e0b\u4e3a\u5377\u79efNN\u64cd\u4f5c:\n'''\n\u8fd9\u4e2a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\u4e3a\uff1a\n\u7b2c\u4e00\u5c42\u5377\u79ef+max pooling\n\u7b2c\u4e8c\u5c42\u5377\u79ef+max pooling\n\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42+dropout\n\u8f93\u51fa\u5c42\n'''\nx=tf.placeholder(tf.float32,[None,784],name='x_input')\nw=tf.Variable(tf.zeros([784,10]),name='w_input')\nb=tf.Variable(tf.zeros([10]),name='b_input')\ny=tf.nn.softmax(tf.matmul(x,w)+b)\ny_=tf.placeholder(\"float\",[None,10],name='y_-input')\ncross_entropy=-tf.reduce_sum(y_*tf.log(y)) #\u7528\u4ea4\u53c9\u71b5\u6765\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\ntrain_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\ninit=tf.global_variables_initializer()\nsess=tf.Session()\nsess.run(init)\ndef variable_summaries(var): #\u5b9a\u4e49\u53d8\u91cf\n    \"\"\"Attach a lot of summaries to a Tensor (for TensorBoard visualization).\"\"\"\n    with tf.name_scope('summaries'):\n      # \u8ba1\u7b97\u53c2\u6570\u7684\u5747\u503c\uff0c\u5e76\u4f7f\u7528tf.summary.scaler\u8bb0\u5f55\n      mean = tf.reduce_mean(var)\n      tf.summary.scalar('mean', mean)\n\n      # \u8ba1\u7b97\u53c2\u6570\u7684\u6807\u51c6\u5dee\n      with tf.name_scope('stddev'):\n        stddev = tf.sqrt(tf.reduce_mean(tf.square(var - mean)))\n      # \u4f7f\u7528tf.summary.scaler\u8bb0\u5f55\u8bb0\u5f55\u4e0b\u6807\u51c6\u5dee\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\n      tf.summary.scalar('stddev', stddev)\n      tf.summary.scalar('max', tf.reduce_max(var))\n      tf.summary.scalar('min', tf.reduce_min(var))\n      # \u7528\u76f4\u65b9\u56fe\u8bb0\u5f55\u53c2\u6570\u7684\u5206\u5e03\n      tf.summary.histogram('histogram', var)\n\ndef weight_variable(shape): #\u5b9a\u4e49\u4e24\u4e2a\u521d\u59cb\u5316\u64cd\u4f5c\u51fd\u6570\uff0c\u6743\u91cd\u548c\u504f\u7f6e\n    initial=tf.truncated_normal(shape,stddev=0.1) #\u4ea7\u751f\u622a\u65ad\u6b63\u6001\u5206\u5e03\u51fd\u6570\uff0c\u6807\u51c6\u5dee0.1(\u592a\u5c0f\u592a\u5927\u6700\u540e\u7684\u7cbe\u5ea6\u5dee\u5f88\u591a)\n    return tf.Variable(initial)\ndef bias_variable(shape):\n    initial=tf.constant(0.1,shape=shape)\n    return tf.Variable(initial)\ndef conv2d(x,w):\n    #conv2d(\u8f93\u5165\u56fe\u50cf\uff0c\u5377\u79ef\u6838\uff0cstride\uff0cpadding)\n    return tf.nn.conv2d(x,w,strides=[1,1,1,1],padding='SAME') #stride\uff0c4\u7ef4\uff0c\u5bf9\u4e8e\u56fe\u7247\u4e00\u822c\u4e24\u7ef4\uff0c\u4e00\u822c\u53d6[1,stride,stride,1,]\uff0c\u4e2d\u95f4\u4e24\u4e2a1\u4ee3\u8868padding\u65f6\u5728x\u65b9\u5411\u8fd0\u52a8\u4e00\u6b65\uff0cy\u65b9\u5411\u8fd0\u52a8\u4e00\u6b65\ndef max_pool_2x2(x):\n    #maxpooling\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e862x2\u7684max pooling\u6838\u51fd\u6570\uff0c\u6b65\u957f2x2\uff0cpooling\u540e\u56fe\u50cf\u5c3a\u5bf8\u538b\u7f29\u4e00\u534a\u3002\n    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME') #padding\u7684SAME\u65b9\u5f0f\u4fdd\u6301\u548c\u539f\u56fe\u50cf\u5c3a\u5bf8\u4e00\u81f4\uff0c\u8fb9\u89d2\u8fdb\u884c\u96f6\u586b\u5145\uff0c\u82e5\u4e0d\u586b\u5145\uff0c\u56fe\u50cf\u4f1a\u9010\u6e10\u7f29\u5c0f\n#\u7b2c\u4e00\u5c42\u5377\u79ef\uff1a\nwith tf.name_scope('w_conv1'): \u7528name_scope()\u65b9\u6cd5\u521b\u5efa\u53d8\u91cfname\uff0c\u8c03\u7528\u524d\u9762\u7684weight_variable\u51fd\u6570\u3002\n    w_conv1=weight_variable([5,5,1,32])#\u5377\u79ef\u6838patch\u4e3a5x5\uff0c\u8f93\u51651\u4e2a\u901a\u9053\uff0c\u8f93\u51fa32\u4e2afeature map(\u8d85\u53c2\uff0c\u81ea\u5df1\u5b9a\u4e49)\n    variable_summaries(w_conv1)\nwith tf.name_scope('b_conv1'):\n    b_conv1=bias_variable([32]) #\u548c\u8f93\u51fa\u4e2a\u6570\u4fdd\u6301\u4e00\u6837\n    variable_summaries(b_conv1)\nwith tf.name_scope('input_reshape'):\n    x_image=tf.reshape(x,[-1,28,28,1]) #-1\u8868\u793a\u5148\u4e0d\u8003\u8651\u8f93\u5165\u56fe\u7247\u4f8b\u5b50\u7ef4\u5ea6, \u5c06\u4e0a\u4e00\u4e2a\u8f93\u51fa\u7ed3\u679c\u5c55\u5e73\uff0c28x28\u4f4d\u56fe\u50cf\u5c3a\u5bf8\uff0c1\u662f\u9ed1\u767d\u56fe\u50cf\u7684\u8f93\u5165\u901a\u9053\u6570\n    tf.summary.image('input_image', x_image, 10) #\u547d\u540d\uff0c\u53c2\u6570\u540d\uff0c\u5c55\u793a\u5f20\u6570\nh_conv1=tf.nn.relu(conv2d(x_image,w_conv1)+b_conv1) #Relu\u6fc0\u6d3b\u51fd\u6570\u5904\u7406\uff0c\u53ef\u7406\u89e3\u4e3a\u7279\u5f81\u52a0\u5f3a\uff0c\u8f93\u51fa\u56fe\u50cf28x28x32\uff0csoftmax\u6548\u679c\u5f88\u5dee\u3002\ntf.summary.histogram('activations', h_conv1)\nh_pool1=max_pool_2x2(h_conv1) #\u7ecf\u8fc7pooling\u540e\uff0c\u56fe\u50cf\u5c3a\u5bf8\u7f29\u5c0f\uff0c14x14x32\ntf.summary.histogram('h_pool1',h_pool1) #\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e3a\u53d8\u91cf\u521b\u5efahistogram\uff0c\u53ea\u4e0d\u8fc7\u5728tensorboard\u4e2d\u662f\u76f4\u63a5\u663e\u793a\u5b9a\u4e49\u7684\u540d\u79f0\n\n#\u7b2c\u4e8c\u5c42\u5377\u79ef\uff1a\nw_conv2=weight_variable([5,5,32,64]) #\u5377\u79ef\u6838patch\u7684\u5927\u5c0f\u662f5x5\uff0c\u670932\u4e2afeaturemap\u6240\u4ee5\u8f93\u5165\u662f32\uff0c\u8f93\u51fa\u5b9a\u4e3a64.\ntf.summary.histogram('w_conv2', w_conv2)\nb_conv2=bias_variable([64])\ntf.summary.histogram('b_conv2', b_conv2)\n\nwith tf.name_scope('h_conv2'):\n    h_conv2=tf.nn.relu(conv2d(h_pool1,w_conv2)+b_conv2)\n    variable_summaries(h_conv2)\nh_pool2=max_pool_2x2(h_conv2) #\u7ecf\u8fc7pooling\u540e\uff0c\u56fe\u50cf\u5c3a\u5bf8\u7f29\u5c0f\uff0c\ntf.summary.histogram('h_pool2',h_pool2)\n# # #\u7b2c\u4e09\u5c42\u5377\u79ef\uff1a\n# w_conv3=weight_variable([5,5,64,128])\n# b_conv3=bias_variable([128])\n# h_conv3=tf.nn.relu(conv2d(h_pool2,w_conv3)+b_conv3)\n# #h_pool3=max_pool_2x2(h_conv3)\n# #\u7b2c\u56db\u5c42\u5377\u79ef\uff1a\n# w_conv4=weight_variable([5,5,128,64])\n# b_conv4=bias_variable([64])\n# h_conv4=tf.nn.relu(conv2d(h_conv3,w_conv4)+b_conv4)\n# h_pool4=max_pool_2x2(h_conv4) #7x7x64\u3002\n#\u5168\u8fde\u63a5\u5c42\uff1a\nw_fc1=weight_variable([7*7*64,1024]) #\u6b64\u65f6weight_variable\u7684shape\u8f93\u5165\u5c31\u662f\u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\u5c55\u5e73\u4e86\u7684\u8f93\u51fa\u5927\u5c0f: 7x7x64\uff0c\u8f93\u51fasize\u5b9a\u4e3a1024\nb_fc1=bias_variable([1024])\nh_pool2_flat=tf.reshape(h_pool2,[-1,7*7*64]) #\u5c06\u7b2c\u4e8c\u5c42\u5377\u79ef\u7684h_pool2\u7684\u8f93\u51fa\u503c\u4ece\u4e00\u4e2a\u4e09\u7ef4\u7684\u53d8\u4e3a\u4e00\u7ef4\u7684\u6570\u636e\u3002\nh_fc1=tf.nn.relu(tf.matmul(h_pool2_flat,w_fc1)+b_fc1) #\u76f8\u4e58\u8ba1\u7b97\u540e\u8fdb\u884cRelu\u5904\u7406\ntf.summary.histogram('h_fc1',h_fc1)\n#Dropout\u9632\u6b62\u8fc7\u62df\u5408:\nwith tf.name_scope('dropout'):\n    keep_prob=tf.placeholder('float') #Dropout\u6982\u7387\n    tf.summary.scalar('dropout_keep_probability', keep_prob) #\u521b\u5efa\u4e8c\u7ef4\u5206\u5e03\u56fe\n    h_fc1_drop=tf.nn.dropout(h_fc1,keep_prob)\n#\u8f93\u51fa\u5c42\uff1a\nw_fc2=weight_variable([1024,10]) #\u8f93\u51651024\uff0c\u8f93\u51fa10\u4e2a\u7c7b\nb_fc2=bias_variable([10])\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop,w_fc2)+b_fc2) #\u7528softmax\u5206\u7c7b\u5668\uff0c\u591a\u5206\u7c7b\uff0c\u8f93\u51fa\u662f\u5404\u4e2a\u7c7b\u7684\u6982\u7387\u3002\n#\u8bad\u7ec3\u548c\u8bc4\u4f30\uff1a\ncross_entropy=-tf.reduce_sum(y_*tf.log(y_conv)) #\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u6765\u5b9a\u4e49cost function\u3002\ntf.summary.scalar('loss', cross_entropy)\ntrain_step=tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction=tf.equal(tf.arg_max(y_conv,1),tf.arg_max(y_,1))\naccuracy=tf.reduce_mean(tf.cast(correct_prediction,'float'))\ntf.summary.scalar('accuracy', accuracy)\n\n# summaries\u5408\u5e76\nmerged = tf.summary.merge_all()\n# \u5199\u5230\u6307\u5b9a\u7684\u78c1\u76d8\u8def\u5f84\u4e2d\ntrain_writer = tf.summary.FileWriter('log/train', sess.graph)\ntest_writer = tf.summary.FileWriter('log/test')\n\nsess.run(tf.global_variables_initializer())\nimport time\nstart=time.time()\nfor i in range(100):\n    batch=mnist.train.next_batch(50)\n    if i%10==0:\n        print \"step:\",i,\n        print \",accuracy:\",sess.run(accuracy,{x:batch[0],y_:batch[1],keep_prob:1.0})\n    sess.run(train_step,{x:batch[0],y_:batch[1],keep_prob:0.2})\n\n    #\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u4e86\uff1a\n    result=sess.run(merged,{x:batch[0],y_:batch[1],keep_prob:1.0})\n    train_writer.add_summary(result,i)\n\ntrain_writer.close()\nprint \"Test accuracy:\",sess.run(accuracy,{x:mnist.test.images,y_:mnist.test.labels,keep_prob:1.0})\nprint \"Time:\",time.time()-start\n'''\n#\u4ee5\u4e0b\u4ee3\u7801\u7528\u4e8e\u4fdd\u5b58\u6a21\u578b\u3002\nsaver=tf.train.Saver()\nsess.run(init)\nsave_path=saver.save(sess,\"mytrain/test.ckpt\") #\u540e\u7f00meta\u6587\u4ef6\u4fdd\u5b58\u6574\u4e2atensorflow graph\uff0c.data\u6587\u4ef6\u4fdd\u5b58\u8bad\u7ec3\u7684variables\nsess.close()\nprint \"save to path\",save_path\n\nsess=tf.Session() #\u4f1a\u8bdd\u524d\u9762\u5df2\u5173\u95ed\uff0c\u8fd9\u91cc\u9700\u8981\u91cd\u65b0\u5f00\u542f\nsaver=tf.train.import_meta_graph('mytrain/test.ckpt.meta') #\u5bfc\u5165\u524d\u9762\u521b\u5efa\u7684\u7f51\u7edc\nsaver.restore(sess,tf.train.latest_checkpoint('./mytrain/')) #\u52a0\u8f7d\u6a21\u578b\nprint sess.run(accuracy,{x:mnist.test.images,y_:mnist.test.labels,keep_prob:1.0}) #\u6d4b\u8bd5\u6a21\u578b\nsess.close()\n'''\n##\u6700\u540e\u8bad\u7ec3\u5b8c\u6210\u4e4b\u540e\uff0c\u8f93\u5165\u547d\u4ee4\uff1atensorboard --logdir=log/\u5373\u53ef\u6309\u7167\u63d0\u793a\u5730\u5740\u6253\u5f00tensorboard\u56fe\u8868\u3002\n##MAC\u8fd0\u884c\u65b9\u5f0f:\n\npython /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorboard/main.py --logdir=log/\n</code></pre>"},{"location":"Python/PCA/","title":"PCA","text":""},{"location":"Python/PCA/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<pre><code>import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\nestimator=PCA(n_components=4) #\u5c06\u9ad8\u7ef4\u538b\u7f29\ndata=pd.read_csv('/Users/xutao/Desktop/2.csv',header=None)\nmeanVals=np.mean(data,axis=0)\nmeanRemove=meanVals-data #\u53bb\u4e2d\u5fc3\u5316\nprint \"\\nZero-centered:\"\nprint meanRemove #\u53bb\u4e2d\u5fc3\u5316\u77e9\u9635\ncovMat=np.cov(meanRemove,rowvar=0)\nprint \"\\nCovariance Matrix:\"\nprint covMat #\u534f\u65b9\u5dee\u77e9\u9635\neigVals,eigVects=np.linalg.eig(np.mat(covMat)) #\u7279\u5f81\u503c\uff0c\u7279\u5f81\u5411\u91cf\nprint \"\\neigenvalue :\"\nprint eigVals\nprint \"\\neigenvector :\"\nprint eigVects\neigValInd=np.argsort(-eigVals) #\u52a0\u8d1f\u53f7\u8868\u793a\u964d\u5e8f\uff0c\u5426\u5219\u5347\u5e8f\nprint '\\neigenvalue after sorted'\nprint eigValInd #\u8f93\u51fa\u964d\u5e8f\u540e\u7684\u4e0b\u6807\nredEigVects=eigVects[:,eigValInd] #\u6309\u7167\u964d\u5e8f\u540e\u7684\u7279\u5f81\u503c\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\nprint \"\\neigenvector\"\nprint redEigVects\nprint \"\\nfinalData:\"\nprint np.dot(meanRemove,redEigVects) #\u53bb\u4e2d\u5fc3\u5316\u540e\u7684\u77e9\u9635\u548c\u7279\u5f81\u5411\u91cf\u76f8\u4e58\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u8f6c\u6362\u540e\u7684\u6837\u672c\n</code></pre>"},{"location":"Python/Python_Pyinstaller/","title":"Python \u6253\u5305\u6267\u884c\u6587\u4ef6","text":""},{"location":"Python/Python_Pyinstaller/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\u3001py2app</p> <p>1\uff09\u67e5\u627e\u547d\u4ee4py2app:  sudo find / -name \u201cpy2applet\u201d -type f,\u627e\u5230\u8be5\u547d\u4ee4\u7684\u76ee\u5f552\uff09\u201c\u76ee\u5f55\u201d\u547d\u4ee4 \u2013make-setup python\u6587\u4ef6\u540d.py\uff0c\u751f\u6210setup.py\u6587\u4ef63\uff09rm -rf build dist4)python setup.py py2app</p> <p>2\u3001pyinstaller</p> <p>pyinstaller -F -w python\u6587\u4ef6\u540d.py </p> <p>#-F\u5355\u72ec\u4e00\u4e2a\u6267\u884c\u6587\u4ef6\uff0c-w\u65e0\u7ec8\u7aef\uff0c\u6709\u7a97\u53e3\u5728win10\u4e0a\u6253\u5305\u56fe\u5f62\u754c\u9762\u65f6\uff0c\u867d\u7136\u53ef\u4ee5\u6253\u5305\u51faexe\uff0c\u4f46\u662f\u8fd0\u884c\u65f6\u63d0\u793aFatal error to execute ***\uff0c\u5c06python2.7\u5347\u52303.5\uff0c\u4e0d\u884c\uff0c\u964d\u56de2.7\uff0c\u8fd8\u662f\u6253\u4e0d\u5f00\uff0c\u5c06\u6253\u5305\u53c2\u6570\u4e2d\u7684-w\u53bb\u6389\uff0c\u53ef\u4ee5\u6253\u5305\u51fa\u547d\u4ee4\u7aef\u7684exe\uff0c\u4f46\u662f\u6253\u5f00\u65f6\u4e00\u95ea\u800c\u8fc7\uff0c\u7528\u624b\u673a\u8fde\u62cd\u529f\u80fd\u6355\u6349\u5230\u4e86\u4e00\u95ea\u800c\u8fc7\u7684\u754c\u9762\uff0c\u662fImport error, C extension,\u5177\u4f53\u8fd9\u6837\uff1a</p> <p></p> <p></p> <p>\u662f\u8bf4pandas\u5305\u4e2d\u7684\u4ec0\u4e48\u4e1c\u897f\u4e0d\u5bf9\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5305\uff0c\u628a\u90a3\u4e2atry-except\u6ce8\u91ca\u6389\uff0c\u7136\u540e\u518d\u6253\u5305\uff0c\u53c8\u51fa\u73b0\u4e00\u4e32 DateTime\u9519\u8bef\uff0c\u6700\u540e\u662fno module named timedeltas,\u627e\u4e86\u534a\u5929\u627e\u4e0d\u5230\u89e3\u51b3\u529e\u6cd5\uff0c\u7a81\u7136\u60f3\u5230\u662f\u4e0d\u662fpyinstaller\u7248\u672c\u4f4e\u4e0d\u652f\u6301\uff1f\u5347\u7ea7pyinstaller\uff0c\u7528\u547d\u4ee4:</p> <p>pip install \u2013upgrade pyinstaller,</p> <p>\u867d\u7136pyinstaller\u7248\u672c\u6ca1\u6709\u5347\u7ea7\uff0c\u4f46\u662f\u5b83\u7684setuptools\u5374\u5347\u7ea7\u4e86\uff0c\u7136\u540e\u6253\u5305\u751f\u6210exe\uff0c\u6210\u529f\u8fd0\u884c\uff01\uff01</p> <p>\u4e09\u5929\u65f6\u95f4\uff0c\u624d\u7ec8\u4e8e\u5728windows\u4e0a\u6210\u529f\u6253\u5305\u8fd0\u884c\u56fe\u5f62\u754c\u9762\u3002\u3002\u3002</p>"},{"location":"Python/ServiceOnWindows/","title":"python\u521b\u5efawindows\u670d\u52a1\u8bb0\u5f55","text":""},{"location":"Python/ServiceOnWindows/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>\u4ee5\u4e0b\u53ea\u662f\u81ea\u5df1\u5728\u7528python\u521b\u5efawidows\u670d\u52a1\u7684\u5386\u7a0b\u4e2d\uff0c\u8bb0\u5f55\u4e0b\u6240\u9047\u5230\u7684\u6240\u6709\u5751\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u4e0d\u4e00\u5b9a\u5177\u6709\u4ee3\u8868\u6027\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a</p> <ul> <li>1\u3001python\u4ee3\u7801\uff1a</li> </ul> <pre><code>#coding:utf8\nimport win32serviceutil   \nimport win32service   \nimport win32event  \nimport winerror\nimport servicemanage\nimport os,time,sys   \nfrom subprocess import Popen, PIPE  \nimport json  \nimport signal  \n    \"\"\"\n    #1.\u5b89\u88c5\u670d\u52a1\n    python WinPollManager.py install\n    #2.\u8ba9\u670d\u52a1\u81ea\u52a8\u542f\u52a8\n    python WinPollManager.py --startup auto install\n    #3.\u542f\u52a8\u670d\u52a1\n    python WinPollManager.py start\n     #4.\u91cd\u542f\u670d\u52a1\n    python WinPollManager.py restart\n    #5.\u505c\u6b62\u670d\u52a1\n    python WinPollManager.py stop\n    #6.\u5220\u9664/\u5378\u8f7d\u670d\u52a1\n    python WinPollManager.py remove\n    \"\"\"\nclass Anaservice(win32serviceutil.ServiceFramework):   \n    _svc_name_ = \"ANAservice\"  #\u670d\u52a1\u540d\n    _svc_display_name_ = \"ANAservice\"   #\u5728windows\u4e2d\u663e\u793a\u7684\u540d\n\n   _svc_description_ = \"Ana service is writen by python\"  #\u63cf\u8ff0\n\n    def __init__(self, args):   \n        win32serviceutil.ServiceFramework.__init__(self, args)   \n        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)  \n        self.isAlive=True \n\n\n    def SvcStop(self):           \n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)   \n        win32event.SetEvent(self.hWaitStop)   \n        self.isAlive=False\n\n\n    def SvcDoRun(self):  \n        while self.isAlive:\n            #do something here\n\nif __name__=='__main__':  \n    if len(sys.argv) == 1:\n        try:\n            evtsrc_dll = os.path.abspath(servicemanager.__file__)\n            servicemanager.PrepareToHostSingle(Anaservice)\n            servicemanager.Initialize('Anaservice', evtsrc_dll)\n            servicemanager.StartServiceCtrlDispatcher()\n        except win32service.error, details:\n            if details[0] == winerror.ERROR_FAILED_SERVICE_CONTROLLER_CONNECT:\n                win32serviceutil.usage()\n    else:\n        win32serviceutil.HandleCommandLine(Anaservice)\n</code></pre> <ul> <li>2\uff0c\u6240\u7528\u7cfb\u7edf\u4e3awin10\uff0c\u8f6f\u4ef6\u4e3aVScode\uff0c\u5b89\u88c5\u670d\u52a1\u9700\u8981\u7cfb\u7edf\u6743\u9650\uff0c\u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u6253\u5f00VScode\uff0c\u5728code\u7ec8\u7aef\u5185\u64cd\u4f5c\u547d\u4ee4\uff1a</li> <li>1.\u5b89\u88c5\u670d\u52a1\uff1a</li> </ul> <pre><code>    python test.py install\n</code></pre> <ul> <li>2.\u8ba9\u670d\u52a1\u81ea\u52a8\u542f\u52a8 :<code>python test.py --startup auto install</code></li> <li>3.\u542f\u52a8\u670d\u52a1</li> </ul> <pre><code>    python test.py start\n</code></pre> <p>\u5373\u53ef\u5728\u7cfb\u7edf\u670d\u52a1\u5217\u8868\u4e2d\u770b\u5230\u540d\u4e3aAnaservice\u7684\u670d\u52a1\u8fdb\u7a0b\u3002</p> <ul> <li>4.\u91cd\u542f\u670d\u52a1</li> </ul> <pre><code>    python test.py restart\n</code></pre> <ul> <li>5.\u505c\u6b62\u670d\u52a1</li> </ul> <pre><code>    python test.py stop\n</code></pre> <ul> <li>6.\u5220\u9664/\u5378\u8f7d\u670d\u52a1</li> </ul> <pre><code>    python test.py remove\n\n   #\u6216\u8005\u4ee5\u7ba1\u7406\u5458\u6743\u9650\u6253\u5f00\u7ec8\u7aef\uff0c\u8f93\u5165\uff1asc delete \u670d\u52a1\u540d\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u670d\u52a1\u3002\n</code></pre> <ul> <li>3,start\u670d\u52a1\u65f6\uff0c\u63d0\u793a\uff1a\u670d\u52a1\u6ca1\u6709\u53ca\u65f6\u54cd\u5e94\u542f\u52a8\u6216\u63a7\u5236\u8bf7\u6c42\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u529e\u6cd5\uff1a</li> <li>1\uff09\u786e\u8ba4\u4ee3\u7801\u6ca1\u6709\u95ee\u9898\uff0c\u6570\u636e\u5e93\u7684\u8fde\u63a5\u4fe1\u606f\u90fd\u6ca1\u6709\u95ee\u9898\u3002</li> <li>2\uff09\u67e5\u770b\u670d\u52a1\u5c5e\u6027\uff0c\u770b\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5730\u5740\u4e3a\uff1a\u201cC:\\Python27\\lib\\site-packages\\win32\\PythonService.exe\u201d\u5230\u76f8\u5e94\u6587\u4ef6\u5939\u53cc\u51fb\u8fd9\u4e2aexe\u6587\u4ef6\uff0c\u82e5\u63d0\u793a\uff1a\u7531\u4e8e\u627e\u4e0d\u5230pywintypes27.dll\uff0c\u6216pywintypes35.dll\uff0c\u5219\u5230\u4e0a\u4e00\u7ea7\u76ee\u5f55\u7684pypiwin32_system32\u6587\u4ef6\u5939\u4e2d\u5c06\u8be5dll\u6587\u4ef6\u590d\u5236\u5230\u8fd9\u4e2aexe\u6587\u4ef6\u5939\u4e2d\u5373\u53ef\u3002</li> <li>3\uff09\u82e5exe\u5df2\u7ecf\u53ef\u4ee5\u53cc\u51fb\u4e0d\u4f1a\u62a5\u9519\uff0c\u8fd8\u662f\u62a5\u540c\u6837\u9519\u8bef\uff0c\u786e\u8ba4\u6253\u5f00\u7684\u7ec8\u7aef\u662f\u4e0d\u662f\u7528\u7ba1\u7406\u5458\u6253\u5f00\u7684\uff08\u6743\u9650\uff09\u3002</li> <li>4\uff09\u82e5\u7ba1\u7406\u5458\u6743\u9650\u6253\u5f00\u4e5f\u4e0d\u884c\uff0c\u624b\u52a8\u5728\u670d\u52a1\u7684\u5c5e\u6027\u4e2d\u6dfb\u52a0\u767b\u9646\u7528\u6237\u4e3aAdministrator\u3002   \u3010ps\uff1a\u5220\u9664\u670d\u52a1\u7684\u65b9\u6cd5\u4e3a\uff1a1\uff0c\u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u8fd0\u884ccmd\uff0c\u7136\u540esc delete \u670d\u52a1\u540d\uff0c\u5373\u53ef\u5220\u9664\u670d\u52a1\u3002\u6216\u8005\u5728python\u4e2d\u8fd0\u884c stop\u518d\u8fd0\u884cremove\u6307\u4ee4\uff0c\u547d\u4ee4\u5220\u9664\u670d\u52a1\u65f6\uff0c\u6ce8\u610f\u5c06\u670d\u52a1\u7a97\u53e3\u5173\u95ed\uff0c\u4e0d\u7136\u4f1a\u6709\u2018\u670d\u52a1\u5df2\u6807\u8bb0\u5220\u9664\u2019\u7684\u95ee\u9898\u3011</li> <li>5 \u5982\u679c\u8fde\u63a5\u6709\u6570\u636e\u5e93\uff0c\u63d0\u793a\u76f8\u5173\u670d\u52a1\u65e0\u6cd5\u542f\u52a8\uff0c\u5230\u4e8b\u4ef6\u67e5\u770b\u5668\u91cc\u770b\u770b\u662f\u4e0d\u662f\u6570\u636e\u5e93\u8fde\u63a5\u5931\u8d25\uff0c\u7528\u6237\u540d \u5bc6\u7801\u9519\u8bef\uff1f</li> <li>6 window\u4e2d\u5199\u5165\u6587\u4ef6\u8def\u5f84\u65f6\uff0c\u6ce8\u610f\u8f6c\u4e49\u5b57\u7b26\u95ee\u9898\uff0c\u2019\u2018\u662f\u8f6c\u4e49\u5b57\u7b26\uff0c\u5199\u5165\u6570\u636e\u5e93\u65f6\uff0c\u2019\u2018\u4f1a\u6d88\u5931\uff0c\u76f4\u63a5\u6309\u5b57\u7b26\u4e32\u5199\u5165\u4f1a\u51fa\u9519\uff0c\u6700\u597d\u6309linux\u683c\u5f0f\u2019/\u2019\u5199\u5165\u3002</li> <li>7 \u63d0\u793a\uff1a</li> </ul> <pre><code>\n</code></pre> <p>\u5982\u679c\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u786e\u8ba4\u4e0bpython\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u662f\u5426\u6b63\u786e\u3002\u8fd9\u4e2a\u95ee\u9898\u6211\u78b0\u5230\u8fc7\u4e00\u6b21\uff0c\u53d1\u73b0\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u4fee\u6539\u540e\u5c31\u6ca1\u95ee\u9898\u4e86\u3002</p>"},{"location":"Python/python3_sqlite3/","title":"python3 \u5b89\u88c5sqlite3","text":""},{"location":"Python/python3_sqlite3/#2020111crazyxt","title":"\u4e8e2020\u5e741\u670811\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"Python/python3_sqlite3/#pip","title":"\u65e0\u6cd5\u76f4\u63a5 pip \u5b89\u88c5\u3002","text":"<pre><code>wget https://www.sqlite.org/2017/sqlite-autoconf-3170000.tar.gz --no-check-certificate\ntar zxvf sqlite-autoconf-3170000.tar.gz\ncd sqlite-autoconf-3170000/\n./configure --prefix=/usr/local/sqlite3 --disable-static --enable-fts5 --enable-json1 CFLAGS=\"-g -O2 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_RTREE=1\"\n#\u8fdb\u5165python3.5\u6587\u4ef6\u5939\uff0c\u6253\u5f00setup.py\uff0c\u627e\u5230 /sqlite_inc_paths\uff0c\u6dfb\u52a0\u4e24\u884c\uff1a\n/usr/local/sqlite3/include\n/usr/local/sqlite3/include/sqlite3\n#\u7136\u540e\uff1a\n./configure --enable-loadable-sqlite-extensions\nmake &amp;&amp; sudo make install\n</code></pre>"},{"location":"Python/python_django_minio_mysql/","title":"python django minio mysql\u90e8\u7f72\u7684\u8bb0\u5f55","text":""},{"location":"Python/python_django_minio_mysql/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0c\u56e0\u4e3a\u6570\u636e\u91cf\u8f83\u5927\uff0c\u4e0d\u7528django\u81ea\u5e26\u7684sqlite\uff0c\u4f7f\u7528mysql\uff1a</p> <p>1\uff09\u4fee\u6539settings.py:</p> <p>DATABASES = {   \u2018default\u2019: {     \u2018ENGINE\u2019: \u2018django.db.backends.mysql\u2019,     \u2018NAME\u2019: \u2018mysql\u2019,      \u2018USER\u2019: \u2018root\u2019,     \u2018PASSWORD\u2019: \u2018\u5bc6\u7801\u2019,      \u2018HOST\u2019: \u2018127.0.0.1\u2019,     \u2018PORT\u2019: \u20183306\u2019,   } }</p> <p>2)\u5b89\u88c5mysql\uff1asudo apt-get install mysql-server mysql-client \uff08\u8fc7\u7a0b\u4e2d\u4f1a\u63d0\u793a\u8f93\u5165\u5bc6\u7801\uff0croot\uff09</p> <p>\u200b            sudo apt-get install libmysqld-dev</p> <p>\u5b89\u88c5MySQL for Python\uff1a</p> <p>wget https://pypi.python.org/packages/source/M/MySQL-python/MySQL-python-1.2.5.zip</p> <p>\u89e3\u538b\uff1aunzip MySQL-python-1.2.5.zip\uff0c</p> <p>cd MySQL-python-1.2.5</p> <p>\u5b89\u88c5\uff1asudo python setup.py install</p> <p>3\uff09 \u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1asudo netstat -tap | grep mysql</p> <p>\u663e\u793a\uff1atcp     0    0 localhost:mysql     :           LISTEN    28076/mysqld   \u8bc1\u660e\u5df2\u5b89\u88c5\u6210\u529f</p> <p>2\uff0c\u8fdb\u5165mysql\uff1amysql -u root -p\u7136\u540e\u63d0\u793a\u8f93\u5165\u5bc6\u7801root\u5373\u53ef\uff0c\u9000\u51fa\u547d\u4ee4\u4e3aexit</p> <p>1\uff09\u521b\u5efa\u6570\u636e\u5e93\uff1acreate database mydata charset=utf8;  \u521b\u5efamydata\u3002</p> <p>2\uff09\u67e5\u770b\u6240\u6709\u6570\u636e\u5e93\uff1ashow databases;</p> <p>3\uff09\u5728django\u4e2d\u6d4b\u8bd5\uff1apython manage.py check\uff0c\u5982\u679c\u6ca1\u6709\u62a5\u9519\uff0c\u8bc1\u660e\u5df2\u7ecf\u914d\u7f6eOK\u3002</p> <p>4\uff09\u8fc1\u79fb\u4e00\u4e0b\uff1a</p> <p>python manage.py makemigrations  disk  \uff08disk\u662f\u5728setting.py\u4e2d\u7684INSTALLEDAPP\u4e2d\u6dfb\u52a0\u7684\uff1a</p> <p>INSTALLED_APPS = [   \u2018django.contrib.admin\u2019,   \u2018django.contrib.auth\u2019,   \u2018django.contrib.contenttypes\u2019,   \u2018django.contrib.sessions\u2019,   \u2018django.contrib.messages\u2019,   \u2018django.contrib.staticfiles\u2019,   \u2018disk\u2019,   #\u2019boootstrap\u2019, ]</p> <p>\u7136\u540e\uff1apython manage.py migrate\u5373\u53ef\uff0c\u53ef\u5230\u6570\u636e\u5e93\u4e2duse mydata\uff0c\u7136\u540eshow tables\u67e5\u770b\u3002</p> <p>5\uff09use mydata\uff0c\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\u5e93\uff0c\u4e0d\u8981\u52a0\u5206\u53f7</p> <p>3\uff0c\u5b89\u88c5minio\uff0cdocker\u4e0b\u5b89\u88c5</p> <p>1\uff09sudo docker  pull minio/minio</p> <p>2\uff09sudo docker run -p 9000:9000 minio/minio server /data</p> <p>\u663e\u793a\u4ee5\u4e0b\u5373OK\uff1a</p> <p>Created minio configuration file successfully at /root/.minio Drive Capacity: 591 GiB Free, 631 GiB Total</p> <p>Endpoint:  http://172.17.0.2:9000  http://127.0.0.1:9000 AccessKey: CUE04GFVQOXSVMDDPRZR  SecretKey: hb3LELWQcdyCxD3ZVLwRyTM1nnEBjrMbtATNrNoU </p> <p>Browser Access:   http://172.17.0.2:9000  http://127.0.0.1:9000</p> <p>3\uff09\u6253\u5f00http://172.17.0.2:9000\u8f93\u5165AccessKey\u548cSecretKey\u767b\u5f55\u5373\u53ef\u3002</p> <p>PS \uff1a\u56e0\u4e3a\u662f\u5728docker\u4e2d\u8fd0\u884c\uff0c\u6240\u4ee5\uff0cctrl+C\u540e\u53ea\u8981sudo docker start (minio\u7684id)\u5373\u53ef\u518d\u6b21\u542f\u52a8\uff0cAccessKey\u548cSecretKey\u8c8c\u4f3c\u53ea\u5728\u521b\u5efa\u65f6\u663e\u793a\u4e00\u6b21\uff0c\u521b\u5efa\u4e4b\u540e\u65e0\u6cd5\u627e\u51fa\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u4e0b\uff4b\uff45\uff59\u3002</p> <p>\uff14\u3001minio\u5229\u7528s3fs\u6302\u8f7d\u5230\u672c\u5730\uff1a</p> <p>\uff11\uff09\u53c2\u7167https://github.com/s3fs-fuse/s3fs-fuse\u5b89\u88c5s3fs.</p> <p>2) \u8f93\u5165\u547d\u4ee4\uff1as3fs buckettest /home/xxxx/Downloads/s3test -o passwd_file=/home/xxxx/Downloads/s3passwd -o url=http://172.17.0.2:9000/ -o use_cache=/home/xxxx/Downloads/s3cache -o use_path_request_style</p> <p>\u3010buckettest\u4e3aminio\u4e2d\u7684bucket\u540d\u5b57\uff0c\u540e\u9762\u8ddf\u9700\u6302\u8f7d\u7684\u672c\u5730\u76ee\u5f55\uff0c\u6bcf\u4e2a\u9009\u9879\u4e4b\u524d\u8ddf-o\uff0cpasswd_file\u4e3a\u767b\u5f55minio\u7684\u4e24\u4e2akey,\u7528\u201d:\u201d\u5206\u5272\uff0cs3passwd\u9700\u8981chmod 600 s3passwd\u4e00\u4e0b\uff0curl\u4e3aminio\u7684\u5730\u5740\uff0c\u540e\u9762\u7684\u2019/\u2019\u4e0d\u8981\u5fd8\u8bb0\uff0cuse_cache\u4e3a\u7f13\u5b58\u76ee\u5f55\u3002use_path_request_style\uff0c\u547d\u4ee4\u89e3\u91ca\u4e3a:use legacy API calling style,\u53cd\u6b63\u4e0d\u52a0\u8fd9\u4e2a\u65f6\u672c\u5730\u76ee\u5f55\u65e0\u6cd5\u8bbf\u95eeminio\u3002\u3011</p> <p>\u5982\u679c\u6ca1\u6709\u62a5\u9519\uff0c\u5728s3test\u76ee\u5f55\u5df2\u7ecf\u53ef\u4ee5\u8bbf\u95eeminio\u7684\u6587\u4ef6\u4e86\uff0c\u4e24\u8005\u7c7b\u4f3c\u540c\u6b65\u6548\u679c\uff0c\u589e\u52a0\u5220\u9664\u90fd\u4f1a\u540c\u6b65\u3002</p>"},{"location":"Python/python_output_DT_Graph/","title":"python\u8f93\u51fa\u51b3\u7b56\u6811\u56fe\u5f62","text":""},{"location":"Python/python_output_DT_Graph/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>windows10\uff1a 1\uff0c\u5148\u8981pip\u5b89\u88c5pydotplus\u548cgraphviz\uff1a</p> <pre><code>pip install pydotplus\npip install graphviz\n</code></pre> <p>2\uff0cwww.graphviz.org\u4e0b\u8f7dmsi\u6587\u4ef6\u5e76\u5b89\u88c5\u3002 3\uff0c\u7cfb\u7edf\u73af\u5883\u53d8\u91cfpath\u4e2d\u589e\u52a0\u4e24\u9879\uff1a</p> <pre><code>C:\\Program Files (x86)\\Graphviz2.38\\bin\nC:\\Program Files (x86)\\Graphviz2.38\n#\u786e\u8ba4graphviz\u662f\u5b89\u88c5\u5728\u4e0a\u9762\u8def\u5f84\u5f53\u4e2d\u3002\n</code></pre> <p>4\uff0cpython\u4e2d\u4f7f\u7528\u65b9\u6cd5\uff1a</p> <pre><code>from sklearn.externals.six import StringIO  \nimport pydotplus\n\n#drt\u662fDecisionTreeClassifier()\uff0c\u5728\u4e4b\u524d\u8981fit\u8bad\u7ec3\u4e4b\u540e\u624d\u80fd\u5728\u8fd9\u91cc\u8f93\u51fa\u56fe\u5f62\u3002\ndot_data = StringIO()  \ntree.export_graphviz(drt, out_file=dot_data)   \ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())   \ngraph.write_png(\"out.png\")  #\u5f53\u524d\u6587\u4ef6\u5939\u751f\u6210out.png\n\n#\u8fd9\u4e09\u884c\u4ee3\u7801\u53ef\u4ee5\u751f\u6210pdf\uff1a\ndot_data = tree.export_graphviz(drt, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph.render() \n</code></pre>"},{"location":"Python/python_read_all_flies/","title":"python\u8bfb\u53d6\u5404\u79cd\u6587\u4ef6\u65b9\u5f0f","text":""},{"location":"Python/python_read_all_flies/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1,Json\uff1a</p> <pre><code>use_time=[]\nwith open(address,'r') as f: #ubuntu\n    mobile = json.load(f)\n    calls = mobile[\"transactions\"][0][\"calls\"]\nfor call in calls: \n  use_time.append(str(call['use_time']))\n</code></pre> <p>2,Excel:</p> <pre><code>rawdata1=open_workbook(address)\nrawdata=rawdata1.sheet_by_index(0)\nfor i in range(1,rawdata.nrows):\n    if rawdata.cell(i,date_index).value==\"\": #\u8df3\u8fc7\u7a7a\u884c\n        continue\n    else:\n        if ctype==3:  #\u82e5\u4e3a3\uff0c\u5219\u7528datetime\u6a21\u5757\u5904\u7406\u65e5\u671f\n            date1=rawdata.cell(i,date_index).value\n            date2 = xldate_as_tuple(date1,0) \n            date3=datetime(*date2)\n            if \".\" in str(rawdata.cell(i,phone_index).value):\n                phone1=str(rawdata.cell(i,phone_index).value)[:-2]  \n            else:\n                phone1=str(rawdata.cell(i,phone_index).value)\n</code></pre> <p>3,\u5199EXCEL\uff1a</p> <pre><code>Excel_file = xlwt.Workbook() \nsheet = Excel_file.add_sheet('sheet0')\nheader=[u'\u53f7\u7801','\u65e5\u671ftop1','\u65e5\u671ftop2','\u65e5\u671ftop3']\n#\u5199\u5165\u6807\u9898\u884c\uff1a\nfor i in range(len(header)):\n    sheet.write(0,i,header[i])\n#\u5f00\u59cb\u6309\u884c\u5199\u5165\u6570\u636e\uff1a\nfor i in range(len(phonelist)):\n    sheet.write(i+1,0,phonelist[i])\n    sheet.write(i+1,1,dic[str(phonelist[i])])\n#\u4fdd\u5b58EXCEL\uff1a\nExcel_file.save(\"C:/Users/Desktop/100\u4e2a\u6587\u4ef6\u8f93\u51faxls/\"+str(fileName)+\".xls\")\n</code></pre> <p>4,CSV\uff1a</p> <pre><code>rawdata=pd.read_csv(address,skip_blank_lines=True) #\u53c2\u6570\u4e3a\u53bb\u9664\u7a7a\u884c\nif 'start_time' or 'begin_time'  in rawdata.columns:\n    if 'start_time' in rawdata.columns:\n        start_time=rawdata['start_time']\n    elif 'begin_time' in rawdata.columns:\n            start_time=rawdata['begin_time']\n</code></pre> <p>5,txt:</p> <pre><code>rawdata=open(address,'r')\ni=0\na=[] #c\u5b58\u653e\u7b2c\u4e00\u884c\u7684\u5217\u540d\nfor line in rawdata:\n    if i==1: #\u9ed8\u8ba4\u7b2c\u4e8c\u884c\u5f00\u59cb\u5b58\u50a8\u901a\u8bdd\u6570\u636e\n        a=line.split(',') #\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\n        for j in range(len(a)): #\u67e5\u627e\u6307\u5b9a\u5217\u540d\u6240\u5728\u7684\u5217\u4e0b\u6807\n            if (('-' in str(a[j]))or('/' in str(a[j]))): #\u5224\u65ad\u65e5\u671f\u6240\u5728\u5217\u6570\n                date_index=j #\u4fdd\u5b58\u65e5\u671f\u7684\u5217\u4e0b\u6807\n            elif  str(a[j]).isdigit() and len(str(a[j]))&gt;5: #\u9ed8\u8ba4\u5168\u4e3a\u6570\u5b57\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e3a\u7535\u8bdd\u53f7\u7801\n                phone_index=j\n            else:\n                pass\n        break\n    else:\n        i+=1\ni=0\nfor line in rawdata:#\u5f00\u59cb\u8f6c\u5b58\u6570\u636e\uff1a\n    if len(line)&lt;10: #\u8df3\u8fc7\u7a7a\u884c\n        continue\n    data_line=line.split(',') #txt\u9ed8\u8ba4\u4ee5','\u5206\u9694\u6570\u636e\n    if i==0:\n        pass #\u7b2c\u4e00\u884c\u4e3a\u5217\u540d\uff0c\u8df3\u8fc7\n        i+=1\n    else: #\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u4fdd\u5b58\u6570\u636e\n        start_time.append(data_line[date_index])\n</code></pre>"},{"location":"SystemConfiguration/2019%E5%B9%B412%E6%9C%88%E8%AE%AD%E7%BB%83%E6%97%A5%E5%BF%97/","title":"2019\u5e7412\u6708\u8bad\u7ec3\u65e5\u5fd7","text":""},{"location":"SystemConfiguration/2019%E5%B9%B412%E6%9C%88%E8%AE%AD%E7%BB%83%E6%97%A5%E5%BF%97/#20191272019127crazyxt","title":"\u4e8e2019\u5e7412\u67087\u65e52019\u5e7412\u67087\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>2019-12-1 \u5468\u65e5 \u5927\u98ce+\u964d\u6e29</p> <p>\u4eca\u5929\u597d\u51b7\uff0c12\u67081\u53f7\uff0c\u4f11\u606f\u4e86\u6574\u6574\u4e00\u5468\u4e86\uff0c\u51b3\u5b9a\u4eca\u5929\u51fa\u6765\u8dd1\u4e00\u4e0b\uff0c\u4e3a\u5143\u65e6\u7684\u534a\u7a0b\u505a\u51c6\u5907\uff0c\u53ef\u662f\u89c1\u5929\u4e0b\u5348\u4e0a\u6d77\u53c8\u53d1\u5e03\u5927\u98ce\u9884\u8b66\uff0c\u52a0\u4e0a\u964d\u6e29\uff0c\u51b7\u7684\u8981\u547d\uff0c\u7a7f\u4e86\u56db\u5c42\u53bb\u4e86\u64cd\u573a\uff0c\u8dd1\u4e86\u4e24\u516c\u91cc\u624d\u628a\u957f\u7fbd\u7ed2\u670d\u8131\u6389\uff0c3\u516c\u91cc\u540e\u62c9\u4f38\uff0c\u51c6\u5907\u548c\u84b2\u8001\u5e08\u8dd11K\u95f4\u6b47\uff0c330\u914d\u901f\uff0c\u5e26\u4ed6\u8dd1\u4e863\u4e2a\u5c31\u5e26\u4e0d\u52a8\u4e86\uff0c\u5fc3\u80ba\u96be\u53d7\uff0c\u4f11\u4e86\u4e00\u5468\u7684\u7ed3\u679c\u5c31\u662f\u8fd9\u6837\uff0c\u7136\u540e\u6162\u8dd12\u5708\u53c8\u8ddf\u4ed6\u8dd1\u4e86600\u7c73\uff0c\u7ed3\u675f\u4eca\u5929\u8dd1\u6b65\uff0c\u7136\u540e\u6362\u8863\u670d\u62c9\u4f38\u7ed3\u675f\u8bad\u7ec3\u3002</p> <p></p> <p>2019-12-2 \u5468\u4e00 \u6674</p> <p>\u4e0b\u53483.30\u53bb\u64cd\u573a\u8ba1\u5212\u8dd1\u4e2a\u5341\u51e0\u516c\u91cc\uff0c\u5bf9\u4e86\u6628\u665a\u4e70\u4e86\u4e2a\u5927\u7586\u7075\u7738\u4e91\u53f03\uff0c\u4eca\u5929\u4e0a\u5348\u5c31\u5230\u4e86\uff0c\u5b9e\u9a8c\u5ba4\u73a9\u4e86\u4e0b\uff0c\u51c6\u5907\u4e0b\u5348\u8dd1\u6b65\u62cd\u4e2a\u89c6\u9891\u3002\u8dd1\u5230\u4e5d\u516c\u91cc\u505c\u4e0b\u548c\u84b2\u8001\u5e08\u62cd\u4e86\u51e0\u6bb5\uff0c\u7136\u540e\u7ee7\u7eed\u8dd1\uff0c14\u516c\u91cc\u591a\uff0c\u8dd1\u5b8c\u6362\u8863\u670d\u62c9\u4f38\u56de\u5bb6\u3002</p> <p>\u867d\u7136\u4e0a\u5468\u505c\u4e86\u4e00\u5468\uff0c\u4f46\u662f\u611f\u89c9\u4f53\u80fd\u4e0b\u964d\u7684\u6ca1\u60f3\u8c61\u4e2d\u7684\u5389\u5bb3\u3002</p> <p></p> <p>2019-12-4 \u5468\u4e09 \u6674</p> <p>\u4e2d\u5348\u5403\u8fc7\u5348\u996d\u53bb\u5b9e\u9a8c\u5ba4\uff0c\u770b\u4e86\u534a\u5929\u4eba\u8138\u8bc6\u522b\u7684\u4e1c\u897f\uff0c\u4e0b\u5348\u4e09\u70b9\u534a\u53bb\u64cd\u573a\uff0c\u8dd1\u4e868K\u6e10\u52a0\u901f\uff0c\u53c8\u8dd1\u4e865\u4e2a400\uff0c\u524d\u56db\u4e2a\u4f11\u606f100\u7c73\uff0c\u6700\u540e\u4e00\u4e2a\u56e0\u4e3a\u62cd\u89c6\u9891\uff0c\u7a0d\u5fae\u591a\u4f11\u4e86\u70b9\uff0c\u4eca\u5929\u7a7f\u7684HOKA tracer2\uff0c\u611f\u89c9\u6ca1\u6709\u98de\u7535\u597d\u7a7f\uff0c\u8dd1\u5b8c\u62c9\u4f38\u7136\u540e\u53bb\u6c83\u5c14\u739b\u4e70\u70b9\u96f6\u98df+\u526a\u5934\u53d1\u3002</p> <p></p> <p></p> <p>2019-12-5 \u5468\u56db \u6674</p> <p>\u4e09\u70b9\u53bb\u8dd1\u6b65\uff0c15\u516c\u91cc\uff0c\u5e26\u84b2\u8001\u5e084\u5206\u914d\u3002\u6700\u540e\u4e00\u516c\u91cc\u52a0\u4e86\u4e2a\u901f\u3002</p> <p></p> <p>2019-12-6 \u5468\u4e94 \u6674</p> <p>\u4e0b\u5348\u4e09\u70b9\u591a\u53bb\u64cd\u573a\uff0c\u611f\u89c9\u5728\u5b9e\u9a8c\u5ba4\u6709\u70b9\u5c0f\u6655\uff0c\u6548\u7387\u4e0b\u964d\uff0c\u9700\u8981\u6362\u6362\u73af\u5883\u3002\u70ed\u8eab1\u516c\u91cc\uff0c\u7136\u540e10K\u8dd1\u8282\u594f\uff0c\u518d\u67655\u4e2a400\u7c73\uff0c\u95f4\u96991\u5206\u949f\uff0c\u8dd1\u5b8c\u62c9\u4f38\u7ed3\u675f\u8bad\u7ec3</p> <p></p> <p></p> <p>2019-12-8 \u5468\u65e5 \u6674</p> <p>\u6628\u5929\u6ca1\u8dd1\u6b65\uff0c\u56e0\u4e3a\u5728\u5012\u817e\u6211\u7684VPS\u548c\u7f51\u7ad9\uff0c\u5f04\u5230\u4e0b\u5348\u624d\u6ee1\u610f\uff0c\u4e0b\u5348\u53c8\u5f04\u81ea\u52a8\u5907\u4efd\u6570\u636e\u7684\u4e8b\u3002</p> <p>\u4e09\u70b9\u534a\u53bb\u64cd\u573a\uff0c\u7a7f\u7684\u674e\u5b81\u7684\u6d4b\u8bd5\u978b\uff0c\u524d\u638c\u52a0\u539a\u7684\uff0c\u8dd1\u8d77\u6765\u5f88\u96be\u53d7\uff0c4\u5206\u7684\u914d\u901f\u5fc3\u7387\u5947\u9ad8\uff0c\u770b\u6765\u71ac\u591c\u5bf9\u8eab\u4f53\u4f24\u5bb3\u592a\u5927\u4e86\uff0c\u4e0d\u6d3b\u52a8\u6ca1\u5927\u611f\u89c9\uff0c\u4e00\u52a8\u8d77\u6765\uff0c\u95ee\u9898\u5c31\u51fa\u73b0\u4e86\uff0c\u602a\u4e0d\u5f97\u6709\u90a3\u4e48\u591a\u731d\u6b7b\u7684\u3002\u6700\u540e\u53ea\u8dd1\u4e8610K\uff0c\u5b9e\u5728\u8dd1\u4e0d\u52a8\u4e86\u3002</p> <p></p> <p>2019-12-9 \u5468\u4e00 \u6674</p> <p>\u4e0b\u5348\u4e09\u70b9\u534a\u53bb\u64cd\u573a\uff0c\u8dd1\u8d77\u6765\u5fc3\u80ba\u8fd8\u662f\u9876\uff0c\u56db\u5206\u914d\u901f\u5fc3\u7387\u90fd\u8981170+\uff0c\u6211\u611f\u89c9\u8fd8\u662f\u5468\u4e94\u7684\u71ac\u591c\u5bfc\u81f4\u7684\u751f\u7406\u673a\u80fd\u53d8\u5316\uff0c\u8dd1\u5b8c\u5341\u516c\u91cc\uff0c\u8131\u53bb\u957f\u88e4\uff0c\u8dd1\u4e86\u4e24\u4e2a400\uff0c68\u79d2\u3002</p> <p></p> <p></p> <p>2019-12-10 \u5468\u4e8c \u6674</p> <p>\u4e0b\u5348\u4e09\u70b9\u534a\u64cd\u573a\uff0c\u4eca\u65e5\u8ba1\u5212400\u95f4\u6b47.\u8349\u5730\u70ed\u8eab1.7\u516c\u91cc\uff0c\u62c9\u4f38\uff0c\u7136\u540e\u5f00\u59cb\uff0c\u7b2c\u4e00\u4e2a\u8001\u6837\u5b50\uff0c\u6700\u6162\uff0c74\u79d2\uff0c\u7b2c\u4e8c\u4e2a73\uff0c\u4e2d\u95f4\u6162\u8dd1\u6216\u6162\u8d70100\u7c73\uff0c\u5927\u69821\u5206\u52301\u520610\uff0c\u8dd112\u4e2a\uff0c\u6700\u540e\u51e0\u4e2a\u5927\u698269\u591a\uff0c\u8dd1\u5b8c\u6162\u8dd1\u5916\u90533\u5708\uff0c\u7136\u540e\u62c9\u4f38\u53bb\u98df\u5802\u5403\u996d\u3002\u8dd1\u95f4\u6b47\u4e00\u76f4\u90fd\u6709\u8fd9\u79cd\u611f\u89c9\uff0c\u8dd1\u4e24\u4e2a\u5c31\u611f\u89c9\u7d2f\u4e86\uff0c\u4f46\u662f\u540e\u9762\u7684\u5341\u51e0\u4e2a\u90fd\u80fd\u9876\u4e0b\u6765\u3002\u592a\u96be\u4e86\u3002</p> <p></p> <p>2019-12-11 \u5468\u4e09 \u6674</p> <p>\u4e0b\u5348\u53bb\u57fa\u56e0\u7814\u7a76\u9662\u542c\u4e86\u4e2a\u62a5\u544a\uff0c\u7136\u540e\u5c31\u53bb\u64cd\u573a\u8dd1\u6b65\u4e86\uff0c\u70ed\u8eab\u4e86\u51e0\u5206\u949f\u76f4\u63a5\u6162\u8dd1\u5f00\u59cb\u4e86\uff0c\u901f\u5ea6\u6162\u6162\u52a0\uff0c11\u516c\u91cc\u7ed3\u675f\u3002</p> <p></p> <p>2019-12-12 \u5468\u56db \u6674</p> <p>\u4e0a\u5348\u53bb\u5b9e\u9a8c\u5ba4\u540e\uff0c\u5c31\u5728\u60f3\u672c\u79d1\u751f\u7684\u6bd5\u8bbe\u9898\u76ee\uff0c\u4e0b\u5348\u5f04\u5b8c\uff0c\u7136\u540e\u4e09\u70b9\u534a\u53bb\u64cd\u573a\u8dd1\u6b65\uff0c\u56e0\u4e3a\u524d\u51e0\u5929\u4e00\u76f4\u90fd\u662f\u5f3a\u5ea6\uff0c\u4eca\u5929\u51c6\u5907\u8dd1\u4e2a\u6709\u6c27\uff0c\u8349\u5730\u8dd1\u4e869\u516c\u91cc\uff0c4\u5206\u5de6\u53f3\u914d\u901f\uff0c\u7136\u540e\u8f6c\u5230\u573a\u57301\u516c\u91cc3\u5206\u5de6\u53f3\uff0c\u7136\u540e\u62c9\u4f38\u653e\u677e\u53bb\u5403\u996d\u3002</p> <p>2019-12-13 \u5468\u4e94 \u6674</p> <p>\u4e0b\u5348\u64cd\u573a\u8dd11K\u95f4\u6b47\uff0c\u524d5\u4e2a\u4f112\u5206\uff0c\u540e\u9762\u4f112\u5206\u534a\uff0c\u8dd1\u4e8611\u4e2a\uff0c\u6700\u540e\u56db\u4e2a\u52a0\u4e86\u901f</p> <p></p> <p>2019-12-14 \u5468\u516d \u6674</p> <p>\u65e9\u4e0a9\u70b9\u591a\u53bb\u5b9e\u9a8c\u5ba4\u4e86\uff0c\u4e0b\u5348\u4e09\u70b9\u534a\u53bb\u64cd\u573a\u4e86\u3002\u9274\u4e8e\u6628\u5929\u8dd1\u4e8611\u4e2a1K\u95f4\u6b47\uff0c\u4eca\u5929\u6ca1\u72b6\u6001\uff0c\u60f3\u653e\u677e\u8dd1\u4e00\u4e0b\uff0c\u84b2\u8001\u5e08\u60f3\u8ba9\u6211\u5e26\u7740\u8dd14\u5206\u5de6\u53f3\u768415-20\u516c\u91cc\uff0c\u90a3\u5c31\u5148\u70ed\u8d77\u6765\u5427\uff0c\u8349\u5730\u6162\u8dd1\uff0c\u5404\u79cd\u8fb9\u8dd1\u8fb9\u653e\u677e\u3001\u62c9\u4f38\u7b49\uff0c5\u516c\u91cc\u540e\u4ed6\u4e0a\u6765\u8981\u4e00\u8d77\u8dd1\uff0c\u800c\u6211\u72b6\u6001\u611f\u89c9\u4e5f\u6709\u4e86\u70b9\uff0c\u90a3\u5c31\u8dd1\u5427\uff0c\u8001\u4e00\u5957\uff0c\u4e0b\u8eab\u7a7f\u957f\u7d27\u8eab\u88e4+\u957f\u8fd0\u52a8\u88e4\uff0c\u4e0a\u8eab\u901f\u5e72T\u6064+\u68c9\u5916\u5957\uff0c\u5176\u4ed6\u4eba\u8981\u4e48T\u6064\u8981\u4e48\u80cc\u5fc3\u8981\u4e48\u5355\u4ef6\u957f\u8896T\uff0c\u770b\u6765\u6211\u8fd8\u662f\u6015\u51b7\u554a\uff0c\u771f\u7684\u51b7\uff0c\u8fdb\u5165\u51ac\u5929\u4ee5\u6765\uff0c\u5c31\u6ca1\u8dd1\u70ed\u8fc7\uff0c\u867d\u7136\u6c57\u4f1a\u4e00\u76f4\u51fa\uff0c\u4f46\u8eab\u4f53\u4e00\u76f4\u90fd\u662f\u51b7\u7684\u3002\u6211\u5728\u524d\u9762\u5e26\uff0c\u5168\u7a0b\u6ca1\u770b\u8868\uff0c\u5c31\u4e2d\u95f4\u5927\u698214\u516c\u91cc\u65f6\u770b\u4e86\u4e0b\u8ddd\u79bb\uff0c\u5b8c\u5168\u51ed4\u5206\u7684\u611f\u89c9\u6765\u8dd1\uff0c\u53c8\u8dd1\u4e8615\u516c\u91cc\uff0c\u52a0\u8d77\u676520.20\u516c\u91cc\uff0c\u7b97\u662f\u51d1\u4e2a2020\u5427\uff0c\u8dd1\u5b8c\u62c9\u4f38\u6362\u8863\u670d\u53bb\u5403\u996d\u3002</p> <p></p> <p></p> <p>2019-12-18 \u5468\u4e09 \u591a\u4e91 \u9634\u51b7</p> <p>\u4e09\u5929\u6ca1\u8dd1\u6b65\u4e86\uff0c\u4e0a\u5468\u4e94\u8dd1\u5b8c20\u516c\u91cc\u540e\u624b\u8868\u63d0\u793a\u5df2\u7ecf\u8fc7\u5ea6\u8bad\u7ec3\uff0c\u6240\u4ee5\u5468\u516d\u5c31\u53bb\u4e86\u677e\u6c5f\u8521\u8001\u5e08\u90a3\u91cc\u5e2e\u4ed6\u7ed9\u4e00\u4e2a\u793e\u533a\u8bb2\u8dd1\u6b65\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5468\u672b\u4f4f\u4e86\u4e00\u5929\uff0c\u5468\u4e00\u56de\u5b9d\u5c71\uff0c\u4eca\u5929\u592a\u51b7\u4e86\uff0c\u5728\u5b9e\u9a8c\u5ba4\u5fd9\u5230\u56db\u70b9\u591a\u7136\u540e\u8d76\u7d27\u53bb\u64cd\u573a\u8dd1\u4e0b\uff0c\u4e24\u4e2a\u811a\u8e1d\u4e0d\u592a\u8212\u670d\uff0c\u4f11\u4e86\u4e09\u5929\uff0c\u5fc3\u80ba\u4e5f\u4e0b\u964d\u3002\u8dd1\u4e868+3\u7ed3\u675f\uff0c\u7136\u540e\u53bb\u98df\u5802\u3002</p> <p></p> <p>2019-12-19 \u5468\u56db \u591a\u4e91</p> <p>\u6628\u5929\u4e0b\u5348\u5230\u4eca\u5929\u4e0b\u5348\u5728\u7ed9\u7f51\u7ad9\u5347\u7ea7https\u52a0\u5bc6\uff0c\u4e0b\u5348\u5f04\u5b8c4\u70b9\u534a\u53bb\u8dd1\u6b65\uff0c15\u516c\u91cc\uff0c\u6ce2\u6f9c\u4e0d\u60ca</p> <p></p> <p>2019-12-20 \u5468\u4e94 \u591a\u4e91</p> <p>\u4e2d\u5348\u53bb\u9762\u8bd5\uff0c\u4e0b\u5348\u4e09\u70b9\u591a\u56de\u6765\uff0c\u6362\u4e0a\u8863\u670d\u53bb\u64cd\u573a\uff0c\u8dd1\u4e863+2+1</p> <p></p> <p>2019-12-21 \u5468\u516d \u5c0f\u96e8</p> <p>\u4ece\u6628\u665a\u5f00\u59cb\u4e0b\u96e8\uff0c\u4e0b\u5348\u53d8\u5c0f\u4e86\uff0c\u672c\u6765\u505a\u597d\u5fc3\u7406\u5efa\u8bbe\u53bb\u6dcb\u96e8\u8dd1\u4e86\uff0c\u7136\u540e\u7a81\u7136\u60f3\u5230\u53ef\u4ee5\u53bb\u5b66\u6821\u5065\u8eab\u623f\uff0c\u4e8e\u662f\u5e26\u4e0a\u80cc\u5fc3\u77ed\u88e4\u5c31\u53bb\u4e86\uff0c\u6ca1\u4eba\u5728\uff0c\u6211\u4e00\u4e2a\u4eba\u8dd1\uff0c\u8dd1\u6b65\u673a\u4e0a\u70ed\u8eab\u4e863\u516c\u91cc\u7136\u540e\u901f\u5ea6\u8c03\u523014.5\uff0c\u5c31\u8fd9\u6837\u64b8\u4e8630\u516c\u91cc\uff0c\u5fc3\u7387\u524d\u4e8c\u5341\u516c\u91cc160\u5de6\u53f3\uff0c\u540e\u9762\u5230\u4e86165\u5de6\u53f3\uff0c\u5e73\u5747161\uff0c\u7d2f\u5012\u662f\u4e0d\u7d2f\uff0c\u5c31\u662f\u811a\u8e1d\u8fd8\u662f\u8001\u6bdb\u75c5\u3002\u8dd1\u5b8c\u53bb\u6e05\u771f\u5403\u996d\u3002</p> <p></p> <p>2019-12-22 \u5468\u65e5 \u591a\u4e91</p> <p>\u4eca\u5929\u6ca1\u4e0b\u96e8\uff0c\u4e0b\u5348\u53bb\u8dd1\u6b65\uff0c3\u520650\u901f\u5ea6\uff0c\u7a7f\u7684\u6d4b\u8bd5\u978b\uff0c\u8dd1\u8d77\u6765\u4e0d\u8212\u670d\uff0c\u8dd1\u4e8617\u516c\u91cc\uff0c\u6700\u540e\u4e24\u516c\u91cc3\u520635\u5de6\u53f3\u3002\u5176\u5b9e\u6700\u540e\u51e0\u5708\u5de6\u8fb9\u5c0f\u817f\u8981\u62bd\u7b4b\uff0c\u817f\u90fd\u4e0d\u6562\u62ac\u3002\u3002</p> <p></p> <p>2019-12-23 \u5468\u4e00 \u591a\u4e91</p> <p>\u660e\u5929\u8ba1\u5212\u8dd1\u95f4\u6b47\uff0c\u4eca\u5929\u4e0d\u8ba1\u5212\u8dd1\u6b65\uff0c\u540e\u6765\u56db\u70b9\u8fd8\u662f\u53bb \u64cd\u573a7\u5206\u914d\u901f\u8349\u5730\u8dd1\u4e864\u516c\u91cc\u6574\uff0c28\u5206\u949f\u3002</p> <p>2019-12-24 \u5468\u4e8c \u591a\u4e91</p> <p>\u4e0b\u5348\u4e24\u70b9\u534a\u64cd\u573a\u8dd1\u95f4\u6b47\uff0c\u8ba1\u521272s\u4e00\u4e2a\uff0c\u8dd115\u4e2a\uff0c\u7ea6\u597d\u7684\u8dd1\u53cb\u6ca1\u6765\uff0c\u81ea\u5df1\u4e00\u4e2a\u4eba\u8dd1\uff0c\u4f11\u606f70s\u5de6\u53f3\uff0c\u6700\u540e\u8dd1\u4e8620\u4e2a\uff1a</p> <p></p> <p></p> <p>2019-12-26 \u5468\u56db \u96fe\u96e8 \u5927\u98ce \u9634\u51b7</p> <p>\u4eca\u5929\u662f\u771f\u51b7\uff0c\u4e0b\u7740\u6bdb\u6bdb\u7ec6\u96e8\uff0c\u6302\u7740\u5927\u98ce\uff0c\u6e29\u5ea69\u5ea6\uff0c\u51b7\u5230\u9aa8\u5b50\u91cc\uff0c\u5728\u4e0a\u6d77\u8dd1\u6b65\u592a\u96be\u4e86\u3002\u60f3\u5230\u4eca\u5929\u8ba1\u5212\u662f15\u4e2a1000\u95f4\u6b47\uff0c\u662f\u4e00\u4e2a\u91cd\u70b9\u8bad\u7ec3\u8bfe\uff0c\u6240\u4ee5\u8fd8\u662f\u4e09\u70b9\u6bc5\u7136\u51b3\u7136\u7684\u53bb\u4e86\u64cd\u573a\uff0c\u548c\u84b2\u8001\u5e08\u4e00\u8d77\u70ed\u8eab\uff0c3\u516c\u91cc\u70ed\u8eab\uff0c\u7136\u540e\u62c9\u4f38\uff0c\u7b2c\u4e00\u4e2a3\u520636\u6700\u6162\uff0c\u7b2c\u4e8c\u7b2c\u4e09\u4e2a\u4e5f\u662f330\u5f00\u5916\uff0c\u7b2c\u56db\u4e2a\u624d\u8fdb330\uff0c\u771f\u51b7\uff0c\u540e\u9762\u57fa\u672c325\u4ee5\u5185\uff0c\u5176\u5b9e3\u4e2a\u540e\u5c31\u6211\u81ea\u5df1\u8dd1\u4e86\uff0c\u4e2d\u95f4\u4f11\u606f2\u5206\u534a\uff0c\u8dd1\u4e8610\u4e2a\u4e4b\u540e\uff0c\u53f3\u811a\u811a\u80cc\u7684\u7b4b\u75bc\u7684\u4e0d\u884c\u4e86\uff0c\u65e0\u5948\u53ea\u597d\u505c\u4e0b\u4e86\uff0c\u611f\u89c9\u8fd8\u6ca1\u5f00\u59cb\u53d1\u529b\uff0c\u4eca\u5929\u7684\u8bad\u7ec3\u6548\u679c\u5927\u6253\u6298\u6263\uff0c\u6ca1\u529e\u6cd5\uff0c\u811a\u8fd8\u662f\u524d\u4e24\u5929\u7a7f\u674e\u5b81\u7684\u6d4b\u8bd5\u978b\u641e\u7684\uff0c\u592a\u96be\u4e86\uff0c\u54ce\u3002\u8dd1\u5b8c\u592a\u51b7\u8d76\u7d27\u7a7f\u4e0a\u8863\u670d\u5403\u996d\u53bb\u4e86\u3002\u3002\u665a\u4e0a\u811a\u66f4\u75bc\u4e86\uff0c\u7528\u7ea2\u5916\u7406\u7597\u4eea\u70e4\u4e8640\u5206\u949f\uff0c\u6d82\u4e86\u6276\u4ed6\u6797\uff0c\u5e0c\u671b\u660e\u5929\u597d\u8f6c\u3002</p>"},{"location":"SystemConfiguration/2020%E5%85%83%E6%97%A6%E9%A9%AC%E6%A1%A5%E5%8D%8A%E9%A9%AC/","title":"2020\u5143\u65e6\u9a6c\u6865\u534a\u9a6c","text":""},{"location":"SystemConfiguration/2020%E5%85%83%E6%97%A6%E9%A9%AC%E6%A1%A5%E5%8D%8A%E9%A9%AC/#202011202011crazyxt","title":"\u4e8e2020\u5e741\u67081\u65e52020\u5e741\u67081\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/2020%E5%85%83%E6%97%A6%E9%A9%AC%E6%A1%A5%E5%8D%8A%E9%A9%AC/#20207714","title":"2020\u5e74\u5143\u65e6\u8fce\u65b0\u8dd1\u9009\u62e9\u4e86\u9a6c\u6865\u534a\u7a0b\uff0c\u53bb\u5e74\u8dd1\u4e8677\u5206\u591a\uff0c\u7b2c14\u540d\uff0c\u4eca\u5e74\u5e94\u8be5\u53ef\u4ee5\u5feb\u4e00\u70b9\u3002","text":""},{"location":"SystemConfiguration/2020%E5%85%83%E6%97%A6%E9%A9%AC%E6%A1%A5%E5%8D%8A%E9%A9%AC/#58155004203203305172010352011123401516333173375522104336","title":"\u65e9\u4e0a5\u70b9\u591a\u8d77\u5e8a\uff0c\u7ed9\u53f3\u811a\u75bc\u7684\u5730\u65b9\u8d34\u4e0a\u4e86\u808c\u6548\u8d34\uff0c\u7136\u540e\u5403\u4e86\u70b9\u9762\u5305\uff0c\u5750\u670b\u53cb\u8f66\u4e00\u8d77\u8fc7\u53bb\uff0c8\u70b9\u505c\u597d\u8f66\u6211\u5c31\u6162\u8dd1\u8fc7\u53bb\u4e86\uff0c\u6700\u540e15\u5206\u949f\u8131\u5916\u5957\u5b58\u5305\uff0c\u7136\u540e\u53bb\u8d77\u70b9\uff0c5004\u53f7\uff0c\u7b2c\u56db\u4e2a\u53f7\u7801\uff0c\u4ece\u6700\u540e\u8fdb\u5165\u6324\u5230\u6700\u524d\u9762\uff0c\u597d\u51b7\uff0c\u4e0d\u505c\u5730\u57ab\u6b65\u6765\u6696\u8eab\uff0c\u6765\u4e86\u5f88\u591a\u9ad8\u624b\uff0c\u9ed1\u9a6c\u4e5f\u6765\u4e86\u597d\u51e0\u4e2a\uff0c\u90fd\u662f\u8dd1\u4e0d\u8fc7\u7684\u4eba\u3002\u3002\u3002\u8d77\u8dd1\u540e\u901f\u5ea6\u4e0d\u5feb\uff0c20\u4e2a\u4eba\u5de6\u53f3\u62b1\u6210\u4e00\u56e2\u8dd1\uff0c\u7b2c\u4e00\u516c\u91cc320\u6574\uff0c\u8fd8\u662f\u4e00\u56e2\uff0c\u7136\u540e\u524d\u9762\u7684\u4eba\u5f00\u59cb\u63d0\u901f\uff0c\u6211\u6062\u590d\u5230\u4e86330\u51fa\u5934\u7684\u76ee\u6807\u914d\u901f\uff0c\u548c\u4ed6\u4eec\u7684\u8ddd\u79bb\u4e5f\u8d8a\u62c9\u8d8a\u8fdc\uff0c\u7a33\u5b9a\u81ea\u5df1\u7684\u8282\u594f\uff0c5\u516c\u91cc17\u520620\u591a\uff0c10\u516c\u91cc35\u520620\u591a\uff0c11\u516c\u91cc\u5de6\u5c0f\u817f\u808c\u8089\u5f00\u59cb\u60f3\u62bd\u7b4b\uff1f\u96be\u9053\u662f\u592a\u51b7\u4e86\uff1f\u4ece\u6765\u6ca1\u6709\u8dd1\u4e86\u8fd9\u4e2a\u8ddd\u79bb\u5c31\u5f00\u59cb\u62bd\u7b4b\u7684\u3002\u3002\u300212\u516c\u91cc\u5f00\u59cb\u8981\u6389\u901f\uff0c\u5c0f\u817f\u4e0d\u592a\u6562\u53d1\u529b\uff0c\u611f\u89c9\u4e00\u4f7f\u52b2\u5c31\u8981\u62bd\u8d77\u6765\u7684\u8282\u594f\u3002\u3002\u914d\u901f\u6162\u7684\u65f6\u5019\u6389\u5230\u4e86340\u5de6\u53f3\uff0c15\u300116\u516c\u91cc\u90fd\u662f333\u914d\u901f\uff0c17\u516c\u91cc\u5f7b\u5e95\u62bd\u8d77\u6765\u4e86\uff0c\u7acb\u9a6c\u505c\u4e0b\u62c9\u4f38\u4e86\u534a\u5206\u949f\u624d\u4e0d\u62bd\uff0c\u4e2d\u95f4\u6709\u4e24\u4e2a\u4eba\u8d85\u4e86\u8fc7\u53bb\uff0c\u7136\u540e\u91cd\u65b0\u8d77\u8dd1\uff0c\u6062\u590d\u523033\u51e0\u914d\u901f\uff0c\u53c8\u628a\u521a\u624d\u8d85\u6211\u7684\u4e00\u4e2a\u53c8\u7ed9\u8d85\u4e86\u8fc7\u53bb\uff0c\u914d\u901f\u4e0d\u6562\u9876\u4e0a\u53bb\uff0c\u5982\u679c\u4e0d\u662f\u62bd\u7b4b\uff0c\u4ece\u8eab\u4f53\u53cd\u5e94\u6765\u770b\uff0c\u914d\u901f\u8fd8\u53ef\u4ee5\u518d\u63d0\u51e0\u79d2\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\uff0c\u53ea\u80fd\u5728\u62bd\u7b4b\u7684\u8fb9\u7f18\u5f80\u524d\u7ee7\u7eed\uff0c\u5230\u7ec8\u70b9\u524d\u51e0\u5341\u7c73\u611f\u89c9\u53c8\u8981\u62bd\u4e86\u3002\u3002\u5f80\u5e38\u7684\u7ebf\u524d\u52a0\u901f\u53d8\u6210\u4e86\u6162\u8dd1\u8fc7\u7ebf\uff0c\u54c8\u54c8\u54c8\u54c8\uff0c75\u520652\uff0c\u624b\u8868\u8ba1\u4e8621.04\u516c\u91cc\uff0c\u5e73\u5747336\u914d\u901f\uff0c\u53cd\u6b63\u4eca\u5929\u611f\u89c9\u5168\u7a0b\u90fd\u5728\u51b2\uff08\u9664\u4e86\u62bd\u7b4b\u3001\uff09\uff0c\u7136\u540e\u8d76\u7d27\u9886\u5305\u7a7f\u8863\u670d\u53bb\u4e86\u3002","text":""},{"location":"SystemConfiguration/2020%E5%85%83%E6%97%A6%E9%A9%AC%E6%A1%A5%E5%8D%8A%E9%A9%AC/#75","title":"\u65b0\u5e74\u7b2c\u4e00\u8dd1\uff0c\u611f\u89c9\u8fd8\u4e0d\u9519\uff0c\u4e0b\u6b21\u5c31\u8be5\u5f8075\u5185\u51b2\u4e86\u3002","text":""},{"location":"SystemConfiguration/Auto_backup_wordpress%26resumeData/","title":"\u81ea\u52a8\u5907\u4efdwordpress\u7f51\u7ad9\u6570\u636e&amp;\u6062\u590d\u6570\u636e","text":""},{"location":"SystemConfiguration/Auto_backup_wordpress%26resumeData/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0c\u6570\u636e\u5305\u542b\u7f51\u7ad9\u6587\u4ef6\u6570\u636e\u548cMysql\u6570\u636e\u5e93\uff0c\u5728VPS\u521b\u5efa\u5907\u4efd\u76ee\u5f55:</p> <pre><code>/root/xt/mysqlBackup/\n</code></pre> <p>2\uff0c\u7f16\u5199\u6570\u636e\u5e93\u5907\u4efd\u811a\u672c\uff1a</p> <pre><code>#!/bin/sh\n#This is a backup shell script of my mysql of wordpress.\nhostname='localhost'\nuser='root'\npassword='myPasswd'\n\ndatabase='databaseName'\nbackpath='Path'\ndate=$(date +\"%Y-%m-%d\")\nmysqldump -h$hostname -u$user -p$password $database &gt; $backpath/$date-$database.sql\n</code></pre> <p>3\uff0c\u7f51\u7ad9\u6e90\u6587\u4ef6\u5907\u4efd\u547d\u4ee4\uff1a</p> <pre><code>tar -zcvf wordPress_backup.tar.gz /var/www/html/wordpress\n</code></pre> <p>4\uff0c\u5c06\u7f51\u7ad9\u5907\u4efd\u548c\u6570\u636e\u5e93\u5907\u4efd\u5408\u5e76\u5230\u4e00\u4e2a\u811a\u672c\uff1a</p> <pre><code>#!/bin/sh\n#This is a backup shell script of my mysql of wordpress.\nhostname='localhost'\nuser='root'\npassword='myPasswd'\n\ndatabase='databaseName'\nbackpath='Path'\ndate=$(date +\"%Y-%m-%d\")\nmysqldump -h$hostname -u$user -p$password $database &gt; $backpath/$date-$database.sql\ntar -zcvf $backpath/$date-wordPress_backup.tar.gz /var/www/html/wordpress\n</code></pre> <p>5\uff0c\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u5b9a\u65f6\u6267\u884c\u5907\u4efd\u811a\u672c\uff1a</p> <pre><code>crontab -e #\u5f00\u542f\u7cfb\u7edf\u5b9a\u65f6\u4efb\u52a1\uff0c\u63a5\u4e0b\u6765\u9009\u62e9\u7f16\u8f91\u6a21\u5f0f\uff0c\u9009\u62e93\uff0cvim\u7f16\u8f91\n</code></pre> <p>6\uff0c\u5728\u4efb\u52a1\u811a\u672c\u4e2d\u8f93\u5165\u4ee5\u4e0b\uff0c\u8868\u793a\u6bcf\u5929\u7684\u96f6\u70b9\u6267\u884c\u5907\u4efd\u811a\u672c\uff1a</p> <pre><code>0 0 * * * /root/xt/mysqlBackup/mysql_backup.sh\n</code></pre> <p>7\uff0c\u67e5\u770b\u5b9a\u65f6\u4efb\u52a1\uff1a</p> <pre><code>crontab -l #\u67e5\u770b\u5b9a\u65f6\u4efb\u52a1\ncrontab -e #\u7f16\u8f91\u5b9a\u65f6\u4efb\u52a1\nservice cron status #\u67e5\u770b\u72b6\u6001\nservice cron restart #\u91cd\u542f\u670d\u52a1\ntail -f /var/log/cron.log #\u67e5\u770b\u65e5\u5fd7\n</code></pre> <p>8\uff0c\u5c06\u5b9a\u65f6\u4efb\u52a1\u52a0\u5165\u5f00\u673a\u542f\u52a8\u9879</p> <pre><code>vim /etc/rc.local\nservice cron start #\u6700\u540e\u4e00\u884cexit\u4e4b\u524d\u52a0\u5165\u8be5\u547d\u4ee4\u3002\n</code></pre> <p>Tips\uff0c\u811a\u672c\u9700\u8981\u83b7\u53d6\u6267\u884c\u6743\u9650\uff1a</p> <pre><code>sudo chmod u+x ./mysqlBackup.sh\n</code></pre> <p>9\uff0c\u6062\u590d\u6570\u636e\uff1a</p> <p>wordpress\u6570\u636e\u76f4\u63a5\u89e3\u538b\u5230 \u76ee\u6807\u76ee\u5f55\uff0cmysql\u6570\u636e\u5e93\u6587\u4ef6\u6062\u590d\u547d\u4ee4\uff1a</p> <pre><code>mysql -uroot -ppassword database_name &lt; database.sql\n</code></pre> <p>10\uff0cwordpress\u5b89\u88c5\u65f6\uff0c\u6dfb\u52a0\u7684\u6709\u8be5\u7528\u6237\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5c06\u8be5\u7528\u6237\u6dfb\u52a0\u8fdbmysql\uff1a</p> <pre><code>create user wordpress;\nGRANT ALL ON wordpress.* TO 'wordpressuser'@'localhost' IDENTIFIED BY 'password';\nFLUSH PRIVILEGES;\n</code></pre> <p>11\uff0c\u6570\u636e\u5e93\u6062\u590d\u5b8c\u6bd5\u3002</p> <ul> <li>12wordpress \u7684\u9996\u9875\u5730\u5740\u5b58\u5728mysql\u4e2d\u7684wp_options\u5b57\u6bb5\uff0c\u7b49\u4e8esiteurl\u548chome\u7684\u8bb0\u5f55\uff0c\u5982\u679c\u4fee\u6539\u4e86nginx\u7684\u914d\u7f6e\u7b49\uff0c\u9700\u8981\u540c\u6b65\u4fee\u6539\uff1a</li> </ul> <pre><code>update wp_options set option_value='http://107.174.240.90:8181' where option_name in ('siteurl','home');\n</code></pre>"},{"location":"SystemConfiguration/Auto_delete_overNum_oldBackup_files/","title":"\u81ea\u52a8\u5220\u9664\u8d85\u51fa\u6570\u91cf\u7684\u65e7\u5907\u4efd\u6587\u4ef6","text":""},{"location":"SystemConfiguration/Auto_delete_overNum_oldBackup_files/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u6587\u4ef6\u81ea\u52a8\u6bcf\u5929\u5907\u4efd\uff0c\u8fde\u65e5\u4e0b\u6765\uff0c\u5fc5\u5b9a\u5360\u7528\u5927\u91cf\u7a7a\u95f4\uff0c\u6240\u4ee5\u60f3\u5230\u5f53\u6570\u91cf\u8d85\u51fa\u4e00\u5b9a\u6570\u76ee\u540e\uff0c\u81ea\u52a8\u5220\u9664\u65e7\u6587\u4ef6\uff0c\u65b0\u5efa\u811a\u672c\u6587\u4ef6:<code>delte_old_backup_file.sh</code></p> <pre><code>#!/bin/sh\n#This is a shell script to delete the old backup files.\npath='/root/xt/mysqlBackup/'\ncd $path || exit\nnum=`ls -l | grep '^-' | wc -l` #\u5217\u4e3e\u51fa\u5f53\u524d\u76ee\u5f55\u6587\u4ef6\u6570\u91cf\nif [ $num -gt 8 ] #\u8d85\u8fc78\u4e2a\nthen\n num=`expr $num - 8`\n clean=`ls -tr | head -$num | xargs` #\u83b7\u53d6\u6587\u4ef6\n st=\"delete file ${clean}\" #\u8bb0\u5f55\u5199\u5165\u65e5\u5fd7\u7684\u5b57\u7b26\u4e32\n echo $st &gt;&gt; /root/xt/log/wordpressDeleteLog.log #\u5199\u5165\u65e5\u5fd7\u3002\n ls -tr | head -$num | xargs -i -n1 rm -rf {}  #\u5220\u9664\u547d\u4ee4\nfi\n</code></pre> <p>2\uff0c\u5c06\u8be5\u6587\u4ef6\u52a0\u5165\u5b9a\u65f6\u4efb\u52a1\u540e\uff1a</p> <pre><code>0 0 * * * /root/xt/delte_old_backup_file.sh  #\u6bcf\u5929\u51cc\u6668\u6267\u884c\u5220\u9664\u4efb\u52a1\n5 0 * * * /root/xt/wordpress_mysql_site_back.sh  #\u6bcf\u5929\u51cc\u66685\u70b9\u6267\u884c\u5907\u4efd\n</code></pre> <p>3\uff0c\u91cd\u542f\u670d\u52a1\uff1a</p> <pre><code>service cron restart\n</code></pre> <p>4\uff0c\u589e\u52a0\u811a\u672c\u6267\u884c\u6743\u9650\uff1a</p> <pre><code>chmod u+x ./delte_old_backup_file.sh\n</code></pre>"},{"location":"SystemConfiguration/CDN%26domain/","title":"\u5173\u4e8eCDN\u548c\u57df\u540d\u5907\u6848","text":""},{"location":"SystemConfiguration/CDN%26domain/#2019122020191220crazyxt","title":"\u4e8e2019\u5e7412\u670820\u65e52019\u5e7412\u670820\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/CDN%26domain/#vpscdnhttphttpscloudflare","title":"\u8fd9\u4e24\u5929\u610f\u8bc6\u5230\u56fd\u5185\u8bbf\u95ee\u7f51\u7ad9\u7684\u65f6\u5019\u901f\u5ea6\u5f88\u6162\uff0c\u56e0\u4e3a<code>VPS</code>\u5728\u7f8e\u56fd\uff0c\u6240\u4ee5\u60f3\u5230\u4f7f\u7528\u67d0\u4e9b\u514d\u8d39\u7684<code>CDN</code>(\u5185\u5bb9\u5206\u53d1)\u670d\u52a1\uff0c\u4f46\u662f\u5927\u591a\u6570\u7684\u514d\u8d39\u63d0\u4f9b\u5546\u53ea\u63d0\u4f9b<code>http</code>\u8bbf\u95ee\uff0c\u4e0d\u63d0\u4f9b<code>https</code>\u3002\u6240\u4ee5\u4f7f\u7528\u4e86<code>cloudflare</code>\u548c<code>\u53c8\u62cd\u4e91</code>\uff1a","text":"<ul> <li>\u4e00\u5f00\u59cb\u7528\u4e86<code>cloudflare</code>\uff0c\u4f46\u662f\u4f7f\u7528\u4e4b\u540e\u53d1\u73b0\u5b83\u7684\u670d\u52a1\u5668\u662f\u5728\u7f8e\u56fd\uff0c\u8bbe\u7f6e\u597d\u4e4b\u540e\uff0cping\u7684\u901f\u5ea6\u6709\u65f6\u5feb(150ms)\uff0c\u6709\u65f6\u6162(200ms\u5de6\u53f3)\uff0c\u4f46\u662f\u663e\u793a\u56fd\u5185\u7684\u786e\u6709\u5b83\u7684CDN\u670d\u52a1\u5668\uff1a    </li> <li>\u6ce8\u518c\u4e86<code>\u53c8\u62cd\u4e91</code>\uff0c\u5206\u914d\u4e86<code>CNAME</code>\uff0c\u4f46\u662f\u76f4\u63a5\u6839\u636e<code>CNAME</code>\u8bbf\u95ee\u7684\u65f6\u5019\u63d0\u793a\u57df\u540d\u672a\u5907\u6848\u3002\u3002\u3002\u67e5\u8be2\u4e4b\u540e\u53d1\u73b0\u56fd\u5185\u60f3\u8981\u505aCDN\uff0c\u9700\u8981\u57df\u540d\u5907\u6848\u624d\u53ef\u4ee5\uff0c\u4f46\u662f\u95ee\u9898\u662f\u56fd\u5185\u7684VPS\u53ef\u4ee5\u5907\u6848\uff0c\u56fd\u5916\u7684\u57df\u540d\u65e0\u6cd5\u5907\u6848\u4e86\uff0c\u60f3\u8981\u5907\u6848\uff0c\u53ea\u6709\u8fc1\u5230\u56fd\u5185\uff1f\u91cd\u65b0\u4e70VPS\u548c\u57df\u540d\uff1f\uff1f\uff1f\u4e00\u901a\u64cd\u4f5c\u4e0b\u6765\uff0c\u653e\u5f03\u53c8\u62cd\u4e91\u7684CDN\u5427\u3001\u3001\u3001   </li> </ul> <p>\u5206\u7c7b\uff1a \u5b66\u4e60</p>"},{"location":"SystemConfiguration/Config_php7.0/","title":"\u914d\u7f6ephp7.0","text":"<ul> <li> <p>\u67e5\u770b\u7cfb\u7edf\u7528\u6237</p> </li> <li> <p><code>grep bash /etc/passwd</code></p> </li> <li> <p>\u6dfb\u52a0\u7528\u6237\uff1a</p> </li> <li> <p><code>adduser</code></p> </li> <li> <p>\u67e5\u770bphp\u72b6\u6001</p> </li> <li> <p><code>systemctl status php7.0-fpm.service</code></p> </li> <li> <p>```   #wp-config.php\u6570\u636e\u5e93\u914d\u7f6e\uff1a   define( 'DB_NAME', 'wordpress' );</p> </li> </ul> <p>/* MySQL database username /   define( 'DB_USER', 'wordpress' );</p> <p>/* MySQL database password /   define( 'DB_PASSWORD', 'wsXT1225' );</p> <p>/* MySQL hostname /   define( 'DB_HOST', 'localhost' );</p> <p>/* Database Charset to use in creating database tables. /   define( 'DB_CHARSET', 'utf8' );</p> <p>/* The Database Collate type. Don't change this if in doubt. /   define( 'DB_COLLATE', '' );   ```</p> <ul> <li> <p>php7.0\u914d\u7f6e\uff1a</p> </li> <li> <p>\u8def\u5f84\uff1a<code>/etc/php/7.0/fpm/pool.d/www.conf</code></p> </li> <li>\u5c06owener \u548cgroup\u6539\u4e3awww-data</li> </ul>"},{"location":"SystemConfiguration/Git_useful_tips/","title":"git\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"SystemConfiguration/Git_useful_tips/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>windows\u4e0elinux\u65b9\u6cd5\u7c7b\u4f3c: 1,\u9996\u5148\u9700\u8981\u5728github\u6216gitlab\u7c7b\u4f3c\u7f51\u7ad9\u6ce8\u518c\u5e76\u5efa\u7acbproject,\u4ee5gitlab\u4e3a\u4f8b,\u5efa\u7acbdocker_project</p> <p></p> <p>2,\u5728setting\u4e2d\u7684SSH key\u6dfb\u52a0\u672c\u673a\u7684id_rsa.pub key 3,\u672c\u673a\u4e2dcd\u5230\u9879\u76ee\u6587\u4ef6\u5939,\u5e76git init,\u4f5c\u4e3a\u672c\u5730\u4ed3\u5e93\u6587\u4ef6\u5939 4,clone\u8fdc\u7a0b\u4ed3\u5e93:\u5728\u7b2c\u4e00\u6b65\u7684project\u4e2d\u53ef\u4ee5\u770b\u5230SSH\u94fe\u63a5,\u901a\u8fc7\u8be5\u94fe\u63a5clone\u9879\u76ee:\ufeff</p> <pre><code>git clone git@git.dlcloud.info:xutao/docker_project.git\n</code></pre> <p>5,cd\u5230clone\u7684\u6587\u4ef6\u5939,\u5c06\u9700\u8981push\u7684\u6587\u4ef6\u653e\u5165\u8be5\u6587\u4ef6\u5939 6,\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93:</p> <pre><code>git remote add origin git@git.dlcloud.info:xutao/docker_project.git\n</code></pre> <p>7,\u901a\u8fc7git add \u6587\u4ef6\u540d\u6dfb\u52a0\u6587\u4ef6,\u548cgit commit -m \u201c\u201d\u8bf4\u660e,\u6700\u540egit push -u origin master\u5373\u53ef\u6210\u529fpush\u6587\u4ef6 ** 8,\u53d6\u6d88\u8fdc\u7a0b\u4ed3\u5e93\u7684\u8fde\u63a5:**</p> <pre><code>git remote remove origin\n</code></pre> <p>PS:\u4e0d\u8981\u5728\u7f51\u9875\u8fdc\u7aef\u4fee\u6539\u4ee3\u7801\u6216\u5220\u9664\u6587\u4ef6,\u5426\u5219\u672c\u5730push\u4f1a\u51fa\u95ee\u9898,\u9700\u8981\u91cd\u65b0clone\u9879\u76ee\u5e76\u4e14git remote add origin \u2026\u7b49\u64cd\u4f5c \u6b63\u786e\u5220\u9664\u8fdc\u7aef\u4ed3\u5e93\u6587\u4ef6\u64cd\u4f5c:</p> <pre><code>git rm \u6587\u4ef6\u540d #\u5982\u679c\u662f\u6587\u4ef6\u5939,\u9700\u8981\u52a0-r\u53c2\u6570\ngit commit -m \"remove\"\ngit push\n</code></pre>"},{"location":"SystemConfiguration/Git_useful_tips/#unmerged-paths-both-modified","title":"\u9047\u5230Unmerged paths both modified","text":"<pre><code>Unmerged paths:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n        both modified:   src/core/modules/editor/RoomConnector2DWeb.js\n</code></pre> <p>\u53ef\u4f7f\u7528restore\u547d\u4ee4\uff1a</p> <pre><code>git restore --staged src/core/modules/editor/RoomConnector2DWeb.js\n</code></pre> <p>\u5e94\u8be5\u5df2\u7ecf\u6ca1\u6709both modified\u95ee\u9898\u3002</p> <p>\u7136\u540e\u6267\u884c:</p> <pre><code>git stash //\u6682\u5b58\u5de5\u4f5c\u533a\n\ngit pull //\u66f4\u65b0\u4ee3\u7801\n\ngit stash pop //\u6062\u590d\u672c\u5730\u66f4\u6539\n</code></pre>"},{"location":"SystemConfiguration/Git_useful_tips/#git-statusdelete","title":"\u4e0d\u5c0f\u5fc3\u5220\u9664\u6587\u4ef6\uff0cgit status\u67e5\u770b\u65f6\uff0c\u6587\u4ef6\u5904\u4e8edelete\u72b6\u6001\uff0c\u6062\u590d\u529e\u6cd5\uff1a","text":"<pre><code>git checkout file\n</code></pre>"},{"location":"SystemConfiguration/Git_useful_tips/#git-addcommit","title":"git add<code>\u5e76\u4e14</code>commit`\u4e4b\u540e\u60f3\u8981\u9000\u56de\u600e\u4e48\u529e?","text":"<pre><code>git reset --soft HEAD^\n</code></pre> <ul> <li>\u7136\u540e\u7248\u672c\u5c31\u56de\u9000\u5230\u4e86commit\u4e4b\u524d\u72b6\u6001.</li> </ul>"},{"location":"SystemConfiguration/Git_useful_tips/#git-commit","title":"<code>git commit</code>\u4e4b\u540e\u63d0\u4ea4\u4e4b\u524d\u53c8\u6709\u4eba\u63d0\u4ea4\u4ee3\u7801\u5bfc\u81f4\u5982\u4e0b\u95ee\u9898\uff1a","text":"<pre><code>$ git status\nOn branch feature/union\nYour branch is ahead of 'origin/feature/union' by 2 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre> <p>\u547d\u4ee4 <code>git cherry -v</code> \u53ef\u67e5\u770b<code>commit</code>\u4fe1\u606f\uff1b</p> <p>\u7136\u540e\u6267\u884c<code>git pull</code>\u66f4\u65b0\u8fdc\u7aef\u4ed3\u5e93\uff0c\u518d\u91cd\u65b0\u6267\u884c<code>git push</code>\u5373\u53ef\u3002</p>"},{"location":"SystemConfiguration/Gitlab_CICD/","title":"Gitlab\u4e4bCICD\u914d\u7f6e","text":""},{"location":"SystemConfiguration/Gitlab_CICD/#gitlab-cicd","title":"GitLab-CICD","text":""},{"location":"SystemConfiguration/Gitlab_CICD/#docker","title":"Docker\u5b89\u88c5","text":"<ul> <li>daocloud\u4e00\u952e\u5b89\u88c5\u547d\u4ee4\uff1a</li> </ul> <pre><code>curl -sSL https://get.daocloud.io/docker | sh\n</code></pre> <ul> <li>\u5b98\u65b9\uff1a</li> </ul> <pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror aliyun\n</code></pre>"},{"location":"SystemConfiguration/Gitlab_CICD/#gitlab-runner","title":"\u5b89\u88c5gitlab-runner\uff1a","text":"<ul> <li>\u53c2\u8003\u5b98\u65b9\uff1a<code>https://docs.gitlab.com/runner/install/linux-manually.html</code></li> </ul>"},{"location":"SystemConfiguration/Gitlab_CICD/#_1","title":"\u524d\u63d0\uff1a\u5fc5\u987b\u662f\u4ed3\u5e93\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u914d\u7f6e\uff01","text":"<ul> <li> <p>\u9996\u5148\u914d\u7f6e\u4e00\u4e2a<code>Runner</code>\uff1a\u8fdb\u5165\u4ed3\u5e93\uff0c\u4eceSettings<code>\u4e2d\u8fdb\u5165</code>CI/CD<code>, \u627e\u5230</code>Runners<code>\u6253\u5f00\uff0c\u9009\u62e9</code>runner<code>\u65b9\u5f0f\uff0c\u6bd4\u5982\u624b\u52a8\u81ea\u5df1\u8bbe\u7f6e\u7684\u8bdd\u5c31\u9009</code>specific runner`\u3002\u6309\u7167\u6559\u7a0b\uff0c\u5728\u4e00\u53f0\u8054\u7f51\u7684\u673a\u5668\u4e0a\u5b89\u88c5\uff1a</p> </li> <li> <p>\u4f8b\u5982\u9009\u62e9\u4e00\u53f0VPS\uff0c\u4ee5<code>ubuntu</code>\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u4ee5<code>Docker</code>\u65b9\u5f0f\u8fd0\u884c</p> </li> <li> <p>pull\u57fa\u955c\u50cf\uff1a <code>pull gitlabrunner</code>\uff1a</p> <ul> <li><code>docker pull gitlab/gitlab-runner:latest</code></li> </ul> </li> <li> <p>\u521b\u5efaRunner\uff1a</p> <ul> <li> <p>\u65b9\u5f0f\u4e00\uff1a\u8d77\u4e00\u4e2a<code>docker</code>\u5b9e\u4f8b\uff1a</p> </li> <li> <p><code>docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</code></p> <p>\u8fd9\u79cd\u7eaf\u5bb9\u5668\u65b9\u5f0f\u4e0d\u77e5\u4e3a\u4f55\u65e0\u6cd5\u63a2\u6d4b\u5230job\uff0c\u8fd8\u662f\u91c7\u7528\u65b9\u5f0f\u4e8c\u5427\u3002</p> </li> <li> <p>\u81f3\u4e8evolume\u6302\u8f7d\uff0c\u6839\u636e\u9700\u8981\u8981\u4e0d\u8981\u6302\u8f7d\u5230vps\u6216\u5176\u4ed6\u5730\u65b9\u3002</p> </li> <li> <p>\u65b9\u5f0f\u4e8c\uff1a(\u63a8\u8350)\u547d\u4ee4\u884c\uff1a<code>gitlabrunner</code>\uff1a</p> </li> <li> <p>\u76f4\u63a5\u901a\u8fc7gitlab-runner\u547d\u4ee4\uff1a</p> <ul> <li><code>gitlab-runner register</code> <p>\u540e\u7eed\u9009\u62e9docker\u6267\u884c\uff0c\u5219\u5728\u6267\u884cjob\u65f6\u5b9e\u9645\u662f\u5728\u5bb9\u5668\u4e2d\u6267\u884c\u3002</p> </li> </ul> </li> <li>\u6839\u636e\u63a5\u4e0b\u6765\u7684\u63d0\u793a\u8f93\u5165\u5728CI/CD\u9875\u63d0\u793a\u7684<code>URL</code>\u548c<code>token</code>\uff0c\u518d\u8f93\u5165\u5176\u4ed6\u76f8\u5173\u4fe1\u606f\u5373\u53ef\uff0c\u4e00\u4e2arunner\u5373\u6210\u529f\u521b\u5efa</li> </ul> </li> <li> <p>\u5230Setting -&gt; Runner\u4e2d\uff0c\u5bf9Runner\u8fdb\u884c\u8bbe\u7f6e\uff0c\u52fe\u9009 <code>Indicates whether this runner can pick jobs without tags</code></p> </li> <li> <p>\u67e5\u770bRunner\u662f\u5426\u5728\u8fd0\u884c\uff1a</p> </li> <li> <p><code>gitlab-runner verify</code></p> </li> <li> <p>\u914d\u7f6e\u6587\u4ef6\uff1a</p> <ul> <li> <p>\u5728\u4ed3\u5e93\u6839\u76ee\u5f55\u521b\u5efa <code>.gitlab-ci.yml</code> \u6587\u4ef6\uff0c\u683c\u5f0f\u8981\u6c42\u8f83\u9ad8\uff0c\u53ef\u901a\u8fc7<code>CI-lint</code>\u68c0\u6d4b\uff0c\u4e3b\u8981\u662f\u6307\u5b9a<code>stage</code>\u4ee5\u53ca\u5404<code>stage</code>\u7684<code>job</code>\uff0c\u4f8b\u5982\uff1a</p> </li> <li> <p>```yml     image: \"node:latest\"</p> <p>stages:   - install   - build</p> <p>cache:   paths:     - node_modules</p> <p>install:   stage: install   script:     #- npm config set registry https://registry.npm.taobao.org     - npm install --force   only:     - master   rules: #rules\u4e0eonly\u4e0d\u80fd\u5171\u5b58\uff0crule\u4e0b\u7684if\u53ef\u8bbe\u7f6e\u6761\u4ef6\uff0c&amp;&amp;\u6216||\uff0c\u6b63\u5219\u5339\u914d\u7b49       - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^master/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/'         when: manual #when\u53ef\u8bbe\u7f6e\u4f55\u65f6\u89e6\u53d1\uff0con_success\u81ea\u52a8\u89e6\u53d1\uff0cmanual\u662f\u624b\u52a8\u89e6\u53d1\uff0c\u9700\u8981\u5728gitlab\u9875\u9762\u624b\u52a8\u70b9\u51fb\u6267\u884c\uff0c\u70b9\u51fb\u4e4b\u524d\u4e0d\u53ef\u6267\u884cmerge  build:   stage: build   script:     - - echo \"\u5f00\u59cb\u6253\u5305\"     - npm run build     - echo \"\u5f00\u59cb\u6267\u884cbuild.sh\"     - chmod a+x ./build.sh     - ./build.sh   only:     - master after_script:   - echo \"Stage\uff1a${CI_JOB_STAGE}, Job\uff1a${CI_JOB_NAME}, Branch:${CI_COMMIT_BRANCH},CommitMessage:${CI_COMMIT_MESSAGE}, complete\uff01,\" ```</p> <ul> <li> <p>\u5728\u4e0d\u540c\u7684stage\u6267\u884cjob\u65f6\u4e5f\u53ef\u8c03\u7528\u5916\u90e8\u811a\u672c\uff0c\u6bd4\u5982\u672c\u4f8b\u4e2d\u7684<code>shell</code>\u811a\u672c\uff1a</p> </li> <li> <p><code>shell     #!/bin/sh     wget http://gosspublic.alicdn.com/ossutil/1.6.18/ossutil64     chmod 755 ossutil64     echo \"endPoint:\"${endPoint}     ./ossutil64 config -e ${endPoint} -i ${accessKeyID} -k ${accessKeySecret} -L CH --loglevel debug -c ~/.ossutilconfig     ./ossutil64 -c ~/.ossutilconfig cp -r ./dist/ oss://vrhouse-web/31test-403/drawLines/v2/ --meta x-oss-object-acl:public-read-write -f</code></p> </li> <li> <p><code>shell</code>\u4e2d\u7684\u53d8\u91cf\u53ef\u4ee5\u5728CI/CD\u9875\u9762\u7684<code>variable</code>\u4e2d\u6307\u5b9a\uff0c\u8fd9\u6837\u5728\u8fd0\u884c\u811a\u672c\u7684\u65f6\u5019\u662f\u53ef\u4ee5\u83b7\u53d6\u5230\u8bbe\u7f6e\u7684\u53d8\u91cf\u7684\u3002</p> </li> </ul> </li> <li> <p>\u628a\u914d\u7f6e\u6587\u4ef6\u548c\u811a\u672c\u63a8\u9001\u7684\u4ed3\u5e93\uff0c\u5982\u679c\u6709\u7b26\u5408\u89c4\u5219\u7684<code>commit</code>\u6216<code>merge</code>\u63a8\u9001\u5230\u4ed3\u5e93\uff0c\u5219\u4f1a\u81ea\u52a8\u8fd0\u884cCI/CD</p> </li> </ul> </li> <li> <p>\u901a\u8fc7\u8bbe\u5b9a\u89c4\u5219\uff0c\u53ef\u6ee1\u8db3\u8fbe\u5230\u89c4\u5219\u7684\u63d0\u4ea4\u624d\u89e6\u53d1CICD,\u6bd4\u5982merge\u5230master\u7684\u63d0\u4ea4\u624d\u6709\u6548\uff1a</p> </li> <li> <p>```yaml   install_job:     stage: install     script:</p> <ul> <li>npm install --force rules:</li> <li>if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == \"master\"'   //\u901a\u8fc7\u8bbe\u5b9arules     when: always     allow_failure: true //\u5373\u4f7f\u8be5job\u5931\u8d25\uff0c\u4e5f\u4e0d\u5f71\u54cd\u5176\u4ed6job   ```</li> </ul> </li> <li> <p>\u5982\u679c\u901a\u8fc7<code>gitlab-runner stop</code>\u505c\u6b62\u4e86\u670d\u52a1\uff0c\u9700\u8981\u91cd\u542f\uff1a</p> </li> <li> <p><code>gitlab-runner install --user=gitlab-runner     gitlab-runner start</code></p> </li> <li> <p>\u7136\u540e<code>gitlab-runner status</code>\u5373\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u5df2\u7ecf\u8d77\u6765\u4e86\u3002</p> </li> <li> <p><code>gitlab-runner</code>\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a<code>config.toml</code>\uff0c\u5730\u5740\u4e3a\uff1a<code>/etc/gitlab-runner/config.toml</code></p> </li> <li> <p>\u91cc\u9762\u5b9a\u4e49\u4e86\u6ce8\u518c\u7684\u6240\u6709<code>runner</code>\u4fe1\u606f</p> </li> <li> <p>\u67e5\u770b\u6240\u6709runner\uff1a</p> </li> <li> <p><code>gitlab-runner list</code></p> </li> <li> <p>\u5982\u679c\u9047\u5230Runner net connetct yet\uff0c\u53ef\u4ee5\u5c1d\u8bd5debug\uff1a</p> </li> </ul> <pre><code>  gitlab-runner --debug run\n</code></pre> <ul> <li></li> </ul>"},{"location":"SystemConfiguration/Gitlab_CICD/#npm-installkill","title":"\u81ea\u52a8\u6267\u884cnpm install\u65f6\u8fdb\u7a0b\u88abkill\uff1a","text":"<ul> <li> <p>\u5982\u679c\u914d\u7f6e\u6ca1\u95ee\u9898\uff0c\u8fdb\u7a0b\u5374\u88abkill\uff0c\u6709\u53ef\u80fd\u662f\u670d\u52a1\u5668\u5185\u5b58\u4e0d\u8db3\u5bfc\u81f4\uff0c\u53ef\u901a\u8fc7top\u547d\u4ee4\u548ciostat -5\u67e5\u770b\u6267\u884cpipeline\u65f6\u7684\u72b6\u6001\uff0ccpu\u548c\u5185\u5b58\u8fbe\u5230100%\u5373\u53ef\u786e\u5b9a\u662f\u8d44\u6e90\u4e0d\u8db3\u88abkill\u4e86</p> </li> <li> <p>\u901a\u8fc7\u521b\u5efaswap\u5206\u533a\u6765\u89e3\u51b3\uff1a</p> </li> <li> <p>swapon --show\u548cfree -h\u547d\u4ee4\u53ef\u67e5\u770b\u5f53\u524dswap\u4ea4\u6362</p> </li> <li> <p>```     //\u521b\u5efa1GB\u7684\u4ea4\u6362\u533a\uff1a     sudo dd if=/dev/zero of=/swapfile bs=1024 count=1048576</p> <p>//\u8bbe\u7f6eroot\u7528\u6237\u8bfb\u5199\u6743\u9650 chmod 600 /swapfile</p> <p>//\u8bbe\u7f6elinux\u4ea4\u6362\u533a mkswap /swapfile</p> <p>//\u542f\u7528\u4ea4\u6362 swapon /swapfile</p> <p>//\u8ffd\u52a0/etc/fstab /swapfile swap swap defaults 0 0 </p> <p>//\u9a8c\u8bc1\u72b6\u6001 free -h  swapon --show ```</p> </li> <li> <p>\u5220\u9664\u4ea4\u6362\u6587\u4ef6</p> <p>``` swapoff -v /swapfile</p> <p>\u5220\u9664/etc/fstab\u4e2d\u52a0\u7684\u6761\u76ee</p> <p>rm /swapfile ```</p> </li> </ul>"},{"location":"SystemConfiguration/Install_SSL_To_Site/","title":"\u7f51\u7ad9\u5b89\u88c5SSL\u8bc1\u4e66\u5f00\u542fhttps\u52a0\u5bc6\u8bbf\u95ee","text":""},{"location":"SystemConfiguration/Install_SSL_To_Site/#2019121820191218crazyxt","title":"\u4e8e2019\u5e7412\u670818\u65e52019\u5e7412\u670818\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/Install_SSL_To_Site/#letscryptsslhttps","title":"\u4f7f\u7528<code>letscrypt</code>\u4e3a\u7f51\u7ad9\u5b89\u88c5\u514d\u8d39<code>ssl</code>\u8bc1\u4e66\u5f00\u542fhttps\u52a0\u5bc6\u8bbf\u95ee\uff1a","text":"<p>\u7cfb\u7edf\u73af\u5883\uff1aUbuntu 16.04</p>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#1acmesh","title":"1\uff0c\u5b89\u88c5<code>acme.sh</code>,\u501f\u52a9\u8be5\u5de5\u5177\u5b89\u88c5\u8bc1\u4e66\uff1a","text":"<pre><code>wget -O - https://get.acme.sh | sh\n</code></pre> <p>\u8be5\u811a\u672c\u5b8c\u6210\u4ee5\u4e0b\uff1a \\1. \u751f\u6210\u590d\u5236\u4e86<code>acme.sh</code> \u5230\u4f60\u7684 <code>~/.acme.sh/</code>\u76ee\u5f55\u4e0b \uff0c\u540e\u9762\u6240\u6709\u7684\u8bc1\u4e66\u90fd\u4f1a\u5728\u8fd9\u4e2a\u76ee\u5f55\u751f\u6210\uff1b \\2. Create alias for: <code>acme.sh=~/.acme.sh/acme.sh</code>. \u6ce8\u610f\uff1a\u5b89\u88c5\u5b8c\u6210\u540e\u4f60\u9700\u8981\u5173\u95ed\u518d\u6253\u5f00\u7ec8\u7aef\u624d\u53ef\u4ee5\u8ba9 <code>alias</code> \u751f\u6548\u3002 \\3. \u589e\u52a0\u4e86\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff0c\u7528\u4e8e<code>SSL</code>\u8bc1\u4e66\u66f4\u65b0.</p>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#2dns-api","title":"2\uff0c\u4e3a\u57df\u540d\u6dfb\u52a0\u8bc1\u4e66\uff1a\u8fd9\u91cc\u6839\u636e<code>DNS API</code>\u81ea\u52a8\u9a8c\u8bc1\u57df\u540d\uff1a","text":"<p>\u524d\u5f80<code>namesilo</code>\u57df\u540d\u7f51\u7ad9\u83b7\u53d6<code>API</code>: <code>https://www.namesilo.com/account_api.php</code></p>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#3api","title":"3\uff0c\u5bfc\u5165\u57df\u540d<code>API</code>:","text":"<pre><code>export Namesilo_Key=API Key`\n`source /etc/profile\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>API Key</code>\u4e00\u65e6<code>export</code>\uff0c<code>acme.sh</code>\u5c31\u4f1a\u5728\u914d\u7f6e\u6587\u4ef6<code>~/.acme.sh/account.conf</code>\u4e2d\u5bfc\u5165\u8be5<code>key</code>\uff0c\u5982\u679c\u540e\u671f\u91cd\u65b0\u751f\u6210<code>API</code>\uff0c\u5219\u9700\u624b\u52a8\u5230\u8be5\u6587\u4ef6\u4e2d\u4fee\u6539\u3002</p>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#4","title":"4\uff0c\u4e3a\u57df\u540d\u5b89\u88c5\u8bc1\u4e66\uff1a","text":"<pre><code>acme.sh --issue --dns dns_namesilo -d crazyxt.com -d *.crazyxt.com\n</code></pre> <p>\u8bc1\u4e66\u5b89\u88c5\u6b21\u6570\u6709<code>ratelimit</code>\u9650\u5236\uff0c\u5982\u679c\u8d85\u8fc7\u6b21\u6570\u4f1a\u62a5\u9519\uff0c\u65b9\u6cd5\u662f\u7b49\u51e0\u4e2a\u5c0f\u65f6\u540e\u518d\u8bd5\u3002</p>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#5nginx","title":"5\uff0c\u914d\u7f6e<code>Nginx</code>\uff1a","text":"<p><code>Nginx</code>\u914d\u7f6e\u6587\u4ef6\uff1a<code>/etc/nginx/nginx.conf</code> <code>http</code>\u6bb5\u4e2d\u52a0\u5165\u4ee5\u4e0b\u8bbe\u7f6e:</p> <pre><code>ssl_session_cache   shared:SSL:10m;\nssl_session_timeout 10m;\nssl_certificate /root/.acme.sh/crazyxt.com/fullchain.cer;\nssl_certificate_key /root/.acme.sh/crazyxt.com/crazyxt.com.key;\n</code></pre>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#6nginx-https","title":"6,\u914d\u7f6e<code>Nginx https</code>\u8f6c\u53d1\uff1a","text":"<p>\u4e4b\u524d\u8bbf\u95ee\u65b9\u5f0f\u4e3a<code>http</code>\u8bbf\u95ee\uff0c\u914d\u7f6e\u597d<code>SSL</code>\u8bc1\u4e66\u4e4b\u540e\u9700\u8981\u5c06<code>http</code>\u8f6c\u53d1\u4e3a<code>https</code>\u8bbf\u95ee\uff0c\u65b9\u5f0f\u4e3a\u4fee\u6539<code>Nginx</code>\u914d\u7f6e\u6587\u4ef6\uff1a<code>/etc/nginx/sites-available/default</code>:</p> <pre><code>server {\n    listen 80 default_server; #http\u9ed8\u8ba480\u7aef\u53e3\u8bbf\u95ee\n    listen [::]:80 default_server;\n    rewrite ^(.*)$ https://$host$1 permanent; #\u8f6c\u53d1\u4e3ahttps\u8bbf\u95ee\n}\nserver{\n    # SSL configuration\n     listen 443 ssl default_server; #https\u9ed8\u8ba4443\u7aef\u53e3\u8bbf\u95ee\n     listen [::]:443 ssl default_server; \n\n    root /var/www/html/wordpress/;\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    server_name www.site.com site.com;\n    location / {\n        try_files $uri $uri/ =404;\n    }\n    location ~ \\.php$ { #\u5f00\u542fphp\u652f\u6301\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n    }\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n</code></pre> <p>\u914d\u7f6e\u597d\u4e4b\u540e\uff0c\u518d\u901a\u8fc7<code>http://site.com</code>\u8bbf\u95ee\u65f6\uff0c\u4f1a\u81ea\u52a8\u8f6c\u53d1\u5230<code>https</code>\u8bbf\u95ee\u3002</p>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#7nginx","title":"7\uff0c\u91cd\u542f<code>Nginx</code>\uff1a","text":"<pre><code>nginx -s reload\n</code></pre>"},{"location":"SystemConfiguration/Install_SSL_To_Site/#8wordpresshttps","title":"8\uff0c\u4fee\u6539<code>wordpress</code>\u5168\u7ad9\u4e3a<code>https</code>\u8bbf\u95ee","text":"<ul> <li>1\uff0c<code>wordpress</code> &gt; \u8bbe\u7f6e &gt; \u5e38\u89c4,\u4fee\u6539\u7ad9\u70b9\u5730\u5740\u4e3a<code>https</code>\uff1a   </li> <li>2\uff0c\u4e0b\u8f7d\u63d2\u4ef6<code>Velvet Blues Update URLs</code>\uff0c\u5c06\u6240\u6709<code>url</code>\u6539\u4e3a<code>https</code>\u8bbf\u95ee\uff1a   </li> <li>3\uff0c\u4fee\u6539\u5b8c\u4e4b\u540e\uff0c\u6253\u5f00\u4e3b\u9875\u662f\u4e0d\u662f\u5df2\u7ecf\u51fa\u73b0\u5b89\u5168\u52a0\u5bc6\u5c0f\u9501\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u63a7\u5236\u53f0\u5de5\u5177\u67e5\u770b\u54ea\u4e2a\u5143\u7d20\u4f9d\u65e7\u4e3a<code>http</code>\u8fde\u63a5\uff0c\uff08\u8fd9\u6b21\u53d1\u73b0\u4e3b\u9875\u7684\u524d\u666f\u548c\u80cc\u666f\u56fe\u7247\u94fe\u63a5\u4f9d\u65e7\u4e3a<code>http</code>\uff0c\u6240\u4ee5\u5c06\u539f\u59cb\u56fe\u7247\u79fb\u9664\uff0c\u7136\u540e\u91cd\u65b0\u4e0a\u4f20\uff0c\u7136\u540e\u53ef\u4ee5\u770b\u5230\u51fa\u73b0\u52a0\u5bc6\u5c0f\u9501\uff09\u3002</li> </ul>"},{"location":"SystemConfiguration/MAC_install_brew/","title":"Mac\u5b89\u88c5brew","text":""},{"location":"SystemConfiguration/MAC_install_brew/#1brewxcode-selectxcodexcode-select","title":"1\uff0cbrew\u5b89\u88c5\u9700\u8981\u5b89\u88c5<code>xcode-select</code>\uff0c\u5982\u679c\u6ca1\u6709\u5b89\u88c5<code>xcode</code>\uff0c\u5219\u53ea\u9700\u5b89\u88c5<code>xcode-select</code>\uff1a","text":"<pre><code>xcode-select --install\n</code></pre>"},{"location":"SystemConfiguration/MAC_install_brew/#2homebrew","title":"2\uff0c\u5b98\u65b9\u5b89\u88c5<code>Homebrew</code>\u65b9\u5f0f\uff1a","text":"<pre><code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n## \u9700\u8981\u7ffb\u5899\uff0c\u5e76\u4e14\u662f\u5168\u5c40\u4ee3\u7406\uff0c\u5426\u5219\u53ef\u80fd\u65e0\u6cd5\u8fde\u63a5\u5230github\n</code></pre>"},{"location":"SystemConfiguration/MAC_install_brew/#3","title":"3\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u62a5\u9519\u4fe1\u606f\uff1a","text":"<p>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</p>"},{"location":"SystemConfiguration/MAC_install_brew/#4http","title":"4\uff0c\u6253\u5f00\u4ee3\u7406\u8f6f\u4ef6\u8bbe\u7f6e\uff0c\u627e\u5230<code>http</code>\u4ee3\u7406\u4fe1\u606f\uff1a","text":""},{"location":"SystemConfiguration/MAC_install_brew/#5curlsocks","title":"5\uff0c\u5728<code>curl</code>\u4e2d\u52a0\u5165<code>socks</code>\u4ee3\u7406\u5730\u5740\uff1a","text":"<pre><code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install -x 127.0.0.1:1087)\"\n</code></pre> <p>\u6ca1\u6709\u62a5\u9519\u5373\u5b89\u88c5\u6210\u529f\u3002</p>"},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/","title":"Mac+VS Code\u7f16\u8bd1C++","text":""},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#202016202016crazyxt","title":"\u4e8e2020\u5e741\u67086\u65e52020\u5e741\u67086\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#maccxcode","title":"\u5199\u5728\u6587\u7ae0\u5f00\u5934\uff1a\u5728Mac\u4e0a\u7f16\u8bd1C++\u771f\u96be(\u5982\u679c\u4e0d\u7528Xcode\u7684\u8bdd)\uff0c\u4e4b\u524d\u5c1d\u8bd5\u8fc7\u51e0\u6b21\u5747\u4ee5\u653e\u5f03\u544a\u7ec8\u3002","text":"<p>\u5728mac\u4e0a\u7f16\u8bd1C++\u7528\u7684\u662fclang++\uff0c\u800c\u4e0d\u662fgcc\u2026\u5177\u4f53\u5565\u5173\u7cfb\uff0c\u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\u3002</p>"},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#1vscodeccccc-clang-command-adapter","title":"1\uff0c\u5148\u5728VScode\u4e0a\u5b89\u88c5C++\u63d2\u4ef6\uff0c\u5305\u62ec<code>C/C++</code>\u3001<code>C/C++ Clang Command Adapter</code>.","text":""},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#2shiftcommandpccuicc-mac-usrbinclangintellisenseclang-x64","title":"2\uff0c\u6309<code>shift+command+P</code>\u952e\u6253\u5f00\u8f93\u5165\uff0c\u8f93\u5165<code>C/C++</code>\uff0c\u9009\u62e9<code>\u7f16\u8f91UI</code>\uff0c\u8fdb\u800c\u6253\u5f00C/C++ \u914d\u7f6e\u9875\uff0c\u914d\u7f6e\u540d\u79f0\u586b<code>Mac</code>\uff0c\u7f16\u8bd1\u5668\u8def\u5f84\u586b <code>/usr/bin/clang</code>\uff08\u8fd9\u4e2a\u597d\u50cf\u65e0\u6240\u8c13?\u8bbe\u7f6e\u597d\u540e\uff0c\u540e\u6765\u53c8\u53d8\u4e86)\uff0c<code>IntelliSense</code>\u9009\u62e9<code>clang-x64</code>\uff0c\u5176\u4ed6\u4e0d\u52a8\u3002","text":""},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#3taskjson","title":"3\uff0c\u521b\u5efa<code>task.json</code>\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a","text":"<pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"Build with Clang\",\n        \"type\": \"shell\",\n        \"command\": \"clang++\",\n        \"args\": [\n          \"-std=c++17\",\n          \"-stdlib=libc++\",\n          \"demo.cpp\", #c++\u6587\u4ef6\u540d\u79f0\uff0c\u53ea\u80fd\u662f\u8fd9\u4e2a\u540d\u79f0\uff0c\u5426\u5219\u62a5\u9519\n          \"-o\",\n          \"demo.out\", #\u8fd8\u6709\u8fd9\u91cc\n          \"--debug\"\n        ],\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        }\n      }\n    ]\n  }\n</code></pre>"},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#4launchjson","title":"4\uff0c\u521b\u5efa<code>launch.json</code>,\u5185\u5bb9\u5982\u4e0b\uff1a","text":"<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n      {\n        \"name\": \"(lldb) Launch\",\n        \"type\": \"cppdbg\",\n        \"request\": \"launch\",\n        \"program\": \"${workspaceFolder}/demo.out\", #\u6587\u4ef6\u540d\u79f0\n        \"args\": [],\n        \"stopAtEntry\": true,\n        \"cwd\": \"${workspaceFolder}\",\n        \"environment\": [],\n        \"externalConsole\": true,\n        \"MIMode\": \"lldb\",\n        \"logging\": {\n          \"trace\": true,\n          \"traceResponse\": true,\n          \"engineLogging\": true\n        }\n      }\n    ]\n  }\n</code></pre>"},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#5cvscodejsonc","title":"5\uff0c\u81f3\u6b64\uff0cC++\u76ee\u5f55\u5e94\u8be5\u6709\u4e00\u4e2a<code>.vscode</code>\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u4e09\u4e2a<code>json</code>\u6587\u4ef6\uff0c\u8fd9\u4e09\u4e2a\u6587\u4ef6\u5c31\u662f\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u679c\u65b0\u5efa\u5176\u4ed6C++\u6587\u4ef6\u5939\uff0c\u76f4\u63a5\u5c06\u4ed6\u4eec\u62f7\u8d1d\u8fc7\u53bb\u5c31\u884c\u4e86(\u636e\u5b98\u7f51\u8bf4\u662f\u8fd9\u6837\uff0c\u6ca1\u8bd5\u8fc7)\u3002","text":""},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#6democppshiftcommandbdemooutdemoout","title":"6\uff0c\u5728\u76ee\u5f55\u4e0b\uff0c\u521b\u5efa<code>demo.cpp</code>\u6587\u4ef6\uff0c\u6309<code>shift+command+B</code>\u952e\u7f16\u8bd1\uff0c\u751f\u6210<code>demo.out</code>,\u7136\u540e\u8f93\u5165<code>./demo.out</code>\u5373\u53ef\u6210\u529f\u8fd0\u884c\uff1a","text":"<pre><code>#\u7f16\u8bd1\u5982\u679c\u6ca1\u6709\u9519\uff0c\u663e\u793a\u5982\u4e0b\uff1a\n&gt; Executing task: clang++ -std=c++17 -stdlib=libc++ demo.cpp -o demo.out --debug &lt;\n\u7ec8\u7aef\u5c06\u88ab\u4efb\u52a1\u91cd\u7528\uff0c\u6309\u4efb\u610f\u952e\u5173\u95ed\u3002\n#\u8fd0\u884c\u7ed3\u679c\uff1a\n\u279c  C++ ./demo.out\n101 78.5\n101 80.5\n</code></pre>"},{"location":"SystemConfiguration/Mac%2BVSCode_compileC%2B%2B/#vscodevscodec","title":"\u5199\u5728\u540e\u9762\uff1a\u770b\u4e86\u8fd9\u4e48\u591a\u535a\u5ba2\uff0c\u4eca\u5929\u53c8\u770b\u4e86vscode\u7684\u5b98\u65b9\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5728vscode\u91cc\u7f16\u8bd1c++\u4e86\uff01","text":"<p>PS\uff1a\u5b98\u65b9\u6559\u7a0b\uff1ahttps://code.visualstudio.com/docs/cpp/config-clang-mac</p> <p>\u6309\u4e0b<code>shift+command+P</code>\uff0c\u8f93\u5165<code>shell</code>\uff0c\u9009\u62e9<code>Shell Command: Install 'code' command in PATH.</code>,\u5373\u5c06<code>code</code>\u547d\u4ee4\u6dfb\u52a0\u8fdb\u7cfb\u7edf\u73af\u5883\uff0c\u5728\u7ec8\u7aef\u65f6\uff0c\u5728\u67d0\u4e2a\u6587\u4ef6\u5939\u4e0b\u8f93\u5165<code>code</code>\u5373\u53ef\u4ee5<code>vscode</code>\u6253\u5f00\u8be5\u6587\u4ef6\u5939\u3002</p>"},{"location":"SystemConfiguration/Mac_alias_command/","title":"MAC\u7ec8\u7aefshell\u547d\u4ee4\u7b80\u5316","text":""},{"location":"SystemConfiguration/Mac_alias_command/#202012202012crazyxt","title":"\u4e8e2020\u5e741\u67082\u65e52020\u5e741\u67082\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/Mac_alias_command/#linuxalias","title":"<code>linux</code>\u7cfb\u7edf\u53ef\u901a\u8fc7<code>alias</code>\u8bbe\u7f6e\u547d\u4ee4\u7684\u7b80\u79f0\uff0c\u8bbe\u7f6e\u65b9\u5f0f\u4e3a:","text":"<pre><code>alias \u65b0\u547d\u4ee4='\u539f\u547d\u4ee4\u6267\u884c\u65b9\u5f0f'\n</code></pre> <p>\u8bbe\u7f6e\u540e\uff0c\u53ef\u901a\u8fc7<code>alias</code>\u67e5\u770b\uff0c\u4e14\u5728\u5f53\u524d\u767b\u5f55\u65f6\u53ef\u4f7f\u7528\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u7684\u7f3a\u70b9\u662f\uff0c\u5f53\u7ec8\u7aef\u91cd\u542f\u540e\uff0c\u547d\u4ee4\u5931\u6548\uff0c\u7f51\u4e0a\u7684\u8bf4\u6cd5\u662f\u4fee\u6539<code>/etc/.bash_profile</code>\u6587\u4ef6\uff0c\u5c06<code>alias</code>\u547d\u4ee4\u6dfb\u52a0\u8fdb\u53bb\uff0c\u7136\u540e\u6267\u884c<code>source</code>\u547d\u4ee4\uff0c\u4f46\u662f\u6bcf\u6b21\u7ec8\u7aef\u91cd\u542f\u8fd8\u662f\u5931\u6548\uff0c\u9700\u8981\u91cd\u65b0\u6267\u884c<code>source</code>\u547d\u4ee4\u3002</p>"},{"location":"SystemConfiguration/Mac_alias_command/#maczshzshchsh-s-binzsh-etcbash_profilezshzshrczshrc","title":"MAC\u7ec8\u7aef\u6211\u4f7f\u7528\u7684\u662f<code>zsh</code>\uff0c\u5177\u4f53\u5b89\u88c5\u65b9\u5f0f\u53ef\u901a\u8fc7\u5b98\u7f51\u4e0b\u8f7d\uff0c\u7136\u540e\u4fee\u6539\u4e3azsh\uff1a<code>chsh -s /bin/zsh</code>. \u7136\u540e\u5c06<code>~/etc/.bash_profile</code>\u4e2d\u7684\u4fee\u6539\u6dfb\u52a0\u8fdb<code>zsh</code>\u7684\u914d\u7f6e\u6587\u4ef6<code>~/.zshrc</code>\u4e2d\uff0c\u8fd9\u6837\u6bcf\u6b21\u91cd\u542f\u7ec8\u7aef\uff0c\u90fd\u4f1a\u81ea\u52a8\u6267\u884czshrc\u6587\u4ef6\uff0c\u547d\u4ee4\u4e5f\u5c31\u6c38\u4e45\u751f\u6548\u4e86\u3002","text":""},{"location":"SystemConfiguration/MarkdownCenter_site/","title":"\u642d\u5efaMD\u6587\u6863\u4e2d\u5fc3","text":""},{"location":"SystemConfiguration/MarkdownCenter_site/#_1","title":"\u6587\u6863\u4e2d\u5fc3\u642d\u5efa","text":""},{"location":"SystemConfiguration/MarkdownCenter_site/#_2","title":"\u76ee\u6807","text":"<ul> <li>\u524d\u7aef\u5c55\u793a\u6240\u6709md\u6587\u6863</li> <li>\u76ee\u5f55\u81ea\u5b9a\u4e49</li> <li>\u80fd\u591f\u540cgit\u540c\u6b65\uff0c\u81ea\u52a8\u53d1\u5e03</li> </ul>"},{"location":"SystemConfiguration/MarkdownCenter_site/#_3","title":"\u5de5\u5177","text":"<ul> <li>mkdocs</li> <li>GitHub</li> </ul>"},{"location":"SystemConfiguration/MarkdownCenter_site/#_4","title":"\u6b65\u9aa4","text":"<ul> <li>pip\u5b89\u88c5mkdocs\u6a21\u5757</li> <li>\u521d\u59cb\u5316mkdocs\u9879\u76ee</li> </ul> <pre><code>mkdocs new projectName\n</code></pre> <ul> <li>\u5c06\u6240\u6709<code>md</code>\u6587\u4ef6\u79fb\u81f3<code>docs</code>\u6587\u4ef6\u5939\u5185\uff0c<code>docs</code>\u5185\u6709<code>index.md</code>\u548c<code>about.md</code>, \u5206\u522b\u662f\u9996\u9875\u548c\u5173\u4e8e\u7684\u5185\u5bb9</li> <li>\u914d\u7f6e\u6839\u76ee\u5f55\u7684<code>mkdocs.yml</code>\uff0c\u6307\u5b9a<code>sitename</code>\u548c\u5c55\u793a\u76ee\u5f55\u3001\u4e3b\u9898\u7b49</li> <li>\u914d\u7f6eGithub\u7684\u81ea\u52a8\u90e8\u7f72<ul> <li>\u6839\u76ee\u5f55\u6dfb\u52a0<code>.github/workflows/workflow.yml</code>\uff0c\u6b64\u76ee\u5f55\u6587\u4ef6<code>github</code>\u4f1a\u81ea\u52a8\u8bc6\u522b\u4e3a\u81ea\u52a8\u90e8\u7f72\u914d\u7f6e <p>\u9700\u6c42\uff1a\u7f16\u8f91\u6587\u4ef6\u540e\uff0c\u63a8\u9001\u5230<code>github</code>\uff0c\u524d\u7aef\u80fd\u6d4f\u89c8\u5230\u66f4\u65b0\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u63a8\u9001\u540e\u80fd\u81ea\u52a8\u89e6\u53d1`mkdocs\u7684\u6253\u5305\u673a\u5236\uff0c\u7136\u540e\u5c06\u6253\u5305\u6587\u4ef6\u90e8\u7f72\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u7136\u540e\u91cd\u65b0\u52a0\u8f7dnginx\uff1b</p> </li> <li>\u914d\u7f6e<code>workflow</code> <p>1, \u4e0d\u540c\u4e0egitlab\u7684<code>CICD</code>\u6d41\u7a0b\uff0cgithub\u9700\u8981\u6307\u5b9a<code>action</code>\uff0c\u914d\u7f6e\u4e00\u7cfb\u5217<code>job</code>\u4e0e<code>steps</code>\uff0c\u5404\u4e2a<code>step</code>\u5185\u53ef\u501f\u52a9github\u7684\u5df2\u53d1\u5e03\u7684<code>action</code>\u811a\u672c\u5b8c\u6210\u6240\u9700\u52a8\u4f5c\uff0c\u5982\u90e8\u7f72\u81f3\u670d\u52a1\u5668\u7b49\uff1a 2, github\u5982\u679c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u673a\u5668\u8dd1\u811a\u672c\uff0c\u901f\u5ea6\u4e5f\u5f88\u5feb.</p> </li> </ul> </li> </ul> <pre><code>    name: build\n    on: push #push\u4ee3\u7801\u89e6\u53d1workflow\n    jobs:\n        buildJob:\n            runs-on: ubuntu-latest #\u5b98\u65b9\u7cfb\u7edf\uff0c\u81ea\u5df1\u52a0\u7684runner\u662fself-hosted.\n            steps:\n                - name: Checkout\n                uses: actions/checkout@v2 #\u8be5action\u62c9\u53d6\u4ee3\u7801\n                with:\n                    persist-credentials: false\n\n                - name: Install\n                run:\n                    pip install -r requirement.txt #pip\u5b89\u88c5mkdocs\u53ca\u4f9d\u8d56\u5305\n\n                - name: Build\n                    run: \n                    mkdocs build #\u6253\u5305\u547d\u4ee4\n\n                - name: Deploy to Server \n                uses: wlixcc/SFTP-Deploy-Action@v1.0 #\u8be5action\u53ef\u5c06\u6587\u4ef6\u90e8\u7f72\u81f3\u670d\u52a1\u5668\uff0c\u9700\u8981\u6307\u5b9a\u8fdc\u7a0b\u767b\u5f55\u79d8\u94a5\u7b49\n                with:\n                    ssh_private_key: ${{ secrets.VPSSSHKEY }} #\u8fdc\u7a0b\u670d\u52a1\u5668\u79c1\u94a5\uff0c\u5373id_rsa\u5185\u5bb9\uff0c\u9700\u8981\u5b8c\u5168\u4e0d\u505a\u5904\u7406\u7684\u62f7\u8d1d\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u8fde\u63a5\u5931\u8d25(\u5931\u8d25\u4e86N\u6b21\u624d\u641e\u5b9a\u3002\u3002\u3002)\n                    local_path: ./site/*\n                    server: ${{ secrets.VPSHOST }}\n                    username: ${{ secrets.USERNAME }}\n                    remote_path: ${{ secrets.VPSPATH }} #\u8fdc\u7a0b\u90e8\u7f72\u8def\u5f84\n\n                - name: Reload\n                    uses: appleboy/ssh-action@master #\u767b\u5f55\u8fdc\u7a0b\u670d\u52a1\u5668action\n                    with:\n                    host: ${{ secrets.VPSHOST }}\n                    username: ${{ secrets.USERNAME}}\n                    password: ${{secrets.VPSPW }}\n                    port: ${{ secrets.VPSPORT }}\n                    script: |\n                        nginx -s reload #\u767b\u5f55\u540e\u6267\u884c\u547d\u4ee4\n</code></pre> <pre><code>&gt; \u5176\u4e2d\uff0c\u767b\u5f55\u8fdc\u7a0b\u670d\u52a1\u5668\u79c1\u94a5\u7b49\u4fe1\u606f\u53ef\u5b58\u5728\u4ed3\u5e93\u7684`setting-&gt; secrets` \u4e2d\n- \u5c1d\u8bd5\u63a8\u9001\u81f3\u4ed3\u5e93\uff0c\u5373\u53ef\u81ea\u52a8\u89e6\u53d1`workflow`\uff0c\u90e8\u7f72\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\u3002\n</code></pre>"},{"location":"SystemConfiguration/MarkdownCenter_site/#githubpage","title":"\u5982\u679c\u53ea\u501f\u52a9github\u7684\u4e2a\u4ebapage\uff0c\u5219\u66f4\u7b80\u5355\uff1a","text":"<pre><code>1\uff0c\u5728master\u5206\u652f\u521b\u5efamd\u6587\u6863\uff1b\n2\uff0c\u5728\u4ed3\u5e93\u7684settings -&gt; Pages -&gt; Build and deployment -&gt; Branch\u4e2d\u9009\u62e9gh-pages, \u6587\u4ef6\u5939\u9009\u62e9/root\uff0c\u7136\u540e\u4fdd\u5b58\uff1b\n3\uff0c\u5728.github/workflow\u4e0b\u521b\u5efaci.yml\u6587\u4ef6\uff0c\u5199\u5165\u4e00\u4e0b\u5185\u5bb9, \u4e0d\u7528\u4fee\u6539\uff0c\u76f4\u63a5copy\uff1a\n</code></pre> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache \n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre> <p>\u7136\u540e\u63a8\u9001\u540e\u4f1a\u81ea\u52a8\u89e6\u53d1action\u90e8\u7f72\u81f4gh-pages\u5206\u652f\uff0c\u8fc7\u51e0\u5206\u949f\u5373\u53ef\u5728\u4e2a\u4eba\u4e3b\u9875\u770b\u5230\u6548\u679c\uff1b</p>"},{"location":"SystemConfiguration/Npm_Publish/","title":"Npm\u53d1\u5e03","text":"<ul> <li> <p>1\uff0c<code>https://www.npmjs.com/</code>\u6ce8\u518c\u8d26\u53f7\uff0c\u7136\u540e\u5728 <code>AccessToken</code> \u4e2d\u751f\u6210\u4e00\u4e2a <code>token</code> \uff0c\u8bb0\u5f55\u4e0b\u6765\uff0c\u56e0\u4e3a\u53ea\u4f1a<code>display</code>\u4e00\u6b21\u3002</p> </li> <li> <p>2\uff0c\u6253\u5f00\u7ec8\u7aef\uff0c\u6253\u5f00<code>.npmrc</code>\u6587\u4ef6\uff0c\u6dfb\u52a0\u4e00\u884c, <code>_authToken</code>\u540e\u9762\u5c31\u662f\u521a\u624d\u751f\u6210\u7684<code>token</code>\uff1a</p> </li> </ul> <p><code>//registry.npmjs.org/:_authToken=d06e5402-da77-46e1-aa0b-8492476fa450</code></p> <p>\u6ce8\u610fregistry\u8981\u662f\uff1a<code>https://registry.npmjs.org/</code></p> <ul> <li>\u914d\u7f6e<code>package.json</code>\uff1a\u5176\u4e2d <code>name</code>, <code>version</code>, <code>author</code>, <code>main</code>, \u90fd\u662f\u5fc5\u586b\u9879\uff0c<code>main</code>\u662f\u6253\u5305\u540e\u7684\u6587\u4ef6\u3002</li> <li>\u7ec8\u7aef\u8f93\u5165 <code>npm login</code> \uff0c\u767b\u5f55\u3002</li> <li>\u6267\u884c <code>npm publish</code> \u53d1\u5e03\u3002</li> </ul>"},{"location":"SystemConfiguration/SSH_config_noPassword_login/","title":"SSH\u914d\u7f6e\u53ca\u514d\u5bc6\u7801\u767b\u5f55","text":""},{"location":"SystemConfiguration/SSH_config_noPassword_login/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/SSH_config_noPassword_login/#ubuntu","title":"\u7cfb\u7edf\uff1aubuntu","text":""},{"location":"SystemConfiguration/SSH_config_noPassword_login/#_1","title":"\u6b65\u9aa4\uff1a","text":""},{"location":"SystemConfiguration/SSH_config_noPassword_login/#1sshopenssh-server","title":"1\u3001\u5728\u672c\u673a\u548c\u9700\u8981ssh\u767b\u5f55\u7684\u673a\u5668\u4e0a\u5b89\u88c5openssh-server:","text":"<pre><code>sudo apt-get install openssh-server -y\nservice ssh start\n</code></pre>"},{"location":"SystemConfiguration/SSH_config_noPassword_login/#2sshrsa","title":"2\u3001\u5728\u672c\u673a\u548c\u9700\u8981ssh\u767b\u5f55\u7684\u673a\u5668\u4e0a\u751f\u6210rsa\u79d8\u94a5\uff1a","text":"<pre><code>ssh-keygen\n#\u4e2d\u95f4\u63d0\u793a\u6309enter\u786e\u8ba4\u5373\u53ef\n</code></pre>"},{"location":"SystemConfiguration/SSH_config_noPassword_login/#3","title":"3\u3001\u62f7\u8d1d\u672c\u673a\u516c\u94a5\uff1a","text":"<ul> <li>cd ~/.ssh</li> <li>cp id_rsa.pub authorized_keys</li> <li>\u628a\u672c\u673a\u7684id_rsa.pub\u4e00\u5b57\u4e0d\u5dee\u7684\u62f7\u8d1d\u5230\u9700\u8981\u767b\u5f55\u4e3b\u673a\u7684authorized_keys\u4e2d</li> <li>\u542f\u52a8ssh\u670d\u52a1</li> </ul> <pre><code>service ssh start\n</code></pre>"},{"location":"SystemConfiguration/SSH_config_noPassword_login/#4","title":"4\u3001\u8fdc\u7a0b\u65e0\u5bc6\u7801\u767b\u5f55\uff1a","text":"<pre><code>ssh root@IP\n</code></pre>"},{"location":"SystemConfiguration/SSH_config_noPassword_login/#5ip","title":"5\u3001\u514d\u8f93\u5165IP\u767b\u5f55\uff1a","text":"<pre><code> cd ~/.ssh\n touch config\n vim config\n</code></pre> <p>\u5728config\u4e2d\u7f16\u8f91\uff1a</p> <pre><code>Host name\n   HostName  IP\n   Port  port\n   User user\n</code></pre> <p>\u7136\u540e\u5c31\u53ef\u4ee5\uff1a</p> <pre><code>ssh name\n</code></pre> <p>Tips:\u4fee\u6539ssh\u767b\u9646\u6b22\u8fce\u4fe1\u606f\uff1a</p> <p>\u8fdb\u5165\u76ee\u5f55 /etc/update-motd.d\uff0c\u91cc\u9762\u51e0\u4e2a\u6587\u4ef6\uff0c\u5206\u522b\u8bbe\u7f6e\u4e0d\u540c\u7684\u767b\u9646\u4fe1\u606f\uff0c\u53ef\u6839\u636e\u9700\u8981\u4fee\u6539\u3002</p>"},{"location":"SystemConfiguration/SSH_config_noPassword_login/#_2","title":"\u542f\u52a8\u95ee\u9898\uff1a","text":"<ul> <li>service sshd restart \u53ef\u80fd\u62a5\u9519\uff0c\u67e5\u770b\u62a5\u9519\u4fe1\u606f\u53ef\u80fd\u63d0\u793a /var/run/ssh\u4e0d\u5b58\u5728\uff0c\u53ea\u8981mkdir\u4e2a\u8be5\u6587\u4ef6\uff0c\u5373\u53ef\u542f\u52a8ssh\u3002</li> </ul>"},{"location":"SystemConfiguration/Ubuntu_SS_deploy/","title":"Ubuntu\u642d\u5efaSS\u73af\u5883","text":""},{"location":"SystemConfiguration/Ubuntu_SS_deploy/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0c\u4f20\u7edf\u5b89\u88c5shadowsocks\uff1a</p> <pre><code>sudo apt-get update\nsudo apt-get install python-pip\nsudo pip install shadowsocks\n</code></pre> <p>2\uff0c\u5efa\u7acb\u914d\u7f6e\u6587\u4ef6\uff0c\u5982ss.json\uff0c\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code>{\n    \"server\":\"my_server_ip\",\n    \"server_port\":\"port\",\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"mypassword\",\n    \"timeout\":300,\n    \"method\":\"aes-256-gcm\"\n}\n</code></pre> <p>3\uff0c\u542f\u52a8\u670d\u52a1\uff1a</p> <pre><code>ssserver -c ss.json -d start\n#\u4e00\u822c\u9700\u8981\u540e\u53f0\u8fd0\u884c\uff0c\u53ef\u7528nohup\u6216screen\u5de5\u5177:\nnohup ssserver -c ss.json &amp;\n#\u6216\u8005\u501f\u52a9screen\uff1a\nscreen -S VPN\nscreen -r VPN\n</code></pre> <p>4\uff0c\u7528ss-bash\uff0c\u6d41\u91cf\u7ba1\u7406:</p> <pre><code>wget https://github.com/hellofwy/ss-bash/archive/master.zip\nunzip master.zip\ncd ss-bash-master/\n./ssadmin.sh  add port  #\u5bc6\u7801 \u6d41\u91cf  #\u6dfb\u52a0\u7aef\u53e3\u53f7 \u5bc6\u7801  \u6d41\u91cf\u9650\u5236\n./ssadmin.sh start  #\u8fd9\u4e00\u6b65\u7528nohup\u6216screen\u6267\u884c\uff0c\u4f7f\u5176\u540e\u7aef\u8fd0\u884c\u3002\n</code></pre> <p>5\uff0c\u642d\u5efa\u4e2d\u53ef\u80fd\u7684\u95ee\u9898\uff1a</p> <p>1\uff09ss-bash\u53ef\u80fd\u4f1a\u51fa\u73b0ssserver\u542f\u52a8\u5931\u8d25\uff0c\u53ef\u80fd\u539f\u56e0\u6709\u4e8c\uff1a</p> <p>1&gt; \u5982\u679c\u662flibsodium\u7684\u95ee\u9898\uff0c\u5b89\u88c5\u5373\u53ef\uff1a</p> <pre><code>wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\ntar xzvf LATEST.tar.gz\ncd libsodium*\n./configure\nmake -j8 &amp;&amp; make install\necho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf\nldconfig\n</code></pre> <p>2&gt;\u67e5\u770b\u5f53\u524dssserver\u7248\u672c\uff0cssserver \u2013version,\u5982\u679c\u662f3.0\u4ee5\u4e0b\u7248\u672c\uff0c\u53ef\u80fd\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u52a0\u5bc6\u65b9\u5f0f\u4e0e\u5f53\u524d\u7248\u672c\u4e0d\u517c\u5bb9\uff0c\u9700\u8981\u5347\u7ea7\u7248\u672c\uff1a</p> <pre><code>pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip\n</code></pre> <p>Tips\uff1a\u83b7\u53d6nohup\u542f\u52a8\u8fdb\u7a0b\u7684pid\uff1a</p> <pre><code>ps -ax | grep \u670d\u52a1\u547d\u4ee4\nkill pid\n</code></pre>"},{"location":"SystemConfiguration/Ubuntu_SS_deploy/#shadowsocksshadowsocks-libevlibev","title":"\u4ee5\u4e0a\u7248\u672c\u7684shadowsocks\u5df2\u7ecf\u51e0\u5e74\u4e0d\u7ef4\u62a4\u4e86\uff0cshadowsocks-libev\u4e00\u76f4\u5728\u7ef4\u62a4\uff0c\u4e0b\u9762\u662flibev\u7684\u642d\u5efa\u65b9\u5f0f\uff1a","text":""},{"location":"SystemConfiguration/Ubuntu_SS_deploy/#_1","title":"\u6e90\u7801\u7f16\u8bd1\uff1a","text":"<pre><code>sudo apt-get install --no-install-recommends build-essential autoconf libtool \\\n        libssl-dev gawk debhelper dh-systemd init-system-helpers pkg-config asciidoc \\\n        xmlto apg libpcre3-dev zlib1g-dev libev-dev libudns-dev libsodium-dev libmbedtls-dev libc-ares-dev automake\ngit clone https://github.com/shadowsocks/shadowsocks-libev.git\ncd shadowsocks-libev\ngit submodule update --init\n./autogen.sh &amp;&amp; ./configure &amp;&amp; make\nsudo make install\n</code></pre> <p>\u5728\u91cd\u88c5\u7cfb\u7edf\u7684ubuntu16.04\u4e0a\u4ee5\u4e0a\u4ee3\u7801\u53ef\u6b63\u5e38\u6267\u884c\u3002</p>"},{"location":"SystemConfiguration/Ubuntu_SS_deploy/#configjson","title":"\u914d\u7f6e\u6587\u4ef6config.json\uff1a","text":"<pre><code>{\n    \"server\": \"0.0.0.0\",\n    \"timeout\": 60,\n    \"method\": \"chacha20-ietf-poly1305\",\n    \"server_port\":\"2048\",\n    \"password\":\"1234abcd,.\",\n}\n</code></pre>"},{"location":"SystemConfiguration/Ubuntu_SS_deploy/#_2","title":"\u542f\u52a8\uff1a","text":"<pre><code>nohup ss-server -c config.json &amp;\n</code></pre> <p>shadowsocks-libev\u7684git\u4ed3\u5e93\uff1ahttps://github.com/shadowsocks/shadowsocks-libev</p> <ul> <li>\u67e5\u770b\u7aef\u53e3\u662f\u5426\u5f00\u542f:</li> <li>```</li> <li>netstat -lnp | grep ss-server</li> <li>```</li> </ul>"},{"location":"SystemConfiguration/Windows_ssh/","title":"Windows\u914d\u7f6essh","text":""},{"location":"SystemConfiguration/Windows_ssh/#_1","title":"Windows\u914d\u7f6essh","text":"<ul> <li>\u5728\u8bbe\u7f6e -&gt; \u5e94\u7528\u4e2d\uff0c\u6dfb\u52a0OpenSSh\u670d\u52a1</li> <li>\u63a7\u5236\u53f0\u8f93\u5165 net start sshd \u542f\u52a8ssh\u670d\u52a1</li> </ul>"},{"location":"SystemConfiguration/deploy_rabbitmq/","title":"rabbitmq\u90e8\u7f72\u8bb0\u5f55","text":""},{"location":"SystemConfiguration/deploy_rabbitmq/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>1\uff0c\u7cfb\u7edfwin10\uff0c64\u4f4d\uff0c\u5148\u5230erlang\u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5\u5305\u5b89\u88c5\uff0c\u518d\u5230rabbitmq\u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5\u5305\u5b89\u88c5\u3002</p> <p>2\uff0ccd\u5230rabbitmq\u5b89\u88c5\u76ee\u5f55\uff1aC:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.7.2\\sbin\uff0c\u91cc\u9762\u6709bat\u6587\u4ef6\uff0c\u8f93\u5165rabbitmqctl status\uff0c\u5373\u53ef\u67e5\u770b\u72b6\u6001\uff0c\u4e0d\u8fc7\u6709\u53ef\u80fd\u63d0\u793a\uff1a TCP connection succeeded but Erlang distribution failed\uff0c\u597d\u50cf\u662f\u56e0\u4e3aerlang\u7684cookies\u6587\u4ef6\u4e0d\u4e00\u81f4\u5bfc\u81f4\uff0c\u89e3\u51b3\u529e\u6cd5\uff1a\u5c06C:\\WINDOWS\\System32\\config\\systemprofile.erlang.cookie\u590d\u5236\u5230C:\\Users\\username.erlang.cookie\u4e0b\u5373\u53ef\uff0c\u518d\u6b21\u8f93\u5165rabbitmqctl status\u547d\u4ee4\u5373\u53ef\u770b\u5230\u6ca1\u6709\u9519\u8bef\u3002</p>"},{"location":"SystemConfiguration/linux_service/","title":"linux\u670d\u52a1","text":"<p>1, \u7f16\u5199\u670d\u52a1 - \u7528\u6237\u76ee\u5f55 <code>/usr/lib/systemd/system/</code> - \u521b\u5efa <code>***.service</code></p> <p>2, systemctl daemon-reload</p> <p>3, \u542f\u7528\u670d\u52a1\uff0c\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u914d\u7f6e\u6587\u4ef6<code>/lib/systemd/system/xxx.service</code>\u7684\u7b26\u53f7\u94fe\u63a5\uff0c\u8be5\u64cd\u4f5c\u4f1a\u8ba9\u670d\u52a1\u5f00\u673a\u542f\u52a8</p> <ul> <li>systemctl enable simple-server</li> </ul> <p>4\uff0c\u542f\u52a8\u670d\u52a1 - systemctl start ***.service</p>"},{"location":"SystemConfiguration/linux_service/#_1","title":"\u793a\u4f8b","text":"<pre><code>[Unit]\nDescription=description.\n\n[Service]\nType=forking\n#\u542f\u52a8\u547d\u4ee4\u4e2d\u7684\u547d\u4ee4\u3001\u53c2\u6570\u90fd\u5fc5\u987b\u662f\u7edd\u5bf9\u8def\u5f84\nExecStart=\u542f\u52a8\u547d\u4ee4 \nUser=root\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"SystemConfiguration/nohup/","title":"nohup\u5ffd\u7565\u8f93\u51fa","text":"<pre><code>nohup *** &gt;/dev/null 2&gt;&amp;1 &amp;\n</code></pre> <ul> <li><code>&gt;/dev/null</code></li> </ul> <p>\u8fd9\u6761\u547d\u4ee4\u7684\u4f5c\u7528\u662f\u5c06\u6807\u51c6\u8f93\u51fa1\u91cd\u5b9a\u5411\u5230<code>/dev/null</code>\u4e2d\u3002 <code>/dev/null</code>\u4ee3\u8868<code>linux</code>\u7684\u7a7a\u8bbe\u5907\u6587\u4ef6\uff0c\u6240\u6709\u5f80\u8fd9\u4e2a\u6587\u4ef6\u91cc\u9762\u5199\u5165\u7684\u5185\u5bb9\u90fd\u4f1a\u4e22\u5931\uff0c\u4fd7\u79f0\u201c\u9ed1\u6d1e\u201d\u3002\u90a3\u4e48\u6267\u884c\u4e86<code>&gt;/dev/null</code>\u4e4b\u540e\uff0c\u6807\u51c6\u8f93\u51fa\u5c31\u4f1a\u4e0d\u518d\u5b58\u5728\uff0c\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u80fd\u591f\u627e\u5230\u8f93\u51fa\u7684\u5185\u5bb9\u3002</p> <ul> <li><code>2&gt;&amp;1</code></li> </ul> <p>\u8fd9\u6761\u547d\u4ee4\u7528\u5230\u4e86\u91cd\u5b9a\u5411\u7ed1\u5b9a\uff0c\u91c7\u7528&amp;\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8f93\u51fa\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u8fd9\u6761\u547d\u4ee4\u7684\u4f5c\u7528\u662f\u9519\u8bef\u8f93\u51fa\u5c06\u548c\u6807\u51c6\u8f93\u51fa\u540c\u7528\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8bf4\u4eba\u8bdd\u5c31\u662f\u9519\u8bef\u8f93\u51fa\u5c06\u4f1a\u548c\u6807\u51c6\u8f93\u51fa\u8f93\u51fa\u5230\u540c\u4e00\u4e2a\u5730\u65b9\u3002</p> <p>\u4e24\u4e2a\u53c2\u6570\u7ed3\u5408\uff0c\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u4fe1\u606f\u8f93\u51fa\u5230\u6587\u4ef6\u4e2d</p>"},{"location":"SystemConfiguration/personal-pic-cabin/","title":"\u642d\u5efa\u4e2a\u4eba\u56fe\u5e8a","text":""},{"location":"SystemConfiguration/personal-pic-cabin/#_1","title":"\u642d\u5efa\u4e2a\u4eba\u56fe\u5e8a","text":""},{"location":"SystemConfiguration/personal-pic-cabin/#_2","title":"\u7528\u5230\u5de5\u5177\uff1a","text":"<ul> <li><code>Github</code></li> <li><code>PicGo</code></li> </ul>"},{"location":"SystemConfiguration/personal-pic-cabin/#_3","title":"\u6b65\u9aa4\uff1a","text":"<ul> <li>1\uff0c\u4e0b\u8f7d PicGo,\u5e76\u5b89\u88c5\u3002</li> <li>2\uff0c\u65b0\u5efa<code>Github</code>\u4ed3\u5e93 <code>picCabin</code> </li> <li>3, \u751f\u6210\u65b0 <code>key</code>: <code>\u5934\u50cf</code> -&gt; <code>setting</code> -&gt; <code>Developer settings</code> -&gt;<code>Personal access tokens</code> -&gt; <code>Generate new token</code>, \u8bbe\u7f6e<code>expiration</code> \uff0c\u52fe\u9009 <code>repo</code>\uff0c<code>Generate token</code>\uff0c\u5e76\u590d\u5236\u4e0b\u6765\u751f\u6210\u7684<code>token</code>\uff1b</li> <li>4\uff0c\u6253\u5f00<code>PicGo</code>\uff0c\u8a2d\u7f6e <code>Github\u56fe\u5e8a</code>\uff0c\u586b\u4e0a\u4ed3\u5e93\u4fe1\u606f\uff1a </li> <li>5, \u5c1d\u8bd5\u5c06\u56fe\u7247\u62d6\u5165\u7a97\u53e3\u5c31\u53ef\u4ee5\u4e86\uff0c\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u590d\u5236\u56fe\u7247\u5730\u5740\u3002\u56fe\u7247\u4f1a\u88ab\u63d0\u4ea4\u81f3\u4ed3\u5e93\u6839\u76ee\u5f55\u5185\u3002</li> </ul>"},{"location":"SystemConfiguration/ubuntu_locale_issues/","title":"ubuntu\u73af\u5883\u8bed\u8a00\u95ee\u9898","text":""},{"location":"SystemConfiguration/ubuntu_locale_issues/#20191282019128crazyxt","title":"\u4e8e2019\u5e7412\u67088\u65e52019\u5e7412\u67088\u65e5\u7531crazyxt\u53d1\u5e03","text":"<p>\u95ee\u9898\uff1a</p> <pre><code>locale: Cannot set LC_CTYPE to default locale: No such file or directory\nlocale: Cannot set LC_ALL to default locale: No such file or directory\n</code></pre> <p>\u89e3\u51b3\uff1a</p> <pre><code>echo \"export LANGUAGE=en_US.UTF-8\"&gt;&gt;~/.bashrc\necho \"export LC_ALL=en_US.UTF-8 \"&gt;&gt;~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"SystemConfiguration/webstorm_git-bash/","title":"webstorm\u914d\u7f6egit-bash","text":"<ul> <li>\u6253\u5f00setting &gt; Tools &gt; Terminal\uff1a</li> <li>\u5728shell Path\u4e2d\u586b\u4e0a\uff1a</li> </ul> <pre><code>\"C:\\Program Files\\Git\\bin\\bash.exe\" -login -i\n</code></pre> <ul> <li>\u7136\u540e\u5373ok</li> </ul>"},{"location":"SystemConfiguration/window-language-set/","title":"windows\u5207\u6362\u8bed\u8a00\u4e3a\u4e2d\u6587","text":""},{"location":"SystemConfiguration/window-language-set/#window-server","title":"window server\u4e0a\u5c07\u7cfb\u7d71\u9ed8\u8a8d\u82f1\u6587\u73af\u5883\u6539\u4e3a\u4e2d\u6587","text":"<ul> <li> <p>1\uff0c<code>settting</code> -&gt; <code>Time and Language</code> -&gt; <code>Region &amp; language</code> -&gt;, \u4fee\u6539 <code>Location</code> \u4e3a <code>China</code>\uff0c\u6dfb\u52a0\u8bed\u8a00 -&gt; \u9009\u62e9\u4e2d\u6587\u5e76\u4e0b\u8f7d</p> </li> <li> <p><code>Window Server2012</code> \u8bbe\u7f6e\u65b9\u6cd5\u4e0d\u592a\u4e00\u6837\uff0c<code>Control panel</code> -&gt; <code>Clock Language and Region</code> -&gt; <code>Change Location</code>, <code>Home location</code> \u6539\u4e3a <code>China</code>\uff0c<code>Administrative</code> \u83dc\u5355\u4e0b <code>change system locale</code> \u6539\u4e3a <code>chinese</code></p> </li> <li></li> <li>2\uff0c\u91cd\u542f\uff0c\u6253\u5f00 <code>control panel</code> -&gt; <code>Add a language</code>, \u5728\u5f39\u51fa\u7a97\u53e3\u4e2d\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4e2d\u6587\uff0c\u70b9\u51fb\u540e\u9762option\uff0c\u770b\u662f\u5426display language\u5904\u4e8e\u5df2\u542f\u7528\u72b6\u6001\uff0c\u5982\u679c\u663e\u793a<code>Language pack isn't available</code>\uff0c\u8bf4\u660e\u5b57\u4f53\u5e76\u6ca1\u6709\u6210\u529f\u5b89\u88c5\u3002\u53c2\u8003[3]</li> <li></li> <li>3, (\u6b64\u65b9\u6cd5\u9002\u7528\u4e8e\u7cfb\u7edf\u65e0\u6cd5\u81ea\u52a8\u4e0b\u8f7d\u5b89\u88c5)\uff1b\u4e0b\u8f7d\u4e2d\u6587\u5305,\u7136\u540e <code>win+R</code> \u8c03\u51fa\u8fd0\u884c\u5de5\u5177\uff0c\u8f93\u5165<code>lpksetup</code>, \u70b9\u51fb <code>install</code>\uff0c\u7136\u540e\u9009\u62e9\u4e0b\u8f7d\u7684\u5b89\u88c5\u5305\u518d\u5b89\u88c5\u5373\u53ef\uff0c\u5b89\u88c5\u901f\u5ea6\u8f83\u957f\uff0c\u5b89\u88c5\u5b8c\u540e\u91cd\u65b0\u542f\u52a8\u5c31ok\uff0c\u5982\u679c\u6ca1\u95ee\u9898\uff0c\u7cfb\u7edf\u5e94\u8be5\u5df2\u7ecf\u662f\u4e2d\u6587\u4e86\u3002</li> </ul>"},{"location":"SystemConfiguration/wordpress_site_data_resume_history/","title":"wordpress\u7f51\u7ad9\u6062\u590d\u8bb0\u5f55","text":"<ul> <li> <p>\u4e4b\u524d\u5728\u5176\u4ed6\u7684\u670d\u52a1\u5668\u4e0a\u642d\u5efa\u4e86wordpress\uff0c\u4f7f\u7528<code>nginx + php7.0 + mysql</code>\uff0c\u540e\u6765\u6362\u670d\u52a1\u5668\u540e\uff0c\u4e0d\u60f3\u4ece\u5934\u642d\u5efa\uff0c\u60f3\u76f4\u63a5\u628a\u4e4b\u524d\u7684\u7f51\u7ad9\u548c\u6570\u636e\u5e93\u6570\u636e\u8fc1\u79fb\u8fc7\u6765\uff0c\u4f46\u662f\u4e00\u76f4\u5f04\u4e86\u5f88\u4e45\u624d\u641e\u5b9a\uff0c\u8d70\u4e86\u597d\u591a\u51a4\u6789\u8def\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e0b</p> </li> <li> <p>\u6062\u590d\u6570\u636e\u5e93</p> </li> <li> <p>\u7f51\u7ad9\u7684\u6570\u636e\u7528\u6237\u540d\u4e3a<code>wordpress</code>\uff0c\u5728\u65b0\u670d\u52a1\u5668\u4e0a\u5b89\u88c5<code>mysql-server</code>\uff0c \u7136\u540e\u542f\u52a8<code>mysql</code>\u670d\u52a1\uff0c\u6309\u7167\u6570\u636e\u5e93\u6062\u590d\u64cd\u4f5c\u5c06\u5907\u4efd\u7684\u6570\u636e\u5e93\u6062\u590d\u51fa\u6765\u5373\u53ef</p> </li> <li> <p>\u66f4\u6362\u57df\u540d\u6216IP\u540e\uff0c\u9700\u8981\u5c06\u6570\u636e\u5e93\u4e2d\u8bb0\u5f55\u7684\u57df\u540d\u4e5f\u6362\u6389\uff0c\u53c2\u7167\u6062\u590d\u6570\u636e\u4e2d\u7684\u64cd\u4f5c\u5373\u53ef\u3002(\u4e0d\u786e\u5b9a\u8fd9\u4e00\u6b65\u6709\u6ca1\u6709\u5f71\u54cd)</p> </li> <li> <p>\u6062\u590d\u7f51\u7ad9</p> </li> <li> <p>\u5c06\u6253\u5305\u7684\u7f51\u7ad9\u6570\u636e\u6062\u590d\u5230<code>/var/www/html/</code>\u4e0b\uff0c\u5c06<code>wordpress</code>\u6587\u4ef6\u5939\u8bbf\u95ee\u6743\u9650\u6539\u4e3a<code>www-data</code>:</p> <ul> <li> <p><code>chown -R www-data:www-data /var/www/html/wordpress</code></p> </li> <li> <p>\u4fee\u6539<code>wp-config.php</code>\u4e2d\u7684\u6570\u636e\u5e93\u53c2\u6570\u548c<code>Authentication</code>\u4e2d\u7684key</p> </li> </ul> </li> <li> <p>\u4fee\u6539php7.0\u4e2d\u7684user\u548cgroup\u4e3awww-data\uff0c\u53c2\u7167<code>\u914d\u7f6ephp7.0</code>\u4e2d\u7684\u8bb0\u5f55</p> </li> <li> <p>\u4fee\u6539nginx\u914d\u7f6e\uff1a</p> </li> </ul> <p><code>server {           listen 80;           listen [::]:80;           root /var/www/html/wordpress;           server_name crazyxt.top;           index index.html index.php;           location  / {                   add_header  Access-Control-Allow-Origin *;                   add_header  Access-Control-Allow-Methods GET,POST;                   add_header  Access-Control-Allow-Headers DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization;                   try_files $uri $uri/ =404;                   }           location ~ \\.php$ {                   fastcgi_index index.php;                   fastcgi_pass unix:/run/php/php7.0-fpm.sock;                   fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; //document_root\u53ca\u4e0a\u9762\u7684root\u5730\u5740                   include fastcgi_params;                   autoindex on;           }           location ~ /fpm_status$ {                   allow 127.0.0.1;                   #deny all;                   fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;                   include fastcgi_params;                   fastcgi_pass unix:/run/php/php7.0-fpm.sock;           }   }</code></p> <ul> <li>\u6b64\u65f6\u4e3a\u4e86\u6d4b\u8bd5nginx\u914d\u7f6e\u662f\u5426\u6b63\u786e\u53caphp\u662f\u5426\u80fd\u6b63\u786e\u89e3\u6790\uff0c\u53ef\u5728wordpress\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e2ainfo.php, \u7136\u540e\u8bbf\u95ee \u57df\u540d/info.php\uff0c\u5982\u679c\u51fa\u73b0php\u914d\u7f6e\u9875\uff0c\u8bf4\u660ephp\u80fd\u6b63\u786e\u89e3\u6790</li> <li>\u8fd9\u662f\u5982\u679c\u76f4\u63a5\u8bbf\u95ee\u57df\u540d\u4f1a\u51fa\u73b0\u7a7a\u767d\u9875\u9762\uff0c\u5e94\u8be5\u5148\u8fdb\u5165admin\u9875\uff0c\u5373\uff1a\u57df\u540d/wp-admin,\u7136\u540e\u8f93\u5165\u90ae\u7bb1\u767b\u5f55\uff0c\u505a\u597d\u754c\u9762\u914d\u7f6e\u540e\u5373\u53ef\u57df\u540d\u767b\u5f55\u7f51\u9875\u4e86\u3010\u4e4b\u524d\u4e00\u76f4\u6ca1\u505a\u8fd9\u4e00\u6b65\uff0c\u56e0\u4e3a\u4ee5\u524d\u521d\u6b21\u5b89\u88c5wordpress\u65f6\u4f1a\u8fdb\u5165\u914d\u7f6e\uff0c\u540e\u6765\u5c31\u5fd8\u8bb0\u8fd9\u4e00\u6b65\u4e86\uff0c\u4e00\u76f4\u4ee5\u4e3a\u662fnginx\u6216php\u914d\u7f6e\u7684\u95ee\u9898\u5bfc\u81f4\u7a7a\u767d\u9875\u9762\u6216file not found\u7b49\u95ee\u9898\uff0c\u540e\u6765\u5728\u4e00\u4e2a\u535a\u5ba2\u91cc\u770b\u5230\u8bf4\u6362\u57df\u540d\u540e\u8981\u8fdb\u5165admin\u66f4\u65b0\u914d\u7f6e\u624d\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u771f\u662f\u758f\u5ffd\u4e86\uff01\uff01\u4e00\u987f\u64cd\u4f5c\u540e\u7f51\u7ad9\u53c8\u56de\u6765\u4e86\uff0c\u867d\u7136\u4ee5\u524d\u559c\u6b22\u7684\u4e3b\u9898\u73b0\u5728\u5df2\u7ecf\u627e\u4e0d\u5230\u4e86\uff0c\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u518d\u627e\u66f4\u559c\u6b22\u7684\u5427\u3002\u3011</li> </ul>"},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/","title":"\u671d\u5723\u4e4b\u8def","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2019121920191219crazyxt","title":"\u4e8e2019\u5e7412\u670819\u65e52019\u5e7412\u670819\u65e5\u7531crazyxt\u53d1\u5e03","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_2","title":"\u68a6\u60f3","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_3","title":"\u6b32\u671b","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_4","title":"\u8010\u5fc3","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_5","title":"\u5fcd\u8010","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_6","title":"\u62fc\u640f","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_7","title":"\u52e4\u52c9","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_8","title":"\u5e0c\u671b","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_9","title":"\u4fe1\u4ef0","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_10","title":"\u81ea\u5f8b","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_11","title":"\u8c28\u4ee5\u6b64\u6587\u8bb0\u5f55\u6211\u7684\u8dd1\u6b65\u4e4b\u8def","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2012418","title":"2012\u5e74\u7b2c\u4e00\u6b21\u8bef\u6253\u8bef\u649e\u53c2\u52a0\u4e86\u4e0a\u6d77\u9a6c\u62c9\u677e\u5168\u7a0b\uff0c4\u5c0f\u65f618\u5206\u8270\u96be\u5b8c\u8d5b\uff0c\u5f00\u542f\u4e86\u6211\u7684\u9a6c\u62c9\u677e\u4e4b\u8def\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2013121334345","title":"2013\u5e7412\u67081\u53f7\uff0c\u518d\u6b21\u53c2\u52a0\u4e0a\u6d77\u9a6c\u62c9\u677e\uff0c\u7ecf\u8fc7\u4e00\u5e74\u7684\u80e1\u4e71\u8dd1\uff0c3\u5c0f\u65f634\u5206\u5b8c\u8d5b\uff0c\u88ab\u6211\u62c9\u4e0a\u8dd1\u9053\u7684\u795d\u67ef\u67ef\u540c\u5b66\u7b2c\u4e00\u6b21\u4ee53\u5c0f\u65f645\u5206\u5b8c\u8d5b\uff0c\u53ef\u559c\u53ef\u8d3a\uff0c\u4ece\u6b64\u4e5f\u5f00\u542f\u4e86\u4ed6\u7684\u9a6c\u62c9\u677e\u4e4b\u65c5\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2014330135","title":"2014\u5e743\u670830\u53f7\uff0c\u82cf\u5dde\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c1\u5c0f\u65f635\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201410103802","title":"2014\u5e74\u674e\u5b8110\u516c\u91cc\u4e0a\u6d77\u7ad9\uff0c\u7b2c\u4e00\u6b21\u8dd110\u516c\u91cc38\u520602\u79d2\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2014113338","title":"2014\u5e74\u4e0a\u6d77\u9a6c\u62c9\u677e\u9996\u6b21\u5c06\u6bd4\u8d5b\u65e5\u671f\u63d0\u524d\u523011\u67083\u53f7\uff0c3\u5c0f\u65f638\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201513324330","title":"2015\u5e741\u67083\u53f7\uff0c\u7ec4\u56e2\u53bb\u53a6\u95e8\u9a6c\u62c9\u677e\uff0c3\u5c0f\u65f624\u5206\u7b2c\u4e00\u6b21\u8dd1\u8fdb330\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2015329131","title":"2015\u5e743\u670829\u53f7\uff0c\u82cf\u5dde\u91d1\u9e21\u6e56\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c1\u5c0f\u65f631\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2015411132","title":"2015\u5e744\u670811\u53f7\uff0c\u548c\u795d\u603b\u4e00\u8d77\u53c2\u52a0\u5357\u4eac\u6ea7\u6c34\u5c71\u5730\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c1\u5c0f\u65f632\u5206\u5b8c\u8d5b\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2015101810","title":"2015\u5e7410\u670818\u53f7\uff0c\u4e0a\u6d77\u7ad9\u6b22\u4e50\u8dd110\u516c\u91cc\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20151227128","title":"2015\u5e7412\u670827\u53f7\uff0c\u82cf\u5dde\u592a\u6e56\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c1\u5c0f\u65f628\u5206","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2015118311310","title":"2015\u5e7411\u67088\u53f7\uff0c\u4e0a\u6d77\u9a6c\u62c9\u677e\uff0c3\u5c0f\u65f611\u5206\u7b2c\u4e00\u6b21\u63a5\u8fd1310\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201612","title":"2016\u5e741\u67082\u53f7\uff0c\u7b2c\u4e8c\u6b21\u63a2\u8def\u53a6\u95e8\uff0c\u4e2d\u95f4\u8dd1\u5d29\uff0c\u8d70\u8d70\u505c\u505c\u5b8c\u8d5b\uff0c\u6210\u7ee9\u591a\u5c11\u5df2\u7ecf\u5fd8\u4e86\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2016313124","title":"2016\u5e743\u670813\u53f7\uff0c\u4e0a\u6d77\u9752\u6d66\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c1\u5c0f\u65f624\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2016320125","title":"2016\u5e743\u670820\u53f7\uff0c\u677e\u6c5f\u534a\u7a0b\u9a6c\u62c9\u677e1\u5c0f\u65f625\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201658121","title":"2016\u5e745\u67088\u53f7\uff0c\u6cd7\u6d2a\u534a\u7a0b\u9a6c\u62c9\u677e1\u5c0f\u65f621\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20161031259","title":"2016\u5e7410\u670831\u53f7\uff0c\u4e0a\u6d77\u9a6c\u62c9\u677e\uff0c\u7b2c\u4e00\u6b21\u7834\u4e09\uff0c2\u5c0f\u65f659\u5206\uff0c\u540c\u5e74\u8003\u7814\u8003\u4e0a\u4e0a\u6d77\u5927\u5b66\u8ba1\u7b97\u673a\u5b66\u9662\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2017416-25","title":"2017\u5e744\u670816\u53f7\uff0c\u4e2d\u56fd\u5c71\u5730\u9a6c\u62c9\u677e\u7cfb\u5217\u8d5b-\u9a7b\u9a6c\u5e97\u7ad9\uff0c2\u5c0f\u65f65\u5206\uff0c\u7b2c\u4e5d\u540d\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201791610","title":"2017\u5e749\u670816\u53f7\uff0c\u6b22\u4e50\u8dd110\u516c\u91cc\u4e0a\u6d77\u7ad9\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2017111230256","title":"2017\u5e7411\u670812\u53f7\uff0c\u4e0a\u6d77\u9a6c\u62c9\u677e\uff0c\u7cbe\u5fc3\u7ec3\u4e86\u5927\u534a\u5e74\uff0c\u72b6\u6001\u7206\u8868\uff0c\u7ed3\u679c\u662f30\u516c\u91cc\u8dd1\u5d29\uff0c2\u5c0f\u65f656\u5b8c\u8d5b\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20171217unirun10k","title":"2017\u5e7412\u670817\u53f7\uff0cUnirun\u4e0a\u6d77\u5de5\u7a0b\u6280\u672f\u5927\u5b66\u7ad9\uff08\u8ddd\u79bb\u4e0d\u8db310K\uff09\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20184190","title":"2018\u5e744\u67081\u53f7\uff0c\u6cd7\u6d2a\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c\u8dd1\u5d29\u4e86\uff0c\u6210\u7ee990\u5206\u5f00\u5916\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2018422127","title":"2018\u5e744\u670822\u53f7\uff0c\u4e0a\u6d77\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c1\u5c0f\u65f627\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201897124","title":"2018\u5e749\u67087\u53f7\uff0c\u6cf0\u5c71\u767b\u5c71\u8d5b\uff0c1\u5c0f\u65f624\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20181118257","title":"2018\u5e7411\u670818\u53f7\uff0c\u4e0a\u6d77\u9a6c\u62c9\u677e\uff0c\u53d7\u4f24\u662f\u8fd9\u4e00\u5e74\u7684\u4e3b\u65cb\u5f8b\uff0c\u9171\u6cb9\u5fc3\u6001\u4fdd\u4f4f\u76f4\u901a\u540d\u989d\u662f\u8fd9\u4e00\u5e74\u7684\u76ee\u6807\uff0c2\u5c0f\u65f657\u5206\u5b8c\u8d5b\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20181124unirun","title":"2018\u5e7411\u670824\uff0cUnirun\u7b2c\u4e8c\u540d\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20181215","title":"2018\u5e7412\u670815\u53f7\uff0c\u5b81\u6ce2\u5c71\u5730\u9a6c\u62c9\u677e\u63a5\u529b\uff08\u5218\u5cf0+\u864e\u5b50\uff09\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201911118","title":"2019\u5e741\u67081\u53f7\uff0c\u9a6c\u6865\u534a\u9a6c1\u5c0f\u65f618\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2019317","title":"2019\u5e743\u670817\u53f7\uff0c\u677e\u6c5f\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c\u8dd1\u5d29\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2019324400249250","title":"2019\u5e743\u670824\u65e5\uff0c\u65e0\u9521\u9a6c\u62c9\u677e\uff0c\u7ec3\u4e86\u4e00\u4e2a\u51ac\u5929\u7684\u957f\u8ddd\u79bb\uff0c\u6708\u8dd1\u91cf\u7b2c\u4e00\u6b21\u7a81\u7834400\u516c\u91cc\uff0c\u867d\u7136\u4e2d\u95f4\u5d29\u6389\uff0c\u4ee52\u5c0f\u65f649\u5b8c\u8d5b\uff0c\u7b2c\u4e00\u6b21\u8dd1\u8fdb250\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2019420120","title":"2019\u5e744\u670820\u53f7\uff0c\u4e0a\u6d77\u534a\u7a0b\u9a6c\u62c9\u677e\uff0c\u8dd1\u5d29\uff0c1\u5c0f\u65f620\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201961unirun10","title":"2019\u5e746\u67081\u53f7\uff0cUnirun10\u516c\u91cc\u7b2c\u4e00\u540d\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201971250001612","title":"2019\u5e747\u670812\u53f7\uff0c\u573a\u57305000\u7c73\uff0c16\u520612\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2019727-3050006100007","title":"2019\u5e747\u670827-30\u53f7\uff0c\u5168\u56fd\u5927\u5b66\u751f\u7530\u5f84\u9526\u6807\u8d5b\uff0c5000\u7c73\u7b2c6\uff0c10000\u7c73\u7b2c7(\u8d5b\u524d\u53d1\u70e7\u4e86)\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20191019103417","title":"2019\u5e7410\u670819\u53f7\uff0c\u4e0a\u6d7710\u516c\u91cc\u7cbe\u82f1\u8d5b\uff0c34\u520617\u79d2\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2019102678","title":"2019\u5e7410\u670826\u53f7\uff0c\u5b81\u6ce2\u9a6c\u62c9\u677e\uff0c\u8bad\u7ec3\u4e3a\u4e3b\uff0c\u53ea\u8dd1\u4e86\u534a\u7a0b\uff0c78\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#201911381","title":"2019\u5e7411\u67083\u53f7\uff0c\u676d\u5dde\u9a6c\u62c9\u677e\uff0c\u8bad\u7ec3\u4e3a\u4e3b\uff0c81\u5206\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#20191117500010000500016121000034240249","title":"2019\u5e7411\u670817\u53f7\uff0c\u8fd9\u4e00\u5e74\u662f\u4ed8\u51fa\u6700\u591a\u7684\u4e00\u5e74\uff0c\u4e0a\u534a\u5e74\u4e3b\u653b5000\u548c10000\uff0c\u573a\u57305000\u8dd1\u51fa\u4e8616\u520612\uff0c10000\u4e5f\u80fd\u7ecf\u5e38\u8dd1\u523034\u5206\u51fa\u5934\uff0c\u7ed3\u679c\u4fdd\u5e95\u7684240\u76ee\u6807\u6ca1\u5b8c\u6210\uff0c\u4e2d\u95f4\u8dd1\u5d29\uff0c\u4ee52\u5c0f\u65f649\u6697\u6de1\u6536\u573a\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#2020-or","title":"2020\u5e74\u65e0\u9521 or \u91cd\u5e86\u9a6c\u62c9\u677e\u3002\u3002\u3002","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_12","title":"\u8dd1\u4e86\u4e03\u5e74\uff0c\u4e13\u5fc3\u7ec3\u4e86\u4e24\u5e74\uff0c\u6210\u7ee9\u867d\u7136\u6709\u63d0\u5347\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8fbe\u5230\u6211\u7684\u9884\u671f\uff0c\u4e00\u6b21\u6b21\u7684\u8dd1\u5d29\u4e0d\u4f1a\u8ba9\u6211\u505c\u4e0b\u811a\u6b65\uff0c\u56e0\u4e3a\u6211\u611f\u89c9\u6211\u6709\u80fd\u529b\u53bb\u8dd1\u5230\u90a3\u4e2a\u6210\u7ee9\uff0c\u73b0\u5728\u53ea\u662f\u7f3a\u5c11\u65f6\u95f4\u53bb\u5f25\u8865\u81ea\u5df1\u7684\u5f31\u9879\u3002\u9ec4\u6c99\u767e\u6218\u7a7f\u91d1\u7532\uff0c\u4e0d\u7834\u697c\u5170\u7ec8\u4e0d\u8fd8\uff0c\u6211\u4f1a\u4e00\u76f4\u575a\u6301\u4e0b\u53bb\uff0c\u76f4\u5230\u5b9e\u73b0\u68a6\u60f3\u7684\u90a3\u5929\uff01","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_13","title":"\u6216\u8bb8\u672a\u6765\u54ea\u573a\u6bd4\u8d5b\u8fbe\u6210\u76ee\u6807\u4e86\uff0c\u6211\u53ef\u80fd\u4e5f\u5c31\u9000\u5f79\u4e86\u6216\u8005\u5065\u5eb7\u8dd1\u4e86\uff0c\u4f46\u662f\u8c01\u80fd\u8bf4\u7684\u51c6\u5462\uff0c\u672a\u6765\u5145\u6ee1\u4e86\u53ef\u80fd\u6027\uff0c\u4e0d\u662f\u5417\uff1f","text":""},{"location":"SystemConfiguration/%E6%9C%9D%E5%9C%A3%E4%B9%8B%E8%B7%AF/#_14","title":"\u672a\u5b8c\u5f85\u7eed\u3002\u3002\u3002","text":""},{"location":"UserfulCommand/Git_command/","title":"Git\u547d\u4ee4","text":""},{"location":"UserfulCommand/Git_command/#git","title":"git\u64cd\u4f5c\uff1a","text":"<ul> <li>\u67e5\u770b\u5f53\u524d\u5206\u652f\uff1a</li> </ul> <pre><code>git branch\n</code></pre> <ul> <li>\u67e5\u770b\u6240\u6709\u5206\u652f\uff1a</li> </ul> <pre><code>git branch -a\n</code></pre> <ul> <li>\u5207\u6362\u5206\u652f\uff1a</li> </ul> <pre><code>git checkout branchName\n</code></pre> <ul> <li>\u4fee\u6539\u672c\u5730commit\u4fe1\u606f</li> </ul> <pre><code>git commit --amend\n</code></pre> <ul> <li>\u5408\u5e76commit\uff0c\u672c\u5730\u672apush</li> </ul> <pre><code>git rebase -i HEAD~${\u5408\u5e76\u6570\u91cf} # \u5c06\u540e\u9762\u7684commit\u5168\u90e8\u5408\u5e76\u5230\u7b2c\u4e00\u4e2a\u4e0a\uff0c\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u4e5f\u5c31\u662f\u4ece\u7b2c\u4e8c\u4e2a\u5f00\u59cb\u5c06pick\u6539\u4e3as\n</code></pre> <ul> <li>\u64a4\u56decommit </li> </ul> <pre><code># \u64a4\u56de\u4e0a\u4e00\u4e2a\u63d0\u4ea4\u5230\u672c\u5730\uff0c--soft\u8868\u793a\u56de\u9000\u5230\u67d0\u4e2a\u7248\u672c\ngit reset --soft HEAD^ \n# \u6216\u8005:\ngit reset --soft HEAD~1\n</code></pre> <ul> <li>\u64a4\u9500\u5de5\u4f5c\u533a\u4e2d\u6240\u6709\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u5185\u5bb9\uff0c\u5c06\u6682\u5b58\u533a\u4e0e\u5de5\u4f5c\u533a\u90fd\u56de\u5230\u4e0a\u4e00\u6b21\u7248\u672c\uff0c\u5e76\u5220\u9664\u4e4b\u524d\u7684\u6240\u6709\u4fe1\u606f\u63d0\u4ea4</li> </ul> <pre><code># \u64a4\u9500\u5f53\u524d\u5de5\u4f5c\u533a\u6240\u6709\u4fee\u6539\ngit reset --hard HEAD\n\n# \u64a4\u9500\u5230\u4e0a\u4e00\u4e2a\u7248\u672c\ngit reset --hard HEAD^\n#\u6216\u8005 \ngit reset --hard HEAD~1\n</code></pre> <ul> <li>cherry-pick\u5176\u4ed6\u7684merge</li> <li>\u76f4\u63a5pick\u4f1a\u62a5\u9519</li> </ul> <pre><code>git cherry-pick -m 1 ${commitId}\n# -m\u8868\u793a\u91c7\u7528\u54ea\u4e2a\u5206\u652f\u7684\u53d8\u52a8\uff0c1\u8868\u793a\u539f\u59cbmerge\u5230\u76ee\u6807\u5206\u652f\u7684\u53d8\u52a8\n</code></pre> <ul> <li>\u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u7684\u67d0\u4e2a\u6587\u4ef6</li> </ul> <pre><code>git checkout origin/branch filePath\n</code></pre> <ul> <li>\u68c0\u51fa\u67d0\u4e2acommit\u7684\u67d0\u4e2a\u6587\u4ef6</li> </ul> <pre><code>git checkout commitId -- filePath\n</code></pre> <ul> <li>\u67e5\u770b\u8fdc\u7a0b\u6587\u4ef6</li> </ul> <pre><code>git show origin/branchName:filePath\n\n# \u5c06\u8fdc\u7aef\u6587\u4ef6\u5bfc\u51fa\u5230\u672c\u5730:\ngit show origin/branchName:filePath -&gt; demo.ts\n</code></pre> <ul> <li>rebase \u6b65\u9aa4</li> </ul> <pre><code># 1 \u5207\u5230\u76ee\u6807\u5206\u652f\ngit checkout branch\ngit reset --hard origin/branch # \u5982\u679c\u4e0d\u662f\u5206\u652f\u7684\u8bdd\u4e0d\u5fc5reset\ngit pull\n# 2 \u5207\u5230\u76ee\u6807\u63d0\u4ea4\ngit checkout commit\n\ngit rebase branch\n\n# 3 \u6709\u51b2\u7a81\u89e3\u51b3\u5b8c\u51b2\u7a81\u540e\uff1a\ngit rebase --continue\n\n# 4 push\ngit push origin HEAD:refs/for/branch\n</code></pre> <ul> <li>\u8bbe\u5b9acommit\u89c4\u8303</li> </ul> <pre><code># \u8bbe\u5b9a\u89c4\u8303\ncat &lt;&lt;EOF &gt; some_template.txt\n[key1]:\n[key2]:\nEOF\n\ngit config commit.template ~/.some_template.txt\n\n</code></pre> <ul> <li>\u67e5\u770bgit\u4ed3\u5e93\u5730\u5740\uff1a</li> </ul> <pre><code>git remote -v\n</code></pre> <ul> <li>\u67e5\u770b\u6587\u4ef6\u4fee\u6539</li> </ul> <pre><code>git diff file\n</code></pre> <ul> <li>\u67e5\u770b\u53d8\u52a8</li> </ul> <pre><code>git status\n</code></pre> <ul> <li>\u67e5\u770b\u7528\u6237\u540d\u548c\u90ae\u7bb1\u5730\u5740</li> </ul> <pre><code>git config user.name\ngit config user.email\ngit config --global user.name \"username\" #\u4fee\u6539\n</code></pre> <ul> <li>\u67e5\u770b\u5f53\u524d\u4ed3\u5e93\u914d\u7f6e\u4fe1\u606f</li> </ul> <pre><code>git config --local  --list\n</code></pre> <ul> <li>\u521b\u5efa\u65b0\u6807\u7b7e\uff1a</li> </ul> <pre><code>git tag -a \u6807\u7b7e\u540d -m \"\u6807\u7b7e\u8bf4\u660e\" //\u7ed9\u6700\u65b0commit\u6253\u6807\u7b7e\n</code></pre> <ul> <li>\u7ed9\u4ee5\u5f80commit\u6253\u6807\u7b7e\uff1a</li> </ul> <pre><code>git tag -a \"\u6807\u7b7e\u540d\" commitID \ngit push origin --tags //\u63a8\u9001\u672c\u5730\u6240\u6709\u6807\u7b7e\n</code></pre> <ul> <li>\u63a8\u9001\u6807\u7b7e\uff1a</li> </ul> <pre><code>git push origin \"\u6807\u7b7e\u540d\"\n</code></pre> <ul> <li>\u8df3\u8f6c\u5230\u6307\u5b9a\u6807\u7b7e\uff1a</li> </ul> <pre><code>git checkout \"\u6807\u7b7e\u540d\"\n</code></pre> <ul> <li>\u5220\u9664\u6307\u5b9a\u6807\u7b7e\uff1a</li> </ul> <pre><code>git tag -d \"\u6807\u7b7e\u540d\"\ngit push origin -d tag \"\u6807\u7b7e\u540d\"\n</code></pre>"},{"location":"UserfulCommand/Search_PID/","title":"\u641c\u7d22\u8fdb\u7a0b","text":"<ul> <li>\u6839\u636e\u542f\u52a8\u547d\u4ee4</li> </ul> <pre><code>ps -ef | grep dotnet\n</code></pre>"},{"location":"UserfulCommand/Watch_disk_IO/","title":"\u78c1\u76d8IO\u76d1\u63a7","text":"<pre><code>iostat 5\n//\u4ee55\u79d2\u95f4\u9694\u76d1\u63a7\u78c1\u76d8IO\u8bfb\u5199\u72b6\u6001\n</code></pre>"},{"location":"UserfulCommand/window_rebot_log/","title":"Window rebot log","text":"<ul> <li>windows\u91cd\u542f\u65e5\u5fd7   <code>shell     net statistics WORKSTATION</code></li> </ul>"},{"location":"UserfulCommand/windows_checkPort%26killPID/","title":"\u67e5\u8be2\u7aef\u53e3&\u5173\u95ed\u8fdb\u7a0b","text":""},{"location":"UserfulCommand/windows_checkPort%26killPID/#windows","title":"\u9488\u5bf9windows\u7cfb\u7edf\uff1a","text":"<ul> <li>\u67e5\u770b\u7aef\u53e3\u5360\u7528</li> </ul> <pre><code>netstat -ano | findstr 1112\n</code></pre> <ul> <li>\u5f00\u542f\u7aef\u53e3 nc -lp 23 &amp;</li> <li> <p>\u67e5\u770b\u7aef\u53e3 netstat -an | grep Port</p> </li> <li> <p>\u5173\u95ed\u7aef\u53e3 netstat -anp |grep \u7aef\u53e3 kil pid</p> </li> <li> <p>\u67e5\u770b\u5360\u7528\u7aef\u53e3\u7684\u8fdb\u7a0b\uff1a   <code>tasklist | findstr 1112</code></p> </li> <li> <p>\u5173\u95ed\u8fdb\u7a0b\uff1a   <code>taskkill /T /F /PID 1112</code></p> <p>F\uff1a\u5f3a\u5236\uff0cT\uff1a\u5305\u62ec\u5b50\u8fdb\u7a0b\uff0c PID\uff1apid</p> </li> <li> <p>\u67e5\u770b\u5f53\u524d\u78c1\u76d8\u603b\u4f53\u5360\u7528    <code>df -h</code></p> </li> <li>\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u603b\u5927\u5c0f   <code>du -sh</code></li> <li> <p>\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u6bcf\u4e2a\u6587\u4ef6\u5939\u7684\u60c5\u51b5   <code>du --max-depth=1 -h</code></p> </li> <li> <p>\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u6bcf\u4e2a\u6587\u4ef6\u5927\u5c0f   <code>du -h</code></p> </li> </ul>"}]}